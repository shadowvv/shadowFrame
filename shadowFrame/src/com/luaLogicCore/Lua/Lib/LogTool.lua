---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wth.
--- DateTime: 2021/12/14 14:53
---

---@class LogTools : table
LogTools = {}

---@type boolean 是否开启log总开关
LogTools.OpenLog = false
---@type boolean 是否打印进战斗信息
LogTools.InitBattleLog = false
---@type boolean 是否收集伤害统计信息
LogTools.CollectHurt = false
---@type boolean 元素log
LogTools.ElementLog = false
---@type boolean 元素求log（闪电链，冰风球）
LogTools.ElementBallLog = false
---@type boolean 元素衰减log
LogTools.ElementReductionLog = false
---@type boolean 伤害log
LogTools.HurtLog = false
---@type boolean 区域log
LogTools.AreaLog = false
---@type boolean 召唤物log
LogTools.SummondLog = false
---@type boolean Buff log
LogTools.BuffLog = false
---@type boolean 护罩 log
LogTools.ShieldLog = false
---@type boolean 弹幕 log
LogTools.BarrageLog = false
---@type boolean 技能 log
LogTools.SkillLog = false
---@type boolean 属性初始化 log
LogTools.PropInitLog = false
---@type boolean 肉鸽主公技 log
LogTools.RogueUnitSkillLog = false

function LogTools.P(tag, ...)
    local tbl = { ... }
    local max = select("#", ...)
    local str = ""
    if IsClient() then
        str = tostring("<color=#00FF00>[" .. tostring(tag) .. "]</color>")
        for i = 1, max do
            str = str .. ", " .. tostring(tbl[i])
        end
    else
        str = tostring(tostring(tag))
        for i = 1, max do
            str = str .. ", " .. tostring(tbl[i])
        end
        str = tostring(SERVER_LIB.battle:formatLogFrontColor(tostring(str)))
    end
    return str
end

function LogTools.GetTraceback(str)
    if IsClient() then
        return str .. "\n" .. debug.traceback(self, 5) .. "\n" .. "LogTools.GetTraceback end" .. "\n"
    else
        return SERVER_LIB.logTool:traceback(str)
    end
end

function LogTools.Debug(tag, ...)
    local logMsg = LogTools.GetTraceback(LogTools.P(tag, ...))
    if IsClient() then
        print(logMsg)
    else
        SERVER_LIB.logTool:log(LogLevel.log, logMsg)
    end
end

function LogTools.Error(tag, ...)
    local logMsg = LogTools.GetTraceback(LogTools.P(tag, ...))
    if IsClient() then
        logError(logMsg)
    else
        SERVER_LIB.logTool:log(LogLevel.logErr, logMsg)
    end
end

function LogTools.Info(tag, ...)
    local logMsg = LogTools.P(tag, ...)
    if IsClient() then
        print(logMsg)
    else
        SERVER_LIB.logTool:log(LogLevel.log, logMsg)
    end
end

function LogTools.LogByLevel(_logLevel, ...)
    if _logLevel == LogLevel.log then
        LogTools.Info("LogicLog", ...)
    elseif _logLevel == LogLevel.logAss then
        LogTools.Debug("LogicLog", ...)
        --elseif _logLevel == LogLevel.logWarr then
        --
    elseif _logLevel == LogLevel.logErr then
        LogTools.Error("LogicLog", ...)
    end
end

---@param _table table
function LogTools.GetEnumTableDesc(_table, _value)
    if not _table then
        return _value
    end
    for _k, _v in pairs(_table) do
        if _v == _value then
            return _k
        end
    end
    return _value
end

LogLevel = {
    log = 5,
    logWarr = 4,
    logAss = 3,
    logErr = 2,
}

function CheckLogLevel(logLevel)
    if LogTools.OpenLog then
        -- 全局控制，方便打开log
        return true
    end
    if IsClient() then
        return logLevel == LogLevel.logErr
    else
        return SERVER_LIB.logTool:isLogEnabled(logLevel)
    end
end
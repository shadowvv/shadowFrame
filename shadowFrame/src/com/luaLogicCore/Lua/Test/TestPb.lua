---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wth.
--- DateTime: 2021/12/10 17:58
---

function TestPb()
    --print("TestPb end1")
    --local msg = PlayerAndMall_pb.RegisterUser()
    --msg.pwd = "123"
    --msg.userName = "456"
    --msg.type = 1

    --local da = msg:SerializeToString()
    -- load schema from text (just for demo, use protoc.new() in real world)
    assert(protoc:load [[
   message Phone {
      optional string name        = 1;
      optional int64  phonenumber = 2;
   }
   message Person {
      optional string name     = 1;
      optional int32  age      = 2;
      optional string address  = 3;
      repeated Phone  contacts = 4;
   } ]])

    -- lua table data
    local data = {
        name = "ilse",
        age  = 18,
        contacts = {
            { name = "alice", phonenumber = 12312341234 },
            { name = "bob",   phonenumber = 45645674567 }
        }
    }

    -- encode lua table data into binary format in lua string and return
    local bytes = assert(pb.encode("Person", data))
    print(pb.tohex(bytes))

    -- and decode the binary data back into lua table
    local data2 = assert(pb.decode("Person", bytes))
    print(require "protobuf.serpent".block(data2))

    print("TestPb end")
end

function TestPb2()
    local msgProtoStr = CS_FileReadAllText("./Assets/Scripts/Core/FightCore/Lua/proto/msg.proto");
    assert(protoc:load(msgProtoStr))
    local msgProtoStr2 = CS_FileReadAllText("./Assets/Scripts/Core/FightCore/Lua/proto/Battle.proto");
    assert(protoc:load(msgProtoStr2))

    
    local battleSoloTest = {
        mainLevelId = 3,
        formationId = 4,
    }

    local heartBeat_S2C = {
        time = 3,
        totalLoginSecond = 4,
    }

    local bytes = assert(pb.encode("msg.BattleSoloTest", battleSoloTest))
    print(pb.tohex(bytes))

    --print("xxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
    --SendCommandToClient(9999, bytes);

    local data2 = assert(pb.decode("msg.BattleSoloTest", bytes))
    print(require "protobuf.serpent".block(data2))
    

    print("int to enumStr " .. pb.enum('msg.PropEnum', 100))
    print("int to enumStr " .. pb.enum('msg.PropEnum', 'Hp'))

    local testBattleDemo = { }
    --local bytes = assert(pb.encode("msg.TestBattleDemo", testBattleDemo))
    testBattleDemo.param1 = 10;
    testBattleDemo.param2 = 20;
    testBattleDemo.param3 = 30;
    testBattleDemo.param4 = 40;
    testBattleDemo.param5 = true;
    testBattleDemo.param6 = "gaga";
    testBattleDemo.param7 = nil
    testBattleDemo.param8 = 1
    testBattleDemo.param9 = { content = "haha" }
    testBattleDemo.param10 = { }
    table.insert(testBattleDemo.param10, { level = 10, curExp = 20, maxExp = 30 })
    table.insert(testBattleDemo.param10, { level = 40, curExp = 50, maxExp = 60 })
    testBattleDemo.param11 = { }
    table.insert(testBattleDemo.param11, 7)
    table.insert(testBattleDemo.param11, 8)
    table.insert(testBattleDemo.param11, 9)
    local bytes3 = assert(pb.encode("msg.TestBattleDemo", testBattleDemo))
    local data3 = assert(pb.decode("msg.TestBattleDemo", bytes3))
    print(require "protobuf.serpent".block(data3))
    
    print("TestPb2 end")
end
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hejincheng.
--- DateTime: 2022/2/15 16:04
---
---
TimeUtils = {}

local clientServerTimeInt = 0;

-- 获取当前完整时间戳ms
-- 没有battleId的时候可以调用这个方法，可以单端使用，但是服务器和客户端的时间戳不能互通
---服务器获取当前完成时间戳
---客户端获取从战斗开始计时的时间戳
---@type function
---@return number
function TimeUtils.now()
    if IsServer() then
        return SERVER_LIB.timeService:getInstance():now()
    else
        return math.floor(clientServerTimeInt)
    end
end

-- 获取当前精确时间戳ms
-- Java调用System.currentTimeMillis()获取系统时间
-- 有一定性能消耗，但如果需要精确时间，只能调这个方法
---@type function
---@return number
function TimeUtils.nowExact()
    if IsServer() then
        return SERVER_LIB.timeService:getInstance():nowExact()
    else
        return math.floor(clientServerTimeInt)
    end
end

-- 获取当前战斗时间戳ms(从战斗开始阶段计时)
---@type function
---@param _battleId number 仅服务器逻辑核必须传
---@return number
function TimeUtils.battleNow(_battleId)
    if IsServer() then
        return SERVER_LIB.battle:getBattleNowTimeOffset(_battleId)
    else
        if not clientServerTimeInt then
            return 0
        end
        return math.floor(clientServerTimeInt)
    end
end

------------------------------------------------------------------------------------------------------------------------
--- 逻辑核时间更新start
------------------------------------------------------------------------------------------------------------------------

-- 客户端更新服务器的时间戳
---@type function
---@param serverTimeIntMs number
---@param syncToClientView boolean
function TimeUtils.ClientSetServerTime(serverTimeIntMs, syncToClientView)
    if not serverTimeIntMs then
        return
    end
    clientServerTimeInt = serverTimeIntMs

    if syncToClientView then
        -- 通知显示层
        COMMAND.SendCommandToClientView(
            PROTO_CODE_ENUM.CLIENT_TIME_SYNC:GetId()
            ,PROTO_CODE_ENUM.CLIENT_TIME_SYNC:GetName()
            , {serverTime = serverTimeIntMs})
    end
end

-- 客户端更新时间
---@type function
---@param _dtIntMs number
function TimeUtils.ClientUpdateTime(_dtIntMs)
    if not CLIENT_FIGHT_CORE or not CLIENT_FIGHT_CORE.battleRoom.indieGame then
        -- 非客户端单机
        clientServerTimeInt = clientServerTimeInt + _dtIntMs
        return
    end

    -- 客户端单机
    if not CLIENT_FIGHT_CORE.battleRoom:CheckPauseAllLevel() and not CLIENT_FIGHT_CORE.battleRoom:CheckPauseLevelNormalLogic() then
        -- 关卡计时暂停
        clientServerTimeInt = clientServerTimeInt + _dtIntMs
        -- 单机模拟服务器时间同步
        TimeUtils.__IndieGame_SimulateTimeSync(_dtIntMs)
    end
end

-- 客户端模拟器服务器时间同步消息的同步频率
local _SimulateTimeSyncTimer = 0
local _SimulateTimeInterval = 15000

-- 客户端模拟器服务器时间同步消息
---@type function
---@param _dtIntMs number
function TimeUtils.__IndieGame_SimulateTimeSync(_dtIntMs)
    _SimulateTimeSyncTimer = _SimulateTimeSyncTimer + _dtIntMs
    if _SimulateTimeSyncTimer > _SimulateTimeInterval then
        _SimulateTimeSyncTimer = 0
        COMMAND.SendCommandToServerLogic(
            PROTO_CODE_ENUM.CLIENT_TIME_SYNC:GetId()
            ,PROTO_CODE_ENUM.CLIENT_TIME_SYNC:GetName()
            , {serverTime = math.floor(clientServerTimeInt)})
    end
end

-- 同步服务器下发的时间
---@type function
---@param id number
---@param bytes table
---@param proto ProtoCode
function TimeUtils.Handle_CLIENT_TIME_SYNC(id, bytes, proto)
    local msg = assert(pb.decode(proto:GetName(), bytes))
    TimeUtils.ClientSetServerTime(msg.serverTime, false)
    CS_SendCommandToClient(id, bytes)
end

------------------------------------------------------------------------------------------------------------------------
--- 逻辑核时间更新end
------------------------------------------------------------------------------------------------------------------------

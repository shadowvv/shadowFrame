---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hejincheng.
--- DateTime: 2022/4/19 15:47
-- 复合表数据，自定义二次封装表数据，创建战斗Init

require "Battle/Logic/Room/Fall/FallDictData"

---@class ComplexData : table
---@field monsterFallDic table<string,table<string,FallDictData>> 怪物掉落数据dic <掉落id,table<条件,所有掉落条件的掉落数据>>
---@field elementReactionTriggerDic table<string, table<string, ElementalReaction>> 元素反应dic <触发元素，<附着元素，ElementalReaction>>
---@field fallObjectElementDic table<string, table<string, FallObject>> 掉落物元素替换dic <掉落物id,<元素类型,掉落物>>
---@field elementStrengthDic table<string, table<string, ElementStrength>> 元素强度dic <元素ID，<附着量，ElementStrength>>
---@field weaponDistanceRatioDic table<string, table<string, number>> 距离系数dic <武器类型,<距离分段,系数>>
---@field skillValueDic table<string, table<string, SkillValue>> 技能dic <技能id,<技能等级,技能>>
---@field talentSkillDic table<string, table<string, TalentSkill>> 技能dic <技能id,<技能等级,被动技能>>
---@field levelConstantDic table<string, LevelConstant> 关卡常量dic <类型,关卡常量>
---@field mainLevelPrePlotsDic table<string, StoryShow[]> 主线战前剧情id列表 <mainLevelId,剧情id[]>
---@field multiPveBossLevelPrePlotsDic table<string, StoryShow[]> 多人pve boss战前剧情id列表 <multiPveBossLevelId,剧情id[]>
---@field seasonReplaceLevelDic table<string, table<string, SeasonReplaceLevel>> 赛季关卡数据 <levelInstanceId,<赛季,赛季关卡数据>>
ComplexData = class( nil, 'ComplexData');

function ComplexData:Init()
    -- 元素反应map
    self:InitElementReactionDic();
    -- 元素强度map
    self:InitElementStrengthDic();
    -- 掉落条件map
    self:InitFallConditionDic();
    -- 掉落元素分类map
    self:InitFallObjectElementDic();
    -- 武器距离系数
    self:InitDistanceRatioDic();
    -- 技能
    self:InitSkillValue()
    -- 技能
    self:InitTalentSkill()
    -- 关卡常量
    self:InitLevelConstant()
    -- elementValue表
    self:InitElementValue()
    -- 伤害距离衰减
    self:InitHurtDisReduce()
    -- 主线战前剧情列表
    self:InitMainLevelPreBattlePlotIds()
    -- 多人pve战前剧情列表
    self:InitMultiPveBossLevelPreBattlePlotIds()
    -- 关卡stageLevel修正
    self:InitBountyMissionLevelStage()
    -- 怪物属性修正
    self:InitLevelMember()
    -- 属性限制
    self:InitPropLimit()
    -- 赛季关卡
    self:InitSeasonReplaceLevel()
end

function ComplexData:InitSeasonReplaceLevel()
    local seasonReplaceLevelDic = {}
    for _, _seasonReplaceLevel in pairs(TableDic["SeasonReplaceLevel"]) do
        local seasonReplaceLevelBySeasonDic = seasonReplaceLevelDic[tostring(_seasonReplaceLevel.levelId)]
        if not seasonReplaceLevelBySeasonDic then
            seasonReplaceLevelDic[tostring(_seasonReplaceLevel.levelId)] = {}
            seasonReplaceLevelBySeasonDic = seasonReplaceLevelDic[tostring(_seasonReplaceLevel.levelId)]
        end
        seasonReplaceLevelBySeasonDic[tostring(_seasonReplaceLevel.season)] = _seasonReplaceLevel
    end
    self.seasonReplaceLevelDic = seasonReplaceLevelDic
end

function ComplexData:InitMainLevelPreBattlePlotIds()
    local mainLevelPrePlotsDic = {}
    for _, mainLevel in pairs(TableDic["MainLevel"]) do
        ComplexData.__InitLevelPreBattlePlotIds(mainLevel.id, mainLevel.storyShowStart, mainLevelPrePlotsDic)
    end
    self.mainLevelPrePlotsDic = mainLevelPrePlotsDic
end

function ComplexData:InitMultiPveBossLevelPreBattlePlotIds()
    local multiPveBossLevelPrePlotsDic = {}
    for _, multiPveBossLevel in pairs(TableDic["MultiPveBoss"]) do
        ComplexData.__InitLevelPreBattlePlotIds(multiPveBossLevel.id, multiPveBossLevel.storyShowStart, multiPveBossLevelPrePlotsDic)
    end
    self.multiPveBossLevelPrePlotsDic = multiPveBossLevelPrePlotsDic
end

---@private
function ComplexData.__InitLevelPreBattlePlotIds(_levelId, _storyShowId, levelPrePlotsDic)
    ---@type number
    local storyShowId = _storyShowId
    if storyShowId > 0 then
        local plots = levelPrePlotsDic[tostring(_levelId)]
        if not plots then
            levelPrePlotsDic[tostring(_levelId)] = {}
            plots = levelPrePlotsDic[tostring(_levelId)]
        end

        while storyShowId > 0 do
            ---@type StoryShow
            local storyShow = TableDic["StoryShow"][tostring(storyShowId)]
            if not storyShow then
                if CheckLogLevel(LogLevel.logErr) then
                    LogTools.LogByLevel(LogLevel.logErr, "MainLevel." .. tostring(_levelId) .. ".storyShow." .. tostring(storyShowId) .. " nil")
                end
                break
            end
            table.insert(plots, storyShow)
            storyShowId = storyShow.condition
        end
    end
end

function ComplexData:InitLevelConstant()
    local levelConstantDic = {}
    for _, levelConstant in pairs(TableDic["LevelConstant"]) do
        levelConstantDic[levelConstant.type] = levelConstant
    end
    self.levelConstantDic = levelConstantDic
end

function ComplexData:InitSkillValue()
    local skillValueDic = {}
    for _, skillValue in pairs(TableDic["SkillValue"]) do
        local _skillId = skillValue.skillId
        local _level = skillValue.skillLevel

        local _valueMap = skillValueDic[tostring(_skillId)]
        if _valueMap == nil then
            skillValueDic[tostring(_skillId)] = {}
            _valueMap = skillValueDic[tostring(_skillId)]
        end
        _valueMap[tostring(_level)] = skillValue
    end
    self.skillValueDic = skillValueDic
end

function ComplexData:InitTalentSkill()
    local talentSkillDic = {}
    for _, skillValue in pairs(TableDic["TalentSkill"]) do
        local _skillId = skillValue.skillId
        local _level = skillValue.skillLevel

        local _valueMap = talentSkillDic[tostring(_skillId)]
        if _valueMap == nil then
            talentSkillDic[tostring(_skillId)] = {}
            _valueMap = talentSkillDic[tostring(_skillId)]
        end
        _valueMap[tostring(_level)] = skillValue
    end
    self.talentSkillDic = talentSkillDic
end

function ComplexData:InitElementReactionDic()
    local elementReactionTriggerDic = {}
    for _, reaction in pairs(TableDic["ElementalReaction"]) do
        local triggerId = reaction.triggerID;
        local attachmentId = reaction.attachmentId;

        local triggerDic = elementReactionTriggerDic[tostring(triggerId)]
        if triggerDic == nil then
            elementReactionTriggerDic[tostring(triggerId)] = {}
            triggerDic = elementReactionTriggerDic[tostring(triggerId)]
        end
        triggerDic[tostring(attachmentId)] = reaction
    end
    self.elementReactionTriggerDic = elementReactionTriggerDic
end

function ComplexData:InitElementStrengthDic()
    local elementStrengthDic = {}

    for _, strength in pairs(TableDic["ElementStrength"]) do
        local elementId = strength.elementId
        local addNum = Mathf.Floor(strength.addNum)

        local strengthDic = elementStrengthDic[tostring(elementId)]
        if strengthDic == nil then
            elementStrengthDic[tostring(elementId)] = {}
            strengthDic = elementStrengthDic[tostring(elementId)]
        end

        strengthDic[tostring(addNum)] = strength
    end

    self.elementStrengthDic = elementStrengthDic
end

function ComplexData:InitFallConditionDic()
    local monsterFallDic = {}
    for _, monsterTypeFall in pairs(TableDic["MonsterTypeFall"]) do
        local fallDictDatas = {}

        for index = 1, #monsterTypeFall.fallCondition do
            local condition = monsterTypeFall.fallCondition[index]
            local conditionParam = monsterTypeFall.fallConditionParam[index]
            local fallActiveTime = monsterTypeFall.activeTimes[index]
            local fallObjectId = monsterTypeFall.fallObjectId[index]
            local fallCount = monsterTypeFall.fallObjectCount[index]
            local fallLimitTime = monsterTypeFall.fallLimitTime[index]

            ---@type FallDictData
            local fallDictData = FallDictData.New(monsterTypeFall.adaptElement == 1, fallLimitTime, conditionParam, index, fallObjectId, condition, fallActiveTime, fallCount)

            ---@type table
            local fallDictTab = fallDictDatas[tostring(condition)]
            if fallDictTab == nil then
                fallDictDatas[tostring(condition)] = {};
                fallDictTab = fallDictDatas[tostring(condition)]
            end
            table.insert(fallDictTab, index, fallDictData)
        end

        monsterFallDic[tostring(monsterTypeFall.id)] = fallDictDatas
    end
    self.monsterFallDic = monsterFallDic
end

function ComplexData:InitFallObjectElementDic()
    local fallObjectElementDic = {}
    local typePhysicDic = {}
    -- 第一次遍历找出通用掉落物
    -- 分组 - 通用掉落物id
    for _, fallObject in pairs(TableDic["FallObject"]) do
        if fallObject.elementType == BattleElementTypeEnum.PHYSIC:GetId() then
            fallObjectElementDic[tostring(fallObject.id)] = {}
            typePhysicDic[tostring(fallObject.energyType)] = fallObject.id
        end
    end
    -- 第二次遍历找出通用掉落物对应的替换掉落物
    for _, fallObject in pairs(TableDic["FallObject"]) do
        if fallObject.elementType == BattleElementTypeEnum.PHYSIC:GetId() then
            -- 取对应分组的通用掉落物
            local physicId = typePhysicDic[tostring(fallObject.energyType)]
            if physicId ~= nil then
                local elementFallDic = fallObjectElementDic[tostring(physicId)]
                if elementFallDic ~= nil and physicId ~= fallObject.id then
                    -- 不看自己
                    elementFallDic[tostring(fallObject.elementType)] = fallObject
                end
            end
        end
    end

    self.fallObjectElementDic = fallObjectElementDic
end

function ComplexData:InitDistanceRatioDic()
    local weaponDistanceRatioDic = {}
    for _, weaponDistance in pairs(TableDic["WeaponDistance"]) do
        local distanceRatioMap = {}
        self:putDistanceRatioDic(distanceRatioMap, weaponDistance.advDistance, WeaponDistanceEnum.ADV_DIS)
        self:putDistanceRatioDic(distanceRatioMap, weaponDistance.attenuationDistance, WeaponDistanceEnum.ATTENUATION_DIS)
        self:putDistanceRatioDic(distanceRatioMap, weaponDistance.highAttenuationDistance, WeaponDistanceEnum.HIGH_ATTENUATION_DIS)
        self:putDistanceRatioDic(distanceRatioMap, weaponDistance.uselessDistance, WeaponDistanceEnum.USELESS_DIS)
    end
    self.weaponDistanceRatioDic = weaponDistanceRatioDic
end

-- 
function ComplexData:InitElementValue()
    local _elementValueTableDic = {}
    for _, _elementValueData in pairs(TableDic["ElementValue"]) do
        local _instanceId = _elementValueData.buffAndActionInstanceId
        local _tab = _elementValueTableDic[_instanceId]
        if not _tab then
            _tab = {}
            _elementValueTableDic[_instanceId] = _tab
        end
        table.insert(_tab, _elementValueData)
    end
    for i, _elementValueTable in pairs(_elementValueTableDic) do
        table.sort(_elementValueTable,
                function(_a, _b)
                    return _a.leaderLevel < _b.leaderLevel
                end
        )
    end
    self.elementValueTableDic = _elementValueTableDic
end

---伤害距离衰减
function ComplexData:InitHurtDisReduce()
    local _dataList = TableDic["BattleDefault"]["201"].value6
    local _maxValue = _dataList[#_dataList]

    local _hurtDisReduceDic = {}
    for _, _weaponDistance in pairs(TableDic["WeaponDistance"]) do
        local _weaponType = _weaponDistance.type
        _hurtDisReduceDic[_weaponType] = {}
        --优势距离
        local _advDistance = _weaponDistance.advDistance
        local _advDisTable = {}
        for i = 1, #_advDistance do
            local _disIndex = _advDistance[i]
            local _tab = {}
            _tab.down = _dataList[_disIndex] or _maxValue
            --_tab.down = _tab.down * _tab.down
            _tab.up = _dataList[_disIndex + 1]
            if not _tab.up then
                _tab.up = math.maxinteger
            else
                --_tab.up = _tab.up * _tab.up
            end
            table.insert(_advDisTable, _tab)
        end
        _hurtDisReduceDic[_weaponType][HurtDisReduceEnum.AdvDis] = _advDisTable

        --中衰减距离
        local _attenuationDistance = _weaponDistance.attenuationDistance
        local _attenuationDisTable = {}
        for i = 1, #_attenuationDistance do
            local _disIndex = _attenuationDistance[i]
            local _tab = {}
            _tab.down = _dataList[_disIndex] or _maxValue
            --_tab.down = _tab.down * _tab.down
            _tab.up = _dataList[_disIndex + 1]
            if not _tab.up then
                _tab.up = math.maxinteger
            else
                --_tab.up = _tab.up * _tab.up
            end
            table.insert(_attenuationDisTable, _tab)
        end
        _hurtDisReduceDic[_weaponType][HurtDisReduceEnum.attenuationDis] = _attenuationDisTable

        --高衰减距离
        local _highAttenuationDistance = _weaponDistance.highAttenuationDistance
        local _highAttenuationDisTable = {}
        for i = 1, #_highAttenuationDistance do
            local _disIndex = _highAttenuationDistance[i]
            local _tab = {}
            _tab.down = _dataList[_disIndex] or _maxValue
            --_tab.down = _tab.down * _tab.down
            _tab.up = _dataList[_disIndex + 1]
            if not _tab.up then
                _tab.up = math.maxinteger
            else
                --_tab.up = _tab.up * _tab.up
            end
            table.insert(_highAttenuationDisTable, _tab)
        end
        _hurtDisReduceDic[_weaponType][HurtDisReduceEnum.highAttenuationDis] = _highAttenuationDisTable
    end

    self.HurtDisReduceDic = _hurtDisReduceDic
end

---@private
function ComplexData:putDistanceRatioDic(distanceRatioDic, weaponDistanceList, weaponDistanceEnum)
    local distanceSplit = TableDic["BattleDefault"][tostring(BATTLE_WEAPON_CONST.DAMAGE_REDUCE_DICT_ID)].value6

    for _, distance in pairs(weaponDistanceList) do
        local index = weaponDistanceEnum
        ---@type number
        local ratio = distanceSplit[index]
        if ratio == nil then
            ratio = 1
        end
        distanceRatioDic[tostring(distance)] = ratio
    end
end

function ComplexData:InitBountyMissionLevelStage()
    ---@type BountyMissionsLevelStage[][]
    local _bountyMissionLevelStageTableDic = {}
    ---@type BountyMissionsLevelStage[]
    local _originalTab = TableDic["BountyMissionsLevelStage"]
    for _, _BountyMissionsLevelStage in pairs(_originalTab) do
        local _instanceId = _BountyMissionsLevelStage.levelInstanceId
        local _tab = _bountyMissionLevelStageTableDic[_instanceId]
        if not _tab then
            _tab = {}
            _bountyMissionLevelStageTableDic[_instanceId] = _tab
        end
        table.insert(_tab, _BountyMissionsLevelStage)
    end
    for _, _BountyMissionsLevelStageTab in pairs(_bountyMissionLevelStageTableDic) do
        table.sort(_BountyMissionsLevelStageTab,
                function(_a, _b)
                    return _a.lv < _b.lv
                end
        )
    end
    self.bountyMissionLevelStageTableDic = _bountyMissionLevelStageTableDic
end

---初始化NewLevelMember表
function ComplexData:InitLevelMember()
    ---@type NewLevelMember
    local _levelMemberDic = {}
    ---@type NewLevelMember[]
    local _originalTab = TableDic["NewLevelMember"]
    for _, _config in pairs(_originalTab) do
        local _groupId = _config.group
        local _groupTab = _levelMemberDic[_groupId]
        if not _groupTab then
            _groupTab = {}
            _levelMemberDic[_groupId] = _groupTab
        end
        
        local _classifyId = _config.classify
        local _classifyTab = _groupTab[_classifyId]
        if not _classifyTab then
            _classifyTab = {}
            _groupTab[_classifyId] = _classifyTab
        end
        
        _classifyTab[1] = _config.member1
        _classifyTab[2] = _config.member2
        _classifyTab[3] = _config.member3
        _classifyTab[4] = _config.member4
        
    end
    
    self.levelMemberDic = _levelMemberDic
end

---重新整理属性限制表
function ComplexData:InitPropLimit()
	local _propLimitDic = {}
	---@type BattleLimit[]
	local _battleLimitTable = TableDic["BattleLimit"]
	for _, _data in pairs(_battleLimitTable) do
		_propLimitDic[_data.number] = {_data.limitDown, _data.limitUp}
	end
	self.propLimitDic = _propLimitDic
end

return ComplexData;
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/1/27 15:34
--- 行为树condition

BEHAVIOR_CHECK = {};

-- 怪物是否有目标
function BEHAVIOR_CHECK.CheckMonsHasTarget(_battleId, _netId)
	local battleRoom = GetBattleRoom(_battleId)
    local _unit = battleRoom.battleUnitManager:GetUnit(_netId)
    if not _unit then return false end
    ---@type BattleUnitCom_Behav
    local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
    if not _behavCom then return false end
    return (_behavCom:GetTarget() ~= nil)
end

-- 怪物是否在限制中
function BEHAVIOR_CHECK.CheckMonsInBand(_battleId, _netId)
    return false
end

-- 怪物是否在施放技能中
function BEHAVIOR_CHECK.CheckMonsInCastingSkill(_battleId, _netId)
	local battleRoom = GetBattleRoom(_battleId)
	local _unit = battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return false end
	local _actionManager = _unit:GetActionManager()
	if not _actionManager then return false end
	return _actionManager:CheckInState(NormalSkillActionState.GetId()) or _actionManager:CheckInState(ActiveSkillActionState.GetId()) or _actionManager:CheckInState(JiZouSkillActionState.GetId())
end

-- 检查目标是否在攻击角度内
function BEHAVIOR_CHECK.CheckCurTargetInAtkAngle(_battleId, _netId, _axisType)
	local battleRoom = GetBattleRoom(_battleId)
    local _unit = battleRoom.battleUnitManager:GetUnit(_netId)
    if not _unit then return false end
    ---@type BattleUnitCom_Behav
    local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
    if not _behavCom then return false end
    return _behavCom:CheckTargetInAtkAngle(_axisType)
end

-- 检查目标是否在警戒范围内
function BEHAVIOR_CHECK.CheckCurTargetInAlertDis(_battleId, _netId, _scale)
	local battleRoom = GetBattleRoom(_battleId)
    local _unit = battleRoom.battleUnitManager:GetUnit(_netId)
    if not _unit then return false end
    ---@type BattleUnitCom_Behav
    local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
    if not _behavCom then return false end
    return _behavCom:CheckTargetInAlertRange(_scale)
end

-- 检查目标是否在攻击范围内
function BEHAVIOR_CHECK.CheckCurTargetInAtkDis(_battleId, _netId, _scale)
	local battleRoom = GetBattleRoom(_battleId)
    local _unit = battleRoom.battleUnitManager:GetUnit(_netId)
    if not _unit then return false end
    ---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return false end
	if _behavCom:GetAiLevel() == BattleUnitAiLevel.NoAtk then return false end
	return _behavCom:CheckTargetInAtkRange(_scale)
end

-- 检查目标是否在逃离范围内
function BEHAVIOR_CHECK.CheckCurTargetInEscapeDis(_battleId, _netId, _scale)
	local battleRoom = GetBattleRoom(_battleId)
    local _unit = battleRoom.battleUnitManager:GetUnit(_netId)
    if not _unit then return false end
    ---@type BattleUnitCom_Behav
    local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
    if not _behavCom then return false end
    return _behavCom:CheckTargetInEscapeRange(_scale)
end

-- 检查目标是否在指定状态下
function BEHAVIOR_CHECK.CheckCurTargetInSpecificState(_battleId, _netId, _stateId)
	if not _stateId then return false end
	local battleRoom = GetBattleRoom(_battleId)
	local _unit = battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return false end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return false end
	local _targetNetId = _behavCom:GetTarget()
	if not _targetNetId then return false end
	local _targetUnit = battleRoom.battleUnitManager:GetUnit(_targetNetId)
	if not _targetUnit then return false end
	local _actionManager = _targetUnit:GetActionManager()
	if not _actionManager then return false end
	return _actionManager:CheckInState(_stateId)
end

-- 检查目标是否是指定的UnitType类型
function BEHAVIOR_CHECK.CheckCurTargetIsSpecificUnitType(_battleId, _netId, _unitType)
	if not _unitType then return false end
	local battleRoom = GetBattleRoom(_battleId)
	local _unit = battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return false end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return false end
	local _targetNetId = _behavCom:GetTarget()
	if not _targetNetId then return false end
	local _targetUnit = battleRoom.battleUnitManager:GetUnit(_targetNetId)
	if not _targetUnit then return false end
	return _targetUnit:CheckUnitType(_unitType)
end

-- 检查技能是否在CD中
-- 策划表示这里指的是是否不需要等待CD
--其实是反过来的(是否CD已经冷却好)
function BEHAVIOR_CHECK.CheckSkillInCD(_battleId, _netId, _skillId)
	if not _skillId then return false end
	local battleRoom = GetBattleRoom(_battleId)
	local _unit = battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return false end
	-----@type BattleUnitCom_Behav
	--local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	--if _behavCom:GetAiLevel() == BattleUnitAiLevel.NoAtk then return false end
	local _heroObj = _unit:GetCurrentHeroObject()
	if not _heroObj then return false end
	---@type BattleObjCom_Skill
	local _skillCom = _heroObj:GetComponent(BattleObjectComponentType.Skill)
	if not _skillCom then return false end
	local _skillModel = battleRoom.inputDataSource:GetSkillModel(_skillId)
	if not _skillModel then return false end
	return not _skillCom:CheckSkillCd(_skillId, battleRoom.inputDataSource:GetSkillFinalParam(_skillModel.maxTime,_skillId,1))
end

-- 当前怪物阶段血量为0
function BEHAVIOR_CHECK.CheckUnitCurStageHpEnd(_battleId, _netId)
	if not _netId then return false end
	local battleRoom = GetBattleRoom(_battleId)
	local _unit = battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return false end
	local _heroObj = _unit:GetCurrentHeroObject()
	if not _heroObj then return false end
	---@type BattleObjCom_Property
	local _propCom = _heroObj:GetComponent(BattleObjectComponentType.Property)
	if not _propCom then return false end
	return _propCom:GetCurStageLeftHp() == 0
end

-- 当前怪物处于指定血量阶段
function BEHAVIOR_CHECK.CheckUnitCurStageNum(_battleId, _netId, _num)
	if not _netId then return false end
	if not _num or _num < 1 then return false end
	local battleRoom = GetBattleRoom(_battleId)
	local _unit = battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return false end
	local _heroObj = _unit:GetCurrentHeroObject()
	if not _heroObj then return false end
	---@type BattleObjCom_Property
	local _propCom = _heroObj:GetComponent(BattleObjectComponentType.Property)
	if not _propCom then return false end
	return _propCom:GetCurStage() == _num
end


---获取当前关卡阶段
---@public
function BEHAVIOR_CHECK.GetCurLevelStage(_battleId)
	local battleRoom = GetBattleRoom(_battleId)
    return battleRoom.battleLevelManager:GetCurLevelStageEnum()
end

---获取与召唤者之间的距离
---@public
function BEHAVIOR_CHECK.GetDisFromSubordiante(_battleId, _netId)
	
end

---单位检查范围监听
---@param _battleId number
---@param _param LuaBehav_BoundaryListenerCheckParam
function BEHAVIOR_CHECK.UnitCheckBoundaryListener(_battleId, _param)
	local battleRoom = GetBattleRoom(_battleId)
	local _unit = battleRoom.battleUnitManager:GetUnit(_param.netId)
	if not _unit then return false end

	local _currentObj = _unit:GetCurrentHeroObject()
	if not _currentObj then return false end

	---@type BattleObjCom_BoundaryListener
	local _boundaryListener = _currentObj:GetComponent(BattleObjectComponentType.BoundaryListener)
	if not _boundaryListener then return false end
	
	return _boundaryListener:Check(_param)
end

---检查关卡单位死亡
---@public
function BEHAVIOR_CHECK.LevelCheckUnitDead(_battleId, _targetType, _idList, _checkUnitTypeList)

	if not _checkUnitTypeList or #_checkUnitTypeList == 0 then
		_checkUnitTypeList = {LevelUnitTypeEnum.MONSTER.id}
	end

	local battleRoom = GetBattleRoom(_battleId)
    local _levelUnitManager = battleRoom.battleLevelManager.levelUnitManager
    
    if _targetType == LuaBehav_Define_AiOperationTargetType.AllUnit then
		for _, _levelUnitType in pairs(_checkUnitTypeList) do
			if not _levelUnitManager:CheckLevelUnitStateByType(_levelUnitType, LevelUnitStateEnum.DEAD) then
				return false
			end
		end
		return true
	end
    
    for _, _id in pairs(_idList) do
		if _targetType == LuaBehav_Define_AiOperationTargetType.SpecificUnit then
			if not _levelUnitManager:CheckLevelUnitState(_id, LevelUnitStateEnum.DEAD, _checkUnitTypeList) then
				return false
			end
		elseif _targetType == LuaBehav_Define_AiOperationTargetType.SpecificUnitGroup then
			if not _levelUnitManager:CheckLevelUnitStateByGroup(_id, LevelUnitStateEnum.DEAD, _checkUnitTypeList) then
				----LogTools.LogByLevel(LogLevel.log, "BEHAVIOR_CHECK.LevelCheckUnitDead", "_levelUnitManager:CheckLevelUnitStateByGroup not Dead", "_id", _id, "state", LevelUnitStateEnum.DEAD)
				return false
			end
		end
	end
	return true
    
end

---检查单个关卡单位死亡
---@public
function BEHAVIOR_CHECK.LevelCheckSingleUnitDead(_battleId, _isGroupId, _levelUnitId)

	local battleRoom = GetBattleRoom(_battleId)
    local _levelUnitManager = battleRoom.battleLevelManager.levelUnitManager

	if _isGroupId then
		if not _levelUnitManager:CheckLevelUnitStateByGroup(_levelUnitId, LevelUnitStateEnum.DEAD, nil) then
			return false
		end
		return true
	else
		if not _levelUnitManager:CheckLevelUnitState(_levelUnitId, LevelUnitStateEnum.DEAD, nil) then
			return false
		end
		return true
	end
    
end

---检查关卡单位状态
function BEHAVIOR_CHECK.LevelCheckUnitState(_battleId, _targetType, _targetId, _stateId)

	local battleRoom = GetBattleRoom(_battleId)
	if _targetType == LuaBehav_Define_LevelCheckUnitTargetType.PlayerUnit then --玩家默认取第一个玩家的当前上阵英雄
		local _unitList = battleRoom.battleUnitManager:GetUnitListByUnitType(BattleUnitType.Player)
		if #_unitList == 0 then return false end
		local _unit = _unitList[1]
		return _unit:GetActionManager():CheckInState(_stateId)
	elseif _targetType == LuaBehav_Define_LevelCheckUnitTargetType.SpecificUnit then
		local _levelUnit = battleRoom.battleLevelManager.levelUnitManager:GetLevelUnit(_targetId)
		if not _levelUnit then return false end
		local _unit = battleRoom.battleUnitManager:GetUnit(_levelUnit.netId)
		if not _unit then return false end
		return _unit:GetActionManager():CheckInState(_stateId)
	elseif _targetType == LuaBehav_Define_LevelCheckUnitTargetType.SpecificUnitGroup then
		local _levelUnitGroup = battleRoom.battleLevelManager.levelUnitManager:GetLevelUnitByGroup(_targetId)
		for i, _levelUnit in pairs(_levelUnitGroup) do
			local _unit = battleRoom.battleUnitManager:GetUnit(_levelUnit.netId)
			if not _unit then return false end
			if not _unit:GetActionManager():CheckInState(_stateId) then
				return false
			end
		end
		return true
	end
end

---关卡触发器检查
---@param _param LuaBehav_LevelTriggerCheckParam
function BEHAVIOR_CHECK.LevelCheckLevelTrigger(_battleId, _param)
	local battleRoom = GetBattleRoom(_battleId)
	return battleRoom.levelTriggerManager:Check(_param)
end

---关卡检查单位技能状态
function BEHAVIOR_CHECK.LevelCheckUnitSkillState(_battleId, _objId, _selectSkillType, _skillId, _checkState)
	local battleRoom = GetBattleRoom(_battleId)
	local _heroObj = battleRoom.battleObjectManager:GetObject(_objId)
	if not _heroObj then return false end

	if _checkState == LuaBehav_Define_LevelCheckUnitSkillStateType.OverLoad then
		---@type BattleObjCom_Weapon
		local _weaponCom = _heroObj:GetComponent(BattleObjectComponentType.Weapon)
		return _weaponCom and _weaponCom:IsOverLoad()
	elseif _checkState == LuaBehav_Define_LevelCheckUnitSkillStateType.CD then
		---@type BattleObjCom_Skill
		local _skillCom = _heroObj:GetComponent(BattleObjectComponentType.Skill)
		if not _skillCom then return false end
		if _selectSkillType == LuaBehav_Define_LevelCheckUnitSkillSelectType.SkillType then
			return _skillCom:CheckSKillCdBySkillType(_selectSkillType)
		else
			local _skillModel = battleRoom.inputDataSource:GetSkillModel(_skillId)
			if not _skillModel then return false end
			return _skillCom:CheckSkillCd(_skillId, _skillModel.maxTime)
		end
	elseif _checkState == LuaBehav_Define_LevelCheckUnitSkillStateType.Ready then
		---@type BattleObjCom_Skill
		local _skillCom = _heroObj:GetComponent(BattleObjectComponentType.Skill)
		if not _skillCom then return false end
		if _selectSkillType == LuaBehav_Define_LevelCheckUnitSkillSelectType.SkillType then
			return _skillCom:CheckCastSKillBySkillType(_selectSkillType)
		else
			return _skillCom:CheckCastSKill(_skillId)
		end
	end
	return false
end

---关卡检查剧情播放状态
function BEHAVIOR_CHECK.LevelCheckPlotState(_battleId, _plotType, _plotId, _checkState)
	local battleRoom = GetBattleRoom(_battleId)
	local _state = battleRoom.battlePlayerActManager:GetPlotState(_plotId, _plotType)
	return _state and _state == _checkState
end

---新手引导检查
---@param _param LuaBehav_LevelTriggerCheckParam
function BEHAVIOR_CHECK.LevelCheckBattleGuide(_battleId, _guideId)
	local battleRoom = GetBattleRoom(_battleId)
	 local _unitList = battleRoom.battleUnitManager:GetUnitListByUnitType(BattleUnitType.Player)
    ---@type BattleUnit_Player
    local _unit = _unitList[1]
    if not _unit then return false end
	
	return battleRoom.battleGuideManager:CheckGuideComplete(_unit:GetPlayerId(), _guideId)
end

---检查战场物件状态
---@public
function BEHAVIOR_CHECK.LevelCheckSceneObjState(_battleId, _levelUnitId, _stateId)
	local battleRoom = GetBattleRoom(_battleId)
	local _levelUnit = battleRoom.battleLevelManager.levelUnitManager:GetLevelUnit(_levelUnitId)
	if not _levelUnit then return false end
	return BEHAVIOR_CHECK.SceneObjCheckSelfState(_battleId, _levelUnit.netId, _stateId)
end

---战场物件检查自身状态
---@public
function BEHAVIOR_CHECK.SceneObjCheckSelfState(_battleId, _netId, _stateId)
	local battleRoom = GetBattleRoom(_battleId)
	local _unit = battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return false end
	---@type BattleUnitCom_TagSelector
	local _tagCom = _unit:GetComponent(BattleUnitComponentType.TagSelector)
	if not _tagCom then return false end
	return _tagCom:CheckTag(BattleUnitTagEnum.SceneObjState, _stateId)
end

-- 检查弱点被击破
function BEHAVIOR_CHECK.CheckWeaknessBroken(_battleId, _netId, _blockId)
	local battleRoom = GetBattleRoom(_battleId)
	local _unit = battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return false end
	local _obj = _unit:GetCurrentHeroObject()
	if not _obj then return false end
	---@type BattleObjCom_Block
	local _blockCom = _obj:GetComponent(BattleObjectComponentType.Block)
	if not _blockCom then return false end
	return _blockCom:CheckWeaknessBroken(_blockId)
end

-- 检查弱点到时
function BEHAVIOR_CHECK.CheckWeaknessTimeout(_battleId, _netId, _blockId)
	local battleRoom = GetBattleRoom(_battleId)
	local _unit = battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return false end
	local _obj = _unit:GetCurrentHeroObject()
	if not _obj then return false end
	---@type BattleObjCom_Block
	local _blockCom = _obj:GetComponent(BattleObjectComponentType.Block)
	if not _blockCom then return false end
	return _blockCom:CheckWeaknessTimeout(_blockId)
end

-- 检查怪物当前勇士状态
function BEHAVIOR_CHECK.CheckMonsWarriorState(_battleId, _netId, _value)
	local battleRoom = GetBattleRoom(_battleId)
	local _unit = battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return false end
	---@type BattleUnitCom_TagSelector
	local _tagCom = _unit:GetComponent(BattleUnitComponentType.TagSelector)
	if not _tagCom then return false end
	local _curValue = _tagCom:GetTag(BattleUnitTagEnum.WarriorState)
	return _curValue == _value
end

-- 检查目标在指定圆锥方位角内
function BEHAVIOR_CHECK.CheckTargetInDotDir(_battleId, _netId, _value)
	local battleRoom = GetBattleRoom(_battleId)
	local _unit = battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return false end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return false end
	local _tagetNetId = _behavCom:GetTarget()
	if not _tagetNetId or  -1 == _tagetNetId then return false end
	return battleRoom.transUtil:CheckDotDir(_netId, _tagetNetId, _value)
end
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/1/10 17:24
--- 消息回调接口

--- 战斗事件
---@param _message BattleRoomMessage
function ProtoCallBack_BattleEventPush(_message)
    ---@type number
    local battleEventIndex = _message:GetMessage().battleEvent
    ---@type string
    local params = _message:GetMessage().params;

    ---@type BattleEvent
    local battleEvent = BATTLE_EVENT_MAP[tostring(battleEventIndex)]

    if battleEvent ~= nil then
        if CheckLogLevel(LogLevel.log) then
            LogTools.LogByLevel(LogLevel.log, "BattleEventPush", battleEventIndex, "params", params)
        end
        battleEvent:GetCallBack()(battleEventIndex, params, _message:GetBattleId());
    end
end

function ProtoCallBack_LocalSceneEnter()
    if not IsClient() then
        if CheckLogLevel(LogLevel.logErr) then
            LogTools.LogByLevel(LogLevel.logErr, "ProtoCallBack_LocalSceneEnter", "not client")
        end
        return
    end
    local _stageManager = CLIENT_FIGHT_CORE.battleRoom.battleLevelManager.battleLevelStageManager

    -- 本地模式跳过进场景阶段
    if _stageManager.curStageEnum == BattleLevel_Define_StageEnum.Loading then
        CLIENT_FIGHT_CORE.battleRoom.outputDataSource:LocalSceneEnter_S2C();
        CLIENT_FIGHT_CORE.battleRoom.outputDataSource:SendBattleRoomEvent(BATTLE_EVENT_ENUM.PLAYER_ENTER, CLIENT_PLAYER_ID)
        CLIENT_FIGHT_CORE.battleRoom.outputDataSource:BattleLevelGoToStage(BattleLevel_Define_StageEnum.PreBattlePlot, _stageManager.curStageEnum)
    end
end

--- 测试战斗结束
---@param _message BattleRoomMessage 移动协议
function ProtoCallBack_LocalTestBattleOver(_message)
    if not IsClient() then
        if CheckLogLevel(LogLevel.logErr) then
            LogTools.LogByLevel(LogLevel.logErr, "ProtoCallBack_LocalTestBattleOver", "not client")
        end
        return
    end
    if not BATTLE_CONST.TEST_BATTLE_OVER_SWITCH then
        if CheckLogLevel(LogLevel.logErr) then
            LogTools.LogByLevel(LogLevel.logErr, "ProtoCallBack_LocalTestBattleOver", "TestBattleOver close")
        end
        return
    end
    local battleRoom = _message:GetBattleRoom()
    if battleRoom:IsBattleOver() then
        if CheckLogLevel(LogLevel.logErr) then
            LogTools.LogByLevel(LogLevel.logErr, "ProtoCallBack_LocalTestBattleOver", "BattleOver", "overResult", battleRoom.battleLevelManager.overResult, "overCondition", battleRoom.battleLevelManager.overCondition)
        end
        return
    end
    ---@type number
    local condition = _message:GetMessage().condition
    ---@type number
    local result = _message:GetMessage().result

    local battleResult = GetBattleResultById(result)
    -- 设置本逻辑核的结果
    CLIENT_FIGHT_CORE.battleRoom.battleLevelManager:SetBattleOver(battleResult, condition)
    -- 进入结算阶段
    CLIENT_FIGHT_CORE.battleRoom.outputDataSource:BattleLevelGoToStage(BattleLevel_Define_StageEnum.ShowBattleEnd, nil)
    -- 触发战斗结束事件
    CLIENT_FIGHT_CORE.battleRoom.battleLogicEventService:OnTriggerBattleOverEvent(battleResult:GetId())
end

--- 本地模式离开战斗
---@param _message BattleRoomMessage 移动协议
function ProtoCallBack_LocalBattleLeave(_message)
    if not IsClient() then
        if CheckLogLevel(LogLevel.logErr) then
            LogTools.LogByLevel(LogLevel.logErr, "ProtoCallBack_LocalBattleLeave", "not client")
        end
        return
    end
    local battleRoom = _message:GetBattleRoom()
    if battleRoom:IsBattleOver() then
        if CheckLogLevel(LogLevel.logErr) then
            LogTools.LogByLevel(LogLevel.logErr, "ProtoCallBack_LocalBattleLeave","err", "BattleOver", "overResult", battleRoom.battleLevelManager.overResult:GetId(), "overCondition", battleRoom.battleLevelManager.overCondition)
        end
        return
    end

    if not battleRoom.battleLevelManager:CheckCurLevelStageEnum(BattleLevel_Define_StageEnum.RunBattle) then
        if CheckLogLevel(LogLevel.logErr) then
            LogTools.LogByLevel(LogLevel.logErr, "ProtoCallBack_LocalBattleLeave", "err", battleRoom.battleLevelManager:GetCurLevelStageEnum(), "not RunBattle", "overResult", battleRoom.battleLevelManager.overResult:GetId(), "overCondition", battleRoom.battleLevelManager.overCondition)
        end
        return
    end

    local condition = 0
    local battleResult = BattleResultEnum.FAIL

    -- 进入结算阶段
    CLIENT_FIGHT_CORE.battleRoom.outputDataSource:BattleLevelGoToStage(BattleLevel_Define_StageEnum.ShowBattleEnd, nil)

    -- 设置本逻辑核的结果
    CLIENT_FIGHT_CORE.battleRoom.battleLevelManager:SetBattleOver(battleResult, condition)
    -- 触发战斗结束事件
    CLIENT_FIGHT_CORE.battleRoom.battleLogicEventService:OnTriggerBattleOverEvent(battleResult:GetId())
end

----- 怪物移动(客户端向服务器发送路点)
-----@param _message BattleRoomMessage 移动协议
--function ProtoCallBack_MonsterPathFindList(_message)
--    local battleRoom = _message:GetBattleRoom()
--    battleRoom.battleUnitManager:OnClientMonsterPathFind(_message:GetMessage().netId, _message:GetMessage().posList);
--end

--- 怪物移动(服务器同步路点给所有客户端)
---@param _message BattleRoomMessage 移动协议
function ProtoCallBack_MonsterSyncPathPointListS2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:OnMonsterSyncPathPointListS2C(_message:GetMessage().netId, _message:GetMessage().posList);
end

--- 切换角色输入
---@param _message BattleRoomMessage
function ProtoCallBack_PlayerChangeLeaderInput(_message)
    local battleRoom = _message:GetBattleRoom()
    local _unit = battleRoom.battleUnitManager:GetUnitByPlayerId(_message:GetUid(), false)
    if not _unit then return end
    battleRoom.battleUnitManager:PlayerChangeLeaderInput(_unit:GetNetId(), _message:GetMessage().objectId, PlayerChangeLeaderInputType.Normal, false)
end

--- 切换角色广播
---@param _message BattleRoomMessage
function ProtoCallBack_PlayerChangeLeaderS2C(_message)
    --local battleRoom = _message:GetBattleRoom()
    --battleRoom.battleUnitManager:PlayerChangeLeaderS2C(_message:GetMessage().info.playerId, _message:GetMessage().info.objectId)
end

---玩家按键
---@param _message BattleRoomMessage
function ProtoCallBack_PlayerPressKey(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:PlayerPressKey(_message:GetUid(), _message:GetMessage().key, _message:GetMessage().pressType,_message:GetMessage().moveParam,_message:GetMessage().cameraParam,_message:GetMessage().hitWall,_message:GetMessage().timeStamp,false,_message:GetMessage().moveOverFrameId,_message:GetMessage().position,_message:GetMessage().moveDir)
end

---玩家撞墙
---@param _message BattleRoomMessage
function ProtoCallBack_PlayerHitWall(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:PlayerHitWall(_message:GetUid(),_message.hitWallFrameId)
end

---战斗单位撞墙
---@param _message BattleRoomMessage
function ProtoCallBack_BattleObjectHitWall(_message)
    --LogTools.LogByLevel(LogLevel.logErr, "ProtoCallBack_BattleObjectHitWall", "_message:GetMessage().hitInfo", dumpTableEx(_message:GetMessage().hitInfo))
    local battleRoom = _message:GetBattleRoom()
    if _message:GetMessage().hitInfo then
        for i, v in pairs(_message:GetMessage().hitInfo) do
            --LogTools.LogByLevel(LogLevel.logErr, "ProtoCallBack_BattleObjectHitWall", "v.netId", v.netId, "hitInfo", dumpTableEx(v))
            battleRoom.battleUnitManager:BattleUnitHitWall(v.netId,v.position,v.moveDir,v.edge)
        end
    end
end

---战斗单位位置非法
---@param _message BattleRoomMessage
function ProtoCallBack_UnitPosIllegal(_message)
    --LogTools.LogByLevel(LogLevel.logErr, "ProtoCallBack_UnitPosIllegal", "_message:GetMessage().netId", _message:GetMessage().netId)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:UnitPosIllegal(_message:GetMessage().netId)
end

--- 客户端logic_core接收每帧移动输出
---@param _message BattleRoomMessage
function ProtoCallBack_ClientReceiveMoveData(_message)
    ---@type table[]
    local outputDataList = _message:GetMessage().info
    if not outputDataList then
        return
    end

    local battleRoom = _message:GetBattleRoom()
    ---@type number
    local frameId = _message:GetMessage().frameId
    for _, outputData in pairs(outputDataList) do
        ---@type number
        local netId = outputData.netId
        ---@type number
        local objectId = outputData.objId
        ---@type BattleUnitBase
        local unit = battleRoom.battleUnitManager:GetUnit(netId)
        if unit then
            unit:ClientReceiveUnitMoveData(frameId, objectId, outputData)
        end
    end

    -- 转发别人的移动消息
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.BATTLE_UNIT_MOVE_DATA:GetId(), PROTO_CODE_ENUM.BATTLE_UNIT_MOVE_DATA:GetName(), _message:GetMessage())
end

--- 客户端logic_core接收每帧改变输出
---@param _message BattleRoomMessage
function ProtoCallBack_ClientReceiveChangeData(_message)
    ---@type table[]
    local outputDataList = _message:GetMessage().info
    if not outputDataList then
        return
    end
    local battleRoom = _message:GetBattleRoom()
    ---@type number
    local frameId = _message:GetMessage().frameId
    for _, outputData in pairs(outputDataList) do
        ---@type number
        local netId = outputData.netId
        ---@type number
        local objectId = outputData.objId
        ---@type BattleUnitBase
        local unit = battleRoom.battleUnitManager:GetUnit(netId)
        if unit then
            unit:ClientReceiveUnitChangeData(frameId, objectId, outputData)
        end
    end
end

--- 客户端logic_core接收每帧关键数据输出
---@param _message BattleRoomMessage
function ProtoCallBack_ClientReceiveKeyData(_message)
    ---@type table[]
    local outputDataList = _message:GetMessage().info
    if not outputDataList then
        return
    end
    local battleRoom = _message:GetBattleRoom()
    ---@type number
    local frameId = _message:GetMessage().frameId
    for _, outputData in pairs(outputDataList) do
        ---@type number
        local netId = outputData.netId
        ---@type number
        local objectId = outputData.objId
        ---@type BattleUnitBase
        local unit = battleRoom.battleUnitManager:GetUnit(netId, true)
        if unit then
            unit:ClientReceiveUnitKeyData(frameId, objectId, outputData)
        end
    end
end

--- 客户端logic_core接收战场数据输出
---@param _message BattleRoomMessage
function ProtoCallBack_ClientReceiveFieldData(_message)
    ---@type table[]
    local outputDataList = _message:GetMessage().info
    if not outputDataList then
        return
    end
    local battleRoom = _message:GetBattleRoom()
    ---@type number
    local frameId = _message:GetMessage().frameId
    for _, outputData in pairs(outputDataList) do
        if outputData.LevelTriggerInfo then
            if outputData.LevelTriggerInfo.createInfo then
                local _CreateLevelTrigger_L2V = {}
                _CreateLevelTrigger_L2V.info = outputData.LevelTriggerInfo.createInfo
                COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.CREATE_LEVEL_TRIGGER_L2V:GetId(), PROTO_CODE_ENUM.CREATE_LEVEL_TRIGGER_L2V:GetName(),_CreateLevelTrigger_L2V);
            end

            if outputData.LevelTriggerInfo.removeId ~= -1 then
                local _RemoveLevelTrigger_L2V = {}
                _RemoveLevelTrigger_L2V.id = outputData.LevelTriggerInfo.removeId
                COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.REMOVE_LEVEL_TRIGGER_L2V:GetId(), PROTO_CODE_ENUM.REMOVE_LEVEL_TRIGGER_L2V:GetName(),_RemoveLevelTrigger_L2V);
            end
        end

		if outputData.unitInfo then
            --LogTools.LogByLevel(LogLevel.log,"CheckCreateUnit","ProtoCallBack_ClientReceiveFieldData", "outputData.unitInfo.createInfo", outputData.unitInfo.createInfo)
            --if outputData.unitInfo.createInfo then
            --    LogTools.LogByLevel(LogLevel.log,"CheckCreateUnit","ProtoCallBack_ClientReceiveFieldData", "#outputData.unitInfo.createInfo", #outputData.unitInfo.createInfo)    
            --end
			if outputData.unitInfo.createInfo and #outputData.unitInfo.createInfo > 0 then
                --LogTools.LogByLevel(LogLevel.log,"CheckCreateUnit","ProtoCallBack_ClientReceiveFieldData", "#outputData.unitInfo.createInfo", #outputData.unitInfo.createInfo)

                local _unitType = outputData.unitInfo.createInfo[1].unitType
                local _unitList = battleRoom.battleUnitManager:GetCreator():OnUnitReadyCreate(_unitType, outputData.unitInfo.createInfo)
                --LogTools.LogByLevel(LogLevel.log,"CheckCreateUnit","ProtoCallBack_ClientReceiveFieldData", "_unitType", LogTools.GetEnumTableDesc(BattleUnitType, _unitType), "#_unitList", #_unitList)
				--battleRoom.battleUnitManager:OnReceiveGenerateBattleUnitInfo(outputData.unitInfo.createInfo)
                --local _unitList = battleRoom.battleUnitManager:OnReceiveCreateSyncMessage_S2C(outputData.unitInfo.createInfo)
                if #_unitList > 0 then
                    battleRoom.battleUnitManager:GetCreator():SendCreateUnitToView(_unitList[1]:GetUnitType(), _unitList)
                end
			end
            if outputData.unitInfo.objDeadInfo then
                --LogTools.LogByLevel(LogLevel.log,"CheckDead","ProtoCallBack_ClientReceiveFieldData objDead", "netId", outputData.unitInfo.objDeadInfo.netId, "objId", outputData.unitInfo.objDeadInfo.objectId, "deadType", outputData.unitInfo.objDeadInfo.deadType, "frameId", LOOPER.GetFrameId())
                local _obj = battleRoom.battleObjectManager:GetObject(outputData.unitInfo.objDeadInfo.objectId)
                if _obj then
                    _obj:SetDead(outputData.unitInfo.objDeadInfo.deadType)
                end
            end
            if outputData.unitInfo.unitDeadInfo then
                --LogTools.LogByLevel(LogLevel.log,"CheckDead","ProtoCallBack_ClientReceiveFieldData unitDead", "netId", outputData.unitInfo.unitDeadInfo.netId, "objId", outputData.unitInfo.unitDeadInfo.objectId, "deadType", outputData.unitInfo.unitDeadInfo.deadType, "frameId", LOOPER.GetFrameId())
                local _unit = battleRoom.battleUnitManager:GetUnit(outputData.unitInfo.unitDeadInfo.netId)
                if _unit then
                    _unit:SetDead(outputData.unitInfo.unitDeadInfo.deadType)
                end
                --battleRoom.battleUnitManager:OnUnitDeadS2C(outputData.unitInfo.unitDeadInfo.netId, outputData.unitInfo.unitDeadInfo.deadType)
            end
        end

        if outputData.barrageInfo then
            --if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
            --    LogTools.LogByLevel(LogLevel.log,"CheckBarrage","ProtoCallBack_ClientReceiveFieldData", "outputData.barrageInfo", dumpTableEx(outputData.barrageInfo))
            --end
            --battleRoom.ejectorManager:OnCreateEmitterS2C(_outputData.netId, _outputData.objId, _outputData.barrageInfo.CreateEmitterData)
            battleRoom.ejectorManager:OnDestroyEmitterS2C(outputData.barrageInfo.DestroyEmitterId)
            battleRoom.ejectorManager:OnStopEmitterS2C(outputData.barrageInfo.StopEmitterId)
            battleRoom.ejectorManager:OnBarrageTrigEventS2C(outputData.barrageInfo.BarrageEventData)
        end

        if outputData.bgmInfo then
            local _ChangeBattleBGM_L2V = {}
            _ChangeBattleBGM_L2V.id = outputData.bgmInfo.enterId
            battleRoom.outputDataSource:ChangeBattleBGML2V(_ChangeBattleBGM_L2V)
        end

        if outputData.UIInfo then
            if outputData.UIInfo.warningOpen == 1 then
                battleRoom.outputDataSource:OpenWarningUIL2V()
                battleRoom.battleLogicEventService:OnBossAnimationEvent(nil, nil, true)
            elseif outputData.UIInfo.warningClose == 1 then
                battleRoom.battleLogicEventService:OnBossAnimationEvent(nil, nil, false)
            elseif outputData.UIInfo.communicationId ~= -1 then
                battleRoom.outputDataSource:OpenBattleCommunicationL2V({talkGroupId = outputData.UIInfo.communicationId})
            end
        end

        if outputData.areaTrigInfo then
            --battleRoom.battleUnitManager:OnCreateAreaTrigS2C(outputData.areaTrigInfo.CreateAreaTrigData)
            battleRoom.battleUnitManager:OnOpenAreaTrigS2C(outputData.areaTrigInfo.OpenAreaTrigIndex)
            battleRoom.battleUnitManager:OnCloseAreaTrigS2C(outputData.areaTrigInfo.CloseAreaTrigIndex)
            battleRoom.battleUnitManager:OnDestroyAreaTrigS2C(outputData.areaTrigInfo.DestroyAreaTrigIndex)
        end

        if outputData.elementFieldInfo then
            battleRoom.elementManager:ClientReceiveFieldData(outputData.elementFieldInfo)
        end
    end
end

--- 客户端logic_core接收每帧输出
---@param _message BattleRoomMessage
function ProtoCallBack_GenerateLevelTriggerS2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.levelTriggerManager:CreateTrigger(_message:GetMessage().infoList)
end

--- 请求进入下一个关卡流程
---@param _message BattleRoomMessage
function ProtoCallBack_GotoNextBattleLevelStage(_message)
    local battleRoom = _message:GetBattleRoom()
    return battleRoom:OnGotoNextBattleLevelStage(_message:GetUid());
end

--- 通知进入下一个关卡流程
---@param _message BattleRoomMessage
function ProtoCallBack_NotifyChangeBattleLevelStage(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom:OnNotifyChangeBattleLevelStage(_message:GetMessage().fromStage, _message:GetMessage().toStage, _message:GetMessage().serverTime);
end

-- 子弹碰撞
---@param _message BattleRoomMessage
function ProtoCallBack_OnBulletCollision(_message)
    local battleRoom = _message:GetBattleRoom()
	battleRoom.hurtManager:OnBulletCollision(_message.uid, _message:GetMessage().infoList)
end

--- 战斗单位受伤广播
---@param _message BattleRoomMessage
function ProtoCallBack_UnitHurt_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:UnitHurtS2C(_message:GetMessage().infoList)
end

--- 战斗单位受治疗广播
---@param _message BattleRoomMessage
function ProtoCallBack_UnitCure_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    --battleRoom.battleUnitManager:UnitHurtInput(_message:GetMessage().infoList)
end

-- 服务器发起寻路请求
---@param _message BattleRoomMessage
function ProtoCallBack_CallPathFind_S2C(_message)
    --LogTools.LogByLevel(LogLevel.log, "CheckPathFind", "ProtoCallBack_CallPathFind_S2C")
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:OnCallPathFindS2C(_message:GetMessage())
end

-- 服务器取消寻路请求
---@param _message BattleRoomMessage
function ProtoCallBack_CancelPathFind_S2C(_message)
    --LogTools.LogByLevel(LogLevel.log, "CheckPathFind", "ProtoCallBack_CancelPathFind_S2C")
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:OnCancelPathFindS2C(_message:GetMessage())
end

-- 寻路结果
---@param _message BattleRoomMessage
function ProtoCallBack_PathFindResult(_message)
    --LogTools.LogByLevel(LogLevel.log, "CheckPathFind", "ProtoCallBack_PathFindResult")
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:PathFindResult(_message:GetMessage())
end

-- 战斗单位开启巡逻广播
---@param _message BattleRoomMessage
function ProtoCallBack_UnitPatrol_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:UnitPatrolS2C(_message:GetMessage().netId, _message:GetMessage().centerOnBorn)
end

-- 战斗单位取消巡逻广播
---@param _message BattleRoomMessage
function ProtoCallBack_UnitPatrolCancel_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:UnitPatrolCancelS2C(_message:GetMessage().netId)
end

-- 服务端Logic -> 客户端Logic 战斗演出(通用)
---@param _message BattleRoomMessage
function ProtoCallBack_BattlePlayAct_S2C(_message)
    local _actData = _message:GetMessage().actData
    if _actData then
        local battleRoom = _message:GetBattleRoom()
        battleRoom.battlePlayerActManager:OnClientStartPlayAct(_actData.id, _actData.actType, _actData.param, _actData.position, _actData.rotation)
    end
end

-- 客户端Logic -> 服务端Logic 战斗演出结束(通用)
---@param _message BattleRoomMessage
function ProtoCallBack_BattlePlayActEnd(_message)
    local _uid = _message:GetUid()
    ---@type number
    local _id = _message:GetMessage().id
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battlePlayerActManager:OnClientPlayActFinish(_id, _uid)
end

-- 服务端Logic -> 客户端Logic 战斗剧情(通用)
---@param _message BattleRoomMessage
function ProtoCallBack_BattlePlayPlot_S2C(_message)
    local _plotData = _message:GetMessage().plotData
    if _plotData then
        local battleRoom = _message:GetBattleRoom()
        battleRoom.battlePlayerActManager:OnClientStartPlayPlot(_plotData.id, _plotData.plotType, _plotData.param)
    end
end

-- 服务端Logic -> 客户端Logic 服务端结束战斗剧情(通用)
---@param _message BattleRoomMessage
function ProtoCallBack_ServerBattlePlayPlotEnd_S2C(_message)
    ---@type number
    local _id = _message:GetMessage().id
    if _id then
        local battleRoom = _message:GetBattleRoom()
        battleRoom.battlePlayerActManager:OnServerEndPlayPlot(_id)
    end
end

-- 服务端Logic -> 客户端Logic 服务端结束战斗表演(通用)
---@param _message BattleRoomMessage
function ProtoCallBack_ServerBattlePlayActEnd_S2C(_message)
    ---@type number
    local _id = _message:GetMessage().id
    if _id then
        local battleRoom = _message:GetBattleRoom()
        battleRoom.battlePlayerActManager:OnServerEndPlayAct(_id)
    end
end

-- 客户端Logic -> 服务端Logic 战斗剧情结束(通用)
---@param _message BattleRoomMessage
function ProtoCallBack_BattlePlayPlotEnd(_message)
    local _uid = _message:GetUid()
    ---@type number
    local _id = _message:GetMessage().id
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battlePlayerActManager:OnClientPlayPlotFinish(_id, _uid)
end

-- 服务端Logic -> 客户端Logic 战斗UI(通用)
---@param _message BattleRoomMessage
function ProtoCallBack_BattlePlayUi_S2C(_message)
    local _uiData = _message:GetMessage().uiData
    if _uiData then
        local battleRoom = _message:GetBattleRoom()
        battleRoom.battlePlayerActManager:OnClientStartPlayUi(_uiData.uiType, _uiData.param)
    end
end

-- 客户端View -> 客户端Logic 战斗演出(通用)
---@param _message BattleRoomMessage
function ProtoCallBack_BattlePlayActEnd_S2L(_message)
    ---@type number
    local _id = _message:GetMessage().id
    if _id then
        local battleRoom = _message:GetBattleRoom()
        battleRoom.battlePlayerActManager:OnClientViewPlayActFinish(_id)
    end
end

-- 客户端View -> 客户端Logic 战斗剧情(通用)
---@param _message BattleRoomMessage
function ProtoCallBack_BattlePlayPlotEnd_S2L(_message)
    ---@type number
    local _id = _message:GetMessage().id
    if _id then
        local battleRoom = _message:GetBattleRoom()
        battleRoom.battlePlayerActManager:OnClientViewPlayPlotFinish(_id)
    end
end

-- 客户端View -> 客户端Logic 拾取掉落物
---@param _message BattleRoomMessage
function ProtoCallBack_PickUpFallObject_S2L(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.fallObjectManager:OnClientPickUpFallObject(_message:GetUid(), _message:GetMessage().fallObjUnitIds)
end

-- 服务端通知客户端战斗结果
---@param _message BattleRoomMessage
function ProtoCallBack_NotifyBattleOverResult(_message)
end

-- 客户端通知服务端战斗数据（暂无）
---@param _message BattleRoomMessage
function ProtoCallBack_BattleOver(_message)
end

-- 服务端通知客户端战斗结束
---@param _message BattleRoomMessage
function ProtoCallBack_BattleOver_Push(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom:OnBattleOver(_message:GetMessage().result, _message:GetMessage().condition)
end

-- 战斗单位开始追逐目标广播
---@param _message BattleRoomMessage
function ProtoCallBack_UnitChaseTarget_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:UnitChaseTargetS2C(_message:GetMessage().netId, _message:GetMessage().targetNetId)
end

-- 战斗单位停止追逐目标广播
---@param _message BattleRoomMessage
function ProtoCallBack_UnitStopChaseTarget_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:UnitStopChaseTargetS2C(_message:GetMessage().netId)
end

-- 战斗单位开始远离目标广播
---@param _message BattleRoomMessage
function ProtoCallBack_UnitEscapeTarget_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:UnitEscapeTargetS2C(_message:GetMessage().netId, _message:GetMessage().targetNetId)
end

-- 战斗单位停止远离目标广播
---@param _message BattleRoomMessage
function ProtoCallBack_UnitStopEscapeTarget_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:UnitStopEscapeTargetS2C(_message:GetMessage().netId)
end

-- 战斗单位开始指定移动广播
---@param _message BattleRoomMessage
function ProtoCallBack_UnitMoveTowards_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:UnitMoveTowardsS2C(_message:GetMessage().netId, _message:GetMessage().spaceType, _message:GetMessage().posShift, _message:GetMessage().stopWhenArrive)
end

-- 战斗单位停止指定移动广播
---@param _message BattleRoomMessage
function ProtoCallBack_UnitStopMoveTowards_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:UnitStopMoveTowardsS2C(_message:GetMessage().netId)
end

-- 战斗单位开始平移行为广播
---@param _message BattleRoomMessage
function ProtoCallBack_UnitMoveTowards_2_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:UnitMoveTowards_2_S2C(_message:GetMessage().netId, _message:GetMessage().posShift, _message:GetMessage().faceTarget)
end

-- 战斗单位停止平移行为广播
---@param _message BattleRoomMessage
function ProtoCallBack_UnitStopMoveTowards_2_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:UnitStopMoveTowards_2_S2C(_message:GetMessage().netId)
end

-- 战斗单位开始转向目标广播
---@param _message BattleRoomMessage
function ProtoCallBack_UnitFaceTarget_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:UnitFaceTargetS2C(_message:GetMessage().netId, _message:GetMessage().targetNetId)
end

-- 战斗单位停止转向目标广播
---@param _message BattleRoomMessage
function ProtoCallBack_UnitStopFaceTarget_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:UnitStopFaceTargetS2C(_message:GetMessage().netId)
end

-- 开始跟随召唤者广播
---@param _message BattleRoomMessage
function ProtoCallBack_UnitChaseSubordinate_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:UnitChaseSubordinateS2C(_message:GetMessage().netId, _message:GetMessage().chaseType, _message:GetMessage().posShift)
end

-- 停止跟随召唤者广播
---@param _message BattleRoomMessage
function ProtoCallBack_UnitStopChaseSubordinate_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:UnitStopChaseSubordinateS2C(_message:GetMessage().netId)
end

-- 怪物使用技能广播
---@param _message BattleRoomMessage
function ProtoCallBack_MonsCastSkill_S2C(_message)
    --local battleRoom = _message:GetBattleRoom()
    --battleRoom.battleUnitManager:OnMonsterCastSkillS2C(_message:GetMessage().netId, _message:GetMessage().skillId)
end

-- 拾取掉落物
---@param _message BattleRoomMessage
function ProtoCallBack_PickUpDropFallObject(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.fallObjectManager:PickUpFallObject(_message:GetUid(), _message:GetMessage().fallObjUnitIds)
end

-- 创建发射器广播
---@param _message BattleRoomMessage
function ProtoCallBack_CreateEmitter_S2C(_message)

end

-- 销毁发射器广播
---@param _message BattleRoomMessage
function ProtoCallBack_DestroyEmitter_S2C(_message)

end

-- 暂停怪物AI
---@param _message BattleRoomMessage
function ProtoCallBack_PauseMonsAi(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:OnPauseMonsAI(_message:GetMessage().netId)
end

-- 恢复怪物AI
---@param _message BattleRoomMessage
function ProtoCallBack_ResumeMonsAi(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:OnResumeMonsAI(_message:GetMessage().netId)
end

-- 打开战斗内通讯
---@param _message BattleRoomMessage
function ProtoCallBack_OpenBattleCommunicationS2C(_message)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.OPEN_BATTLE_COMMUNICATION_L2V:GetId(), PROTO_CODE_ENUM.OPEN_BATTLE_COMMUNICATION_L2V:GetName(), _message:GetMessage())
end

--- 单位进入关卡触发器
---@param _message BattleRoomMessage
function ProtoCallBack_UnitEnterLevelTrigger(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.levelTriggerManager:OnUnitEnter(_message:GetMessage().triggerId, _message:GetMessage().netId)
end

--- 单位离开关卡触发器
---@param _message BattleRoomMessage
function ProtoCallBack_UnitLeaveLevelTrigger(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.levelTriggerManager:OnUnitLeave(_message:GetMessage().triggerId, _message:GetMessage().netId)
end

---玩家按键
---@param _message BattleRoomMessage
function ProtoCallBack_BattleUnitTriggerEvent(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:PlayerTriggerEvent(_message:GetUid(), _message:GetMessage().eventType, _message:GetMessage().eventParam)
end

---武装进入过载状态
---@param _message BattleRoomMessage
function ProtoCallBack_WeaponEnterOverLoad(_message)
    local battleRoom = _message:GetBattleRoom()
    local _unit = battleRoom.battleUnitManager:GetUnit(_message:GetMessage().netId)
    if _unit == nil then
        return
    end
    ---@type BattleObjectBase
    local _object = _unit:GetHeroObject(_message:GetMessage().objectId)
    if _object == nil then
        return
    end
    ---@type BattleObjCom_Weapon
    local _comWeapon = _object:GetComponent(BattleObjectComponentType.Weapon)
    if _comWeapon then
        _comWeapon:EnterOverLoad()
    end
end

---武装退出过载状态
---@param _message BattleRoomMessage
function ProtoCallBack_WeaponExitOverLoad(_message)
    local battleRoom = _message:GetBattleRoom()
    local _unit = battleRoom.battleUnitManager:GetUnit(_message:GetMessage().netId)
    if _unit == nil then
        return
    end
    ---@type BattleObjectBase
    local _object = _unit:GetHeroObject(_message:GetMessage().objectId)
    if _object == nil then
        return
    end
    ---@type BattleObjCom_Weapon
    local _comWeapon = _object:GetComponent(BattleObjectComponentType.Weapon)
    if _comWeapon then
        _comWeapon:ExitOverLoad()
    end
end

---切换血量阶段
---@param _message BattleRoomMessage
function ProtoCallBack_UnitChangeStageS2C(_message)
    local _battleRoom = _message:GetBattleRoom()
    local _unit = _battleRoom.battleUnitManager:GetUnit(_message:GetMessage().netId)
    if not _unit then return end
    local _obj = _battleRoom.battleObjectManager:GetObject(_message:GetMessage().objectId)
    if not _obj then return end
    ---@type BattleObjCom_Property
    local _propCom = _obj:GetComponent(BattleObjectComponentType.Property)
    if not _propCom then return end
    _propCom:OnStageNumChange(_message:GetMessage().stageNum)
end

---极奏换人
---@param _message BattleRoomMessage
function ProtoCallBack_JizouChangeLeaderInput(_message)
    local battleRoom = _message:GetBattleRoom()
    local _unit = battleRoom.battleUnitManager:GetUnitByPlayerId(_message:GetUid(), false)
    if not _unit then return end
    battleRoom.battleUnitManager:PlayerChangeLeaderInput(_unit:GetNetId(), _message:GetMessage().objectId, PlayerChangeLeaderInputType.Jizou, false)
end

---弹幕触发事件V2S
---@param _message BattleRoomMessage
function ProtoCallBack_BarrageTrigEvent_V2S(_message)
    local battleRoom = _message:GetBattleRoom()
    local _msg = _message:GetMessage()
    for i = 1, #_msg.infoList do
        battleRoom.ejectorManager:OnBarrageTrigEventV2S(_msg.infoList[i])
    end
end

---进入区域V2S
---@param _message BattleRoomMessage
function ProtoCallBack_UnitEnterArea_V2S(_message)
    --LogTools.LogByLevel(LogLevel.log, "CheckArea", "ProtoCallBack_UnitEnterArea_V2S", _message:GetMessage().index)
    local battleRoom = _message:GetBattleRoom()
    local _areaTriggerUnit = battleRoom.battleUnitManager:GetUnit(_message:GetMessage().index)
    --LogTools.LogByLevel(LogLevel.log, "CheckArea", "ProtoCallBack_UnitEnterArea_V2S", "_areaTriggerUnit", _areaTriggerUnit)
    if not _areaTriggerUnit then return end

    ---@type BattleObjCom_BoundaryListener
    local _boundaryListener = _areaTriggerUnit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.BoundaryListener)
    _boundaryListener:OnUnitEnter(_message:GetMessage().netIdList)

    -----@type BattleObjCom_AreaTrigger
    --local _areaCom = _areaTriggerUnit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.AreaTrigger)
    ----LogTools.LogByLevel(LogLevel.log, "CheckArea", "ProtoCallBack_UnitEnterArea_V2S", "_areaCom", _areaCom)
    --if not _areaCom then return end
    --_areaCom:OnUnitEnter(_message:GetMessage().netIdList)
end

---离开区域V2S
---@param _message BattleRoomMessage
function ProtoCallBack_UnitLeaveArea_V2S(_message)
    local battleRoom = _message:GetBattleRoom()
    local _areaTriggerUnit = battleRoom.battleUnitManager:GetUnit(_message:GetMessage().index)
    if not _areaTriggerUnit then return end

    ---@type BattleObjCom_BoundaryListener
    local _boundaryListener = _areaTriggerUnit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.BoundaryListener)
    _boundaryListener:OnUnitLeave(_message:GetMessage().netIdList)

    -----@type BattleObjCom_AreaTrigger
    --local _areaCom = _areaTriggerUnit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.AreaTrigger)
    --if not _areaCom then return end
    --_areaCom:OnUnitLeave(_message:GetMessage().netIdList)
end

---@param _message BattleRoomMessage
function ProtoCallBack_WeaponEnterRecoverEnergyState_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    local _unit = battleRoom.battleUnitManager:GetUnit(_message:GetMessage().netId)
    if _unit == nil then
        return
    end
    ---@type BattleObjectBase
    local _object = _unit:GetHeroObject(_message:GetMessage().objectId)
    if _object == nil then
        return
    end
    ---@type BattleObjCom_Weapon
    local _comWeapon = _object:GetComponent(BattleObjectComponentType.Weapon)
    if _comWeapon then
        _comWeapon:EnterRecoverEnergyState()
    end
end

---@param _message BattleRoomMessage
function ProtoCallBack_WeaponExitRecoverEnergyState_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    local _unit = battleRoom.battleUnitManager:GetUnit(_message:GetMessage().netId)
    if _unit == nil then
        return
    end
    ---@type BattleObjectBase
    local _object = _unit:GetHeroObject(_message:GetMessage().objectId)
    if _object == nil then
        return
    end
    ---@type BattleObjCom_Weapon
    local _comWeapon = _object:GetComponent(BattleObjectComponentType.Weapon)
    if _comWeapon then
        _comWeapon:ExitRecoverEnergyState()
    end
end
---@param _message BattleRoomMessage
function ProtoCallBack_WeaponEnterRecoverEnergyState_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    local _unit = battleRoom.battleUnitManager:GetUnit(_message:GetMessage().netId)
    if _unit == nil then
        return
    end
    ---@type BattleObjectBase
    local _object = _unit:GetHeroObject(_message:GetMessage().objectId)
    if _object == nil then
        return
    end
    ---@type BattleObjCom_Weapon
    local _comWeapon = _object:GetComponent(BattleObjectComponentType.Weapon)
    if _comWeapon then
        _comWeapon:EnterRecoverEnergyState()
    end
end

---@param _message BattleRoomMessage
function ProtoCallBack_WeaponExitRecoverEnergyState_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    local _unit = battleRoom.battleUnitManager:GetUnit(_message:GetMessage().netId)
    if _unit == nil then
        return
    end
    ---@type BattleObjectBase
    local _object = _unit:GetHeroObject(_message:GetMessage().objectId)
    if _object == nil then
        return
    end
    ---@type BattleObjCom_Weapon
    local _comWeapon = _object:GetComponent(BattleObjectComponentType.Weapon)
    if _comWeapon then
        _comWeapon:ExitRecoverEnergyState()
    end
end

---转向到目标
---@param _message BattleRoomMessage
function ProtoCallBack_TurnToTarget(_message)
    local battleRoom = _message:GetBattleRoom()
    local _unit = battleRoom.battleUnitManager:GetUnitByPlayerId(_message:GetUid())
    if _unit == nil then
        return
    end

    _unit:GetActionManager():TurnToTarget(_message:GetMessage().rotation);
end

---@param _message BattleRoomMessage
function ProtoCallBack_CompleteBattleGuide(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleGuideManager:CompleteGuide(_message:GetUid(), _message:GetMessage().guideId)
end

---@param _message BattleRoomMessage
function ProtoCallBack_TrigBattleGuide_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.outputDataSource:TrigBattleGuideL2V(_message:GetMessage())
end

---@param _message BattleRoomMessage
function ProtoCallBack_LevelTrigGuideUIOperate_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.outputDataSource:LevelTrigGuideUIOperateL2V(_message:GetMessage())
end

---@param _message BattleRoomMessage
function ProtoCallBack_LevelTrigNormalUIOperate_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.outputDataSource:LevelTrigNormalUIOperateL2V(_message:GetMessage())
end

---@param _message BattleRoomMessage
function ProtoCallBack_LevelTrigControllerOperate_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.outputDataSource:LevelTrigControllerOperateL2V(_message:GetMessage())
end

-- 获取三星条件
---@param _message BattleRoomMessage
function ProtoCallBack_GetMainLevelStarList_S2C(_message)
    local msg = {
        starArray = _message:GetMessage().starArray
    }
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.GET_MAIN_LEVEL_STAR_LIST_L2V:GetId(), PROTO_CODE_ENUM.GET_MAIN_LEVEL_STAR_LIST_L2V:GetName(), msg)
end

-- 客户端开始播放Timeline
---@param _message BattleRoomMessage
function ProtoCallBack_ClientStartTimeline(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battlePlayerActManager:OnPlayTimeline(_message:GetMessage().timelineId)
end

-- 客户端结束播放Timeline
---@param _message BattleRoomMessage
function ProtoCallBack_ClientStopTimeline(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battlePlayerActManager:OnFinishTimeline(_message:GetMessage().timelineId)
end

-- 瞄准的目标
---@param _message BattleRoomMessage
function ProtoCallBack_AimTargetV2L(_message)
    local battleRoom = _message:GetBattleRoom()
    
    local _unit = battleRoom.battleUnitManager:GetUnit(_message:GetMessage().netId, true)
    ---@type BattleUnitCom_Behav
    local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
    _behavCom:SetTargetNetId(_message:GetMessage().target.netId)

    local playerUnit = battleRoom.battleUnitManager:GetUnitByPlayerId(_message:GetUid());
    if playerUnit then
        local playerObject = playerUnit:GetCurrentHeroObject();
        if playerObject then
            ---@type BattleObjCom_Skill
            local skillCom = playerObject:GetComponent(BattleObjectComponentType.Skill)
            skillCom:OnChangeTarget(_message:GetMessage().target.netId)
        end
    end
    
    local _changeData = {}
    _changeData.netId = _message:GetMessage().netId
    _changeData.objId = _message:GetMessage().objectId
	_changeData.unitTargetChange = _message:GetMessage()
	
	battleRoom.outputDataSource:AddBattleUnitChangeData(_changeData)
end

-- 消弹
---@param _message BattleRoomMessage
function ProtoCallBack_DestroyBullet_V2L(_message)
    local msg = {
        netId = _message:GetMessage().netId,
        position = _message:GetMessage().position,
        eCount = _message:GetMessage().eCount
    }
    local _battleRoom = GetBattleRoom(_message.battleId)
    _battleRoom.outputDataSource:DestroyBullet(msg)
end

---开始导航点移动
---@param _message BattleRoomMessage
function ProtoCallBack_UnitMoveNavPoints_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:UnitMoveNavPoints_S2C(_message:GetMessage().netId, _message:GetMessage().pointList, _message:GetMessage().loopAtEnd)
end

---停止导航点移动
---@param _message BattleRoomMessage
function ProtoCallBack_UnitStopMoveNavPoints_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:UnitStopMoveNavPoints_S2C(_message:GetMessage().netId)
end

---同步关卡暂停时间
---@param _message BattleRoomMessage
function ProtoCallBack_SyncLevelPauseTime_S2C(_message)
    local msg = {
        time = _message:GetMessage().time
    }
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.SYNC_LEVEL_PAUSE_TIME_L2V:GetId(), PROTO_CODE_ENUM.SYNC_LEVEL_PAUSE_TIME_L2V:GetName(), msg)
end

---消弹逻辑
---@param _message BattleRoomMessage
function ProtoCallBack_DestroyBullet(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:DestroyBulletV2L(_message:GetMessage().netId, _message:GetMessage().position, _message:GetMessage().eCount)
end

---点击朝向敌人
---@param _message BattleRoomMessage
function ProtoCallBack_AutoFaceEnemy_V2S(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:AutoFaceEnemyV2L(_message:GetMessage().netId)
end

---修改tag值
---@param _message BattleRoomMessage
function ProtoCallBack_ChangeTag_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.tagManager:ChangeTagS2C(_message:GetMessage().tag, _message:GetMessage().value)
end

---可受击子弹死亡
---@param _message BattleRoomMessage
function ProtoCallBack_BarrageBulletDead(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.ejectorManager:OnBulletDead(_message:GetMessage().emitterId, _message:GetMessage().bulletLocalId)
end

---单位修改分块状态
---@param _message BattleRoomMessage
function ProtoCallBack_UnitChangeBlockState(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:OnUnitChangeBlockStateS2C(_message:GetMessage().netId, _message:GetMessage().objId, _message:GetMessage().blockId, _message:GetMessage().stateId, _message:GetMessage().weaknessId)
end

---单位交互结果
---@param _message BattleRoomMessage
function ProtoCallBack_UnitHandleResult_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.outputDataSource:BattleUnitHandleResultL2V(_message:GetMessage())
end

---单位交互输入
---@param _message BattleRoomMessage
function ProtoCallBack_BattleUnitHandleInput_V2S(_message)
    local battleRoom = _message:GetBattleRoom()
    local _unit = battleRoom.battleUnitManager:GetUnit(_message:GetMessage().netId)
    if not _unit then return end
    ---@type BattleUnitCom_Collector
    local _collectorCom = _unit:GetComponent(BattleUnitComponentType.Collector)
    if not _collectorCom then return end
    _collectorCom:SetStartTag()
end

---单位交互输入
---@param _message BattleRoomMessage
function ProtoCallBack_PlayerReconnectBattleRoomInfo_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    --local _unit = battleRoom.battleUnitManager:GetUnit(_message:GetMessage().netId)
    --if not _unit then return end
    battleRoom:OnReceiveCreateSyncMessage_S2C(_message:GetMessage());
end

---换弹
---@param _message BattleRoomMessage
function ProtoCallBack_ReloadBulletStart_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    local msg = {}
    msg.netId = _message:GetMessage().netId
    msg.objectId = _message:GetMessage().objectId
    msg.reloadStateTime = _message:GetMessage().reloadStateTime
    msg.isAuto = _message:GetMessage().isAuto
    battleRoom.outputDataSource:ReloadBulletStart_L2V(msg)
end

---换弹
---@param _message BattleRoomMessage
function ProtoCallBack_ReloadBulletEnd_S2C(_message)
    local battleRoom = _message:GetBattleRoom()
    local msg = {}
    msg.netId = _message:GetMessage().netId
    msg.objectId = _message:GetMessage().objectId
    battleRoom.outputDataSource:ReloadBulletEnd_L2V(msg)
end

---改变关卡时间
---@param _message BattleRoomMessage
function ProtoCallBack_LevelChangeTimeLimit(_message)
    local battleRoom = _message:GetBattleRoom()
    local msg = {}
    msg.changeTime = _message:GetMessage().changeTime
    battleRoom.outputDataSource:LevelChangeTimeLimit_L2V(msg)
end

---改变关卡时间
---@param _message BattleRoomMessage
function ProtoCallBack_PlayerGM(_message)
    local battleRoom = _message:GetBattleRoom()
    battleRoom.battleUnitManager:OnPlayerGM(_message:GetUid(), _message:GetMessage().module, _message:GetMessage().command, _message:GetMessage().target, _message:GetMessage().params);
end

---获取行为树信息
---@param _message BattleRoomMessage
function ProtoCallBack_AskBehaviorInfo(_message)
    --LogTools.LogByLevel(LogLevel.log, "ProtoCallBack_AskBehaviorInfo", "_message:GetMessage().netId", _message:GetMessage().netId, "_message:GetMessage().graphName", _message:GetMessage().graphName)
    ---@type BattleRoom
	local _battleRoom = _message:GetBattleRoom()
	_battleRoom.battleUnitManager:OnAskBehaviorInfo(_message:GetMessage())
end

---行为树状态
---@param _message BattleRoomMessage
function ProtoCallBack_PushBehaviorInfo_S2C(_message)
    --LogTools.LogByLevel(LogLevel.log, "ProtoCallBack_PushBehaviorInfo_S2C", "_message:GetMessage()", dumpTableEx(_message:GetMessage()))
    local _battleRoom = _message:GetBattleRoom()
    _battleRoom.outputDataSource:PushBehavInfo_L2V(_message:GetMessage())
end

---弱点击破
---@param _message BattleRoomMessage
function ProtoCallBack_WeaknessBroken_S2C(_message)
    --LogTools.LogByLevel(LogLevel.log, "ProtoCallBack_WeaknessBroken_S2C", "_message:GetMessage()", dumpTableEx(_message:GetMessage()))
    local _battleRoom = _message:GetBattleRoom()
    _battleRoom.outputDataSource:WeaknessBroken_L2V(_message:GetMessage())
end

---表现层创建unit完成回调
---@param _message BattleRoomMessage
function ProtoCallBack_ClientCreateUnitEnd_V2L(_message)
    --LogTools.LogByLevel(LogLevel.log, "ProtoCallBack_ClientCreateUnitEnd_V2L", "_message:GetMessage()", dumpTableEx(_message:GetMessage()))
    local _battleRoom = _message:GetBattleRoom()
    local _unit = _battleRoom.battleUnitManager:GetUnit(_message:GetMessage().netId)
    if not _unit then return end
    _unit:SetClientCreateEnd()
end

---开始切换血量阶段回调
---@param _message BattleRoomMessage
function ProtoCallBack_UnitStartChangeStage_S2C(_message)
    --LogTools.LogByLevel(LogLevel.log, "ProtoCallBack_UnitStartChangeStage_S2C", "_message:GetMessage()", dumpTableEx(_message:GetMessage()))
    local _battleRoom = _message:GetBattleRoom()
    local _unit = _battleRoom.battleUnitManager:GetUnit(_message:GetMessage().netId)
    if not _unit then return end
    local _obj = _battleRoom.battleObjectManager:GetObject(_message:GetMessage().objectId)
    if not _obj then return end
    ---@type BattleObjCom_Property
    local _propCom = _obj:GetComponent(BattleObjectComponentType.Property)
    if not _propCom then return end
    _propCom:StartChangingStage()
end
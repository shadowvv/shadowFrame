---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2023/07/31 15:01
--- Describe:
---

---@class RogueUnitTarget_ListenBuffStackNumIncrease : RogueUnitSkillTargetSelectorBase
RogueUnitTarget_ListenBuffStackNumIncrease = class(RogueUnitSkillTargetSelectorBase, "RogueUnitTarget_ListenBuffStackNumIncrease")

---@public
---@param _action RogueUnitSkillActionBase
---@param _rogueUnitSkillTargetXls RogueUnitSkillTarget
function RogueUnitTarget_ListenBuffStackNumIncrease:Init(_action, _rogueUnitSkillTargetXls)
	self:__Init(_action, _rogueUnitSkillTargetXls)
	self.__checkBuffGroupId = math.floor(self.__xlsData.params[1])
	
	---适用的叠层下限
	local _limitDown = self.__xlsData.params[2]
	if not _limitDown or _limitDown < 1 then
		_limitDown = 1
	end
	self.__stackLimitDown = _limitDown
	
	---适用的叠层上限
	local _limitUp = self.__xlsData.params[3]
	if not _limitUp or _limitUp <= 0 then
		_limitUp = math.maxinteger
	end
	if _limitUp < _limitDown then
		_limitUp = _limitDown
	end
	self.__stackLimitUp = _limitUp
	
	self.__isTrigSelector = true
	
	---@type BattleUnitBase[]
	self.__retList_tmp = {}
	---@private
	---@type boolean
	self.__listened = false
	self:GetBattleRoom().rogueUnitSkillService:AddListener(BATTLE_LOGIC_EVENT_ENUM.CASTER_BUFF_STACK_CHANGE, self)
	--LogTools.LogByLevel(LogLevel.logErr, "肉鸽主公技", "RogueUnitTarget_ListenBuffStackNumIncrease:addListener", "actionId", _action:GetId(), "collectorId", self:GetId())
end

---@public
function RogueUnitTarget_ListenBuffStackNumIncrease:OnRemove()
	self:__OnRemove()
	self:GetBattleRoom().rogueUnitSkillService:RemoveListener(BATTLE_LOGIC_EVENT_ENUM.CASTER_BUFF_STACK_CHANGE, self)
	--LogTools.LogByLevel(LogLevel.logErr, "肉鸽主公技", "RogueUnitTarget_ListenBuffStackNumIncrease:removeListener", "actionId", self.__action:GetId(), "collectorId", self:GetId())
end

---@public
---@param _battleLogicEventV2 BattleLogicEventV2
function RogueUnitTarget_ListenBuffStackNumIncrease:OnTrigEvent(_battleLogicEventV2)
	self:__OnTrigEvent(_battleLogicEventV2)

	local _buffId = _battleLogicEventV2.eventCompareParam.buffId
	if _buffId ~= self.__checkBuffGroupId then return end

	local _startNum = _battleLogicEventV2.eventTriggerParam.startStack
	local _endNum = _battleLogicEventV2.eventTriggerParam.endStack
	--LogTools.LogByLevel(LogLevel.logErr, "肉鸽主公技", "RogueUnitTarget_ListenBuffStackNumIncrease:OnTrigEvent", "_buffId", _buffId, "_startNum", _startNum, "_endNum", _endNum, "self.__stackLimitDown", self.__stackLimitDown, "self.__stackLimitUp", self.__stackLimitUp, "netId", _battleLogicEventV2.eventTriggerParam.netId)
	if _startNum >= _endNum then return end
	

	local _unit = self:GetBattleRoom().battleUnitManager:GetUnit(_battleLogicEventV2.eventTriggerParam.netId)
	if not _unit then return end
	
	---@type BattleUnitCom_Camp
	local _campCom = _unit:GetComponent(BattleUnitComponentType.Camp)
	if not self:__CheckCamp(_campCom) then return end
	
	local _downLimit = self.__stackLimitDown
	if _endNum < _downLimit then return end

	local _upLimit = self.__stackLimitUp
	_startNum = _startNum + 1
	if _startNum > _upLimit then return end

	local _list = self.__retList_tmp
	for i = _startNum, _endNum do
		if i >= _downLimit and i <= _upLimit then
			--LogTools.LogByLevel(LogLevel.logErr, "肉鸽主公技", "RogueUnitTarget_ListenBuffStackNumIncrease:OnTrigEvent", "get netId", _unit:GetNetId())
			table.insert(_list, _unit)
			self.__listened = true
		end
	end
	--LogTools.LogByLevel(LogLevel.logErr, "肉鸽主公技", "RogueUnitTarget_ListenBuffStackNumIncrease:OnTrigEvent", "collectorId", self:GetId(), "#self.__retList_tmp", #self.__retList_tmp)
end

---@private
---@param _campCom BattleUnitCom_Camp
function RogueUnitTarget_ListenBuffStackNumIncrease:__CheckCamp(_campCom)
	if not _campCom then return false end
	for _, _campId in pairs(self.__campList) do
		if _campCom:CheckFirstCamp(_campId) then
			return true
		end
	end
	return false
end

---@public
function RogueUnitTarget_ListenBuffStackNumIncrease:SelectTarget()
	if not self.__listened then return nil end

	local _objList = self:__SelectOnTeamState(self.__retList_tmp)
	TableUtil.ClearTable(self.__retList_tmp)
	self.__listened = false
	
	if not self.__numLimit then
		return _objList
	end
	local _leftObjNum = #_objList
	local _needNum = self.__maxNum

	while _leftObjNum > _needNum do
		table.remove(_objList, _leftObjNum)
		_leftObjNum = _leftObjNum - 1
	end
	
	return _objList
end

return RogueUnitTarget_ListenBuffStackNumIncrease
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2023/07/28 16:30
--- Describe:
---

---@class RogueUnitSkillTargetSelectorBase : table
RogueUnitSkillTargetSelectorBase = class(nil, "RogueUnitSkillTargetSelectorBase")
function RogueUnitSkillTargetSelectorBase:ctor(_data) end

---@public
---@return BattleRoom
function RogueUnitSkillTargetSelectorBase:GetBattleRoom()
	return self.__battleRoom
end

---@public
---@return number
function RogueUnitSkillTargetSelectorBase:GetBattleId()
	return self.__battleId
end
------------------------------------------------------------------------------------------------------------------------

---@protected
---@param _action RogueUnitSkillActionBase
---@param _rogueUnitSkillTargetXls RogueUnitSkillTarget 
function RogueUnitSkillTargetSelectorBase:__Init(_action, _rogueUnitSkillTargetXls)
	if CheckLogLevel(LogLevel.log) and LogTools.RogueUnitSkillLog then
		LogTools.LogByLevel(LogLevel.log, "肉鸽主公技", "    RogueUnitSkillTargetSelectorBase:Init", "目标选择器初始化开始")
	end
	
	---@protected
	---@type RogueUnitSkillActionBase
	self.__action = _action
	---@protected
	---@type BattleRoom
	self.__battleRoom = _action:GetBattleRoom()
	---@protected
	---@type number
	self.__battleId = _action:GetBattleId()

	---@protected
	---@type RogueUnitSkillTarget
	self.__xlsData = _rogueUnitSkillTargetXls
	---@protected
	---@type Enum_RogueUnitSkillTargetSelectorType
	self.__type = _rogueUnitSkillTargetXls.selectorType
	---@protected
	self.__maxNum = _rogueUnitSkillTargetXls.num
	---@protected
	self.__numLimit = self.__maxNum > 0
	---@protected
	self.__campList = _rogueUnitSkillTargetXls.camps
	---@protected
	self.__onTeamType = _rogueUnitSkillTargetXls.onTeamState
	---@protected
	---@type BattleObjectBase[]
	self.__retList = {}
	---@protected
	---@type boolean
	self.__isTrigSelector = false
	
	if CheckLogLevel(LogLevel.log) and LogTools.RogueUnitSkillLog then
		LogTools.LogByLevel(LogLevel.log, "肉鸽主公技", "    RogueUnitSkillTargetSelectorBase:Init", "目标选择器初始化结束", "选择器ID", _rogueUnitSkillTargetXls.id, "选择器类型", self:GetSelectorTypeDesc(), "最大目标数量", self.__maxNum, "是否限制数量", self.__numLimit, "目标阵营列表", dumpTableEx(self.__campList), "上阵状态筛选", LogTools.GetEnumTableDesc(Enum_RogueUnitSkillSelectOnTeamType, self.__onTeamType ) )
	end
end


---@public
---@param _action RogueUnitSkillActionBase
---@param _rogueUnitSkillTargetXls RogueUnitSkillTarget
function RogueUnitSkillTargetSelectorBase:Init(_action, _rogueUnitSkillTargetXls)
	self:__Init(_action, _rogueUnitSkillTargetXls)
end

---@protected
function RogueUnitSkillTargetSelectorBase:__OnRemove()
	
end

---@public
function RogueUnitSkillTargetSelectorBase:OnRemove()
	self:__OnRemove()
end

---@protected
---@param _battleLogicEventV2 BattleLogicEventV2
function RogueUnitSkillTargetSelectorBase:__OnTrigEvent(_battleLogicEventV2)
	
end

---@public
---@param _battleLogicEventV2 BattleLogicEventV2
function RogueUnitSkillTargetSelectorBase:OnTrigEvent(_battleLogicEventV2)
	self:__OnTrigEvent(_battleLogicEventV2)
end

---@public
---@return BattleObjectBase[]
function RogueUnitSkillTargetSelectorBase:SelectTarget()
	return nil
end

---@protected
---@return BattleUnitBase[]
function RogueUnitSkillTargetSelectorBase:__SelectCampType()
	
	local _unitList = {}
	local _tempList
	local _battleUnitManager = self:GetBattleRoom().battleUnitManager
	for _, _campId in pairs(self.__campList) do
		_tempList = _battleUnitManager:GetUnitListByCampTypeUnsafe(_campId)
		for _, _unit in pairs(_tempList) do
			if _unit:CheckAlive() then
				table.insert(_unitList, _unit)
			end
		end
	end
	
	return _unitList
end

---@protected
---@param _unitList BattleUnitBase[]
---@return BattleObjectBase[]
function RogueUnitSkillTargetSelectorBase:__SelectOnTeamState(_unitList)

	local _list = {}
	for _, _unit in pairs(_unitList) do
		if _unit:CheckAlive() then
			if self.__onTeamType == Enum_RogueUnitSkillSelectOnTeamType.OnTeamAndOffTeam then
				local _objDic = _unit:GetAllObjectDic()
				for _, _obj in pairs(_objDic) do
					table.insert(_list, _obj)
				end
			elseif self.__onTeamType == Enum_RogueUnitSkillSelectOnTeamType.OnTeam then
				table.insert(_list, _unit:GetCurrentHeroObject())
			elseif self.__onTeamType == Enum_RogueUnitSkillSelectOnTeamType.OffTeam then
				local _objDic = _unit:GetAllObjectDic()
				local _curObjId = _unit:GetCurrentHeroObjectId()
				for _, _obj in pairs(_objDic) do
					if _obj:GetObjectId() ~= _curObjId then
						table.insert(_list, _obj)
					end
				end
			end
			
		end
	end
	
	return _list
end

---检查当前是否是监听式的选择器
---@public
---@return boolean
function RogueUnitSkillTargetSelectorBase:CheckIsTrigSelector()
	return self.__isTrigSelector
end

---@public
---@param _type Enum_RogueUnitSkillTargetSelectorType
function RogueUnitSkillTargetSelectorBase:CheckSelectorType(_type)
	return self.__type == _type
end

---@public
function RogueUnitSkillTargetSelectorBase:GetSelectorTypeDesc()
	return LogTools.GetEnumTableDesc(Enum_RogueUnitSkillTargetSelectorType, self.__type)
end

---@public
---@return number
function RogueUnitSkillTargetSelectorBase:GetId()
	return self.__xlsData.id	
end

---@public
---@return RogueUnitSkillTarget
function RogueUnitSkillTargetSelectorBase:GetXlsData()
	return self.__xlsData
end

---@public
---@return number[]
function RogueUnitSkillTargetSelectorBase:GetCamps()
	return self.__xlsData.camps
end

return RogueUnitSkillTargetSelectorBase
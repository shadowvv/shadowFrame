---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2023/2/28 18:32

require "Lib/class"
require "Battle/Logic/Skill/SkillBaseNode"

---@class SkillSwitchNode : SkillBaseNode
---@field nodeId number 节点id
---@field nextNodes SkillNodeExitData[] 子节点
SkillSwitchNode = class(SkillBaseNode, 'SkillSwitchNode');

---@param _nodeId number 节点id
---@param _once boolean 只执行一次
---@param _nextNodes SkillNodeExitData[] 子节点
---@param _specialExit SkillNodeExitData[] 特殊出口
function SkillSwitchNode:ctor(_nodeId, _once, _nextNodes, _specialExit,_switchInfos)
    self.nodeId = _nodeId;
    self.once = _once;
    self.nextNodes = _nextNodes;
    self.specialExit = _specialExit;
    self.switchInfos = _switchInfos;
    self.maxNum = 0;
    for i, v in pairs(_switchInfos) do
        if self.maxNum < v.right then
            self.maxNum = v.right;
        end
    end
end

---执行技能节点
---@param _actionStateManager ActionStateManage 行为管理器
---@param _dt number 更新时间
---@param _netId number 单位id
---@param _skillModel SkillModel 技能配置
---@return boolean,table 是否执行结束,执行行为输出数据
function SkillSwitchNode:DoAction(_actionStateManager, _dt, _netId, _skillModel)
    return true, nil;
end

---检测进入的子节点
---@public
---@param _runTime number 节点持续时间
---@param _netId number 战斗单位id
---@param _battleId number 战斗id
---@return number[] 可进入的子节点Id
function SkillSwitchNode:CheckNextNodes(_runTime,_netId, _battleId)
    if self.switchInfos == nil then
        return nil;
    end
    local rand = math.random(0,self.maxNum);
    for i, v in pairs(self.switchInfos) do
        if rand >= v.left and rand <= v.right then
            local nextNodes = {};
            table.insert(nextNodes,v.nodeId);
            return self:CheckSpecialExit(nextNodes);
        end
    end
    return {};
end

---返回节点类型
---@public
---@return number 节点类型
function SkillSwitchNode:GetType()
    return 65;
end

return SkillSwitchNode;
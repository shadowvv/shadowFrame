---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/2/23 12:07

require "Lib/class"
require "Battle/Logic/Skill/SkillBaseNode"

---@class SkillStateSwitchOverrideNode : SkillBaseNode 技能改变状态节点
---@field nodeId number 节点id
---@field nextNodes SkillNodeExitData[] 子节点
SkillStateSwitchOverrideNode = class(SkillBaseNode, 'SkillStateSwitchOverrideNode');

---@param _nodeId number 节点id
---@param _once boolean 只执行一次
---@param _nextNodes SkillNodeExitData[] 子节点
---@param _specialExit SkillNodeExitData[] 特殊出口
function SkillStateSwitchOverrideNode:ctor(_nodeId,_once, _nextNodes,_specialExit,_switchStateRuleId,_blockKeys,_blockChangeLeader)
    self.nodeId = _nodeId;
    self.once = _once;
    self.nextNodes = _nextNodes;
    self.specialExit = _specialExit;
    self.switchStateRuleId = _switchStateRuleId;
    self.blockKeys = _blockKeys;
    self.blockChangeLeader = _blockChangeLeader;
end

---执行技能节点
---@param _actionStateManager ActionStateManage 行为管理器
---@param _dt number 更新时间
---@param _netId number 单位id
---@param _skillModel SkillModel 技能配置
---@param _currentSkillState SkillActionState 当前技能状态
---@return boolean,table 是否执行结束,执行行为输出数据
function SkillStateSwitchOverrideNode:DoAction(_actionStateManager, _dt, _netId,_skillModel,_currentSkillState)

    if _currentSkillState and self.switchStateRuleId then
        _currentSkillState:ChangeSwitchRule(self.switchStateRuleId);
    end

    if self.blockKeys then
        _actionStateManager:AddBlockKey(self.blockKeys);
    end

    if self.blockChangeLeader then
        _actionStateManager:GetUnit():DisableChangeLeader();
    else
        _actionStateManager:GetUnit():EnableChangeLeader();
    end

    local doCurrentNode = {};
    doCurrentNode.nodeId = self.nodeId;
    return true,doCurrentNode;
end

---返回节点类型
---@public
---@return number 节点类型
function SkillStateSwitchOverrideNode:GetType()
    return 22;
end

return SkillStateSwitchOverrideNode;
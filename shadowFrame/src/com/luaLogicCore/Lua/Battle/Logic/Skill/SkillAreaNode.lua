---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/2/22 11:55

require "Lib/class"
require "Battle/Logic/Skill/SkillBaseNode"

---@class SkillAreaNode : SkillBaseNode 技能创建区域节点
---@field nodeId number 节点id
---@field nextNodes SkillNodeExitData[] 子节点
---@field areaId number 区域id
SkillAreaNode = class(SkillBaseNode, 'SkillAreaNode');

---@param _nodeId number 节点id
---@param _once boolean 只执行一次
---@param _nextNodes SkillNodeExitData[] 子节点
---@param _specialExit SkillNodeExitData[] 特殊出口
function SkillAreaNode:ctor(_nodeId,_once, _nextNodes,_specialExit,_areaId)
    self.nodeId = _nodeId;
	self.once = _once;
    self.nextNodes = _nextNodes;
	self.specialExit = _specialExit;
    self.areaId = tonumber(_areaId);
end

---执行技能节点
---@param _actionStateManager ActionStateManage 行为管理器
---@param _dt number 更新时间
---@param _netId number 单位id
---@param _skillModel SkillModel 技能配置
---@param _currentSkillState SkillActionState 当前技能状态
---@return boolean,table 是否执行结束,执行行为输出数据
function SkillAreaNode:DoAction(_actionStateManager, _dt, _netId,_skillModel,_currentSkillState)
    --LogTools.LogByLevel(LogLevel.log, "CheckArea", "SkillAreaNode DoAction", "_netId", _netId, "self.areaId", self.areaId, "_skillModel.skillId", _skillModel.skillId, "self.nodeId", self.nodeId)
	local battleRoom = GetBattleRoom(_actionStateManager.battleId)
	local _unit = battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then
		local doCurrentNode = {}
		doCurrentNode.nodeId = self.nodeId
		return true,doCurrentNode
	end

	local _currentHeroObj = _unit:GetCurrentHeroObject()
	if not _currentHeroObj then
		local doCurrentNode = {}
		doCurrentNode.nodeId = self.nodeId
		return true,doCurrentNode
	end
	
	---@type BattleObjCom_Buff
	local buffComp = _actionStateManager:GetUnit():GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Buff)
	local buffs = {}
	if buffComp and buffComp.buffCom then
		local _areaBuffList = buffComp.buffCom.areaBuffList
		if _areaBuffList[0] then
			for i, v in pairs(_areaBuffList[0]) do
				table.insert(buffs,BattleBuffService:GenerateCastBuffTemplate(v.buffGroupId,_actionStateManager:GetUnit():GetCurrentHeroObject(),_skillModel.skillId,nil,v.upPercent));
			end
		end
		if _areaBuffList[self.areaId] then
			for i, v in pairs(_areaBuffList[self.areaId]) do
				table.insert(buffs,BattleBuffService:GenerateCastBuffTemplate(v.buffGroupId,_actionStateManager:GetUnit():GetCurrentHeroObject(),_skillModel.skillId,nil,v.upPercent));
			end
		end
	end

    local _skillId = _skillModel.skillId
    ---@type BattleObjCom_Skill
	local _skillCom = _currentHeroObj:GetComponent(BattleObjectComponentType.Skill)
	local _skillLevel = _skillCom:GetSkillLevel(_skillId)

	---@type BattleObjCom_Config
	local _configCom = _currentHeroObj:GetComponent(BattleObjectComponentType.Config)
	---@type SkillValue
	local _skillValueXls = _configCom:GetSkillValueXls(_skillId, _skillLevel)
	local _skillParamList = _skillValueXls.value
	local _skillParam = 0
	local _hurtParam = 0  --将来这个配到区域表里，保持跟弹幕一样的逻辑
	if _hurtParam > 0 then
		_skillParam = _skillParamList[_hurtParam]
	end

	---@type Skill
	local _skillXls = battleRoom.inputDataSource:GetDict("Skill", _skillId)
	local _hatredParam = 0
	if _skillXls then
		_hatredParam = _skillXls.hatredValue
	end

    local _snapShotData = battleRoom.hurtManager:CreateSnapShot(_currentHeroObj:GetObjectId(), 1, _skillId, BattleElementTypeEnum.PHYSIC:GetId(), BattleElementTypeEnum.PHYSIC:GetId(), 0, 0,_skillParam, _hatredParam)
	_snapShotData:SetOriginalHeroSkillId(_skillId, nil)
	battleRoom.behaviorProcessor:CreateAreaTriggerUnit(self.areaId, _snapShotData, CreateAreatriggerSourceType.Skill, _skillId, self.nodeId, nil, nil, buffs, -1, TimeUtils.battleNow(_actionStateManager.battleId), 0, nil, 1)
    
    local doCurrentNode = {}
    doCurrentNode.nodeId = self.nodeId
    return true,doCurrentNode
end

---返回节点类型
---@public
---@return number 节点类型
function SkillAreaNode:GetType()
    return 25;
end

return SkillAreaNode;
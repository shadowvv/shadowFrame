---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/12/29 16:15

require "Lib/class"
require "Battle/Logic/Skill/SkillBaseNode"

---@class SkillTurnToTargetNode : SkillBaseNode
---@field nodeId number 节点id
---@field nextNodes SkillNodeExitData[] 子节点
SkillTurnToTargetNode = class(SkillBaseNode, 'SkillTurnToTargetNode');

---@param _nodeId number 节点id
---@param _once boolean 只执行一次
---@param _nextNodes SkillNodeExitData[] 子节点
---@param _specialExit SkillNodeExitData[] 特殊出口
function SkillTurnToTargetNode:ctor(_nodeId, _once, _nextNodes, _specialExit,_vTurnSpeed,_hTurnSpeed,_time)
    self.nodeId = _nodeId;
    self.once = _once;
    self.nextNodes = _nextNodes;
    self.specialExit = _specialExit;
    self.vTurnSpeed = _vTurnSpeed;
    self.hTurnSpeed = _hTurnSpeed;
    self.time = _time;
    self.runTime = 0;
end

---执行技能节点
---@param _actionStateManager ActionStateManage 行为管理器
---@param _dt number 更新时间
---@param _netId number 单位id
---@param _skillModel SkillModel 技能配置
---@return boolean,table 是否执行结束,执行行为输出数据
function SkillTurnToTargetNode:DoAction(_actionStateManager, _dt, _netId, _skillModel)
    _actionStateManager:GetUnit():GetBattleRoom().battleUnitManager:UnitForceFaceTargetS2C(_netId,self.hTurnSpeed,self.vTurnSpeed);
    --print("SkillTurnToTargetNode DoAction",self.hTurnSpeed,self.vTurnSpeed, "frame", LOOPER.GetFrameId());
    return true, nil;
end

---检测进入的子节点
---@public
---@param _runTime number 节点持续时间
---@param _netId number 战斗单位id
---@param _battleId number 当前时间
---@return number[] 可进入的子节点Id
function SkillTurnToTargetNode:CheckNextNodes(_runTime, _netId, _battleId)
    ---@type BattleRoom
    local _battleRoom = GetBattleRoom(_battleId)
    local _now = TimeUtils.battleNow(_battleId)
    if _now - _runTime < self.time * 1000 then
        return {};
    end
    _battleRoom.battleUnitManager:UnitStopForceFaceTargetS2C(_netId);
    if self.nextNodes == nil then
        return nil;
    end

    for i, v in pairs(self.nextNodes) do
        if v.eventType == 4 then
            if not _runTime then
                return nil;
            end

            ---@type number
            local type = 0
            ---@type number
            local time = tonumber(v.eventParam)
            local strNum = string.find(v.eventParam,"_")
            if strNum ~= nil then
                ---@type number
                type = tonumber(string.sub(v.eventParam,1,1))
                ---@type number
                time = tonumber(string.sub(v.eventParam,3))
                if time > 0 and type > 0 then
                    --Todo 这边每次检索都会找一遍，待优化
                    ---@type BattleUnitBase
                    local playerUnit = _battleRoom.battleUnitManager:GetUnit(_netId)
                    if playerUnit then
                        ---@type BattleObjCom_Property
                        local com_prop = playerUnit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Property);
                        if type == 1 then
                            time = time / (1 + tonumber(com_prop:GetPropertyByName(BattlePropertyEnum.Speed_Add_Atk)));
                        elseif type == 2 then
                            time = time / (1 + tonumber(com_prop:GetPropertyByName(BattlePropertyEnum.Speed_Add_HodingAtk)));
                        end
                    else
                        if CheckLogLevel(LogLevel.log) then
                            LogTools.LogByLevel(LogLevel.log, "playerUnit","playerUnit为空",_netId)
                        end
                        return nil
                    end
                end
            end

            if _now - _runTime >= time * 1000 then
                return self:CheckSpecialExit(v.nextNodes);
            end
        else
            local compareParam = _battleRoom.battleLogicEventService:GenerateEvent(v.eventType,nil,nil,_netId):GenerateCompareParam(v.eventParam);
            if _battleRoom.battleLogicEventService:CheckEventTrigger(v.eventType, _netId,nil,compareParam) then
                return self:CheckSpecialExit(v.nextNodes);
            end
        end
    end
    return {};
end

---返回节点类型
---@public
---@return number 节点类型
function SkillTurnToTargetNode:GetType()
    return 63;
end

return SkillTurnToTargetNode;
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/2/22 11:12

require "Lib/class"
require "Battle/Logic/Skill/SkillBaseNode"

---@class SkillBarrageNode : SkillBaseNode 技能弹幕节点
---@field nodeId number 节点id
---@field nextNodes SkillNodeExitData[] 子节点
SkillBarrageNode = class(SkillBaseNode, 'SkillBarrageNode');

---@param _nodeId number 节点id
---@param _once boolean 只执行一次
---@param _nextNodes SkillNodeExitData[] 子节点
---@param _specialExit SkillNodeExitData[] 特殊出口
function SkillBarrageNode:ctor(_nodeId,_once, _nextNodes,_specialExit,_barrageId,_spreadParam,_elementId,_shootEffect,_consume,_buffIds)
    self.nodeId = _nodeId;
    self.once = _once;
    self.nextNodes = _nextNodes;
    self.specialExit = _specialExit;
    self.barrageId = _barrageId;
    self.spreadParam = _spreadParam;
    self.elementId = _elementId;
    self.shootEffect = _shootEffect;
    if _consume == "" then
        _consume = 0;
    end
    self.consume = _consume;
    self.buffIds = _buffIds;
end

---执行技能节点
---@param _actionStateManager ActionStateManage 行为管理器
---@param _dt number 更新时间
---@param _netId number 单位id
---@param _skillModel SkillModel 技能配置
---@param _currentSkillState SkillActionState 当前技能状态
---@return boolean,table 是否执行结束,执行行为输出数据
function SkillBarrageNode:DoAction(_actionStateManager, _dt, _netId,_skillModel,_currentSkillState)
    local _currentObj = _actionStateManager:GetUnit():GetCurrentHeroObject()
    if not _currentObj then return end
    local _battleRootm = _actionStateManager.battleRoom
    if not _battleRootm then return end
    local _inputDataSource = _battleRootm.inputDataSource
    if not _inputDataSource then return end

    local _skillId = _skillModel.skillId
    ---@type BattleObjCom_Weapon
    local weapon = _currentObj:GetComponent(BattleObjectComponentType.Weapon);
    ---@type BattleObjCom_Skill
    local skillComp = _currentObj:GetComponent(BattleObjectComponentType.Skill);
    ---@type BattleObjCom_Buff
    local buffComp = _currentObj:GetComponent(BattleObjectComponentType.Buff);
    ---@type BattleUnitCom_Buff
    local unitBuffComp = _actionStateManager:GetUnit():GetComponent(BattleUnitComponentType.Buff);

    if weapon and not weapon:CostUseSkill(_skillId, _inputDataSource:GetSkillFinalParam(self.consume, _skillId, skillComp:GetSkillLevel(_skillId))) then
        --LogTools.LogByLevel(LogLevel.log, "SkillBarrageNode:DoAction", "mana not enough",_skillId,self.consume);
        _actionStateManager:ExitSkill(true);
        _actionStateManager:Idle();
        return true,nil;
    end

    local skillType = 0;
    ---@type Skill
    local skillConfig = _battleRootm.inputDataSource:GetDict("Skill",_skillId);
    if skillConfig then
        skillType = skillConfig.skillType;
    end

    local isStockSkill = 2;
    ---@type BarrageBasicInfoData
    local _barrageBasicInfoData = _inputDataSource:GetDict("BarrageBasicInfoData", self.barrageId);
    if _barrageBasicInfoData.IsAccumulatedAttack then
        isStockSkill = 1;
    end
    ---创建弹幕的参数数据类
    local _barrageCreateParam = _battleRootm.ejectorManager:PopBarrageCreateParam()

    ---收集buff
    local _buffTemplateList = _barrageCreateParam.buffTemplatelist
    ---@type BattleBuffCastTemplate
    local BattleBuffTemplate = nil;
    if self.buffIds then
        for i, v in pairs(self.buffIds) do
            if v.type == BATTLE_BUFF_ATTACH_TYPE.BATTLE_BUFF_ATTACH_UNIT then
                BattleBuffTemplate = BattleBuffService:GenerateUnitCastBuffTemplate(v.buffId,_actionStateManager:GetUnit(),_currentObj:GetObjectId(),_skillId,nil)
            else
                BattleBuffTemplate = BattleBuffService:GenerateCastBuffTemplate(v.buffId,_currentObj,_skillId,nil);
            end
            BattleBuffTemplate.buffAttachType = v.type;
            table.insert(_buffTemplateList,BattleBuffTemplate);
        end
    end

    if buffComp then
        for i, v in pairs(buffComp:GetBarrageBattleBuff(_skillId,skillType,isStockSkill)) do
            table.insert(_buffTemplateList,BattleBuffService:GenerateCastBuffTemplate(v,_currentObj,_skillId,nil));
        end

        for buffId, v in pairs(buffComp.buffCom.barrageShootCountBuff) do
            table.insert(_buffTemplateList,BattleBuffService:GenerateCastBuffTemplate(buffId,_currentObj,_skillId,nil));
        end
        for buffId, v in pairs(buffComp.buffCom.barrageShootCountBuff) do
            buffComp:RemoveBarrageShootCountBattleBuff(nil,buffId,1);
        end
    end
    if unitBuffComp then
        for i, v in pairs(unitBuffComp:GetBarrageBattleBuff(_skillId,skillType,isStockSkill)) do
            table.insert(_buffTemplateList,BattleBuffService:GenerateCastBuffTemplate(v,_currentObj,_skillId,nil));
        end
        for buffId, v in pairs(unitBuffComp.buffCom.barrageShootCountBuff) do
            table.insert(_buffTemplateList,BattleBuffService:GenerateCastBuffTemplate(buffId,_currentObj,_skillId,nil));
        end
        for buffId, v in pairs(unitBuffComp.buffCom.barrageShootCountBuff) do
            buffComp:RemoveBarrageShootCountBattleBuff(nil,buffId,1);
        end
    end

    local _trigEvent = true

    local elementId = skillComp:GetSkillElement(skillType);
    if not elementId then
        elementId = self.elementId;
    end

    _barrageCreateParam.castObject = _currentObj
    _barrageCreateParam.heroSkillId = _skillId
    _barrageCreateParam.originalHeroSkillId = _skillId
    _barrageCreateParam.skillNodeId = self.nodeId
    _barrageCreateParam.heroSkillOnlyId = _currentSkillState.skillInstId;
    _barrageCreateParam.heroSkillLevel = skillComp:GetSkillLevel(_skillId);
    _barrageCreateParam.barrageSkillId = _inputDataSource:GetSkillFinalParam(self.barrageId,_skillId,skillComp:GetSkillLevel(_skillId))
    _barrageCreateParam.spreadParam = _inputDataSource:GetSkillFinalParam(self.spreadParam,_skillId,skillComp:GetSkillLevel(_skillId))
    _barrageCreateParam.elementStrenthId = _inputDataSource:GetSkillFinalParam(elementId,_skillId,skillComp:GetSkillLevel(_skillId))
    _barrageCreateParam.timeStamp = TimeUtils.battleNow(_actionStateManager.battleId)
    _barrageCreateParam.trigEvent = _trigEvent
    _battleRootm.ejectorManager:CreateBarrageEjector(_barrageCreateParam, nil, nil)
    _battleRootm.ejectorManager:PushBarrageCreateParam(_barrageCreateParam)

    for i, v in pairs(_actionStateManager:GetUnit():GetAllObjectDic()) do
        ---@type BattleObjCom_Skill
        local tempCom = v:GetComponent(BattleObjectComponentType.Skill);
        if tempCom then
            tempCom:OnCreateBarrage(_skillModel.skillId,self.barrageId,_actionStateManager:GetUnit():GetCurrentHeroObjectId());
        end
    end
    local doCurrentNode = {};
    doCurrentNode.nodeId = self.nodeId;
    return true,doCurrentNode;
end

---返回节点类型
---@public
---@return number 节点类型
function SkillBarrageNode:GetType()
    return 5;
end

return SkillBarrageNode;
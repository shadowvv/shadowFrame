---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/2/17 10:54

require "Lib/class"
require "Battle/Logic/Skill/SkillNodeExitData"
require "Battle/Utils/LuaTool"

---@class SkillBaseNode : table
---@field nodeId number 节点id
---@param _once boolean 只执行一次
---@field nextNodes SkillNodeExitData[] 子节点
SkillBaseNode = class(nil, 'SkillBaseNode');

---@param _nodeId number 节点id
---@param _nextNodes SkillNodeExitData[] 子节点
---@param _specialExit SkillNodeExitData[] 特殊出口
function SkillBaseNode:ctor(_nodeId,_once,_nextNodes,_specialExit)
    self.nodeId = _nodeId;
    self.once = _once;
    self.nextNodes = _nextNodes;
    self.specialExit = _specialExit;
end

---检测进入的子节点
---@public
---@param _runTime number 节点持续时间
---@param _netId number 战斗单位id
---@param _battleId number 当前时间
---@return number[] 可进入的子节点Id
function SkillBaseNode:CheckNextNodes(_runTime, _netId, _battleId)
    if self.nextNodes == nil then
        return nil;
    end

    local _now = TimeUtils.battleNow(_battleId)
    ---@type BattleRoom
    local _battleRoom = GetBattleRoom(_battleId)
    for i, v in pairs(self.nextNodes) do
        if v.eventType == 4 then
            if not _runTime then
                return nil;
            end
            
            ---@type number
            local type = 0
            ---@type number
            local time = tonumber(v.eventParam)
            local strNum = string.find(v.eventParam,"_")
            if strNum ~= nil then
                ---@type number
                type = tonumber(string.sub(v.eventParam,1,1))
                ---@type number
                time = tonumber(string.sub(v.eventParam,3))
                if time > 0 and type > 0 then
                    --Todo 这边每次检索都会找一遍，待优化
                    ---@type BattleUnitBase
                    local playerUnit = _battleRoom.battleUnitManager:GetUnit(_netId)
                    if playerUnit then
                        ---@type BattleObjCom_Property
                        local com_prop = playerUnit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Property);
                        if type == 1 then
                            time = time / (1 + tonumber(com_prop:GetPropertyByName(BattlePropertyEnum.Speed_Add_Atk)));
                        elseif type == 2 then
                            time = time / (1 + tonumber(com_prop:GetPropertyByName(BattlePropertyEnum.Speed_Add_HodingAtk)));
                        end
                    else
                        if CheckLogLevel(LogLevel.log) then
                            LogTools.LogByLevel(LogLevel.log, "playerUnit","playerUnit为空",_netId)
                        end
                        return nil
                    end
                end
            end

            if _now - _runTime >= time * 1000 then
               return self:CheckSpecialExit(v.nextNodes);
            end
        else
            local compareParam = _battleRoom.battleLogicEventService:GenerateEvent(v.eventType,nil,nil,_netId):GenerateCompareParam(v.eventParam);
            if _battleRoom.battleLogicEventService:CheckEventTrigger(v.eventType, _netId,nil,compareParam) then
                return self:CheckSpecialExit(v.nextNodes);
            end
        end
    end
    return {};
end

---检测特殊出口
---@public
---@param _commonExitNodes number[] 一般可进入的子节点Id
---@return number[] 最终可进入的子节点Id
function SkillBaseNode:CheckSpecialExit(_commonExitNodes)
    if self.specialExit == nil then
        return _commonExitNodes;
    end
    for i, v in pairs(self.specialExit) do
        if v.eventTrigger then
            v.eventTrigger = false;
            return v.nextNodes;
        end
    end
    return _commonExitNodes;
end

---检测特殊出口事件
---@public
---@param _runTime number 节点持续时间
---@param _netId number 战斗单位id
---@param _battleId number 战斗id
---@param _isSkillCastNodeOver boolean 战斗前摇是否结束
function SkillBaseNode:CheckSpecialExitEvent(_runTime,_netId, _battleId,_isSkillCastNodeOver)
    if self.specialExit == nil then
        return;
    end
    for i, v in pairs(self.specialExit) do
        if v.eventType ~= 0 then
            if v.eventTrigger == false then
                if v.eventType == 4 then
                    if _runTime and TimeUtils.battleNow(_battleId) - _runTime >= tonumber(v.eventParam)*1000 then
                        v.eventTrigger = true;
                    end
                elseif v.eventType == 5 and _isSkillCastNodeOver then
                        v.eventTrigger = true;
                else
                    local battleRoom = GetBattleRoom(_battleId)
                    local compareParam = battleRoom.battleLogicEventService:GenerateEvent(v.eventType,nil,nil,_netId):GenerateCompareParam(v.eventParam);
                    if battleRoom.battleLogicEventService:CheckEventTrigger(v.eventType, _netId,nil,compareParam) then
                        v.eventTrigger = true;
                    end
                end
            end
        end
    end
end

---执行技能节点
---@param _actionStateManager ActionStateManage 行为管理器
---@param _dt number 更新时间
---@param _netId number 单位id
---@param _skillModel SkillModel 技能配置
---@param _currentSkillState SkillActionState 当前技能状态
---@return boolean,table 是否执行结束,执行行为输出数据
function SkillBaseNode:DoAction(_actionStateManager, _dt, _netId,_skillModel,_currentSkillState)
    return true,nil;
end

---退出节点
---@public
---@param _actionStateManager ActionStateManage 行为管理器
function SkillBaseNode:ExitNode(_actionStateManager)

end

---始终检测节点结束
function SkillBaseNode:AlwaysCheckOver()
    return false;
end

return SkillBaseNode;
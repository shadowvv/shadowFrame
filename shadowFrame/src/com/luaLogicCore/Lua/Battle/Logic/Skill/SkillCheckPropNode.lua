---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/11/8 17:42

require "Lib/class"
require "Battle/Logic/Skill/SkillBaseNode"

---@class SkillCheckPropNode : SkillBaseNode
---@field nodeId number 节点id
---@field nextNodes SkillNodeExitData[] 子节点
---@field propId number 属性ID
---@field compareType number 比较方式
---@field compareValue number 比较值
---@field reachNode SkillNodeExitData[] 满足跳转节点
---@field notReachNode SkillNodeExitData[] 不满足跳转节点
SkillCheckPropNode = class(SkillBaseNode, 'SkillCheckPropNode');

---@param _nodeId number 节点id
---@param _once boolean 只执行一次
---@param _nextNodes SkillNodeExitData[] 子节点
---@param _specialExit SkillNodeExitData[] 特殊出口
---@param _propId number 属性ID
---@param _compareType number 比较方式
---@param _compareValue number 比较值
---@param _reachNode SkillNodeExitData[] 满足跳转节点
---@param _notReachNode SkillNodeExitData[] 不满足跳转节点
function SkillCheckPropNode:ctor(_nodeId, _once, _nextNodes, _specialExit,_propId,_compareType,_compareValue,_reachNode,_notReachNode)
    self.nodeId = _nodeId;
    self.once = _once;
    self.nextNodes = _nextNodes;
    self.specialExit = _specialExit;
    self.propId = _propId;
    self.compareType = _compareType
    self.compareValue = _compareValue
    self.reachNode = _reachNode
    self.notReachNode = _notReachNode
    --self.propSwitchData = _propSwitchData;
end

---执行技能节点
---@param _actionStateManager ActionStateManage 行为管理器
---@param _dt number 更新时间
---@param _netId number 单位id
---@param _skillModel SkillModel 技能配置
---@return boolean,table 是否执行结束,执行行为输出数据
function SkillCheckPropNode:DoAction(_actionStateManager, _dt, _netId, _skillModel)
    self.currentObject = _actionStateManager:GetUnit():GetCurrentHeroObject();
    return true, nil;
end

---检测进入的子节点
---@public
---@param _runTime number 节点持续时间
---@param _netId number 战斗单位id
---@return number[] 可进入的子节点Id
function SkillCheckPropNode:CheckNextNodes(_runTime,_netId)
    local value = 0;
    local _propName = ProtoEnumTool.GetPropertyKey(self.propId)
    ---@type BattleUnitCom_UnitProp
    local _unitPropCom = self.currentObject:GetParentUnit():GetComponent(BattleUnitComponentType.UnitProp)
    if _unitPropCom and _unitPropCom:CheckUnitProp(_propName) then
        value = _unitPropCom:GetPropByName(_propName);
    else
        ---@type BattleObjCom_Property
        local componentProperty = self.currentObject:GetComponent(BattleObjectComponentType.Property);
        value = componentProperty:GetPropertyById(self.propId);
    end

    local nextNode = {}
    if self:__Check(self.compareValue,self.compareType,value) then
        if self.reachNode < 0 then
            return nil
        end
        table.insert(nextNode,self.reachNode)
        return nextNode
    end
    if self.notReachNode < 0 then
        return nil
    end
    table.insert(nextNode,self.notReachNode)
    return nextNode
end

---@private
function SkillCheckPropNode:__Check(_compareValue, _compareType, _getValue)
    if _compareType == LuaBehav_Define_CompareType.Equal then
        return _getValue == _compareValue
    elseif _compareType == LuaBehav_Define_CompareType.UnEqual then
        return _getValue ~= _compareValue
    elseif _compareType == LuaBehav_Define_CompareType.Larger then
        return _getValue > _compareValue
    elseif _compareType == LuaBehav_Define_CompareType.Smaller then
        return _getValue < _compareValue
    elseif _compareType == LuaBehav_Define_CompareType.LargerEqual then
        return _getValue >= _compareValue
    elseif _compareType == LuaBehav_Define_CompareType.SmallerEqual then
        return _getValue <= _compareValue
    end
    return false
end

---返回节点类型
---@public
---@return number 节点类型
function SkillCheckPropNode:GetType()
    return 50;
end

return SkillCheckPropNode;
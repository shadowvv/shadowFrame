---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/4/14 12:04

require "Lib/class"
require "Battle/Logic/Skill/SkillBaseNode"

---@class SkillLoopEndNode : SkillBaseNode 技能循环开始节点
---@field nodeId number 节点id
---@field nextNodes SkillNodeExitData[] 子节点
SkillLoopEndNode = class(SkillBaseNode, 'SkillLoopEndNode');

---@param _nodeId number 节点id
---@param _once boolean 只执行一次
---@param _nextNodes SkillNodeExitData[] 子节点
---@param _specialExit SkillNodeExitData[] 特殊出口
function SkillLoopEndNode:ctor(_nodeId,_once, _nextNodes,_specialExit,_loopId,_loopTime,_leaveLoopEvent)
    self.nodeId = _nodeId;
    self.once = _once;
    self.nextNodes = _nextNodes;
    self.specialExit = _specialExit;
    self.loopId  = _loopId;
    self.loopTime = _loopTime;
    self.leaveLoopEvent = _leaveLoopEvent;
    self.currentLoopTime = 0;
    self.loopStartNodeId = 0;
end

---执行技能节点
---@param _actionStateManager ActionStateManage 行为管理器
---@param _dt number 更新时间
---@param _netId number 单位id
---@param _skillModel SkillModel 技能配置
---@param _currentSkillState SkillActionState 当前技能状态
---@return boolean,table 是否执行结束,执行行为输出数据
function SkillLoopEndNode:DoAction(_actionStateManager, _dt, _netId,_skillModel,_currentSkillState)
    self.currentLoopTime = _currentSkillState.loopInfos[self.loopId];
    self.loopStartNodeId = _skillModel.loopStartNodeIds[self.loopId];
    return true, nil;
end

---检测进入的子节点
---@public
---@param _runTime number 节点持续时间
---@param _netId number 战斗单位id
---@param _battleId number 战斗id
---@return number[] 可进入的子节点Id
function SkillLoopEndNode:CheckNextNodes(_runTime,_netId, _battleId)
    
    if self.currentLoopTime < self.loopTime and not self:CheckEndEvent(_runTime,_netId,_battleId) then
        local loopStartNodes = {};
        table.insert(loopStartNodes,self.loopStartNodeId);
        return self:CheckSpecialExit(loopStartNodes);
    end

    if self.nextNodes == nil then
        return nil;
    end
    for i, v in pairs(self.nextNodes) do
        if v.eventType == 4 then
            if not _runTime then
                return nil;
            end

            ---@type number
            local type = 0
            ---@type number
            local time = tonumber(v.eventParam)
            local strNum = string.find(v.eventParam,"_")
            if strNum ~= nil then
                ---@type number
                type = tonumber(string.sub(v.eventParam,1,1))
                ---@type number
                time = tonumber(string.sub(v.eventParam,3))
            end

            if TimeUtils.battleNow(_battleId) - _runTime >= time then
                return self:CheckSpecialExit(v.nextNodes);
            end
        else
            local battleRoom = GetBattleRoom(_battleId)
            local compareParam = battleRoom.battleLogicEventService:GenerateEvent(v.eventType,nil,nil,_netId):GenerateCompareParam(v.eventParam);
            if battleRoom.battleLogicEventService:CheckEventTrigger(v.eventType, _netId,nil,compareParam) then
                return self:CheckSpecialExit(v.nextNodes);
            end
        end
    end
    return {};
end

---检测循环继续事件
---@public
---@param _runTime number 节点持续时间
---@param _netId number 战斗单位id
---@param _now number 战斗id
---@return boolean 循环继续
function SkillLoopEndNode:CheckEndEvent(_runTime,_netId,_battleId)
    if self.leaveLoopEvent then
        if self.leaveLoopEvent.type == 4 then
            if not _runTime then
                return false;
            end
            if self.leaveLoopEvent.param == nil or self.leaveLoopEvent.param == "" then
                return false;
            end
            if TimeUtils.battleNow(_battleId) - _runTime >= tonumber(self.leaveLoopEvent.param) then
                return true;
            end
        else
            local battleRoom = GetBattleRoom(_battleId)
            local compareParam = battleRoom.battleLogicEventService:GenerateEvent(self.leaveLoopEvent.type,nil,nil,_netId):GenerateCompareParam(self.leaveLoopEvent.param);
            if battleRoom.battleLogicEventService:CheckEventTrigger(self.leaveLoopEvent.type, _netId,nil,compareParam) then
                return true;
            end
        end
    end
    return false;
end

---返回节点类型
---@public
---@return number 节点类型
function SkillLoopEndNode:GetType()
    return 32;
end

return SkillLoopEndNode;
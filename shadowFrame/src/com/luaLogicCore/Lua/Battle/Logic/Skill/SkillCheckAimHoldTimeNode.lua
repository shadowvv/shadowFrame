---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/8/18 15:24

require "Lib/class"
require "Battle/Logic/Skill/SkillBaseNode"

---@class SkillCheckAimHoldTimeNode : SkillBaseNode
---@field nodeId number 节点id
---@field nextNodes SkillNodeExitData[] 子节点
---@field currentObject BattleObjectBase
SkillCheckAimHoldTimeNode = class(SkillBaseNode, 'SkillCheckAimHoldTimeNode');

---@param _nodeId number 节点id
---@param _once boolean 只执行一次
---@param _nextNodes SkillNodeExitData[] 子节点
---@param _specialExit SkillNodeExitData[] 特殊出口
function SkillCheckAimHoldTimeNode:ctor(_nodeId, _once, _nextNodes, _specialExit,_holdTime,_matchNodeId,_otherNodeId)
    self.nodeId = _nodeId;
    self.once = _once;
    self.nextNodes = _nextNodes;
    self.specialExit = _specialExit;
    self.holdTime = _holdTime;
    self.matchNodeId = _matchNodeId;
    self.otherNodeId = _otherNodeId;
end

---执行技能节点
---@param _actionStateManager ActionStateManage 行为管理器
---@param _dt number 更新时间
---@param _netId number 单位id
---@param _skillModel SkillModel 技能配置
---@return boolean,table 是否执行结束,执行行为输出数据
function SkillCheckAimHoldTimeNode:DoAction(_actionStateManager, _dt, _netId, _skillModel)
    self.currentObject = _actionStateManager:GetUnit():GetCurrentHeroObject();
    self.skillId = _skillModel.skillId;
    return true, nil;
end

---检测进入的子节点
---@public
---@param _runTime number 节点持续时间
---@param _netId number 战斗单位id
---@return number[] 可进入的子节点Id
function SkillCheckAimHoldTimeNode:CheckNextNodes(_runTime,_netId)
    local nextNode = {};
    ---@type BattleObjCom_Skill
    local componentSkill = self.currentObject:GetComponent(BattleObjectComponentType.Skill);
    local cdTime = self.currentObject:GetBattleRoom().inputDataSource:GetSkillFinalParam(self.holdTime,self.skillId,componentSkill:GetSkillLevel(self.skillId));
    ---@type BattleObjCom_PlayMode
    local playModeComp = self.currentObject:GetComponent(BattleObjectComponentType.PlayMode);
    if playModeComp and playModeComp.currentMode == BATTLE_OBJECT_PLAY_MODE_TYPE.aim and playModeComp.aimHoldTime > self.holdTime then
        table.insert(nextNode,self.matchNodeId)
    else
        table.insert(nextNode,self.otherNodeId)
    end
    self.currentObject = nil;
    self.skillId = 0;
    return nextNode;
end

---返回节点类型
---@public
---@return number 节点类型
function SkillCheckAimHoldTimeNode:GetType()
    return 40;
end

return SkillCheckAimHoldTimeNode;
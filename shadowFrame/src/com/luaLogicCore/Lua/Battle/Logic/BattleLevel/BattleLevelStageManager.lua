---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/01/13 11:04
--- Describe: 关卡逻辑阶段管理
---

require "Battle/Logic/BattleLevel/BattleLevelStageBase"

require "Battle/Logic/BattleLevel/BattleLevelStage/BattleLevelStage_Loading"
require "Battle/Logic/BattleLevel/BattleLevelStage/BattleLevelStage_PreBattlePlot"
require "Battle/Logic/BattleLevel/BattleLevelStage/BattleLevelStage_ShowBattleStart"
require "Battle/Logic/BattleLevel/BattleLevelStage/BattleLevelStage_RunBattle"
require "Battle/Logic/BattleLevel/BattleLevelStage/BattleLevelStage_ShowBattleEnd"
require "Battle/Logic/BattleLevel/BattleLevelStage/BattleLevelStage_PreSettlePlot"
require "Battle/Logic/BattleLevel/BattleLevelStage/BattleLevelStage_ShowBattleSettle"
require "Battle/Logic/BattleLevel/BattleLevelStage/BattleLevelStage_AfterSettlePlot"
require "Battle/Logic/BattleLevel/BattleLevelStage/BattleLevelStage_UnLoaded"


---@class BattleLevelStageManager : table
BattleLevelStageManager = class(nil, "BattleLevelStageManager")
function BattleLevelStageManager:ctor(_data) end

function BattleLevelStageManager:Init(_levelManager)
	self:__Reset(_levelManager)
	self:__InitStageTable()
	
	self:GoToStage(BattleLevel_Define_StageEnum.None)
end

function BattleLevelStageManager:__Reset(_levelManager)
	---@type BattleLevelManager
	self.levelManager = _levelManager
	---@type number
	self.curStageEnum = nil
	---@type BattleLevelStageBase
	self.curStage = nil
	
	if not self.stageTable then return end
	for _, _stage in pairs(self.stageTable) do
		_stage:Clear()
	end
	self.stageTable = nil
end

-- 
function BattleLevelStageManager:__InitStageTable()
	local _stageTable = {}
	
	_stageTable[BattleLevel_Define_StageEnum.Loading] = BattleLevelStage_Loading.New()
	_stageTable[BattleLevel_Define_StageEnum.PreBattlePlot] = BattleLevelStage_PreBattlePlot.New()
	_stageTable[BattleLevel_Define_StageEnum.ShowBattleStart] = BattleLevelStage_ShowBattleStart.New()
	_stageTable[BattleLevel_Define_StageEnum.RunBattle] = BattleLevelStage_RunBattle.New()
	_stageTable[BattleLevel_Define_StageEnum.ShowBattleEnd] = BattleLevelStage_ShowBattleEnd.New()
	_stageTable[BattleLevel_Define_StageEnum.PreSettlePlot] = BattleLevelStage_PreSettlePlot.New()
	_stageTable[BattleLevel_Define_StageEnum.ShowBattleSettle] = BattleLevelStage_ShowBattleSettle.New()
	_stageTable[BattleLevel_Define_StageEnum.AfterSettlePlot] = BattleLevelStage_AfterSettlePlot.New()
	_stageTable[BattleLevel_Define_StageEnum.BattleUnloaded] = BattleLevelStage_UnLoaded.New()

	for _, _stage in pairs(_stageTable) do
		_stage:Init(self)
	end
	
	---@type BattleLevelStageBase[]
	self.stageTable = _stageTable
end

function BattleLevelStageManager:__LeftStage()
	if not self.curStage then return end
	self.curStage:OnExit()
	self.curStage = nil
end

function BattleLevelStageManager:__EnterStage(_stageEnum)
	local _stage = self.stageTable[_stageEnum]
	self.curStageEnum = _stageEnum
	self.curStage = _stage
	if not _stage then return end
	_stage:OnEnter()
end

function BattleLevelStageManager:GoToStage(_stageEnum)
	if _stageEnum < 0 then return end
	if _stageEnum > BattleLevel_Define_StageEnum.Max() then return end
	
	self:__LeftStage()
	self:__EnterStage(_stageEnum)
end

function BattleLevelStageManager:GoNextStage()
	LogTools.LogByLevel(BattleLevel_Define.LogLevel, "BattleLevel", "BattleLevelStageManager", "GoNextStage start", "self.curStageEnum", self.curStageEnum)
	local _stage = self.curStageEnum
	if _stage == BattleLevel_Define_StageEnum.Max() then return end
	
	self:__LeftStage()
	self:__EnterStage(_stage + 1)
	LogTools.LogByLevel(BattleLevel_Define.LogLevel, "BattleLevel", "BattleLevelStageManager", "GoNextStage end")
end

function BattleLevelStageManager:OnUpdate(_deltaTime)
	if not self.curStage then return end
	self.curStage:OnUpdate(_deltaTime)
end

function BattleLevelStageManager:Clear()
	self:__Reset()
	self.playerIdTab = {}
end
return BattleLevelStageManager
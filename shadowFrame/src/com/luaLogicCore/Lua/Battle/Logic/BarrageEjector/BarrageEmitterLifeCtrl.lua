---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/10/28 17:05
--- Describe: 弹幕发射器生命周期管理
---

---发射器当前类型
---@class BarrageEmitterState : table
BarrageEmitterState = {
	WaitCreate = 1,   --等待实际创建
	WaitEnd = 2,      --等待结束
	Stopped = 3,      --停止
	WaitClear = 4,    --已结束等待清理
}

---发射器移除类型
---@class BarrageRemoveType : table
BarrageRemoveType = {
	DeadRemoveAll = 0,         --施放者死亡时干掉所有
	DeadDontRemove = 1,        --施放者死亡时不处理
	DeadStop = 2,              --施放者死亡时停止继续发射
	ParentDeadRemoveAll = 3,   --父物体死亡移除所有
	ParentDeadStop = 4,        --父物体死亡停止继续发射
}

---技能被打断时移除类型
BarrageBreakRemoveType = {
	Stop = 1,                 --停止发射器
	Destroy = 2,              --销毁发射器
	None = 3,                 --不处理
}
------------------------------------------------------------------------------------------------------------------------
---@class BarrageEmitterLifeCtrl : table
BarrageEmitterLifeCtrl = class(nil, "BarrageEmitterLifeCtrl")
function BarrageEmitterLifeCtrl:ctor(_data) end

---@public
---@param _barrageEmitterData BarrageEmitterData
function BarrageEmitterLifeCtrl:Init(_barrageEmitterData)
	--LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterLifeCtrl:Init start")
	---@private
	---@type BarrageEmitterData
	self.__emitterData = _barrageEmitterData
	---移除类型，目前只能配置一个，将来可能会有配置多个的需求
	---@private
	---@type BarrageRemoveType[]
	self.__removeTypes = {}
	table.insert(self.__removeTypes, _barrageEmitterData:GetBarrageBasicInfoConfig().RemoveType)
	---@private
	self.__breakRemoveType = _barrageEmitterData:GetBarrageBasicInfoConfig().BreakRemoveType or BarrageBreakRemoveType.Stop
	---@private
	---@type number
	self.__delayTime = _barrageEmitterData:GetBarrageEjectorInfoConfig().DelayTime + _barrageEmitterData:GetBarrageEjectorBasicInfoConfig().DelayTime
	---@private
	---@type BarrageEmitterState
	self.__state = BarrageEmitterState.WaitCreate
	---@private
	---@type boolean
	self.__forceEnd = false
	---@private
	---@type boolean
	self.__skillBreak = false
	---@private
	self.__parentDead = false
	---@private
	self.__battleId = _barrageEmitterData:GetBarrageEjectorManager().battleRoom.battleId
	---@private
	self.__timeStart = _barrageEmitterData.timeStamp
	---@private
	self.__timeTotal = self.__delayTime * 1000
	--LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterLifeCtrl:Init end", "self.__timeStart", self.__timeStart, "self.__timeTotal", self.__timeTotal)
end

---@public
function BarrageEmitterLifeCtrl:Clear()
	self.__emitterData = nil
	self.__removeTypes = nil
	self.__breakRemoveType = nil
	self.__delayTime = nil
	self.__state = nil
	self.__forceEnd = nil
	self.__skillBreak = nil
	self.__parentDead = nil
	self.__battleId = nil
	self.__timeStart = nil
	self.__timeTotal = nil
end

---@public
function BarrageEmitterLifeCtrl:OnUpdate(_deltaTime)
	--LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterLifeCtrl:OnUpdate start")
	if self:CheckState(BarrageEmitterState.WaitClear) then return end
	
	---检查强制结束（暂时没有强制停止）
	if self.__forceEnd then
		--LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterLifeCtrl:OnUpdate forceEnd")
		if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterLifeCtrl:checkForceEnd", "self.__netId", self.__emitterData.__netId, "heroSkillId", self.__emitterData:GetHeroSkillId(), "self.__index", self.__emitterData:GetIndex())
		end
		self:__DoEnd()
		return
	end

	if self:CheckState(BarrageEmitterState.WaitEnd) then
		if self:__CheckSkillBreak() then
			return
		end
	end

	---检查死亡移除
	for _, _removeType in pairs(self.__removeTypes) do
		if self:__checkRemoveType(_removeType) then
			return
		end
	end
	
	---检查计时
	self:__CheckTime()
end

---检查技能打断处理
---@private
function BarrageEmitterLifeCtrl:__CheckSkillBreak()
	if not self.__skillBreak then return false end

	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterData:__CheckSkillBreak", "self.__netId", self.__netId, "heroSkillId", self.__emitterData:GetHeroSkillId(), "self.__index", self.__index, "self.__breakRemoveType", LogTools.GetEnumTableDesc(BarrageBreakRemoveType, self.__breakRemoveType))
	end
	if self.__breakRemoveType == BarrageBreakRemoveType.Stop then
		self:__DoStop()
	elseif self.__breakRemoveType == BarrageBreakRemoveType.Destroy then
		self:__DoEnd()
	else
		return false
	end
end

---@private
---@return boolean
function BarrageEmitterLifeCtrl:__checkRemoveType(_removeType)
	if _removeType == BarrageRemoveType.DeadRemoveAll then
		--LogTools.LogByLevel(LogLevel.log,"CheckBarrage", "BarrageEmitter","__checkRemoveEvent", "trig DeadRemoveAll", "_netId", _netId, "emitterId", self.__onlyId, "is server", IsServer())
		if self.__emitterData:GetCastObj():CheckDead() then
			self:__DoEnd()
			return true
		end
	elseif _removeType == BarrageRemoveType.DeadStop then
		--LogTools.LogByLevel(LogLevel.log,"CheckBarrage", "BarrageEmitter","__checkRemoveEvent", "trig DeadStop", "_netId", _netId, "emitterId", self.__onlyId)
		if self.__emitterData:GetCastObj():CheckDead() then
			self:__DoStop()
			return true
		end
	elseif _removeType == BarrageRemoveType.ParentDeadRemoveAll then
		if self.__parentDead then
			self:__DoEnd()
			return true
		end
	elseif _removeType == BarrageRemoveType.ParentDeadStop then
		if self.__parentDead then
			self:__DoStop()
			return true
		end
	end

	return false
end

---检查计时
---@private
function BarrageEmitterLifeCtrl:__CheckTime()
	--LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterLifeCtrl:__CheckTime start", "self.__timeStart", self.__timeStart, "TimeUtils.battleNow(self.__battleId) - self.__timeStart", TimeUtils.battleNow(self.__battleId) - self.__timeStart, "self.__timeTotal", self.__timeTotal)
	if TimeUtils.battleNow(self.__battleId) - self.__timeStart >= self.__timeTotal then
		--LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterLifeCtrl:__CheckTime 1", "curState", LogTools.GetEnumTableDesc(BarrageEmitterState, self.__state))
		if self:CheckState(BarrageEmitterState.WaitCreate) then
			--LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterLifeCtrl:__CheckTime 2")
			self:__DoCreate()
		elseif self:CheckState(BarrageEmitterState.WaitEnd) or self:CheckState(BarrageEmitterState.Stopped) then
			--LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterLifeCtrl:__CheckTime 3")
			self:__DoEnd()
		end
	end
	--LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterLifeCtrl:__CheckTime end")
end
------------------------------------------------------------------------------------------------------------------------
---创建
---@private
function BarrageEmitterLifeCtrl:__DoCreate()
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterLifeCtrl:__DoCreate start")
	end
	
	self.__state = BarrageEmitterState.WaitEnd
	self.__timeStart = TimeUtils.battleNow(self.__battleId)
	self.__timeTotal = self.__emitterData:GetBarrageEjectorBasicInfoConfig().MaxTime * 1000
	self.__emitterData:OnCreate()

	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterLifeCtrl:__DoCreate end", "self.__timeStart", self.__timeStart, "self.__timeTotal", self.__timeTotal)
	end
end

---停止
---@private
function BarrageEmitterLifeCtrl:__DoStop()
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterLifeCtrl:__DoStop start")
	end
	
	local _created = self:CheckState(BarrageEmitterState.WaitEnd)
	self.__state = BarrageEmitterState.Stopped
	if not _created then return end
	self.__emitterData:OnStop()

	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterLifeCtrl:__DoStop end")
	end
end

---销毁
---@private
function BarrageEmitterLifeCtrl:__DoEnd()
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterLifeCtrl:__DoEnd start")
	end
	
	local _created = self:CheckState(BarrageEmitterState.WaitEnd)
	self.__state = BarrageEmitterState.WaitClear
	if not _created then return end
	self.__emitterData:OnEnd()

	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterLifeCtrl:__DoEnd end")
	end
end

------------------------------------------------------------------------------------------------------------------------
---@public
---@param _barrageEmitterState BarrageEmitterState
---@return boolean
function BarrageEmitterLifeCtrl:CheckState(_barrageEmitterState)
	return self.__state == _barrageEmitterState
end

---@public
function BarrageEmitterLifeCtrl:SetForceDead()
	self.__forceEnd = true
end

---@public
function BarrageEmitterLifeCtrl:SetSkillBreak()
	self.__skillBreak = true
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterLifeCtrl:SetSkillBreak", "self.__netId", self.__netId, "heroSkillId", self.__emitterData:GetHeroSkillId(), "self.__index", self.__index, "self.__skillBreak", self.__skillBreak)
	end
end

---@public
function BarrageEmitterLifeCtrl:SetParentDead()
	self.__parentDead = true
end
return BarrageEmitterLifeCtrl
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/03/11 17:17
--- Describe: 弹幕发射器管理
---

require "Battle/Logic/BarrageEjector/BarrageEjectorCreateParam"
require "Battle/Logic/BarrageEjector/BarrageEmitterData"

---@class BarrageEjectorManager : table
BarrageEjectorManager = class(nil, "BarrageEjectorManager")
require "Battle/Logic/BarrageEjector/BarrageEjectorInterface"

function BarrageEjectorManager:ctor(_battleId)
	self.battleId = _battleId
	self.battleRoom = GetBattleRoom(self.battleId)
end

---@public
function BarrageEjectorManager:Init()
	---发射器唯一ID计数
	---@private
	self.__emitterIndexCnt = 0
	---存活的发射器字典
	---@private
	---@type BarrageEmitterData[]
	self.__emitterDataDic = {}

	---@private
	---@type Utils_BasePool
	self.__createParamPool = Utils_BasePool.New()
	self.__createParamPool:Init(BarrageEjectorCreateParam, 10, 5)
	
	---@private
	---@type Utils_BasePool
	self.__emitterDataPool = Utils_BasePool.New()
	self.__emitterDataPool:Init(BarrageEmitterData, 100, 20)
	
	---@private
	self.__bulletHurtRecord = {}
	---@private
	self.__bulletEventRecord = {}
end

---创建弹幕发射器
---@public
---@param _barrageCreateParam BarrageEjectorCreateParam
---@param _snapShotData SnapShotData 创建者的属性快照，可以为空
---@param _parentEmitterData BarrageEmitterData 父emitterData
function BarrageEjectorManager:CreateBarrageEjector(_barrageCreateParam, _snapShotData, _parentEmitterData)
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEjectorManager:CreateBarrageEjector start")
	end
	
	local _castObj = _barrageCreateParam.castObject
	if not _castObj or _castObj:CheckDead() then return end

	local _inputDataSource = self.battleRoom.inputDataSource

	---弹幕技能配置
	---@type BarrageBasicInfoData
	local _barrageBasicInfoData = _inputDataSource:GetDict("BarrageBasicInfoData", _barrageCreateParam.barrageSkillId);
	----LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEjectorService", "CreateBarrageEjector", "_barrageBasicInfoData.EjectorIdList", dumpTableEx(_barrageBasicInfoData.EjectorIdList))

	for _, ejectorId in pairs(_barrageBasicInfoData.EjectorIdList) do
		---发射器组配置
		---@type BarrageEjectorInfoData
		local barrageEjectorInfoData = _inputDataSource:GetDict("BarrageEjectorInfoData", ejectorId);
		----LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEjectorService", "CreateBarrageEjector", "barrageEjectorInfoData.EjectorBasicInfos", dumpTableEx(barrageEjectorInfoData.EjectorBasicInfos))
		---单个发射器
		for _, _ejectorBasicInfo in pairs(barrageEjectorInfoData.EjectorBasicInfos) do
			---@type BarrageEjectorTemplate
			local barrageEjectorTemplate = _inputDataSource:GetDict("BarrageEjectorTemplate", _ejectorBasicInfo.id);
			if barrageEjectorTemplate then
				---@type BarrageEjectorStyle
				local barrageEjectorStyle = _inputDataSource:GetDict("BarrageEjectorStyle", barrageEjectorTemplate.EjectorStyleId);
				---@type BarrageBulletData
				local barrageBulletData = _inputDataSource:GetDict("BarrageBulletData", barrageEjectorTemplate.BulletId);

				local _barrageEmitterData = self:__PopBarrageEmitterData()
				_barrageEmitterData:Init(self, self:__CalcEmitterIndex(), _barrageCreateParam, _snapShotData, _barrageBasicInfoData, barrageEjectorInfoData, _ejectorBasicInfo, barrageEjectorTemplate, barrageEjectorStyle, barrageBulletData)
				self.__emitterDataDic[_barrageEmitterData:GetIndex()] = _barrageEmitterData

				if _parentEmitterData then
					_parentEmitterData:AddSumEmitterData(_barrageCreateParam.bulletLocalId, _barrageEmitterData)
				end
			end
		end
	end

	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEjectorManager:CreateBarrageEjector end")
	end
end

------------------------------------------------------------------------------------------------------------------------
---@public
---@return BarrageEjectorCreateParam
function BarrageEjectorManager:PopBarrageCreateParam()
	return self.__createParamPool:Pop()
end

---@public
---@param _barrageCreateParam BarrageEjectorCreateParam
function BarrageEjectorManager:PushBarrageCreateParam(_barrageCreateParam)
	self.__createParamPool:Push(_barrageCreateParam)
end

BarrageEjectorManager.popCount = 0
BarrageEjectorManager.pushCount = 0
---@private
---@return BarrageEmitterData
function BarrageEjectorManager:__PopBarrageEmitterData()
	BarrageEjectorManager.popCount = BarrageEjectorManager.popCount + 1
	return self.__emitterDataPool:Pop()
end

---@private
---@param _barrageEmitterData BarrageEmitterData
function BarrageEjectorManager:__PushBarrageEmitterData(_barrageEmitterData)
	BarrageEjectorManager.pushCount = BarrageEjectorManager.pushCount + 1
	self.__emitterDataPool:Push(_barrageEmitterData)
end

---生成发射器唯一ID
---@private
function BarrageEjectorManager:__CalcEmitterIndex()
	self.__emitterIndexCnt = self.__emitterIndexCnt + 1
	return self.__emitterIndexCnt
end
------------------------------------------------------------------------------------------------------------------------
---查询弹幕发射器
---@public
---@return BarrageEmitterData 
function BarrageEjectorManager:GetEmitterData(_index)
	return self.__emitterDataDic[_index]
end

---通过发射器唯一ID移除发射器
---@public
function BarrageEjectorManager:RemoveEmitterDataByIndex(_index)
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEjectorManager:RemoveEmitterDataByIndex", "_index", _index)
	end
	local _emitterData = self.__emitterDataDic[_index]
	if not _emitterData then return end
	self:__PushBarrageEmitterData(_emitterData)
	self.__emitterDataDic[_index] = nil
end

---通过发射器数据移除发射器
---@public
---@param _emitterData BarrageEmitterData
function BarrageEjectorManager:RemoveEmitterData(_emitterData, _index)
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEjectorManager:RemoveEmitterData", "_index", _index, "_emitterData", _emitterData)
	end
	if not _index then
		_index = _emitterData:GetIndex()
	end
	self:__PushBarrageEmitterData(_emitterData)
	self.__emitterDataDic[_index] = nil
end

---技能结束
---@public
function BarrageEjectorManager:SkillEndEjector(_netId, _heroSkillId)
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEjectorManager:SkillEndEjector", "_netId", _netId, "_heroSkillId", _heroSkillId)
	end
	for _, _emitterData in pairs(self.__emitterDataDic) do
		if _emitterData:GetCastNetId() == _netId and _emitterData:GetHeroSkillId() == _heroSkillId then
			_emitterData:SetForceDead()
		end
	end
end

---技能被打断
---@public
function BarrageEjectorManager:SkillBreakEjector(_netId, _heroSkillId)
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEjectorManager:SkillBreakEjector", "_netId", _netId, "_heroSkillId", _heroSkillId)
	end
	for _, _emitterData in pairs(self.__emitterDataDic) do
		if _emitterData:GetCastNetId() == _netId and _emitterData:GetHeroSkillId() == _heroSkillId then
			_emitterData:SetSkillBreak()
		end
	end
end

---可受击弹幕死亡
---@public
---@param _emitterIndex number 可受击弹幕所属的发射器唯一id
---@param _bulletLocalId number 死亡的可受击弹幕的localId
function BarrageEjectorManager:OnBulletDead(_emitterIndex, _bulletLocalId)
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEjectorManager:OnBulletDead start", "_emitterIndex", _emitterIndex, "_bulletLocalId", _bulletLocalId)
	end
	local _emitterData = self:GetEmitterData(_emitterIndex)
	if not _emitterData then return end
	_emitterData:OnBulletDead(_bulletLocalId)
	
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEjectorManager:OnBulletDead end")
	end
end

------------------------------------------------------------------------------------------------------------------------
---@public
function BarrageEjectorManager:OnUpdate(_deltaTime)

	for _emitterIndex, _emitterData in pairs(self.__emitterDataDic) do
		if _emitterData:CheckStateEnd() then
			self:RemoveEmitterData(_emitterData, _emitterIndex)
		else
			_emitterData:OnUpdate(_deltaTime)
		end
	end
	
end
------------------------------------------------------------------------------------------------------------------------

---检查子弹伤害记录
---@public
---@param _bulletIndex number 子弹的唯一ID
---@param _hurtTimeCnt number 当前子弹的伤害次数
---@return boolean
function BarrageEjectorManager:CheckBulletHurtRecord(_bulletIndex, _hurtTimeCnt)
	local _iRecordTimeCnt = self.__bulletHurtRecord[_bulletIndex]
	if not _iRecordTimeCnt then return true end
	return _iRecordTimeCnt < _hurtTimeCnt
end

---设置子弹伤害记录
---@public
---@param _bulletIndex number 子弹的唯一ID
---@param _hurtTimeCnt number 当前子弹的伤害次数 
function BarrageEjectorManager:SetBulletHurtRecord(_bulletIndex, _hurtTimeCnt)
	self.__bulletHurtRecord[_bulletIndex] = _hurtTimeCnt
end


---检查子弹触发记录
---@public
---@param _bulletIndex number 子弹的唯一ID
---@param _eventIndex number 子弹的第几个触发事件
---@param _trigTimeCnt number 该事件的第几次触发
---@return boolean
function BarrageEjectorManager:CheckBulletEventRecord(_bulletIndex, _eventIndex, _trigTimeCnt)
	local _bulletEvents = self.__bulletEventRecord[_bulletIndex]
	if not _bulletEvents then return true end
	local _iRecordTimeCnt = _bulletEvents[_eventIndex]
	if not _iRecordTimeCnt then return true end
	return _iRecordTimeCnt < _trigTimeCnt
end

---设置子弹触发记录
---@public
---@param _bulletIndex number 子弹的唯一ID
---@param _eventIndex number 子弹的第几个触发事件
---@param _trigTimeCnt number 该事件的第几次触发
function BarrageEjectorManager:SetBulletEventRecord(_bulletIndex, _eventIndex, _trigTimeCnt)
	local _bulletEvents = self.__bulletEventRecord[_bulletIndex]
	if not _bulletEvents then
		_bulletEvents = {}
		self.__bulletEventRecord[_bulletIndex] = _bulletEvents
	end
	_bulletEvents[_eventIndex] = _trigTimeCnt
end

------------------------------------------------------------------------------------------------------------------------
---@public
function BarrageEjectorManager:Clear()
	--for _, _ejector in pairs(self.__ejectorDic) do
	--	_ejector:Clear()
	--end
	--self.__ejectorDic = nil
	--self.__emitterDic = nil
	--self.__ejectorIndex = nil
end

return BarrageEjectorManager
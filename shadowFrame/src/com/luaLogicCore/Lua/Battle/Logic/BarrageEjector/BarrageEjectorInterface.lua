---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/10/29 14:18
--- Describe:
---

---收到服务器发来的创建消息，转发给表现层
function BarrageEjectorManager:OnCreateEmitterS2C(_netId, _heroObjId, _CreateEmitterData)
	if not _CreateEmitterData then return end
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEjectorManager:收到服务器发来的创建消息，转发给表现层 start", "_netId", _netId, "_heroObjId", _heroObjId, "_CreateEmitterData", dumpTableEx(_CreateEmitterData))
	end
	
	local _CreateEmitter_L2S = {}
	_CreateEmitter_L2S.netId = _netId
	_CreateEmitter_L2S.objectId = _heroObjId
	_CreateEmitter_L2S.info = _CreateEmitterData
	self.battleRoom.outputDataSource:CreateEmitterL2S(_CreateEmitter_L2S)

	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEjectorManager:收到服务器发来的创建消息，转发给表现层 end", "_CreateEmitter_L2S", dumpTableEx(_CreateEmitter_L2S))
	end
end

---收到服务器发来的发射器销毁消息，转发给表现层
function BarrageEjectorManager:OnDestroyEmitterS2C(_emitterId)
	if not _emitterId or -1 == _emitterId then return end
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEjectorManager","收到服务器发来的发射器销毁消息，转发给表现层 start _emitterId", _emitterId)
	end
	
	local _DestroyEmitter_L2S = {}
	_DestroyEmitter_L2S.id = _emitterId
	self.battleRoom.outputDataSource:DestroyEmitterL2S(_DestroyEmitter_L2S)

	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log,"CheckBarrage", "BarrageEjectorManager","收到服务器发来的发射器销毁消息，转发给表现层 end _DestroyEmitter_L2S", dumpTableEx(_DestroyEmitter_L2S))
	end
end

---收到服务器发来的发射器停止消息，转发给表现层
function BarrageEjectorManager:OnStopEmitterS2C(_emitterId)
	if not _emitterId or -1 == _emitterId then return end
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log,"CheckBarrage", "BarrageEjectorManager","收到服务器发来的发射器停止消息，转发给表现层 start _emitterId", _emitterId)
	end
	
	local _StopEmitter_L2S = {}
	_StopEmitter_L2S.id = _emitterId
	self.battleRoom.outputDataSource:StopEmitterL2S(_StopEmitter_L2S)

	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log,"CheckBarrage", "BarrageEjectorManager","收到服务器发来的发射器停止消息，转发给表现层 end _StopEmitter_L2S", dumpTableEx(_StopEmitter_L2S))
	end
end

---转发弹幕事件
---@public
function BarrageEjectorManager:OnBarrageTrigEventS2C(_BarrageEventData)
	if not _BarrageEventData then return end
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BarrageEjectorManager", "转发弹幕事件 start", "_BarrageEventData", _BarrageEventData)
	end
	
	local _BarrageTrigEvent_L2V = {}
	_BarrageTrigEvent_L2V.info = _BarrageEventData
	self.battleRoom.outputDataSource:BarrageTrigEvent_L2V(_BarrageTrigEvent_L2V)

	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BarrageEjectorManager", "转发弹幕事件 end")
	end
end

------------------------------------------------------------------------------------------------------------------------
---收到表现层发来的弹幕事件触发
---@public
---@param _trigInfo table msg.BarrageTrigEventInfo
function BarrageEjectorManager:OnBarrageTrigEventV2S(_trigInfo)
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BarrageEjectorManager", "CheckBarrage", "收到表现层发来的弹幕事件触发 start", "_trigInfo", dumpTableEx(_trigInfo))
	end

	if not self:CheckBulletEventRecord(_trigInfo.bulletIndex, _trigInfo.eventIndex, _trigInfo.trigNO) then return end
	self:SetBulletEventRecord(_trigInfo.bulletIndex, _trigInfo.eventIndex, _trigInfo.trigNO)

	local _emitterIndex = _trigInfo.emitterId
	local _eventIndex = _trigInfo.eventIndex
	local _emitterData = self:GetEmitterData(_emitterIndex)
	if not _emitterData then return end

	local _triggedEventConfig = self:__getTriggedBarrageEventConfig(_emitterData, _eventIndex)
	if not _triggedEventConfig then return end

	if 15 == _triggedEventConfig.EventType then
		--弹幕触发弹幕技能
		self:__OnBarrageEventTrigCreateBarrageSkill(_emitterData, _triggedEventConfig, _trigInfo)
	elseif 18 == _triggedEventConfig.EventType then
		--弹幕触发创建区域
		self:__OnBarrageEventTrigCreateArea(_emitterData, _triggedEventConfig, _trigInfo)
	elseif 23 == _triggedEventConfig.EventType then
		--弹幕触发创建掉落物
		self:__OnBarrageEventTrigFallObject(_emitterData, _triggedEventConfig, _trigInfo)
	elseif 25 == _triggedEventConfig.EventType then
		--弹幕触发添加BUFF
		self:__OnBarrageEventTrigAddBuff(_emitterData, _triggedEventConfig, _trigInfo)
	else
		--其他类型的事件直接转发
		self:__OnBarrageEventTrigNormal(_emitterData, _triggedEventConfig, _trigInfo)
	end

	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BarrageEjectorManager", "CheckBarrage", "收到表现层发来的弹幕事件触发 end")
	end
end

---弹幕事件触发创建弹幕技能
---@private
---@param _emitterData BarrageEmitterData
---@param _triggedEventConfig table 触发的弹幕事件的配置信息
---@param _trigInfo table msg.BarrageTrigEventInfo
function BarrageEjectorManager:__OnBarrageEventTrigCreateBarrageSkill(_emitterData, _triggedEventConfig, _trigInfo)
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BarrageEjectorManager", "CheckBarrage", "弹幕事件触发创建弹幕技能", "_trigInfo", dumpTableEx(_trigInfo))
	end
	
	local _barrageCreateParam = self:PopBarrageCreateParam()
	BarrageEjectorCreateParam.CopyData(_emitterData, _barrageCreateParam)
	_barrageCreateParam.barrageSkillId = _triggedEventConfig.CastBarrageSkillId
	Vector3.Copy(_barrageCreateParam.position, _trigInfo.position)
	Vector3.Copy(_barrageCreateParam.rotation, _trigInfo.rotation)
	_barrageCreateParam.bulletLocalId = _trigInfo.bulletIndex
	_barrageCreateParam.targetNetId = _trigInfo.trigNetId
	_barrageCreateParam.usePosAndRot = true
	_barrageCreateParam.timeStamp = _trigInfo.timeStamp
	self:CreateBarrageEjector(_barrageCreateParam, _emitterData:GetSnapShotData(), _emitterData)
	self:PushBarrageCreateParam(_barrageCreateParam)
	
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BarrageEjectorManager", "CheckBarrage", "弹幕事件触发创建弹幕技能 end")
	end
end

---弹幕事件触发创建区域
---@private
---@param _emitterData BarrageEmitterData
---@param _triggedEventConfig table 触发的弹幕事件的配置信息
---@param _trigInfo table msg.BarrageTrigEventInfo
function BarrageEjectorManager:__OnBarrageEventTrigCreateArea(_emitterData, _triggedEventConfig, _trigInfo)
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BarrageEjectorManager", "CheckBarrage", "弹幕事件触发创建区域", "_trigInfo", dumpTableEx(_trigInfo))
	end
	
	local _castObj = _emitterData:GetCastObj()
	if not _castObj or _castObj:CheckDead() then return end

	local _areaId = _triggedEventConfig.AreaId
	local _buffTemplateList = {}
	---@type BattleObjCom_Buff
	local _buffCom = _castObj:GetComponent(BattleObjectComponentType.Buff)
	if _buffCom and _buffCom.buffCom then
		local _areaBuffList = _buffCom.buffCom.areaBuffList
		if _areaBuffList[0] then
			for _, _v in pairs(_areaBuffList[0]) do
				table.insert(_buffTemplateList, BattleBuffService:GenerateCastBuffTemplate(_v.buffGroupId, _castObj, _emitterData:GetOriginalHeroSkillId(), nil,_v.upPercent))
			end
		end
		if _areaBuffList[_areaId] then
			for _, _v in pairs(_areaBuffList[_areaId]) do
				table.insert(_buffTemplateList, BattleBuffService:GenerateCastBuffTemplate(_v.buffGroupId, _castObj, _emitterData:GetOriginalHeroSkillId(), nil,_v.upPercent))
			end
		end
	end

	
	self.battleRoom.behaviorProcessor:CreateAreaTriggerUnit(
			_areaId,
			_emitterData:GetSnapShotData(),
			CreateAreatriggerSourceType.BarrageEvent,
			_emitterData:GetIndex(),
			-1,
			Vector3.Clone(_trigInfo.position),
			Vector3.Clone(_trigInfo.rotation),
			_buffTemplateList,
			_trigInfo.distance,
			_trigInfo.timeStamp,
			_trigInfo.trigBlockId or 0,
			nil,
			1
	)

	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BarrageEjectorManager", "CheckBarrage", "弹幕事件触发创建区域 end")
	end
end

---弹幕事件触发掉落物
---@private
---@param _emitterData BarrageEmitterData
---@param _triggedEventConfig table 触发的弹幕事件的配置信息
---@param _trigInfo table msg.BarrageTrigEventInfo
function BarrageEjectorManager:__OnBarrageEventTrigFallObject(_emitterData, _triggedEventConfig, _trigInfo)
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BarrageEjectorManager", "CheckBarrage", "弹幕事件触发创建掉落物", "_trigInfo", dumpTableEx(_trigInfo))
	end

	local _castObj = _emitterData:GetCastObj()
	if not _castObj or _castObj:CheckDead() then
		return
	end

	local fallObjectId = _triggedEventConfig.CreateFallingId
	if not fallObjectId or fallObjectId <= 0 then
		return
	end

	local position = _trigInfo.position
	local rotation = _trigInfo.rotation
	self.battleRoom.fallObjectManager:DropFallObjectByPosition(fallObjectId, 1, _emitterData:GetCastNetId(), _castObj:GetObjectId(), position, rotation)

	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BarrageEjectorManager", "CheckBarrage", "弹幕事件触发创建掉落物 end")
	end
end

---弹幕事件触发添加buff
---@private
---@param _emitterData BarrageEmitterData
---@param _triggedEventConfig table 触发的弹幕事件的配置信息
---@param _trigInfo table msg.BarrageTrigEventInfo
function BarrageEjectorManager:__OnBarrageEventTrigAddBuff(_emitterData, _triggedEventConfig, _trigInfo)
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BarrageEjectorManager", "CheckBarrage", "弹幕事件触发添加buff", "_triggedEventConfig.AddBuffId", _triggedEventConfig.AddBuffId, "_trigInfo", dumpTableEx(_trigInfo))
	end
	

	local _castObj = _emitterData:GetCastObj()
	if not _castObj then
		return
	end
	
	local _buffCastTemplate = BattleBuffService:GenerateCastBuffTemplate(_triggedEventConfig.AddBuffId, _castObj, _emitterData:GetOriginalHeroSkillId(), nil)

	---@type BattleObjectBase
	local _targetObj
	---@type BattleObjCom_Buff
	local _buffCom
	---@type BattleObjectManager
	local _objManager = self.battleRoom.battleObjectManager
	if _trigInfo.targetObjIdList then
		for _, _objId in pairs(_trigInfo.targetObjIdList) do
			_targetObj = _objManager:GetObject(_objId)
			if _targetObj then
				_buffCom = _targetObj:GetComponent(BattleObjectComponentType.Buff)
				if _buffCom then
					_buffCom:AddBattleBuff(_buffCastTemplate)
				end
			end
		end
	end
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BarrageEjectorManager", "CheckBarrage", "弹幕事件触发添加buff end")
	end
end

---普通弹幕事件触发，直接转发，逻辑层不做处理
---@private
---@param _emitterData BarrageEmitterData
---@param _triggedEventConfig table 触发的弹幕事件的配置信息
---@param _trigInfo table msg.BarrageTrigEventInfo
function BarrageEjectorManager:__OnBarrageEventTrigNormal(_emitterData, _triggedEventConfig, _trigInfo)
	
	local _BattleUnitKeyData = {}
	_BattleUnitKeyData.netId = _emitterData:GetCastNetId()
	_BattleUnitKeyData.objId = _emitterData:GetCastObjId()
	_BattleUnitKeyData.barrageInfo = {}
	_BattleUnitKeyData.barrageInfo.DestroyEmitterId = -1
	_BattleUnitKeyData.barrageInfo.StopEmitterId = -1
	_BattleUnitKeyData.BarrageEventData = _trigInfo

	self.battleRoom.outputDataSource:AddBattleUnitKeyData(_BattleUnitKeyData)
end

---获取触发的弹幕事件的配置数据
---@private
---@param _emitterData BarrageEmitterData
function BarrageEjectorManager:__getTriggedBarrageEventConfig(_emitterData, _eventIndex)
	local _barrageEjectorTemplateData = _emitterData:GetBarrageEjectorTemplateConfig()
	if not _barrageEjectorTemplateData then return nil end
	for _, v in pairs(_barrageEjectorTemplateData.BarrageEvents) do
		if v.index == _eventIndex then
			return v
		end
	end
	return nil
end
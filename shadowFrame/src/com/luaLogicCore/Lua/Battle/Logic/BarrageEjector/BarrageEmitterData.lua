---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/10/28 15:59
--- Describe: 单个发射器实例
---

require "Battle/Logic/BarrageEjector/BarrageEmitterLifeCtrl"

---弹幕编辑器定义的阵营检查枚举
---@class BarrageBulletEditorCampCheckType : table
BarrageBulletEditorCampCheckType = {
	DifferentCamp = 0,           --不同阵营
    SameCampWithoutMe = 1,       --相同阵营(除我之外)
    SameCampIncludeMe = 2,       --相同阵营(包括我)
    NotMyself = 3,               --除自己之外
    MySelf = 4,                  --只有我自己
    All = 5,                     --所有人
}

---@class BarrageEmitterData : Utils_BasePoolData
BarrageEmitterData = class(Utils_BasePoolData, "BarrageEmitterData")
function BarrageEmitterData:ctor(_data) end

---@public
---@param _barrageEjectorManager BarrageEjectorManager
---@param _emitterIndex number 唯一ID，跟表现层通信用的也是这个ID
---@param _barrageCreateParam BarrageEjectorCreateParam
---@param _snapShotData SnapShotData 创建者的属性快照，如果为空，则自己创建，不为空则表示用指定的快照（可能是透传下来的）
---@param _barrageBasicInfoData BarrageBasicInfoData 弹幕技能的配置信息
---@param _barrageEjectorInfoData BarrageEjectorInfoData 发射器组的信息
---@param _barrageEjectorBasicInfo table  单个发射器的基础数据，没有单独的表，在BarrageEjectorInfoData配置的EjectorBasicInfos字段中
---@param _barrageEjectorTemplate BarrageEjectorTemplate
---@param _barrageEjectorStyle BarrageEjectorStyle
---@param _barrageBulletData BarrageBulletData
function BarrageEmitterData:Init(_barrageEjectorManager, _emitterIndex, _barrageCreateParam, _snapShotData, _barrageBasicInfoData, _barrageEjectorInfoData, _barrageEjectorBasicInfo, _barrageEjectorTemplate, _barrageEjectorStyle, _barrageBulletData)
	--LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterData:Init start", "_emitterIndex", _emitterIndex)
	---@private
	self.__ejectorManager = _barrageEjectorManager
	---@private
	self.__index = _emitterIndex
	---@private
	self.__netId = _barrageCreateParam.castObject:GetParentUnit():GetNetId()
	---@private
	self.__objId = _barrageCreateParam.castObject:GetObjectId()
	---@private
	---@type BattleUnitCom_Camp
	self.__campCom = _barrageCreateParam.castObject:GetParentUnit():GetComponent(BattleUnitComponentType.Camp)
	---@private
	---@type BattleUnitCampType
	self.__selfCamp = self.__campCom:GetFirstCamp()
	BarrageEjectorCreateParam.CopyData(_barrageCreateParam, self)
	self:__InitConfigDatas(_barrageBasicInfoData, _barrageEjectorInfoData, _barrageEjectorBasicInfo, _barrageEjectorTemplate, _barrageEjectorStyle, _barrageBulletData)
	self:__InitSnapShotData(_snapShotData)  --todo：将来改一下属性快照，现在这样直接传引用导致属性快照无法放回池里
	self:__InitLifeCtrl()
	---隶属于自身的子发射器
	---key是bulletLocalId value是子发射器数据实例
	---@private
	---@type BarrageEmitterData[]
	self.__subEmitterDataDic = {}
	--LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterData:Init end", "_emitterIndex", _emitterIndex)
end

---初始化配置中的信息
---一些数据从配置中拷贝到实例里，支持动态修改
---@private
---@param _barrageBasicInfoData BarrageBasicInfoData 弹幕技能的配置信息
---@param _barrageEjectorInfoData BarrageEjectorInfoData 发射器组的信息
---@param _barrageEjectorBasicInfo table  单个发射器的基础数据，没有单独的表，在BarrageEjectorInfoData配置的EjectorBasicInfos字段中
---@param _barrageEjectorTemplate BarrageEjectorTemplate
---@param _barrageEjectorStyle BarrageEjectorStyle
---@param _barrageBulletData BarrageBulletData
function BarrageEmitterData:__InitConfigDatas(_barrageBasicInfoData, _barrageEjectorInfoData, _barrageEjectorBasicInfo, _barrageEjectorTemplate, _barrageEjectorStyle, _barrageBulletData)
	---@private
	self.__barrageBasicInfoData = _barrageBasicInfoData
	---@private
	self.__barrageEjectorInfoData = _barrageEjectorInfoData
	---@private
	self.__barrageEjectorBasicInfo = _barrageEjectorBasicInfo
	---@private
	self.__barrageEjectorTemplate = _barrageEjectorTemplate
	---@private
	self.__barrageEjectorStyle = _barrageEjectorStyle
	---@private
	self.__barrageBulletData = _barrageBulletData
	---@private
	self.__hitValue = _barrageBulletData.HitValue
	---@private
	self.__repelId = _barrageBulletData.RepelId
	---@private
	self.__hurtOpen = _barrageBulletData.HurtOpen
	---@private
	self.__hurtJudge = _barrageBulletData.HurtJudge
	---@private
	self.__hurtCd = _barrageBulletData.HurtCd
	---@private
	self.__sameRoleHurtLimit = _barrageBulletData.SameRoleHurtLimit
	---@private
	self.__isAccumulatedAttack = _barrageBasicInfoData.IsAccumulatedAttack
	---@private
	self.__useEditorCampCheck = _barrageEjectorStyle.UseEditorCampCheck
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "BarrageEmitterData", "__InitConfigDatas", "_barrageEjectorStyle.UseEditorCampCheck", _barrageEjectorStyle.UseEditorCampCheck, "_barrageEjectorStyleid", dumpTableEx(_barrageEjectorStyle))
	---@private
	self.__campCheckType = _barrageBulletData.HurtJudge

	self:__InitSkillParam(_barrageBulletData)
	self:__InitElementIdAndNum()
end

---初始化伤害系数
---弹幕的HurtParam是配置在弹幕上的，代表从表里取伤害系数的下标
---HurtParam可以被外部修改，如果技能组件里有修改的记录，则用技能组件里的值
---SkillParam才是弹幕对应的伤害系数
---@private
---@param _barrageBulletData BarrageBulletData
function BarrageEmitterData:__InitSkillParam(_barrageBulletData)
	
	local _castObj = self:GetCastObj()
	local _heroSkillId = self:GetHeroSkillId()
	
	---伤害系数下标
	---@type BattleObjCom_Skill
	local _skillComp = _castObj:GetComponent(BattleObjectComponentType.Skill)
	self.__hurtParam = _skillComp:GetSkillHurtParam(_heroSkillId, _barrageBulletData.HurtParam) or _barrageBulletData.HurtParam
	self.__heroSkillLevel = _skillComp:GetSkillLevel(_heroSkillId)
	
	---伤害系数
	---@type BattleObjCom_Config
	local _configCom = _castObj:GetComponent(BattleObjectComponentType.Config)
	---@type SkillValue
	local _skillValueXls = _configCom:GetSkillValueXls(_heroSkillId, _skillComp:GetSkillLevel(_heroSkillId))
	self.__skillParam = 0
	if self.__hurtParam > 0 then
		self.__skillParam = _skillValueXls.value[self.__hurtParam]
	end
	
	---仇恨系数
	---@private
	self.__hatredParam = 0
	---@type Skill
	local _skillXls = self.__ejectorManager.battleRoom.inputDataSource:GetDict("Skill", _heroSkillId)
	if _skillXls then __hatredParam = _skillXls.hatredValue end
	
	if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckHurt", "BarrageEmitterData", "初始化弹幕伤害系数", "NetId", self.__netId, "objId", self.__objId, "heroSkillId", self:GetHeroSkillId(), "barrageSkillId", self:GetBarrageSkillId(), "_barrageBulletData.HurtParam", _barrageBulletData.HurtParam, "self.__hurtParam", self.__hurtParam, "_skillValueXls.value", dumpTableEx(_skillValueXls.value), "最终伤害系数", self.__skillParam)
	end
end

---子弹携带的元素和元素量
---发射器下的所有子弹携带的元素和元素量都一样，所以统一记录在发射器中
---弹幕携带的元素类型和命中时添加的元素类型是一样的
---@private
function BarrageEmitterData:__InitElementIdAndNum()
	local _elementStrenthId = self.elementStrenthId
	if not _elementStrenthId then
		self.__elementId = BattleElementTypeEnum.PHYSIC:GetId()
		self.__addElementId = BattleElementTypeEnum.PHYSIC:GetId()
		self.__addElementRand = 0
		self.__addElementNum = 0
	else
		---@type ElementStrength
		local _elementStrengthXls = self.__ejectorManager.battleRoom.inputDataSource:GetDict("ElementStrength", _elementStrenthId)
		if not _elementStrengthXls then
			if _elementStrenthId and _elementStrenthId > 0 then
				if CheckLogLevel(LogLevel.logErr) then
					LogTools.LogByLevel(LogLevel.logErr, "创建弹幕错误！元素强度ID读不到表！按照无元素处理！ElementStrenthId: ", _elementStrenthId)
				end
			--elseif CheckLogLevel(LogLevel.log) then
			--	LogTools.LogByLevel(LogLevel.logErr, "创建弹幕时传入的元素强度ID读不到表, 按照无元素处理。策划如果确认没有问题可以忽略。", _elementStrenthId)
			end
			self.__elementId = BattleElementTypeEnum.PHYSIC:GetId()
			self.__addElementId = BattleElementTypeEnum.PHYSIC:GetId()
			self.__addElementRand = 0
			self.__addElementNum = 0
		else
			self.__elementId = _elementStrengthXls.elementId
			self.__addElementId = _elementStrengthXls.elementId
			self.__addElementRand = _elementStrengthXls.chance
			self.__addElementNum = _elementStrengthXls.addNum
		end
	end
end

---创建属性快照
---没有上层透传下来的快照时，自己创建一份新的快照
---@private
---@param _snapShotData SnapShotData
function BarrageEmitterData:__InitSnapShotData(_snapShotData)
	local _newSnapShotData = self.__ejectorManager.battleRoom.hurtManager:CreateSnapShot(self.__objId, 
			1, 
			self:GetHeroSkillId(),
			self:GetElementId(),
			self:GetAddElementId(),
			self:GetAddElementRand(),
			self:GetAddElementNum(),
			self:GetSkillParam(),
			self:GetHatredParam()
	)
	if _snapShotData then
		_newSnapShotData:Copy(_snapShotData)
	end

	_newSnapShotData:SetOriginalHeroSkillId(self:GetOriginalHeroSkillId(), nil)
	_newSnapShotData:SetHurtParam(self:GetSkillParam())
	_newSnapShotData:SetHatredParam(self:GetHatredParam())
	
	self.__snapShotData = _newSnapShotData
end

---初始化生命周期管理
---@private
function BarrageEmitterData:__InitLifeCtrl()
	if not self.__lifeCtrl then
		---@private
		---@type BarrageEmitterLifeCtrl
		self.__lifeCtrl = BarrageEmitterLifeCtrl.New()
	end
	self.__lifeCtrl:Init(self)
end

---@public
function BarrageEmitterData:OnPush()
	self.__ejectorManager = nil
	self.__index = nil
	self.__netId = nil
	self.__objId = nil
	self.__barrageBasicInfoData = nil
	self.__barrageEjectorInfoData = nil
	self.__barrageEjectorBasicInfo = nil
	self.__barrageEjectorTemplate = nil
	self.__barrageEjectorStyle = nil
	self.__barrageBulletData = nil
	self.__hitValue = nil
	self.__repelId = nil
	self.__hurtOpen = nil
	self.__hurtJudge = nil
	self.__hurtCd = nil
	self.__isAccumulatedAttack = nil
	self.__sameRoleHurtLimit = nil
	self.__hurtParam = nil
	self.__heroSkillLevel = nil
	self.__skillParam = nil
	self.__hatredParam = nil
	self.__elementId = nil
	self.__addElementId = nil
	self.__addElementNum = nil
	if self.__lifeCtrl then
		self.__lifeCtrl:Clear()
	end
	
	self.__snapShotData = nil
	self.__subEmitterDataDic = nil
	
end
-------------------------------------------------获取原始的配置-----------------------------------------------------------
---@public
---@return BarrageBasicInfoData
function BarrageEmitterData:GetBarrageBasicInfoConfig()
	return self.__barrageBasicInfoData
end

---@public
---@return BarrageEjectorInfoData
function BarrageEmitterData:GetBarrageEjectorInfoConfig()
	return self.__barrageEjectorInfoData
end

---@public
---@return table
function BarrageEmitterData:GetBarrageEjectorBasicInfoConfig()
	return self.__barrageEjectorBasicInfo
end

---@public
---@return BarrageEjectorTemplate
function BarrageEmitterData:GetBarrageEjectorTemplateConfig()
	return self.__barrageEjectorTemplate
end

---@public
---@return BarrageEjectorStyle
function BarrageEmitterData:GetBarrageEjectorStyleConfig()
	return self.__barrageEjectorStyle
end

---@public
---@return BarrageBulletData
function BarrageEmitterData:GetBarrageBulletConfig()
	return self.__barrageBulletData
end

-------------------------------------------------获取实例信息-----------------------------------------------------------
---获取当前所属管理器实例
---@public
---@return BarrageEjectorManager
function BarrageEmitterData:GetBarrageEjectorManager()
	return self.__ejectorManager
end

---获取发射器的唯一ID
---@public
function BarrageEmitterData:GetIndex()
	return self.__index
end

---获取创建者battleObject
---@public
---@return BattleObjectBase
function BarrageEmitterData:GetCastObj()
	return self.castObject
end

---获取初始玩家技能ID
---@public
function BarrageEmitterData:GetOriginalHeroSkillId()
	return self.originalHeroSkillId
end

---获取创建者的属性快照
---@public
---@return SnapShotData
function BarrageEmitterData:GetSnapShotData()
	return self.__snapShotData
end

---获取创建者的netID
---@public
function BarrageEmitterData:GetCastNetId()
	return self.__netId
end

---获取创建者的objId
---@public
function BarrageEmitterData:GetCastObjId()
	return self.__objId
end

---获取对应的英雄技能ID
---@public
function BarrageEmitterData:GetHeroSkillId()
	return self.heroSkillId
end

---获取对应英雄技能的等级
---@public
function BarrageEmitterData:GetHeroSkillLevel()
	return self.__heroSkillLevel
end

---获取对应的弹幕技能ID
---@public
function BarrageEmitterData:GetBarrageSkillId()
	return self.barrageSkillId
end

---获取携带的元素类型ID
---@public
function BarrageEmitterData:GetElementId()
	return self.__elementId
end

---获取命中时添加的元素类型ID
---@public
function BarrageEmitterData:GetAddElementId()
	return self.__addElementId
end

---获取命中时添加元素量的概率
---@public
function BarrageEmitterData:GetAddElementRand()
	return self.__addElementRand
end

---获取命中时添加的元素量
---@public
function BarrageEmitterData:GetAddElementNum()
	return self.__addElementNum
end

---获取伤害系数
---@public
function BarrageEmitterData:GetSkillParam()
	return self.__skillParam
end

---获取仇恨系数
---@public
function BarrageEmitterData:GetHatredParam()
	return self.__hatredParam
end

---检查发射者是否已经死亡
---@public
---@return boolean
function BarrageEmitterData:CheckCastObjDead()
	return not self.castObject or self.castObject:CheckDead()
end

---@public
function BarrageEmitterData:GetHitValue()
	return self.__hitValue
end

---@public
function BarrageEmitterData:GetRepelId()
	return self.__repelId
end

---是否蓄力攻击
---@public
function BarrageEmitterData:GetIsAccumulatedAttack()
	return self.__isAccumulatedAttack
end

---@public
function BarrageEmitterData:OnUpdate(_deltaTime)
	self.__lifeCtrl:OnUpdate(_deltaTime)
end

---获取携带的buff列表
---@public
---@return BattleBuffCastTemplate[]
function BarrageEmitterData:GetAttachBuffTemplateList()
	return self.buffTemplatelist
end

---是否触发后续伤害事件
---@public
function BarrageEmitterData:CheckTrigEvent()
	return self.trigEvent
end

---记录子发射器
---@public
---@param _bulletLocalId number
---@param _emitterData BarrageEmitterData
function BarrageEmitterData:AddSumEmitterData(_bulletLocalId, _emitterData)
	if _bulletLocalId <= 0 then return end
	local _tab = self.__subEmitterDataDic[_bulletLocalId]
	if not _tab then
		_tab = {}
		self.__subEmitterDataDic[_bulletLocalId] = _tab
	end
	table.insert(_tab, _emitterData)
end

---子弹死亡，设置子发射器的状态
---@public
function BarrageEmitterData:OnBulletDead(_bulletLocalId)
	local _tab = self.__subEmitterDataDic[_bulletLocalId]
	if not _tab then return end
	for _, _emitterData in pairs(_tab) do
		_emitterData:SetParentDead()
	end
end

---检查是否使用编辑器配置的阵营检查
---@public
---@return boolean 是否使用编辑器配置的阵营检查
---@return boolean 是否满足编辑器配置的阵营检查
function BarrageEmitterData:CheckEditorCampConfig(_defCamp, _defNetId, _defObjId)
	--LogTools.LogByLevel(LogLevel.logErr, "BarrageEmitterData:CheckEditorCampConfig", "_defCamp", _defCamp, "_defNetId", _defNetId, "self.__useEditorCampCheck", self.__useEditorCampCheck)
	if not self.__useEditorCampCheck then
		return false, false
	end
	
	local _campCheck = self.__campCheckType
	
	if _campCheck == BarrageBulletEditorCampCheckType.DifferentCamp then	
		return true, _defCamp ~= self.__selfCamp
	elseif _campCheck == BarrageBulletEditorCampCheckType.SameCampWithoutMe then
		return true, _defCamp == self.__selfCamp and _defNetId ~= self.__netId
	elseif _campCheck == BarrageBulletEditorCampCheckType.SameCampIncludeMe then
		return true, _defCamp == self.__selfCamp
	elseif _campCheck == BarrageBulletEditorCampCheckType.NotMyself then
		return true, _defNetId ~= self.__netId
	elseif _campCheck == BarrageBulletEditorCampCheckType.MySelf then	
		return true, _defNetId == self.__netId
	else
		return true, true
	end
end
-------------------------------------------------生命周期接口-----------------------------------------------------------

---强制死亡
---@public
function BarrageEmitterData:SetForceDead()
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterData:SetForceDead", "self.__netId", self.__netId, "heroSkillId", self:GetHeroSkillId(), "self.__index", self.__index)
	end
	self.__lifeCtrl:SetForceDead()
end

---设置技能打断
---@public
function BarrageEmitterData:SetSkillBreak()
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterData:SetSkillBreak", "self.__netId", self.__netId, "heroSkillId", self:GetHeroSkillId(), "self.__index", self.__index)
	end
	self.__lifeCtrl:SetSkillBreak()
end

---父物体死亡
---@public
function BarrageEmitterData:SetParentDead()
	self.__lifeCtrl:SetParentDead()
end

---@public
function BarrageEmitterData:CheckStateEnd()
	return self.__lifeCtrl and self.__lifeCtrl:CheckState(BarrageEmitterState.WaitClear)
end

---@public
function BarrageEmitterData:OnCreate()
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterData:OnCreate start")
	end
	
	local _BattleUnitKeyData = {}
	_BattleUnitKeyData.netId = self.__netId
	_BattleUnitKeyData.objId = self.__objId
	_BattleUnitKeyData.barrageInfo = {}
	local _createEmitterData = {}
	_createEmitterData.id = self.__index
	_createEmitterData.PlayerSkillId = self.heroSkillId
	_createEmitterData.PlayerSkillNodeId = self.skillNodeId
	_createEmitterData.heroSkillOnlyId = self.heroSkillOnlyId or -1
	_createEmitterData.heroSkillLevel = self.heroSkillLevel or 1						 
	_createEmitterData.barrageEjectorInfoDataId = self.__barrageEjectorInfoData.Id
	_createEmitterData.ejectorIndex = self.__barrageEjectorBasicInfo.index ---配置的第几个发射器
	if self.usePosAndRot then
		_createEmitterData.position = self.position
		_createEmitterData.rotation = self.rotation
	else
		_createEmitterData.position = nil
		_createEmitterData.rotation = nil
	end
	_createEmitterData.bulletIndex = self.bulletLocalId
	_createEmitterData.timeStamp = TimeUtils.battleNow(self.__ejectorManager.battleRoom.battleId)
	_BattleUnitKeyData.barrageInfo.CreateEmitterData = _createEmitterData
	_BattleUnitKeyData.barrageInfo.DestroyEmitterId = -1
	_BattleUnitKeyData.barrageInfo.StopEmitterId = -1
	
	self.__ejectorManager.battleRoom.outputDataSource:AddBattleUnitKeyData(_BattleUnitKeyData)

	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterData:OnCreate end", "_BattleUnitKeyData.barrageInfo", dumpTableEx(_BattleUnitKeyData.barrageInfo))
	end
end

---@public
function BarrageEmitterData:OnEnd()
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterData:OnEnd start")
	end
	
	local _battleFieldData = {}
	_battleFieldData.barrageInfo = {}
	_battleFieldData.barrageInfo.DestroyEmitterId = self.__index
	_battleFieldData.barrageInfo.StopEmitterId = -1
	
	self.__ejectorManager.battleRoom.outputDataSource:AddBattleFieldData(_battleFieldData)

	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterData:OnEnd end", "_battleFieldData.barrageInfo", dumpTableEx(_battleFieldData.barrageInfo))
	end
end

---@public
function BarrageEmitterData:OnStop()
	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterData:OnStop start")
	end
	
	local _battleFieldData = {}
	_battleFieldData.barrageInfo = {}
	_battleFieldData.barrageInfo.StopEmitterId = self.__index
	_battleFieldData.barrageInfo.DestroyEmitterId = -1

	self.__ejectorManager.battleRoom.outputDataSource:AddBattleFieldData(_battleFieldData)

	if LogTools.BarrageLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckBarrage", "BarrageEmitterData:OnStop end", "_battleFieldData.barrageInfo", dumpTableEx(_battleFieldData.barrageInfo))
	end
end

return BarrageEmitterData
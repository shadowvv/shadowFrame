---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/5/10 16:58

require "Lib/class"

---@class TalentSkillDamageTrigger : table
TalentSkillDamageTrigger = class(nil, 'TalentSkillDamageTrigger');

function TalentSkillDamageTrigger:ctor(_battleId)
    ---@type number
    self.battleId = _battleId
    self.battleRoom = GetBattleRoom(self.battleId)
    self.lastTriggerTime = TimeUtils.battleNow(self.battleId);
    self.damageCount = 0;
    self.targetDamageCount = {};
    self.targetNetId = 0;
    self.targetObjectId = 0;
    self.param = nil;
end

---@public
---击中目标回调
---@param _talentSkillTrigger SkillTrigger
---@param _targetNetId number 伤害目标netId
---@param _targetObjectId number 伤害目标objectId
---@param _targetType number 伤害目标类型
---@param _damageSourceId number 伤害类型Id
---@param _damageSourceType number 伤害来源类型
---@param _damage number 造成伤害
---@param _damageType number 伤害类型
---@param _isCritical boolean 是否暴击
---@param _targetDead boolean 目标是否死亡
---@param _hurtDisReduceEnum number 伤害距离衰减类型，对应 HurtDisReduceEnum 定义的值
---@param _isWeakness boolean 是否为弱点攻击
---@param _curAttachEleId number 击中时目标元素
---@param _isAccumulatedAttack boolean 是否为蓄力攻击
function TalentSkillDamageTrigger:OnHitTarget(_talentSkillTrigger, _targetNetId, _targetObjectId, _targetType, _damageSourceId, _damageSourceType, _damage, _damageType, _isCritical, _targetDead,_hurtDisReduceEnum,_isWeakness,_curAttachEleId,_isAccumulatedAttack)
    if TimeUtils.battleNow(self.battleId) - self.lastTriggerTime < _talentSkillTrigger.parm6 then
        return;
    end

    if _talentSkillTrigger.parm1 and _talentSkillTrigger.parm1 ~= 999 and _talentSkillTrigger.parm1 ~= _damageType then
        return;
    end

    if _talentSkillTrigger.parm8 and #_talentSkillTrigger.parm8 > 0 then
        local matchType = false;
        if _damageSourceType ~= 1 then
            return;
        end
        ---@type Skill
        local skillConfig = self.battleRoom.inputDataSource:GetDict("Skill",_damageSourceId)
        for i, v in pairs(_talentSkillTrigger.parm8) do
            if v == 0 then
                matchType = true;
            end
            if skillConfig.skillType == v then
                matchType = true;
            end
        end
        if not matchType then
            return;
        end
    end

    if _talentSkillTrigger.parm9 then
        local temp = 0;
        if _isWeakness then
            temp = 1;
        end
        if _talentSkillTrigger.parm9 ~= temp  then
            return;
        end
    end

    if _talentSkillTrigger.parm10 and _talentSkillTrigger.parm10 ~= 0 then
        local temp = 0;
        if _isAccumulatedAttack then
            temp = 1;
        end
        if _talentSkillTrigger.parm10 == 1 then
            if temp ~= 1 then
                return
            end
        elseif _talentSkillTrigger.parm10 == 2 then
            if temp ~= 0 then
                return;
            end
        end
    end


    if _talentSkillTrigger.parm5 ~= 0 then
        if not self.targetDamageCount[_targetObjectId] then
            self.targetDamageCount[_targetObjectId] = 0;
        end
        self.targetDamageCount[_targetObjectId] = self.targetDamageCount[_targetObjectId] + 1;
        if self.targetDamageCount[_targetObjectId] > self.damageCount then
            self.damageCount = self.targetDamageCount[_targetObjectId];
            self.targetNetId = _targetNetId;
            self.targetObjectId = _targetObjectId;
        end
    else
        self.damageCount = self.damageCount + 1;
    end

    if _talentSkillTrigger.parm13 and _talentSkillTrigger.parm13 > 0 then
        ---@type BattleUnitBase
        local unit = self.battleRoom.battleUnitManager:GetUnit(_targetNetId);
        if not unit then
            return;
        end
        ---@type BattleObjectBase
        local object = unit:GetHeroObject(_targetObjectId);
        if not object then
            return;
        end
        ---@type BattleObjCom_Property
        local propCom = object:GetComponent(BattleObjectComponentType.Property);
        if not propCom then
            return;
        end

        local percent = propCom:GetPropertyPercentByName(BattlePropertyEnum.Jizou_Cur);

        if percent < _talentSkillTrigger.parm13 then
            return;
        end
    end
    
    self.param = _damage;
    self.lastTriggerTime = TimeUtils.battleNow(self.battleId);
end

---@public
---@param _battleObject BattleObjectBase 触发单位
---@param _talentSkillTrigger SkillTrigger 被动技能配置
---@param _talentSkill BattlePlayerTalentSkill 被动技能
function TalentSkillDamageTrigger:Check(_battleObject, _talentSkillTrigger,_talentSkill)
    if _talentSkillTrigger.parm2 > self.damageCount then
        return 0;
    end
    local count = math.floor(self.damageCount / _talentSkillTrigger.parm2);
    if self.targetNetId ~= 0 and self.targetObjectId ~= 0 then
        for i, v in pairs(self.targetDamageCount) do
            local tempCount = math.floor(v / _talentSkillTrigger.parm2);
            if tempCount > 0 then
                _talentSkill:AddTriggerObject(i,tempCount);
                self.targetDamageCount[i] = nil;
            end
        end
    end
    self:Reset();
    return count;
end

---@public
function TalentSkillDamageTrigger:Reset()
    self.damageCount = 0;
end

---被动技能触发类型
---@return number 被动技能触发类型
function TalentSkillDamageTrigger:GetType()
    return 104;
end

return TalentSkillDamageTrigger;
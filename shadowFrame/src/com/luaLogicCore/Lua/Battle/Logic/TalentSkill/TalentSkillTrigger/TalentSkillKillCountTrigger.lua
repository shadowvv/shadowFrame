---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/5/10 16:58

require "Lib/class"

---@class TalentSkillKillCountTrigger : table
TalentSkillKillCountTrigger = class(nil, 'TalentSkillKillCountTrigger');

function TalentSkillKillCountTrigger:ctor(_battleId)
    ---@type number
    self.battleId = _battleId
    self.battleRoom = GetBattleRoom(self.battleId)
    self.killTarget = {}
    self.lastAttackTime = 0;
    self.currentAttackTime = 0
    self.lastTriggerTime = 0;

    self.targetNetId = 0;
    self.targetObjectId = 0;
end

---@public
---击中目标回调
---@param _talentSkillTrigger SkillTrigger
---@param _targetNetId number 伤害目标netId
---@param _targetObjectId number 伤害目标objectId
---@param _targetType number 伤害目标类型
---@param _damageSourceId number 伤害类型Id
---@param _damageSourceType number 伤害来源类型
---@param _damage number 造成伤害
---@param _damageType number 伤害类型
---@param _isCritical boolean 是否暴击
---@param _targetDead boolean 目标是否死亡
---@param _hurtDisReduceEnum number 伤害距离衰减类型，对应 HurtDisReduceEnum 定义的值
---@param _isWeakness boolean 是否为弱点攻击
---@param _curAttachEleId number 击中时目标元素
---@param _isAccumulatedAttack boolean 是否为蓄力攻击
function TalentSkillKillCountTrigger:OnHitTarget(_talentSkillTrigger, _targetNetId, _targetObjectId, _targetType, _damageSourceId, _damageSourceType, _damage, _damageType, _isCritical, _targetDead,_hurtDisReduceEnum,_isWeakness,_curAttachEleId,_isAccumulatedAttack)
    if not _targetDead then
        return;
    end

    if TimeUtils.battleNow(self.battleId) - self.lastTriggerTime < _talentSkillTrigger.parm6 then
        return;
    end

    -- 超过触发最大间隔，重置
    if _talentSkillTrigger.parm14 and _talentSkillTrigger.parm14 ~= 0 and #self.killTarget ~= 0
            and (TimeUtils.battleNow(self.battleId) - self.lastAttackTime) > _talentSkillTrigger.parm14 * 1000 then
        self.currentAttackTime = 0;
        self.lastAttackTime = 0;
        self.killTarget = {}
    end

    if _talentSkillTrigger.parm1 and _talentSkillTrigger.parm1 ~= 0 then
        ---@type BattleUnitBase
        local unit = self.battleRoom.battleUnitManager:GetUnit(_targetNetId);
        if not unit then
            return;
        end
        ---@type BattleObjectBase
        local object = unit:GetHeroObject(_targetObjectId);
        if not object then
            return;
        end
        ---@type MonsterInstance
        local instance = object:GetDataInstanceXls();
        if instance.classify ~= _talentSkillTrigger.parm1 then
            return;
        end
    end

    if _talentSkillTrigger.parm3 and _talentSkillTrigger.parm3 ~= 0 then
        if _talentSkillTrigger.parm3 == -1 then
            -- -1 为任意元素(无元素不行)
            if _curAttachEleId == 0 then
                return
            end
        else
            if _curAttachEleId ~= _talentSkillTrigger.parm3 then
                return;
            end
        end
    end

    if _talentSkillTrigger.parm4 and _talentSkillTrigger.parm4 ~= 0 then
        if _hurtDisReduceEnum ~= _talentSkillTrigger.parm4 then
            return;
        end
    end

    if _talentSkillTrigger.parm8 and #_talentSkillTrigger.parm8 > 0 then
        local matchType = false;
        if _damageSourceType ~= 1 then
            return;
        end
        ---@type Skill
        local skillConfig = self.battleRoom.inputDataSource:GetDict("Skill",_damageSourceId)
        for i, v in pairs(_talentSkillTrigger.parm8) do
            if v == 0 then
                matchType = true;
            end
            if skillConfig.skillType == v then
                matchType = true;
            end
        end
        if not matchType then
            return;
        end
    end

    if _talentSkillTrigger.parm9 then
        local temp = 0;
        if _isWeakness then
            temp = 1;
        end
        if _talentSkillTrigger.parm9 ~= temp  then
            return;
        end
    end

    if _talentSkillTrigger.parm10 and _talentSkillTrigger.parm10 ~= 0 then
        local temp = 0;
        if _isAccumulatedAttack then
            temp = 1;
        end
        if _talentSkillTrigger.parm10 == 1 then
            if temp ~= 1 then
                return
            end
        elseif _talentSkillTrigger.parm10 == 2 then
            if temp ~= 0 then
                return;
            end
        end
    end

    --- 击杀目标是否含有某buff
    if _talentSkillTrigger.parm11 and _talentSkillTrigger.parm11 ~= 0 then
        ---@type BattleUnitBase
        local unit = self.battleRoom.battleUnitManager:GetUnit(_targetNetId);
        if not unit then
            return;
        end
        ---@type BattleObjectBase
        local object = unit:GetHeroObject(_targetObjectId);
        if not object then
            return;
        end
        ---@type BattleObjCom_Buff
        local buffCom = object:GetComponent(BattleObjectComponentType.Buff);
        if not buffCom then
            return;
        end
        if not buffCom:CheckBuffExist(_talentSkillTrigger.parm11) then
            return;
        end
    end

    self.targetNetId = _targetNetId;
    self.targetObjectId = _targetObjectId;
    table.insert(self.killTarget,_targetNetId)
    self.lastTriggerTime = TimeUtils.battleNow(self.battleId);
    if self.lastAttackTime ~= 0 then
        self.currentAttackTime = self.currentAttackTime + TimeUtils.battleNow(self.battleId) - self.lastAttackTime;
    end
    self.lastAttackTime = TimeUtils.battleNow(self.battleId);
end

---@public
---@param _battleObject BattleObjectBase 触发单位
---@param _talentSkillTrigger SkillTrigger 被动技能配置
---@param _talentSkill BattlePlayerTalentSkill 被动技能
function TalentSkillKillCountTrigger:Check(_battleObject, _talentSkillTrigger,_talentSkill)
    if not self.killTarget or _talentSkillTrigger.parm2 > #self.killTarget then
        return 0;
    end

    -- 计时持续时间
    if _talentSkillTrigger.parm13 and self.currentAttackTime > _talentSkillTrigger.parm13 * 1000 then
        self.currentAttackTime = 0;
        self.lastAttackTime = TimeUtils.battleNow(self.battleId);
        return 0;
    end
    if _talentSkillTrigger.parm2 == 0 then
        return 0;
    end
    local count = math.floor(#self.killTarget / _talentSkillTrigger.parm2);
    self:Reset();
    return count;
end

---@public
function TalentSkillKillCountTrigger:Reset()
    self.currentAttackTime = 0;
    self.lastAttackTime = 0;
    self.killTarget = {}
end

---被动技能触发类型
---@return number 被动技能触发类型
function TalentSkillKillCountTrigger:GetType()
    return 103;
end

return TalentSkillKillCountTrigger;
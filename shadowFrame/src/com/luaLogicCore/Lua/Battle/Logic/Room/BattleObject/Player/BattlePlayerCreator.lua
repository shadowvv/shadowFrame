---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2021/12/21 15:12
--- 战斗玩家生成器

require "Lib/class";
require "Battle/Logic/Room/BattleObject/BattleObjectProp";
require "Battle/Logic/Room/BattleObject/Player/BattlePlayer";
require "Battle/Logic/Room/BattleObject/Player/BattlePlayerLeader";
require "Battle/Logic/Room/BattleObject/Player/BattlePlayerWeapon";
require "Battle/Logic/Room/BattleObject/Player/BattlePlayerTalentSkill";
require "Battle/Logic/Room/BattleObject/Player/BattlePlayerActiveSkill";
require "Battle/Logic/Room/BattleObject/Player/BattlePlayerRevelation";
require "Battle/Logic/Room/BattleObject/ActionState/IdleActionState"

---@class BattlePlayerCreator : table
BattlePlayerCreator = class(nil, 'BattlePlayerCreator');

function BattlePlayerCreator:ctor()
    NET_ID_CREATOR = IdCreator:New();
end

-- 生成玩家
---@param _battlePlayerInfo table
---@return BattlePlayer
function BattlePlayerCreator:CreatePlayer(_battlePlayerInfo)
    ---@type BattlePlayer
    local player = BattlePlayer:New();
    player:Init(_battlePlayerInfo.playerId, _battlePlayerInfo.name, _battlePlayerInfo.level, _battlePlayerInfo.curLeaderId, _battlePlayerInfo.leaders);
    player:EnterAction(IDLE_ACTION_STATE);
    return player;
end

-- 生成武将
---@param _leaderBattleInfo table
---@param _netId number
---@return BattlePlayerLeader
function BattlePlayerCreator:CreateLeader(_leaderBattleInfo, _netId)
    ---@type BattlePlayerLeader
    local leader = BattlePlayerLeader:New();
    leader:Init(_leaderBattleInfo.id, _leaderBattleInfo.level, _leaderBattleInfo.exp, _netId);
    leader:SetStarInfo(_leaderBattleInfo.star, _leaderBattleInfo.starLevel);
    leader:SetFavorabilityInfo(_leaderBattleInfo.favorabilityLevel, _leaderBattleInfo.favorabilityExp);
    leader:SetClothInfo(_leaderBattleInfo.clothingId);
    leader:SetSignInfo(_leaderBattleInfo.signLv);

    local prop = BattleObjectProp:New();
    if _leaderBattleInfo.calcPropModelInfo.attributeMap ~= nil then
        for index, value in ipairs(_leaderBattleInfo.calcPropModelInfo.attributeMap) do
            prop:AddNormalProp(value.key, value.value);
        end
    end
    if _leaderBattleInfo.calcPropModelInfo.growMap ~= nil then
        for index, value in ipairs(_leaderBattleInfo.calcPropModelInfo.growMap) do
            prop:AddGrowProp(value.key, value.value);
        end
    end
    prop:SetCapability(_leaderBattleInfo.calcPropModelInfo.capability);
    leader:SetProp(prop);

    if _leaderBattleInfo.weapon ~= nil then
        for index, value in ipairs(_leaderBattleInfo.weapon) do
            leader:AddWeapon(BATTLE_PLAYER_CREATOR:CreateWeapon(value));
        end
    end

    if _leaderBattleInfo.talentSkills ~= nil then
        for index, value in ipairs(_leaderBattleInfo.talentSkills) do
            leader:AddTalentSkill(BATTLE_PLAYER_CREATOR:CreateTalentSkill(value));
        end
    end

    if _leaderBattleInfo.activeSkills ~= nil then
        for index, value in ipairs(_leaderBattleInfo.activeSkills) do
            leader:AddActiveSkill(BATTLE_PLAYER_CREATOR:CreateActiveSkill(value));
        end
    end

    if _leaderBattleInfo.revelations ~= nil then
        for index, value in ipairs(_leaderBattleInfo.revelations) do
            leader:AddRevelation(BATTLE_PLAYER_CREATOR:CreateRevelation(value));
        end
    end

    return leader;
end

-- 生成武器
---@param _weaponInfo table
---@return BattlePlayerWeapon
function BattlePlayerCreator:CreateWeapon(_weaponInfo)
    local weapon = BattlePlayerWeapon:New()
    weapon:SetId(_weaponInfo.id);
    weapon:SetLeaderId(_weaponInfo.leaderId);
    weapon:SetExp(_weaponInfo.exp);
    weapon:SetLevel(_weaponInfo.level);
    weapon:SetBreachLevel(_weaponInfo.breachLevel);
    weapon:SetOnlyId(_weaponInfo.onlyId);
    weapon:SetGetTime(_weaponInfo.getTime);
    weapon:SetDefLeaderId(_weaponInfo.defLeaderId);
    weapon:SetSkinId(_weaponInfo.skinId);
    weapon:SetLockState(_weaponInfo.lockState);
    weapon:SetRefineLevel(_weaponInfo.refineLevel);

    local prop = BattleObjectProp:New();
    for index, value in ipairs(_weaponInfo.calcPropModelInfo.attributeMap) do
        prop:AddNormalProp(value.key, value.value);
    end
    for index, value in ipairs(_weaponInfo.calcPropModelInfo.growMap) do
        prop:AddGrowProp(value.key, value.value);
    end
    prop:SetCapability(_weaponInfo.calcPropModelInfo.capability);
    weapon:SetProp(prop);

    return weapon;
end

-- 生成被动技能
---@param _talentSkillInfo table
---@return BattlePlayerTalentSkill
function BattlePlayerCreator:CreateTalentSkill(_talentSkillInfo)
    local talentSkill = BattlePlayerTalentSkill:New();
    talentSkill:SetId(_talentSkillInfo.id);
    talentSkill:SetLevel(_talentSkillInfo.level);
    talentSkill:SetState(_talentSkillInfo.state);
    return talentSkill;
end

-- 生成主动技能
---@param _activeSkillInfo table
---@return BattlePlayerActiveSkill
function BattlePlayerCreator:CreateActiveSkill(_activeSkillInfo)
    local activeSkill = BattlePlayerActiveSkill:New()
    activeSkill:SetId(_activeSkillInfo.id);
    activeSkill:SetLevel(_activeSkillInfo.level);
    activeSkill:SetType(_activeSkillInfo.type);
    return activeSkill;
end

-- 生成启示
---@param _revelationInfo table
---@return BattlePlayerRevelation
function BattlePlayerCreator:CreateRevelation(_revelationInfo)
    local revelation = BattlePlayerRevelation:New()
    revelation:SetId(_revelationInfo.id);
    revelation:SetLeaderId(_revelationInfo.leaderId);
    revelation:SetExp(_revelationInfo.exp);
    revelation:SetLevel(_revelationInfo.level);
    revelation:SetBreachLevel(_revelationInfo.breachLevel);
    revelation:SetOnlyId(_revelationInfo.onlyId);
    revelation:SetLockStatus(_revelationInfo.lockStatus);
    revelation:SetGetTime(_revelationInfo.getTime);

    local prop = BattleObjectProp:New();
    for index, value in ipairs(_revelationInfo.calcPropModelInfo.attributeMap) do
        prop:AddNormalProp(value.key, value.value);
    end
    for index, value in ipairs(_revelationInfo.calcPropModelInfo.growMap) do
        prop:AddGrowProp(value.key, value.value);
    end
    prop:SetCapability(_revelationInfo.calcPropModelInfo.capability);

    for index, value in ipairs(_revelationInfo.SecondaryPropInfo.secondaryKeyList) do
        local targetValue = _revelationInfo.SecondaryPropInfo.secondaryValueList[value];
        prop:AddSecondaryProp(value, targetValue);
    end
    revelation:SetProp(prop);

    return revelation;
end

return BattlePlayerCreator;
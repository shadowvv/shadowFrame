---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hejincheng.
--- DateTime: 2022/2/11 18:35
require "Battle/Logic/Room/BattleLevel/LevelCondition/LevelConditionType"
require "Battle/Logic/Room/BattleLevel/LevelCondition/LevelConditionType_KeyMarkMonsterDead"
require "Battle/Logic/Room/BattleLevel/LevelCondition/LevelConditionType_BossMarkMonsterDead"
require "Battle/Logic/Room/BattleLevel/LevelCondition/LevelConditionType_ProtectTargetMarkMonsterDead"
require "Battle/Logic/Room/BattleLevel/LevelCondition/LevelConditionType_KillMonsterNum"
require "Battle/Logic/Room/BattleLevel/LevelCondition/ConditionEventState"
require "Battle/Logic/Room/BattleLevel/LevelCondition/LevelConditionCallBackFunction"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicEventV2"

-- 枚举
---@class LevelConditionTypeEnum:table
---@type LevelConditionType[] 枚举映射
local LevelConditionTypeEnum = {
    ---@type LevelConditionType 所有怪物阵营的怪物死亡
    ALL_ENEMY_MONSTER_DEAD = LevelConditionType.New(1001, BATTLE_LOGIC_EVENT_ENUM.LEVEL_UNIT_DEAD, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            nil, ConditionCallBack_AllEnemyMonsterDeadEventCheck, true);
    ---@type LevelConditionType boss标记怪物死亡数量大于等于{1}    默认0，即全部
    BOSS_MARK_MONSTER_DEAD = LevelConditionType_BossMarkMonsterDead.New(1002, BATTLE_LOGIC_EVENT_ENUM.BOSS_UNIT_DEAD, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            nil, ConditionCallBack_BossDeadEventCheck, true);
    ---@type LevelConditionType 倒计时结束 仅当关卡计时模式为倒计时时，读取时间字段（见关卡通用-其他模块文档）
    COUNT_DOWN_TIME_OUT = LevelConditionType.New(1003, BATTLE_LOGIC_EVENT_ENUM.COUNT_DOWN_TIME_OUT, ConditionEventState.FAILED, ConditionEventState.SUCCESS);
    ---@type LevelConditionType 关键怪物死亡数量大于等于{1}    默认0，即全部
    KEY_MARK_MONSTER_DEAD = LevelConditionType_KeyMarkMonsterDead.New(1004, BATTLE_LOGIC_EVENT_ENUM.KEY_UNIT_DEAD, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            nil, ConditionCallBack_KeyUnitDeadEventCheck, true);
    ---@type LevelConditionType 抵达关键位置（关键区域）    0为任意英雄，否则为守护目标levelUnitId
    ARRIVE_KEY_AREA = LevelConditionType.New(1005, BATTLE_LOGIC_EVENT_ENUM.LEVEL_UNIT_ENTER_LEVEL_UNIT, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            nil, ConditionCallBack_EnterKeyAreaEventCheck);
    ---@type LevelConditionType 守护目标死亡数量大于等于{1}    默认0，即全部
    PROTECT_TARGET_MARK_MONSTER_DEAD = LevelConditionType.New(1006, BATTLE_LOGIC_EVENT_ENUM.PROTECT_TARGET_UNIT_DEAD, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            nil, ConditionCallBack_ProtectTargetDeadEventCheck, true);
    ---@type LevelConditionType 杀死{1}模板敌方阵营怪物{2}只；    {1}可配置tempID默认0，即任意怪物；
    KILL_MONSTER_NUM = LevelConditionType_KillMonsterNum.New(1007, BATTLE_LOGIC_EVENT_ENUM.LEVEL_UNIT_DEAD, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            nil, ConditionCallBack_MonsterDeadEventCheck, true);
    ---@type LevelConditionType 进入关键区域的关键怪物数量大于等于{1}
    ENTER_KEY_AREA_MONSTER_NUM = LevelConditionType.New(1008, BATTLE_LOGIC_EVENT_ENUM.LEVEL_UNIT_ENTER_LEVEL_UNIT, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            nil, ConditionCallBack_KeyMonsterEnterKeyAreaNumEventCheck);
    ---@type LevelConditionType 当场景内指定物件的交互次数达到{1}次
    BATTLE_COLLECT_SUCCESS_NUM = LevelConditionType.New(1009, BATTLE_LOGIC_EVENT_ENUM.BATTLE_COLLECT_SUCCESS, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            nil, ConditionCallBack_BattleCollectSuccessNumEventCheck);
    ---@type LevelConditionType 所有玩家英雄死亡    包括多人
    ALL_LEADER_DEAD = LevelConditionType.New(2001, BATTLE_LOGIC_EVENT_ENUM.LEVEL_UNIT_DEAD, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
    ---@type LevelConditionType 通关胜利
            nil, ConditionCallBack_AllLeaderDeadEventCheck);
    PASS_WIN = LevelConditionType.New(4001, BATTLE_LOGIC_EVENT_ENUM.BATTLE_OVER, ConditionEventState.FAILED, ConditionEventState.SUCCESS, ConditionCallBackCheckParam_PassWin);
    ---@type LevelConditionType 角色死亡数量不超过{1}名
    LEADER_DEAD_NUM = LevelConditionType.New(4002, BATTLE_LOGIC_EVENT_ENUM.OBJECT_DEAD, ConditionEventState.SUCCESS, ConditionEventState.FAILED,
            nil, ConditionCallBack_LeaderDeadEventCheck);
    ---@type LevelConditionType 通关用时不超过{1}秒
    PASS_TIME = LevelConditionType.New(4003, BATTLE_LOGIC_EVENT_ENUM.BATTLE_OVER, ConditionEventState.SUCCESS, ConditionEventState.FAILED,
            nil, ConditionCallBack_PassTimeEventCheck);
    ---@type LevelConditionType 队伍中存在{1}
    LEADER_IN_TEAM = LevelConditionType.New(4004, BATTLE_LOGIC_EVENT_ENUM.BATTLE_RUN_START, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            nil, ConditionCallBack_LeaderInTeamEventCheck);
    ---@type LevelConditionType 禁止使用{1}技能
    NO_USE_SKILL_ID = LevelConditionType.New(4006, BATTLE_LOGIC_EVENT_ENUM.USE_SKILL_START, ConditionEventState.SUCCESS, ConditionEventState.FAILED, ConditionCallBackCheckParam_NoUseSkillId);
    ---@type LevelConditionType 指定{1}使用次数小于{2}次
    USE_SKILL_NUM = LevelConditionType.New(4007, BATTLE_LOGIC_EVENT_ENUM.USE_SKILL_START, ConditionEventState.SUCCESS, ConditionEventState.FAILED,
            ConditionCallBackCheckParam_UseSkillId, ConditionCallBack_UseSkillCountEventCheck);
    ---@type LevelConditionType 触发元素反应{1}次
    TRIGGER_ELEMENT_REACT_NUM = LevelConditionType.New(4008, BATTLE_LOGIC_EVENT_ENUM.ELEMENT_REACT, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            nil, ConditionCallBack_TriggerElementEventCheck);
    ---@type LevelConditionType 触发{1}反应{2}次
    TRIGGER_ELEMENT_ID_REACT_NUM = LevelConditionType.New(4009, BATTLE_LOGIC_EVENT_ENUM.ELEMENT_REACT, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            ConditionCallBackCheckParam_TriggerElementReactId, ConditionCallBack_TriggerElementIdEventCheck);
    ---@type LevelConditionType 受伤次数不超过{1}（小于等于）
    BE_DAMAGE_COUNT = LevelConditionType.New(4010, BATTLE_LOGIC_EVENT_ENUM.BE_DAMAGED, ConditionEventState.SUCCESS, ConditionEventState.FAILED,
            nil, ConditionCallBack_BeDamageNumEventCheck);
    ---@type LevelConditionType 使用技能类型{1}的次数大于等于{2}
    USE_SKILL_TYPE_NUM = LevelConditionType.New(4011, BATTLE_LOGIC_EVENT_ENUM.USE_SKILL_START, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            nil, ConditionCallBack_UseSkillTypeNumEventCheck);
    ---@type LevelConditionType 阵容中包含式杖类型{1}的角色大于等于{2}    {2}为-1，即不包含,对应检查leader表useWeaponType字段
    HAS_WEAPON_LEADER_NUM = LevelConditionType.New(4012, BATTLE_LOGIC_EVENT_ENUM.BATTLE_RUN_START, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            nil, ConditionCallBack_HasWeaponTypeLeaderNumEventCheck);
    ---@type LevelConditionType 阵容中包含元素类型{1}的角色大于等于{2}    {2}为-1，即不包含,对应检查leader表property字段
    HAS_ELEMENT_LEADER_NUM = LevelConditionType.New(4013, BATTLE_LOGIC_EVENT_ENUM.BATTLE_RUN_START, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            nil, ConditionCallBack_HasElementLeaderNumEventCheck);
    ---@type LevelConditionType 阵容中不包含角色{1}leaderID
    HAS_NOT_LEADER_ID = LevelConditionType.New(4014, BATTLE_LOGIC_EVENT_ENUM.BATTLE_RUN_START, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            nil, ConditionCallBack_LeaderNotInTeamEventCheck);
    ---@type LevelConditionType 守护目标死亡数量不超过{1}
    TARGET_DEAD_NUM_LESS_THAN = LevelConditionType.New(4015, BATTLE_LOGIC_EVENT_ENUM.PROTECT_TARGET_UNIT_DEAD, ConditionEventState.SUCCESS, ConditionEventState.FAILED,
            nil, ConditionCallBack_ProtectTargetDeadLessThanEventCheck);
    ---@type LevelConditionType 守护目标血量不低于{1}%    血量最低的守护目标
    TARGET_HP_NUM_MORE_THAN = LevelConditionType.New(4016, BATTLE_LOGIC_EVENT_ENUM.BE_DAMAGED, ConditionEventState.SUCCESS, ConditionEventState.FAILED,
            nil, ConditionCallBack_TargetHpMoreThanEventCheck);
    ---@type LevelConditionType 角色剩余血量不低于{1}%    血量最低的角色
    LEADER_HP_NUM_MORE_THAN = LevelConditionType.New(4017, BATTLE_LOGIC_EVENT_ENUM.BATTLE_OVER, ConditionEventState.SUCCESS, ConditionEventState.FAILED,
            nil, ConditionCallBack_LeaderHpMoreThanEventCheck);
    ---@type LevelConditionType 进入关键触发区域的关键怪物数量不超过{1}
    ENTER_KEY_AREA_MONSTER_NUM_LESS_THAN = LevelConditionType.New(4018, BATTLE_LOGIC_EVENT_ENUM.LEVEL_UNIT_ENTER_LEVEL_UNIT, ConditionEventState.SUCCESS, ConditionEventState.FAILED,
            nil, ConditionCallBack_KeyMonsterEnterKeyAreaNumLessThanEventCheck);
    ---@type LevelConditionType
    COLLECT_COIN_NUM = LevelConditionType.New(4019, BATTLE_LOGIC_EVENT_ENUM.UNIT_TAG_VALUE_CHANGE, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            nil, ConditionCallBack_CollectCoinEventCheck);
    ---@type LevelConditionType 成功触发{1}次{2}buff{3}层数
    TRIGGER_BUFF_ID_STACK_NUM = LevelConditionType.New(4020, BATTLE_LOGIC_EVENT_ENUM.CASTER_BUFF_STACK_CHANGE, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            ConditionCallBackCheckParam_TriggerBuffStackEventCheck, ConditionCallBack_TriggerBuffStackEventCheck);
    ---@type LevelConditionType 触发{1}次{2}元素效果
    TRIGGER_ELEMENT_EFFECT_NUM = LevelConditionType.New(4021, BATTLE_LOGIC_EVENT_ENUM.ELEMENT_EFFECT, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            nil, ConditionCallBack_TriggerElementEffectEventCheck);
    ---@type LevelConditionType 触发{1}次闪电链
    TRIGGER_ELEMENT_LIGHTNING_BALL_NUM = LevelConditionType.New(4022, BATTLE_LOGIC_EVENT_ENUM.ELEMENT_LIGHTNING_BALL, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            nil, ConditionCallBack_TriggerElementLightningBallNumEventCheck);
    ---@type LevelConditionType 触发{1}次buff {2}类型 {3}层数 {5}buff前置参数 {6}buff后置参数
    TRIGGER_BUFF_TYPE_PARAM_NUM = LevelConditionType.New(4023, BATTLE_LOGIC_EVENT_ENUM.CASTER_BUFF_ADD, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            ConditionCallBackCheckParam_TriggerAddBuffTypeParamNum, ConditionCallBack_TriggerAddBuffTypeParamNum);
    ---@type LevelConditionType 延长{1}元素击破持续时间{2}
    TRIGGER_ADD_ELEMENT_EFFECT_TIME = LevelConditionType.New(4024, BATTLE_LOGIC_EVENT_ENUM.CHANGE_ELEMENT_EFFECT_TIME, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            ConditionCallBackCheckParam_TriggerCheckAddElementEffectTime, ConditionCallBack_TriggerCheckAddElementEffectTime);
    ---@type LevelConditionType 在{3}状态下使用{1}类型技能击中敌人{2}次
    SKILL_TYPE_BARRAGE_HIT_NUM = LevelConditionType.New(4025, BATTLE_LOGIC_EVENT_ENUM.HIT_TARGET, ConditionEventState.FAILED, ConditionEventState.SUCCESS,
            nil, ConditionCallBack_SkillTypeBarrageHitNum);
}

-- 枚举映射
---@type table<string,LevelConditionType> 枚举映射
local levelConditionTypeIdMap = {};
-- 根据事件类型枚举映射
---@type table<string,LevelConditionType[]> 枚举映射
local eventLevelConditionTypeMap = {};

-- 初始化LevelCondition映射
for _, value in pairs(LevelConditionTypeEnum) do
    levelConditionTypeIdMap[tostring(value:GetId())] = value;
    -- 按event分类
    local conditionTypes = eventLevelConditionTypeMap[tostring(value:GetEvent())]
    if conditionTypes == nil then
        eventLevelConditionTypeMap[tostring(value:GetEvent())] = {}
        conditionTypes = eventLevelConditionTypeMap[tostring(value:GetEvent())]
    end
    table.insert(conditionTypes, value)
end

-- 根据id获取枚举
---@type function
---@param _id number
---@return LevelConditionType
function GetLevelConditionTypeById(_id)
    return levelConditionTypeIdMap[tostring(_id)]
end

-- 根据事件id获取所有条件判断
---@type function
---@param _event number 事件id
---@return LevelConditionType[]
function GetLevelConditionTypesByEvent(_event)
    return eventLevelConditionTypeMap[tostring(_event)]
end
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hejincheng.
--- DateTime: 2022/4/14 18:26
---

------------------------------------------------------------------------------------------------------------------
---参数检测
------------------------------------------------------------------------------------------------------------------
---胜利通关参数检测
---@param _param table
---@param _battleLogicEvent BattleLogicEventV2
---@param _uid number
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBackCheckParam_PassWin(_param, _battleLogicEvent, _uid, _conditionEvent)
    local _eventCompareParam = _battleLogicEvent.eventCompareParam
    return _eventCompareParam.result == BattleResultEnum.WIN:GetId()
end

---禁用技能参数检测
---@param _param table
---@param _battleLogicEvent BattleLogicEventV2
---@param _uid number
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBackCheckParam_NoUseSkillId(_param, _battleLogicEvent, _uid, _conditionEvent)
    local _eventCompareParam = _battleLogicEvent.eventCompareParam
    local _checkSkillId = _param[1]
    return _checkSkillId <= 0 or _checkSkillId == _eventCompareParam.skillId
end

---使用技能参数检测
---@param _param table
---@param _battleLogicEvent BattleLogicEventV2
---@param _uid number
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBackCheckParam_UseSkillId(_param, _battleLogicEvent, _uid, _conditionEvent)
    local _eventCompareParam = _battleLogicEvent.eventCompareParam
    local _checkSkillId = _param[1]
    return _checkSkillId <= 0 or _checkSkillId == _eventCompareParam.skillId
end

---触发元素反应参数检测
---@param _param table
---@param _battleLogicEvent BattleLogicEventV2
---@param _uid number
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBackCheckParam_TriggerElementReactId(_param, _battleLogicEvent, _uid, _conditionEvent)
    local _eventCompareParam = _battleLogicEvent.eventCompareParam
    for _, _checkReactionId in pairs(_param[4]) do
        if _checkReactionId == _eventCompareParam.elementReactId then
            -- 是需要检测的反应id
            return true
        end
    end
    return false
end

---触发buff类型参数检测
---@param _param table
---@param _battleLogicEvent BattleLogicEventV2
---@param _uid number
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBackCheckParam_TriggerAddBuffTypeParamNum(_param, _battleLogicEvent, _uid, _conditionEvent)
    local _eventCompareParam = _battleLogicEvent.eventCompareParam
    local _checkBuffMetaType = _param[2]
    local _checkBuffFrontParam = _param[5]
    local _checkBuffBehindParam = _param[6]
    local _checkBuffBehindIntParam = _param[7]

    local battleRoom = GetBattleRoom(_battleLogicEvent.battleId)
    if _eventCompareParam.castNetId then
        ---@type BattleUnit_Player
        local _castUnit = battleRoom.battleUnitManager:GetUnit(_eventCompareParam.castNetId)
        if not _castUnit or not _castUnit:CheckUnitType(BattleUnitType.Player, true) then
            -- 仅处理玩家释放buff
            return
        end
    end

    ---@type number
    local _buffId = _eventCompareParam.buffId
    if not _buffId then
        return false
    end
    ---@type BuffGroup
    local _buffGroup = battleRoom.inputDataSource:GetDict("BuffGroup", _buffId)
    if not _buffGroup then
        return false
    end
    for _, _buffInstanceId in pairs(_buffGroup.buffInstanceId) do
        if CheckBuffInstanceParams(battleRoom, _buffInstanceId, _checkBuffMetaType, _checkBuffFrontParam, _checkBuffBehindParam, _checkBuffBehindIntParam) then
            return true
        end
    end
    return false
end

function CheckBuffInstanceParams(battleRoom, _buffInstanceId, _checkBuffMetaType, _checkBuffFrontParam, _checkBuffBehindParam, _checkBuffBehindIntParam)
    ---@type BuffAndActionInstance
    local _buffInstance = battleRoom.inputDataSource:GetDict("BuffAndActionInstance", _buffInstanceId)
    if not _buffInstance then
        return false
    end
    ---@type BuffAndActionTemplate
    local _buffTemplate = battleRoom.inputDataSource:GetDict("BuffAndActionTemplate", _buffInstance.templateId)
    if not _buffTemplate then
        return false
    end
    if _buffTemplate.metaType ~= _checkBuffMetaType then
        return false
    end
    if _buffTemplate.frontParam and #_buffTemplate.frontParam > 0 and _checkBuffFrontParam and #_checkBuffFrontParam > 0 then
        -- 前置参数对比
        for i = 1, #_checkBuffFrontParam do
            local _checkParam = _checkBuffFrontParam[i]
            if _checkParam ~= 0 and _buffTemplate.frontParam[i] ~= 0 and _buffTemplate.frontParam[i] ~= _checkParam then
                return false
            end
        end
    end
    if _buffTemplate.behindParam and #_buffTemplate.behindParam > 0 and _checkBuffBehindParam and #_checkBuffBehindParam > 0 then
        -- 后置参数对比
        for i = 1, #_checkBuffBehindParam do
            local _checkParam = _checkBuffBehindParam[i]
            if _checkParam ~= 0 and _buffTemplate.behindParam[i] ~= 0 and _buffTemplate.behindParam[i] ~= _checkParam then
                return false
            end
        end
    end
    if _buffTemplate.behindParamint and #_buffTemplate.behindParamint > 0 and _checkBuffBehindIntParam and #_checkBuffBehindIntParam > 0 then
        -- 后置参数对比
        for i = 1, #_checkBuffBehindIntParam do
            local _checkParam = _checkBuffBehindIntParam[i]
            if _checkParam ~= 0 and _buffTemplate.behindParamint[i] ~= 0 and _buffTemplate.behindParamint[i] ~= _checkParam then
                return false
            end
        end
    end
    return true
end

---触发元素效果时间修改检测
---@param _param table
---@param _battleLogicEvent BattleLogicEventV2
---@param _uid number
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBackCheckParam_TriggerCheckAddElementEffectTime(_param, _battleLogicEvent, _uid, _conditionEvent)
    local _elementId = _battleLogicEvent.eventCompareParam.elementId;
    local _checkElementId = _param[1]
    return _checkElementId == 0 or _checkElementId == _elementId
end

-- 检测buff层数改变
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBackCheckParam_TriggerBuffStackEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local _buffId = _battleLogic.eventCompareParam.buffId
    local _startNum = _battleLogic.eventTriggerParam.startStack
    local _endNum = _battleLogic.eventTriggerParam.endStack

    local _checkBuffId = _param[2]
    local _checkBuffStack = _param[3]

    if _checkBuffId > 0 and _buffId ~= _checkBuffId then
        return false
    end
    if not _checkBuffStack or _checkBuffStack == 0 then
        _checkBuffStack = 1
    end
    -- 在检测范围外
    if _checkBuffStack < _startNum + 1 or _checkBuffStack > _endNum then
        return false
    end
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    local _castNetId = _battleLogic.eventTriggerParam.castNetId
    if not _castNetId then
        return
    end
    ---@type BattleUnit_Player
    local _unit = battleRoom.battleUnitManager:GetUnit(_castNetId, true)
    if not _unit or not _unit:CheckUnitType(BattleUnitType.Player, true) then
        -- 仅处理玩家释放buff
        return
    end
    local _checkCount = _param[1]
    if not _checkCount then
        return false
    end
    return true
end

------------------------------------------------------------------------------------------------------------------
---条件检测
------------------------------------------------------------------------------------------------------------------
-- 检测所有怪物死亡
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_AllEnemyMonsterDeadEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    ---@type BattleUnitType
    local _unitType = _battleLogic.eventTriggerParam.levelUnitType
    if not _unitType then
        return false
    end
    if _unitType ~= BattleUnitType.Monster then
        -- 不是怪
        return false
    end

    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    local _monsterLevelUnits = battleRoom.battleLevelManager.levelUnitManager:GetLevelUnitByType(LevelUnitTypeEnum.MONSTER:GetId())
    if _monsterLevelUnits == nil then
        -- 没有怪，可以认为所有怪都死了
        return true
    end

    for _, _monsterLevelUnit in pairs(_monsterLevelUnits) do
        local _monsterFirstCamp = _monsterLevelUnit.firstCamp
        if _monsterFirstCamp == nil then
            -- 还有怪没刷出来，不算全部死亡
            return false
        end
        if _monsterFirstCamp == BattleUnitCampType.Monster then
            if _monsterLevelUnit.state ~= LevelUnitStateEnum.DEAD then
                -- 找到一个没有死亡的怪物
                return false
            end
        end
    end
    return true
end

-- 检测boss死亡数量
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_BossDeadEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    local checkNum = _param[1]
    if checkNum == 0 then
        for _, _unit in pairs(battleRoom.battleLevelManager.levelUnitManager.bossUnits) do
            if _unit.state ~= LevelUnitStateEnum.DEAD then
                return false
            end
        end
        return true
    else
        return battleRoom.dataCollectManager.bossUnitDeadNum >= checkNum
    end
end

-- 检测关键单位死亡数量
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_KeyUnitDeadEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    local checkNum = _param[1]
    if checkNum == 0 then
        for _, _unit in pairs(battleRoom.battleLevelManager.levelUnitManager.keyUnits) do
            if _unit.state ~= LevelUnitStateEnum.DEAD then
                return false
            end
        end
        return true
    else
        return battleRoom.dataCollectManager.keyUnitDeadNum >= checkNum
    end
end

-- 检测守护目标单位死亡数量
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_ProtectTargetDeadEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    local checkNum = _param[1]
    if checkNum == 0 then
        for _, _unit in pairs(battleRoom.battleLevelManager.levelUnitManager.protectUnits) do
            if _unit.state ~= LevelUnitStateEnum.DEAD then
                return false
            end
        end
        return true
    else
        return battleRoom.dataCollectManager.protectTargetUnitDeadNum >= checkNum
    end
end

-- 检测怪物死亡数量
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_MonsterDeadEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    local monsterInstanceId = math.floor(_param[1])
    local checkNum = _param[2]

    local monsterNetId = _battleLogic.netId
    ---@type BattleUnit_Monster
    local _monsterUnit = battleRoom.battleUnitManager:GetUnit(monsterNetId, true)
    if not _monsterUnit then
        return false
    end
    if _monsterUnit:GetUnitType() ~= BattleUnitType.Monster then
        -- 不是怪
        return false
    end
    ---@type BattleUnitCom_Camp
    local comCamp = _monsterUnit:GetComponent(BattleUnitComponentType.Camp)
    if not comCamp or comCamp:GetFirstCamp() ~= BattleUnitCampType.Monster then
        -- 非怪物阵营（友方怪）
        return false
    end

    local _deadMonsters = battleRoom.dataCollectManager.campDeadDic[tostring(BattleUnitCampType.Monster)]
    if not _deadMonsters then
        return false
    end

    local deadCount = 0
    for _, _deadMonster in pairs(_deadMonsters) do
        if monsterInstanceId == 0 then
            -- 累计死亡怪物
            deadCount = deadCount + 1
        else
            local _deadMonsterInstanceId = _deadMonster.deadDictId
            if _deadMonsterInstanceId == monsterInstanceId then
                -- 累计死亡怪物
                deadCount = deadCount + 1
            end
        end
        if deadCount >= checkNum then
            return true
        end
    end
    return false
end

-- 检测通关胜利时间条件
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_PassTimeEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    local runSeconds = battleRoom.battleLevelManager:GetStage(BattleLevel_Define_StageEnum.RunBattle):GetRunTimeSecond()
    return runSeconds >= _param[1]
end

-- 检测存在xx武将条件
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_LeaderInTeamEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local _checkParam = math.floor(_param[1])
    for _, _unit in pairs(_targets) do
        -- 遍历所有人
        for _, _object in pairs(_unit:GetAllObjectDic()) do
            local leaderId = _object:GetDicId()
            if _checkParam == leaderId then
                return true
            end
        end
    end
    return false
end

-- 使用技能id次数检测
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_UseSkillCountEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    local _skillId = _battleLogic.eventCompareParam.skillId

    if _battleLogic.netId then
        local _unit = battleRoom.battleUnitManager:GetUnit(_battleLogic.netId, true)
        if not _unit or _unit:GetUnitType() ~= BattleUnitType.Player then
            -- 只统计玩家使用技能
            return false
        end
    end

    local _skillIdStateCountDic = battleRoom.dataCollectManager.playerSkillIdCountDic
    if not _skillIdStateCountDic then
        return false
    end

    local _checkCount = _param[2]
    local _checkStateId = _param[3]
    return CheckStateSkillCount(_targets, _checkCount, _checkStateId, _skillIdStateCountDic, _skillId)
end

-- 使用技能类型次数检测
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_UseSkillTypeNumEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    if _battleLogic.netId then
        local _unit = battleRoom.battleUnitManager:GetUnit(_battleLogic.netId, true)
        if not _unit or _unit:GetUnitType() ~= BattleUnitType.Player then
            -- 只统计玩家
            return false
        end
    end

    ---@type number
    local _skillId = _battleLogic.eventCompareParam.skillId
    ---@type Skill
    local _skill = battleRoom.inputDataSource:GetDict("Skill", _skillId)
    if not _skill then
        return false
    end
    local _skillType = _skill.skillType

    ---@type number
    local _checkSkillType = _param[1]
    if _skillType > 0 and math.floor(_checkSkillType) ~= _skillType then
        -- 不是要检测的技能类型
        return false
    end
    local _skillTypeStateCountDic = battleRoom.dataCollectManager.playerSkillTypeCountDic
    if not _skillTypeStateCountDic then
        return false
    end

    local _checkCount = _param[2]
    local _checkStateId = _param[3]
    return CheckStateSkillCount(_targets, _checkCount, _checkStateId, _skillTypeStateCountDic, _skillType)
end

function CheckStateSkillCount(_targets, _checkCount, _checkStateId, _skillStateCountDic, _checkKey)
    local allCount = 0
    local _checkStateKey = tostring(math.floor(_checkStateId))
    for _, _unitPlayer in pairs(_targets) do
        local _skillStateCount = _skillStateCountDic[tostring(_unitPlayer:GetPlayerId())]
        if _skillStateCount then
            ---@type number 累计技能使用次数
            local _stateCountDic = _skillStateCount[tostring(_checkKey)]
            if _stateCountDic then
                local _count = 0
                if not _checkStateId or _checkStateId == 0 then
                    -- 检测全部状态释放的技能
                    for _, _stateCount in pairs(_stateCountDic) do
                        _count = _count + _stateCount
                    end
                else
                    -- 检测指定状态释放的技能
                    _count = _stateCountDic[_checkStateKey]
                end

                if _count then
                    allCount = allCount + _count
                    if allCount >= _checkCount then
                        return true
                    end
                end
            end
        end
    end
    return false
end

-- 检测元素反应触发
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_TriggerElementEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    if _battleLogic.netId then
        local _unit = battleRoom.battleUnitManager:GetUnit(_battleLogic.netId, true)
        if not _unit or not _unit:CheckUnitType(BattleUnitType.Player, true) then
            -- 只统计玩家
            return false
        end
    end

    local _elementCollectDatas = battleRoom.dataCollectManager.elementCollectDataDic
    if not _elementCollectDatas then
        return false
    end

    local _allCount = 0
    for _, _unitPlayer in pairs(_targets) do
        local _elementCollectData = _elementCollectDatas[tostring(_unitPlayer:GetPlayerId())]
        ---@type ElementCollectData[]
        if _elementCollectData then
            _allCount = _allCount + #_elementCollectData
            if _allCount >= _param[1] then
                return true
            end
        end
    end

    return false
end

-- 检测buff层数改变
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_TriggerBuffStackEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local _checkCount = _param[1]
    ---@type number
    local _triggerCount = _conditionEvent.customData.triggerCount
    if not _triggerCount then
        _triggerCount = 0
    end
    _triggerCount = _triggerCount + 1
    _conditionEvent.customData.triggerCount = _triggerCount
    return _triggerCount >= _checkCount
end

-- 检测元素效果触发
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_TriggerElementEffectEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    ---@type BattleUnit_Player
    local _unit = battleRoom.battleUnitManager:GetUnit(_battleLogic.netId, true)
    if _battleLogic.netId then
        if not _unit or not _unit:CheckUnitType(BattleUnitType.Player, true) then
            -- 只统计玩家
            return false
        end
    end
    local _checkCount = _param[1]
    if not _checkCount then
        return false
    end
    local _uid = _unit:GetPlayerId()

    local _checkElementId = _param[2]
    if not _checkElementId or _checkElementId == 0 then
        -- 不配elementId，统计全部elementId次数
        local _allCount = battleRoom.dataCollectManager.playerElementEffectCountDic[tostring(_uid)]
        if not _allCount then
            return false
        end
        return _allCount >= _checkCount
    elseif _battleLogic.eventCompareParam.elementId == _checkElementId then
        ---@type table<string,number>
        local _elementIdCountDic = battleRoom.dataCollectManager.playerElementEffectIdCountDic[tostring(_uid)]
        if not _elementIdCountDic then
            return false
        end
        -- 配了elementId，按elementId统计
        local _elementEffectCount = _elementIdCountDic[tostring(_checkElementId)]
        if not _elementEffectCount then
            return false
        end
        return _elementEffectCount >= _checkCount
    end
    return false
end

-- 检测元素反应触发
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_TriggerElementIdEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    if _battleLogic.netId then
        local _unit = battleRoom.battleUnitManager:GetUnit(_battleLogic.netId, true)
        if not _unit or not _unit:CheckUnitType(BattleUnitType.Player, true) then
            -- 只统计玩家
            return false
        end
    end

    local _elementIdCountDic = battleRoom.dataCollectManager.playerElementIdCountDic
    if not _elementIdCountDic then
        return false
    end

    local _checkReactionIds = _param[4]
    local _checkCount = _param[2]

    local allCount = 0
    for _, _unitPlayer in pairs(_targets) do
        local _elementIdCount = _elementIdCountDic[tostring(_unitPlayer:GetPlayerId())]
        if _elementIdCount then
            for _, _checkReactionId in pairs(_checkReactionIds) do
                local _count = _elementIdCount[tostring(_checkReactionId)]
                if _count then
                    allCount = allCount + _count
                    if allCount >= _checkCount then
                        return true
                    end
                end
            end
        end
    end
    return false
end

-- 检测武将死亡数量
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_LeaderDeadEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    if _battleLogic.netId then
        local _unit = battleRoom.battleUnitManager:GetUnit(_battleLogic.netId, true)
        if not _unit or _unit:GetUnitType() ~= BattleUnitType.Player then
            -- 只统计玩家
            return false
        end
    end

    local _allDeadCount = 0
    for _, _unitPlayer in pairs(_targets) do
        local _list = _unitPlayer:GetTypeObjectList(BattleObjectType.LeaderHero)
        for i = 1, #_list do
            local _heroObj = _list[i]
            if _heroObj:CheckDead() then
                _allDeadCount = _allDeadCount + 1
                if _allDeadCount > _param[1] then
                    return true
                end
            end
        end
    end
    return false
end

-- 所有武将死亡
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_AllLeaderDeadEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    if not _targets or #_targets == 0 then
        return true
    end
    for _, _unitPlayer in pairs(_targets) do
        if _unitPlayer:CheckOnlineState(BattleUnitOnlineState.OnLine) then
            for _, _leaderObject in pairs(_unitPlayer:GetAllObjectDic()) do
                if not _leaderObject:CheckDead() then
                    return false
                end
            end
        end
    end
    return true
end

-- 检测没有角色id
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_LeaderNotInTeamEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local _leaderId = math.floor(_param[1])

    for _, _unitPlayer in pairs(_targets) do
        for _, _leaderObject in pairs(_unitPlayer:GetAllObjectDic()) do
            if _leaderObject:GetDicId() == _leaderId then
                return false
            end
        end
    end
    return true
end

-- 检测阵容中包含元素类型的角色数量
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_HasElementLeaderNumEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local _elementType = math.floor(_param[1])
    local _leaderNum = _param[2]

    local _counter = 0
    for _, _unitPlayer in pairs(_targets) do
        for _, _leaderObject in pairs(_unitPlayer:GetAllObjectDic()) do
            ---@type Leader
            local _leader = _leaderObject:GetDataInstanceXls()
            if _leader.property == _elementType then
                _counter = _counter + 1
            end
        end
    end
    if _leaderNum == -1 then
        -- -1判断不包含
        return _counter == 0
    end
    return _counter >= _leaderNum
end

-- 检测阵容中包含式杖类型的角色数量
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_HasWeaponTypeLeaderNumEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local _weaponType = math.floor(_param[1])
    local _leaderNum = _param[2]
    local _counter = 0
    for _, _unitPlayer in pairs(_targets) do
        for _, _leaderObject in pairs(_unitPlayer:GetAllObjectDic()) do
            ---@type Leader
            local _leader = _leaderObject:GetDataInstanceXls()
            if _leader.useWeaponType == _weaponType then
                _counter = _counter + 1
            end
        end
    end
    if _leaderNum == -1 then
        -- -1判断不包含
        return _counter == 0
    end
    return _counter >= _leaderNum
end

-- 检测受伤次数不超过（小于等于）
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_BeDamageNumEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    if _battleLogic.netId then
        local _unit = battleRoom.battleUnitManager:GetUnit(_battleLogic.netId, true)
        if not _unit or _unit:GetUnitType() ~= BattleUnitType.Player then
            -- 只统计玩家
            return false
        end
    end

    local _beDamageCountDic = battleRoom.dataCollectManager.beDamageCountDic
    local _allCount = 0
    for _, _unitPlayer in pairs(_targets) do
        local _beDamageCount = _beDamageCountDic[tostring(_unitPlayer:GetPlayerId())]
        if _beDamageCount then
            _allCount = _allCount + _beDamageCount
            if _allCount > _param[1] then
                return true
            end
        end
    end
    return false
end

-- 检测单位抵挡关键位置事件
-- 0为任意英雄，否则为守护目标levelUnitId
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_EnterKeyAreaEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local _levelUnitId = _battleLogic.eventTriggerParam.levelUnitId
    local _enterNetId = _battleLogic.eventTriggerParam.enterNetId

    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    local _levelUnit = battleRoom.battleLevelManager.levelUnitManager:GetLevelUnit(_levelUnitId)
    if not _levelUnit or _levelUnit.type ~= LevelUnitTypeEnum.TRIGGER or not _levelUnit.keyUnit then
        -- 非关键区域
        return false
    end
    local _unit = battleRoom.battleUnitManager:GetUnit(_enterNetId)
    if not _unit then
        return false
    end
    local _checkParam = math.floor(_param[1])
    if _checkParam == 0 then
        -- 任意英雄
        return _unit:GetUnitType() == BattleUnitType.Player
    else
        -- 守护目标levelUnitId
        return _unit:GetLevelUnitId() == _checkParam
    end
end

-- 检测单位抵挡关键位置事件
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_KeyMonsterEnterKeyAreaNumEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    return battleRoom.dataCollectManager.enterKeyAreaKeyMonsterNum >= _param[1]
end

-- 检测守护目标单位死亡数量不超过
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_ProtectTargetDeadLessThanEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    return battleRoom.dataCollectManager.protectTargetUnitDeadNum > _param[1]
end

-- 角色剩余血量不低于{1}%    血量最低的角色
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_LeaderHpMoreThanEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    local _minLeaderHp = battleRoom.dataCollectManager.minLeaderHp
    if _minLeaderHp < 0 then
        -- 无人受伤
        return false
    end
    return _minLeaderHp < _param[1]
end

-- 守护目标血量不低于{1}%    血量最低的守护目标
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_TargetHpMoreThanEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    local targetNetId = _battleLogic.eventTriggerParam.targetNetId
    local targetObjectId = _battleLogic.eventTriggerParam.targetObjectId
    local targetUnit = battleRoom.battleUnitManager:GetUnit(targetNetId, true)
    if not targetUnit then
        return false
    end
    local _levelUnitId = targetUnit:GetLevelUnitId()
    local levelUnit = battleRoom.battleLevelManager.levelUnitManager:GetLevelUnit(_levelUnitId)
    if not levelUnit or not levelUnit.target then
        -- 非守护目标
        return false
    end
    local targetObject = targetUnit:GetHeroObject(targetObjectId)
    if not targetObject then
        return false
    end
    ---@type BattleObjCom_Property
    local propCom = targetObject:GetComponent(BattleObjectComponentType.Property)
    local hpPercent = propCom:GetPropertyPercentByName(BattlePropertyEnum.Hp_Cur) * 100
    return hpPercent < _param[1]
end

-- 进入关键触发区域的关键怪物数量不超过{1}
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_KeyMonsterEnterKeyAreaNumLessThanEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    return battleRoom.dataCollectManager.enterKeyAreaKeyMonsterNum > _param[1]
end

-- 检测物件成功交互次数
-- 0为任意物件，否则为物件id（GadGet）
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_BattleCollectSuccessNumEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)

    local _checkParam = math.floor(_param[1])
    local _checkNum = _param[2]

    local _allCount = 0
    for _, _unitPlayer in pairs(_targets) do
        local _playerId = _unitPlayer:GetPlayerId()
        ---@type table<string,number>
        local collectObjectIdDic = battleRoom.dataCollectManager.collectSceneObjectIdDic[tostring(_playerId)]

        if _checkParam > 0 then
            local count = collectObjectIdDic[tostring(_checkParam)]
            if count then
                _allCount = _allCount + count
            end
        else
            for _, _count in pairs(collectObjectIdDic) do
                _allCount = _allCount + _count
            end
        end
        if _allCount >= _checkNum then
            return true
        end
    end
    return false
end

-- 收集金币数量
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_CollectCoinEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    if not _battleLogic.eventTriggerParam.tag or _battleLogic.eventTriggerParam.tag ~= BattleUnitTagEnum.CollectCoinPoints then
        return false
    end
    local _allCoin = 0
    for _, _unitPlayer in pairs(_targets) do
        ---@type BattleUnitCom_TagSelector
        local _tagCollector = _unitPlayer:GetComponent(BattleUnitComponentType.TagSelector)
        if _tagCollector then
            local _count = _tagCollector:GetTag(BattleUnitTagEnum.CollectCoinPoints)
            if _count then
                _allCoin = _allCoin + _count
            end
        end
    end
    return _allCoin >= _param[1]
end

-- 检测元素闪电链触发
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_TriggerElementLightningBallNumEventCheck(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    ---@type BattleUnit_Player
    local _unit = battleRoom.battleUnitManager:GetUnit(_battleLogic.netId, true)
    if not _unit or _unit:GetUnitType() ~= BattleUnitType.Player then
        -- 只统计玩家使用技能
        return false
    end
    local _checkCount = _param[1]
    if not _checkCount then
        return false
    end
    local _uid = _unit:GetPlayerId()
    local _count = battleRoom.dataCollectManager.playerElementLightningBallCountDic[tostring(_uid)]
    if not _count then
        return false
    end
    return _count >= _checkCount
end

-- 按类别和参数检测Buff触发
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_TriggerAddBuffTypeParamNum(_param, _battleLogic, _targets, _conditionEvent)
    ---@type number
    local _count = _conditionEvent.customData.addBuffCount
    if not _count then
        _count = 0
    end
    _count = _count + 1
    _conditionEvent.customData.addBuffCount = _count
    local _checkParam = _param[1]
    return _count >= _checkParam
end

-- 检测触发修改元素效果时间
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_TriggerCheckAddElementEffectTime(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    local _checkElementId = Mathf.Floor(_param[1])
    local _checkAddTime = _param[2]

    local _allTime = 0
    for _, _unitPlayer in pairs(_targets) do
        local _elementAddEffectingTimeDic = battleRoom.dataCollectManager.playerElementAddEffectingTimeDic[tostring(_unitPlayer:GetPlayerId())]
        if _elementAddEffectingTimeDic then
            if _checkElementId == 0 then
                for _, _time in pairs(_elementAddEffectingTimeDic) do
                    _allTime = _allTime + _time
                    if _allTime >= _checkAddTime then
                        return true
                    end
                end
            else
                local _time = _elementAddEffectingTimeDic[tostring(_checkElementId)]
                if _time then
                    _allTime = _allTime + _time
                    if _allTime >= _checkAddTime then
                        return true
                    end
                end
            end
        end
    end
    return false
end

---触发弹幕击中技能检测
---@type function
---@param _param table
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@param _conditionEvent ConditionEvent
---@return boolean
function ConditionCallBack_SkillTypeBarrageHitNum(_param, _battleLogic, _targets, _conditionEvent)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    ---@type number
    local _skillId = _battleLogic.eventTriggerParam.originalHeroSkillId
    if not _skillId then
        return false
    end
    ---@type Skill
    local _skill = battleRoom.inputDataSource:GetDict("Skill", _skillId)
    if not _skill then
        return false
    end
    local _skillType = _skill.skillType
    ---@type number
    local _checkSkillType = _param[1]
    if _checkSkillType > 0 and math.floor(_checkSkillType) ~= _skillType then
        -- 不是要检测的技能类型
        return false
    end
    local _skillTypeStateHitCountDic = battleRoom.dataCollectManager.playerSkillTypeHitCountDic
    if not _skillTypeStateHitCountDic then
        return false
    end
    local _checkCount = _param[2]
    local _checkStateId = _param[3]
    return CheckStateSkillCount(_targets, _checkCount, _checkStateId, _skillTypeStateHitCountDic, _skillType)
end
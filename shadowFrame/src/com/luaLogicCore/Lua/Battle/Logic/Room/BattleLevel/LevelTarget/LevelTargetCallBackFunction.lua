---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hejincheng.
--- DateTime: 2022/8/1 19:59
---

-- 关卡单位血量变化
---@type function
---@param _levelTarget LevelTarget
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@return number,number
function TargetCallBack_LevelUnitTargetHpChange(_levelTarget, _battleLogic, _targets)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    local _levelUnit = battleRoom.battleLevelManager.levelUnitManager:GetProtectTargetLevelUnitByTargetId(_levelTarget.targetValue1)
    if _levelUnit.netId ~= _battleLogic.netId then
        return nil, nil
    end
    -- 受击者是所关注的unit
    local _unit = battleRoom.battleUnitManager:GetUnit(_levelUnit.netId)
    if not _unit then
        return nil, nil
    end
    ---@type BattleObjCom_Property
    local _comProp = _unit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Property)
    if not _comProp then
        return nil, nil
    end

    ---@type number
    local curProgress = _battleLogic.eventTriggerParam.newHp
    ---@type number
    local maxProgress = _comProp:GetPropertyByName(BattlePropertyEnum.Hp_Max)
    return math.ceil(curProgress), math.ceil(maxProgress)
end

-- 击杀怪物
---@type function
---@param _levelTarget LevelTarget
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@return number,number
function TargetCallBack_KillMonster(_levelTarget, _battleLogic, _targets)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    local _levelUnitId = _battleLogic.eventTriggerParam.levelUnitId
    local _levelUnit = battleRoom.battleLevelManager.levelUnitManager:GetLevelUnit(_levelUnitId)
    if not _levelUnit then
        -- 没这关卡单位
        return nil, nil
    end
    local _unit = battleRoom.battleUnitManager:GetUnit(_levelUnit.netId, true)
    if not _unit or _unit:GetUnitType() ~= BattleUnitType.Monster then
        -- 只统计怪
        return nil, nil
    end
    ---@type BattleUnitCom_TagSelector
    local _tagCom = _unit:GetComponent(BattleUnitComponentType.TagSelector)
    if not _tagCom then
        return nil, nil
    end
    local _hurtFromNetId = _tagCom:GetTag(BattleUnitTagEnum.LastHurtFromNetID)
    if not _hurtFromNetId then
        return nil, nil
    end
    local _hurtUnit = battleRoom.battleUnitManager:GetUnit(_hurtFromNetId, true)
    if not _hurtUnit or not _hurtUnit:CheckUnitType(BattleUnitType.Player, true) then
        -- 只能统计玩家杀怪
        return nil, nil
    end
    return _levelTarget.curProgress + 1, _levelTarget.targetValue1
end

-- 进入区域怪物
---@type function
---@param _levelTarget LevelTarget
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@return number,number
function TargetCallBack_EnterAreaMonster(_levelTarget, _battleLogic, _targets)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    ---@type number
    local _levelUnitId = _battleLogic.eventTriggerParam.levelUnitId
    ---@type number
    local _enterNetId = _battleLogic.eventTriggerParam.enterNetId
    local _levelUnit = battleRoom.battleLevelManager.levelUnitManager:GetLevelUnit(_levelUnitId)
    if not _levelUnit or _levelUnit.type ~= LevelUnitTypeEnum.TRIGGER or not _levelUnit.keyUnit then
        -- 非区域或关键单位
        return nil, nil
    end
    local _enterUnit = battleRoom.battleUnitManager:GetUnit(_enterNetId)
    if not _enterUnit then
        -- 单位没了
        return nil, nil
    end
    local _enterLevelUnit = battleRoom.battleLevelManager.levelUnitManager:GetLevelUnit(_enterUnit:GetLevelUnitId())
    if _enterLevelUnit and not _enterLevelUnit.keyUnit then
        -- 非关键单位
        return nil, nil
    end
    return _levelTarget.curProgress + 1, _levelTarget.targetValue1
end

-- 怪物波次
---@type function
---@param _levelTarget LevelTarget
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@return number,number
function TargetCallBack_WaveMonster(_levelTarget, _battleLogic, _targets)
    return TargetCallBack_TagValueChange(_levelTarget, TAG_ENUM.MONSTER_WAVE, _battleLogic, _targets)
end

-- 关卡Tag值变化
---@type function
---@param _levelTarget LevelTarget
---@param _tag number
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@return number,number
function TargetCallBack_TagValueChange(_levelTarget, _tag, _battleLogic, _targets)
    if _battleLogic.eventCompareParam.tag ~= _tag then
        return nil, nil
    end
    ---@type number
    local _value = _battleLogic.eventTriggerParam.value
    return _value, _levelTarget.targetValue1
end

-- 物件交互次数
---@type function
---@param _levelTarget LevelTarget
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@return number,number
function TargetCallBack_BattleCollectSuccess(_levelTarget, _battleLogic, _targets)
    local _checkParam = _levelTarget.targetValue1
    local _allCount = 0
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    for _, collectObjectIdDic in pairs(battleRoom.dataCollectManager.collectSceneObjectIdDic) do
        for _collectObjectId, _collectNum in pairs(collectObjectIdDic) do
            if _checkParam == 0 or _checkParam == tonumber(_collectObjectId) then
                -- 计数所有的物件id或指定物件id
                _allCount = _allCount + _collectNum
            end
        end
    end
    return _allCount, _levelTarget.targetValue2
end

-- 收集金币数
---@type function
---@param _levelTarget LevelTarget
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@return number,number
function TargetCallBack_UnitTagValueChange(_levelTarget, _battleLogic, _targets)
    local _checkParam = _levelTarget.targetValue1
    local _allCoin = 0
    for _, _unitPlayer in pairs(_targets) do
        ---@type BattleUnitCom_TagSelector
        local _tagCollector = _unitPlayer:GetComponent(BattleUnitComponentType.TagSelector)
        if _tagCollector then
            local _count = _tagCollector:GetTag(BattleUnitTagEnum.CollectCoinPoints)
            if _count then
                _allCoin = _allCoin + _count
            end
        end
    end
    return _allCoin, _checkParam
end


-- 击杀怪物
---@type function
---@param _levelTarget LevelTarget
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@return number,number
function TargetCallBack_KillMonsterId(_levelTarget, _battleLogic, _targets)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    ---@type number netId
    local _unitNetId = _battleLogic.eventTriggerParam.unitNetId
    local _unit = battleRoom.battleUnitManager:GetUnit(_unitNetId, true)
    if not _unit then
        return nil, nil
    end
    if not _unit:CheckUnitType(BattleUnitType.Monster, false) then
        -- 只检测怪物
        return nil, nil
    end
    ---@type BattleUnitCom_TagSelector
    local _tagCom = _unit:GetComponent(BattleUnitComponentType.TagSelector)
    if not _tagCom then
        return nil, nil
    end
    local _hurtFromNetId = _tagCom:GetTag(BattleUnitTagEnum.LastHurtFromNetID)
    if not _hurtFromNetId then
        return nil, nil
    end
    local _hurtUnit = battleRoom.battleUnitManager:GetUnit(_hurtFromNetId, true)
    if not _hurtUnit or not _hurtUnit:CheckUnitType(BattleUnitType.Player, true) then
        -- 只能统计玩家杀怪
        return nil, nil
    end
    ---@type BattleObjCom_Config
    local _cfgCom = _unit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Config)
    if not _cfgCom then
        return nil, nil
    end
    ---@type MonsterInstance
    local instanceXls = _cfgCom:GetInstanceXls()
    if not instanceXls then
        return nil, nil
    end
    for _, _monsterId in pairs(_levelTarget.targetValue3) do
        if instanceXls.id == _monsterId then
            return _levelTarget.curProgress + 1, _levelTarget.targetValue2
        end
    end
    return nil, nil
end

-- 击杀怪物
---@type function
---@param _levelTarget LevelTarget
---@param _battleLogic BattleLogicEventV2
---@param _targets BattleUnit_Player[]
---@return number,number
function TargetCallBack_AllMonsterDead(_levelTarget, _battleLogic, _targets)
    local battleRoom = GetBattleRoom(_battleLogic.battleId)
    ---@type number netId
    local _unitNetId = _battleLogic.eventTriggerParam.unitNetId
    local _unit = battleRoom.battleUnitManager:GetUnit(_unitNetId, true)
    if not _unit then
        return nil, nil
    end
    if not _unit:CheckUnitType(BattleUnitType.Monster, false) then
        -- 只检测怪物
        return nil, nil
    end

    ---@type BattleUnitCom_Camp
    local _campCom = _unit:GetComponent(BattleUnitComponentType.Camp)
    if not _campCom:CheckFirstCamp(BattleUnitCampType.Monster) then
        -- 只检测怪物阵营
        return nil, nil
    end
    return _levelTarget.curProgress + 1, _levelTarget.targetValue1
end
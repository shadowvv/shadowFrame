---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/05/31 17:47
--- Describe:
---

---单位AI移动撞障碍类型
---@class BattleUnitAiHitBlockType : table
BattleUnitAiHitBlockType = {
	None = 1,   --没有撞障碍
	Normal = 2, --撞到一般障碍
	Edge = 3,   --撞到边界 
}

---@class BattleUnit_PathFindCaller : table
BattleUnit_PathFindCaller = class(nil, "BattleUnit_PathFindCaller")
function BattleUnit_PathFindCaller:ctor(_data) end

---@protected
---@param _unit BattleUnitBase
---@param _reFindPathTime number 允许触发重新寻路的最短时间(MS)
---@param _reFindPathDis number 触发重新寻路的距离（平方值）
function BattleUnit_PathFindCaller:__Init(_unit, _reFindPathTime, _reFindPathDis)
	---@protected
	---@type BattleUnitBase
	self.__unitSelf = _unit

	---@protected
	---@type number
	self.__battleId = _unit.battleId
	---@protected
	---@type ActionStateManage
	self.__actionManagerSelf = _unit:GetActionManager()
	---@protected
	---@type BattleUnitCom_PathFind
	self.__comPathFind = _unit:GetComponent(BattleUnitComponentType.PathFind)
	---@protected
	---@type BattleUnitCom_PositionSet
	self.__comPosSet = _unit:GetComponent(BattleUnitComponentType.PosSet)
	---@protected
	---@type BattleUnitCom_Rotate
	self.__comRotate = _unit:GetComponent(BattleUnitComponentType.Rotate)

	---缓存的上次计算的目标点
	---@protected
	---@type Vector3
	self.__v3LastTargetPos = _unit:GetBattleRoom().vector3Pool:Pop()
	---缓存的上次计算的目标朝向
	---@protected
	---@type Vector3
	self.__v3LastTargetDir = _unit:GetBattleRoom().vector3Pool:Pop()
	---目标偏移（也可用于其他计算）
	---@protected
	---@type Vector3
	self.__v3TargetShiftPos = _unit:GetBattleRoom().vector3Pool:Pop()
	---允许重新寻路的最小时间间隔，单位毫秒
	---@protected
	---@type number
	self.__reFindPathTime = _reFindPathTime or 1000
	---触发重新寻路的目标点差异距离
	---@protected
	---@type number
	self.__reFindPathDis = _reFindPathDis or 20
	---缓存的上次寻路时间戳
	---@protected
	---@type number
	self.__lastFindPathTime = 0

	---@protected
	---@type Vector3
	self.__hitFixPos = nil
	---@protected
	---@type Vector3
	self.__hitFixDir = nil
	---@protected
	---@type BattleUnitAiHitBlockType
	self.__hitBlockType = BattleUnitAiHitBlockType.None
end

---@protected
function BattleUnit_PathFindCaller:__Clear()
	self.__unitSelf:GetBattleRoom().vector3Pool:Push(self.__v3LastTargetDir)
	self.__unitSelf:GetBattleRoom().vector3Pool:Push(self.__v3LastTargetPos)
	self.__unitSelf:GetBattleRoom().vector3Pool:Push(self.__v3TargetShiftPos)
	
	self.__unitSelf = nil
	self.__battleId = nil
	self.__actionManagerSelf = nil
	self.__comPathFind = nil
	self.__comPosSet = nil
	self.__comRotate = nil
	self.__v3LastTargetPos = nil
	self.__v3LastTargetDir = nil
	self.__v3TargetShiftPos = nil
	self.__reFindPathTime = nil
	self.__reFindPathDis = nil
	self.__lastFindPathTime = nil
	self.__hitFixPos = nil
	self.__hitFixDir = nil
	self.__hitBlockType = nil
end
------------------------------------------------------------------------------------------------------------------------
---@public
function BattleUnit_PathFindCaller:CallPathFind()
	self:__CheckReFindPathTime()
	self.__comPathFind:StartPathFind(self, false)
end

---获取目标点
---@public
---@param _v3Receiver Vector3 用于接收结果的vec3
---@return boolean 是否成功获取到目标点
function BattleUnit_PathFindCaller:GetTargetPos(_v3Receiver)
	return false
end

---获取目标方向
---@public
---@param _v3Receiver Vector3 用于接收结果的vec3
---@param _deltaTime number
---@return boolean 是否成功获取到目标点
function BattleUnit_PathFindCaller:GetTargetDir(_v3Receiver, _deltaTime)
	return false
end

---获取目标朝向
---@public
---@return Vector3
function BattleUnit_PathFindCaller:GetTargetDir()
	
end

---特殊移动的接口
---@public
function BattleUnit_PathFindCaller:DirectMove()
	
end

---检查是否需要重新寻路
---@public
---@return boolean
function BattleUnit_PathFindCaller:CheckRefindPath(_deltaTime)
	return false
end

---寻路移动结束时的回调
---@public
function BattleUnit_PathFindCaller:FindPathCallBack()
	
end

---重新寻路CD
---@protected
function BattleUnit_PathFindCaller:__CheckReFindPathTime(_deltaTime)
	return TimeUtils.battleNow(self.__battleId) - self.__lastFindPathTime > self.__reFindPathTime
end

---重置寻路CD
function BattleUnit_PathFindCaller:__ResetReFindTimeCount()
	self.__lastFindPathTime = TimeUtils.battleNow(self.__battleId)
end

---@public
---@return BattleRoom
function BattleUnit_PathFindCaller:GetBattleRoom()
	return self.__unitSelf:GetBattleRoom()
end

---@public
function BattleUnit_PathFindCaller:GetBattleId()
	return self.__battleId
end

---记录撞障碍参数
---@public
---@param _hitPos Vector3 撞障碍修正位置
---@param _hitDir Vector3 撞障碍修正方向
---@param _isEdge boolean
function BattleUnit_PathFindCaller:OnHitBlock(_hitPos, _hitDir, _isEdge)
	
	self.__actionManagerSelf:SetPosition(_hitPos)
	
	self.__hitFixPos = _hitPos
	self.__hitFixDir = _hitDir
	if _isEdge then
		self.__hitBlockType = BattleUnitAiHitBlockType.Edge
		self.__actionManagerSelf:Exit(self.__actionManagerSelf:GetCurrentMoveState(), false)
	else
		self.__hitBlockType = BattleUnitAiHitBlockType.Normal
	end
end

---清空撞障碍参数
---@public
function BattleUnit_PathFindCaller:ReleaseHitBlockParams()
	self.__hitBlockType = BattleUnitAiHitBlockType.None
end

---检查当前撞障碍类型
---@public
---@param _hitBlockType BattleUnitAiHitBlockType
function BattleUnit_PathFindCaller:CheckHitBlockType(_hitBlockType)
	return _hitBlockType and _hitBlockType == self.__hitBlockType
end

---转向拆摇杆量时是否跳过攻击角度检查（默认不跳过）
---@public
function BattleUnit_PathFindCaller:RotateSkipAngleCheck()
	return false
end

return BattleUnit_PathFindCaller
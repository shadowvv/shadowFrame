---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hejincheng.
--- DateTime: 2022/4/12 18:57

require "Lib/class"

---@class LevelConditionManager : table
LevelConditionManager = class(nil, 'LevelConditionManager');

-- 关卡条件作用域
LevelConditionScope = {
    -- 作用域全局关卡
    Level = 0,
    -- 作用域玩家
    Player = 1
}

function LevelConditionManager:ctor(_battleId)
    self.battleId = _battleId
    self.battleRoom = GetBattleRoom(self.battleId)
end

function LevelConditionManager:__Init()
    ---@type table<string, ConditionEvent> 关卡条件事件映射
    self.levelConditionEventDic = {}
    ---@type table<string, table<string, ConditionEvent>> 玩家条件事件映射
    self.playerConditionEventDic = {}

    ---@type table<string, number[]> 关卡事件映射
    self.levelEventIdConditionIdsDic = {}
    ---@type table<string, table<string, number[]>> 玩家事件映射
    self.playerEventIdConditionIdsDic = {}

    ---- 关卡监听条件
    --local _battleTypeLevelConditions = _battleTypeOper:GetListenConditions()
    --local _battleTypeReplaceParams = _battleTypeOper:GetListenConditionsReplaceParams()
    --self:AddListenEvents(_battleTypeLevelConditions, _battleTypeReplaceParams)
    --self:__InitCustomData()
end

---@param _battleTypeOper BattleTypeOperBase
function LevelConditionManager:Start(_battleTypeOper)
    -- 关卡监听条件
    local _battleTypeLevelConditions = _battleTypeOper:GetListenConditions()
    local _battleTypeReplaceParams = _battleTypeOper:GetListenConditionsReplaceParams()
    self:AddListenEvents(_battleTypeLevelConditions, _battleTypeReplaceParams)
    self:__InitCustomData()
end

-- 初始自定义监听数据
---@protected
function LevelConditionManager:__InitCustomData()
end

function LevelConditionManager:__OnUpdate(_deltaTime, _frameId)
end

-- 条件触发
---@public
---@param _battleLogicEvent BattleLogicEventV2 事件
---@param _conditionIds number[] 条件ids
---@param _conditionEventDic table<string, ConditionEvent> 事件dic
---@param _uid number 玩家id
function LevelConditionManager:__OnConditionsTrigger(_battleLogicEvent, _conditionIds, _conditionEventDic, _uid)
    -- 遍历所有监听这个事件的所有条件
    for i = #_conditionIds, 1, -1 do
        local _conditionId = _conditionIds[i]
        local _conditionEvent = _conditionEventDic[tostring(_conditionId)]
        if _conditionEvent and _conditionEvent.trigger then
            ---@type LevelCondition
            local _levelCondition = self.battleRoom.inputDataSource:GetDict("LevelCondition", _conditionId)
            if _conditionEvent.condition:CheckEventParam(_levelCondition, _battleLogicEvent, _uid, _conditionEvent.replaceParams, _conditionEvent) then
                local _oldState = _conditionEvent.state
                -- 监听成功，改变状态
                _conditionEvent:OnEventTrigger()
                local _newState = _conditionEvent.state

                -- 触发事件
                self.battleRoom.battleLogicEventService:OnTriggerLevelConditionTriggerEvent(_conditionId, _uid, _oldState, _newState, _levelCondition.testMethod)

                -- 移除回调列表
                table.remove(_conditionIds, i)

                if CheckLogLevel(LogLevel.log) then
                    LogTools.LogByLevel(LogLevel.log, "LevelConditionManager", "OnEventTrigger", "_conditionEvent.id", _conditionEvent.id, "_conditionEvent.type", _conditionEvent.condition.id, "oldState", _oldState, "_newState", _newState)
                end
            end
        end
    end
end

------------------------------------------------------------------------------------------------------------------------

function LevelConditionManager:Init()
    self:__Init()
end

-- 事件触发
---@param _battleLogicEvent BattleLogicEventV2
function LevelConditionManager:OnEventTrigger(_battleLogicEvent)
    local _eventType = _battleLogicEvent.eventType
    if not _eventType then
        return
    end

    ---@type number 玩家id
    local _uid = 0
    if _battleLogicEvent.netId then
        ---@type BattleUnit_Player
        local _unit = self.battleRoom.battleUnitManager:GetUnit(_battleLogicEvent.netId)
        if _unit then
            if _unit:GetUnitType() ~= BattleUnitType.Player then
                -- 怪物事件不用处理
                return
            end
            _uid = _unit:GetPlayerId()
        end
    end

    -- 关卡全局条件dic
    local _levelConditionIds = self.levelEventIdConditionIdsDic[tostring(_eventType)]
    if _levelConditionIds then
        -- 关卡条件触发
        self:__OnConditionsTrigger(_battleLogicEvent, _levelConditionIds, self.levelConditionEventDic, _uid)
    end
    -- 玩家条件dic
    local _playerConditionIds = self.playerEventIdConditionIdsDic[tostring(_uid)]
    if _playerConditionIds then
        local _conditionIds = _playerConditionIds[tostring(_eventType)]
        if _conditionIds then
            local _conditionEventDic = self.playerConditionEventDic[tostring(_uid)]
            -- 玩家条件触发
            self:__OnConditionsTrigger(_battleLogicEvent, _conditionIds, _conditionEventDic, _uid)
        end
    end
end

-- 初始监听事件
---@public
---@param _conditions number[]
---@param _replaceParams table<number[]>
function LevelConditionManager:AddListenEvents(_conditions, _replaceParams)
    for _index, _condition in pairs(_conditions) do
        ---@type number[]
        local _replaceParam
        if _replaceParams and _index <= #_replaceParams then
            _replaceParam = _replaceParams[_index]
        end
        self:AddListenEvent(_condition, _replaceParam)
    end
end

-- 添加监听事件
---@public
---@param _condition number
---@param _replaceParams number[]
function LevelConditionManager:AddListenEvent(_condition, _replaceParams)
    ---@type LevelCondition
    local _levelCondition = self.battleRoom.inputDataSource:GetDict("LevelCondition", _condition)
    if not _levelCondition then
        return
    end
    ---@type LevelConditionType
    local _levelConditionType = GetLevelConditionTypeById(_levelCondition.type)
    if not _levelConditionType then
        return
    end

    ---@type ConditionEvent
    local _conditionEvent = ConditionEvent.New(_levelCondition.id, _levelConditionType, _replaceParams)

    -- 关卡全局事件条件id映射
    if self:CheckConditionScope(_levelCondition, LevelConditionScope.Level) then
        self:__AddLevelListenEvent(_conditionEvent)
    end
    -- 关卡玩家事件条件id映射
    if self:CheckConditionScope(_levelCondition, LevelConditionScope.Player) then
        self:__AddPlayerListenEvent(_conditionEvent)
    end

    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "LevelConditionManager", "AddListenEvent", "levelCondition.id", _levelCondition.id)
    end
end

---添加关卡事件监听
---@protected
---@param _conditionEvent ConditionEvent 条件事件
function LevelConditionManager:__AddLevelListenEvent(_conditionEvent)
    -- 条件事件dic
    self.levelConditionEventDic[tostring(_conditionEvent.id)] = _conditionEvent
    -- 事件条件dic
    local _conditionIdsDic = self.levelEventIdConditionIdsDic[tostring(_conditionEvent.eventType)]
    if not _conditionIdsDic then
        self.levelEventIdConditionIdsDic[tostring(_conditionEvent.eventType)] = {}
        _conditionIdsDic = self.levelEventIdConditionIdsDic[tostring(_conditionEvent.eventType)]
    end
    table.insert(_conditionIdsDic, _conditionEvent.id)
end

------------------------------------------------------------------------------------------------------------------------

---添加玩家事件监听
---@protected
---@param _conditionEvent ConditionEvent 条件事件
function LevelConditionManager:__AddPlayerListenEvent(_conditionEvent)
    local battleRoom = GetBattleRoom(self.battleId)
    local _allPlayers = battleRoom.battleUnitManager:GetOriginalPlayerInfoManager():GetAllPlayer()
    if not _allPlayers or #_allPlayers > 0 then
        return
    end
    for _, _originPlayerInfo in pairs(_allPlayers) do
        local _uid = _originPlayerInfo:GetPlayerId()

        -- 条件事件dic
        self.playerConditionEventDic[tostring(_conditionEvent.id)] = _conditionEvent
        local _conditionEventDic = self.playerConditionEventDic[tostring(_uid)]
        if not _conditionEventDic then
            self.playerConditionEventDic[tostring(_uid)] = {}
            _conditionEventDic = self.playerConditionEventDic[tostring(_uid)]
        end
        _conditionEventDic[tostring(_conditionEvent.id)] = _conditionEvent

        -- 事件条件dic
        -- 取出玩家的事件集
        local _playerConditionIdsDic = self.playerEventIdConditionIdsDic[tostring(_uid)]
        if not _playerConditionIdsDic then
            self.playerEventIdConditionIdsDic[tostring(_uid)] = {}
            _playerConditionIdsDic = self.playerEventIdConditionIdsDic[tostring(_uid)]
        end
        -- 取出事件集
        local _conditionIdsDic = _playerConditionIdsDic[tostring(_conditionEvent.eventType)]
        if not _conditionIdsDic then
            _playerConditionIdsDic[tostring(_conditionEvent.eventType)] = {}
            _conditionIdsDic = _playerConditionIdsDic[tostring(_conditionEvent.eventType)]
        end
        table.insert(_conditionIdsDic, _conditionEvent.id)
    end
end

function LevelConditionManager:OnUpdate(_deltaTime, _frameId)
    self:__OnUpdate(_deltaTime, _frameId)
end

---@param _levelCondition LevelCondition
---@param _scope number 条件作用域
function LevelConditionManager:CheckConditionScope(_levelCondition, _scope)
    return _levelCondition.testMethod == _scope
end

-- 检查条件状态
---@public
---@param _id number 条件id
---@param _state ConditionEventState 条件状态
function LevelConditionManager:CheckConditionEventState(_id, _uid, _state)
    local _conditionEvent = self:GetConditionEvent(_id, _uid)
    if not _conditionEvent or not _state then
        return false
    end
    return _conditionEvent.state == _state
end

-- 获取条件
---@public
---@param _id number 条件id
---@param _uid number 玩家id
---@return ConditionEvent
function LevelConditionManager:GetConditionEvent(_id, _uid)
    ---@type LevelCondition
    local _levelCondition = self.battleRoom.inputDataSource:GetDict("LevelCondition", _id)
    if not _levelCondition then
        return nil
    end
    -- 获取玩家条件
    if self:CheckConditionScope(_levelCondition, LevelConditionScope.Player) then
        local _conditionEventDic = self.playerConditionEventDic[tostring(_uid)]
        if _conditionEventDic then
            return _conditionEventDic[tostring(_id)]
        end
    end
    -- 获取关卡条件
    if self:CheckConditionScope(_levelCondition, LevelConditionScope.Level) then
        return self.levelConditionEventDic[tostring(_id)]
    end
end

-- 清空
function LevelConditionManager:__Clear(_battleTypeOper)
end

-- 清空
function LevelConditionManager:Clear(_battleTypeOper)
    self:__Clear(_battleTypeOper)
end

return LevelConditionManager;
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2021/12/20 18:12
--- 行为控制器

require "Lib/class"
require "Battle/Logic/Room/BattleObject/ActionState/IdleActionState"
require "Battle/Logic/Room/BattleObject/ActionState/MoveActionState"
require "Battle/Logic/Room/BattleObject/ActionState/ChangeLeaderActionState"

---@class ActionStateManage : table
---@field ACTION_STATE_DICT_PARAM_MAP number[] 行为id与配置表字段映射数组
---@field currentStates ActionState[] 战斗单位当前行为
---@field battleObject BattleObject 战斗单位
---@field position Vector3 位置
---@field direction Vector3 朝向
---@field velocity Vector3 速度
ActionStateManage = class(nil, 'ActionStateManage');
ACTION_STATE_DICT_PARAM_MAP = {"idle","move","dodge","dash","repel","trapped","skill","hitted","beatDown","born","die","revive","exile","changePeriod","backstage","changeLeader"};

function ActionStateManage:ctor()

    local idleActionState = IdleActionState:New();
    self.currentStates = {};
    self.currentStates[idleActionState:GetId()] = idleActionState;

    self.position = nil;
    self.direction = nil;
    self.velocity = nil;
end

-- 初始化行为控制器
---@public
---@param _battleObject BattleObject 战斗单位
---@param _position Vector3 位置
---@param _direction Vector3 朝向
---@param _velocity Vector3 速度
function ActionStateManage:Init(_battleObject, _position, _direction, _velocity)
    self:__Init(_battleObject, _position, _direction, _velocity)
end

---@protected
---@param _battleObject BattleObject 战斗单位
---@param _position Vector3 位置
---@param _direction Vector3 朝向
---@param _velocity Vector3 速度
function ActionStateManage:__Init(_battleObject, _position, _direction, _velocity)
    self.battleObject = _battleObject;
    self.position = _position;
    self.direction = _direction;
    self.velocity = _velocity;
end

-- 尝试进入行为状态
---@private
---@param _stateId number 请求进入行为的Id
---@return boolean 是否可进入
function ActionStateManage:TryEnter(_stateId)

    local targetConfig = BATTLE_INPUT_DATA_SOURCE:GetDict("StateSwitchRule",_stateId);
    if targetConfig == nil then
        return false;
    end

    for i, v in pairs(self.currentStates) do
        local tempConfig = BATTLE_INPUT_DATA_SOURCE:GetDict("StateSwitchRule",v:GetId());
        if tempConfig ~= nil then
            local paramName = self.ACTION_STATE_DICT_PARAM_MAP[targetConfig.id];
            if paramName ~= nil and tempConfig[paramName] == 0 then
                return false;
            end
        end
    end

    return true;
end

-- 进入行为状态
---@private
---@param _state ActionState 进入的行为
---@return boolean 是否可进入
function ActionStateManage:Enter(_state)

    if _state == nil then
        return false
    end

    local targetConfig = BATTLE_INPUT_DATA_SOURCE:GetDict("StateSwitchRule",_state:GetId());
    if targetConfig == nil then
        return false;
    end

    if not _state:EnterAction(self, self.currentStates) then
        return false;
    end

    local exitStates = {};
    for i, v in pairs(self.currentStates) do
        local tempConfig = BATTLE_INPUT_DATA_SOURCE:GetDict("StateSwitchRule",v:GetId());
        if tempConfig ~= nil then
            local paramName = self.ACTION_STATE_DICT_PARAM_MAP[targetConfig.id];
            if paramName ~= nil and tempConfig[paramName] == 2 then
                table.insert(exitStates,v);
            end
        end
    end

    for i, v in pairs(exitStates) do
        self:Exit(v);
    end

    return true;
end

-- 推出行为状态
---@private
---@param _state ActionState 退出的行为
function ActionStateManage:Exit(_state)
    _state:ExitAction(self);
    self.currentStates[_state:GetId()] = nil;
end

-- 执行行为
---@public
---@param _dt number 更新时间
---@return table 执行行为输出数据
function ActionStateManage:DoAction(_dt)
    local outputDataList = {};

    local tempStates = {};
    for i, v in pairs(self.currentStates) do
        tempStates[v:GetId()] = v;
    end
    for i, v in pairs(tempStates) do
        local outputData = v:DoAction(self,_dt);
        if outputData ~= nil then
            table.insert(outputDataList,outputData);
        end
    end

    return outputDataList;
end

-- 进入移动
---@public
---@param _moveParam Vector3 移动摇杆参数
---@param _cameraParam Vector3 镜头摇杆参数
function ActionStateManage:Move(_moveParam,_cameraParam)
    if self:TryEnter(MoveActionState:GetId()) then
        ---@type MoveActionState
        local moveState = MoveActionState:New();
        moveState:Init(_moveParam,_cameraParam);
        if self:Enter(moveState) then
            self.currentStates[moveState:GetId()] = moveState;
        end
    end
end

-- 进入空闲
---@public
function ActionStateManage:Idle()
    if self:TryEnter(IdleActionState:GetId()) then
        ---@type IdleActionState
        local idleState = IdleActionState:New();
        if self:Enter(idleState) then
            self.currentStates[idleState:GetId()] = idleState;
        end
    end
end

-- 进入切换角色
function ActionStateManage:PlayerChangeLeader(_leaderNetId)
    -- 检测状态机
    if self:TryEnter(ChangeLeaderActionState:GetId()) then
        ---@type ChangeLeaderActionState
        local changeLeaderState = ChangeLeaderActionState.New(_leaderNetId);
        if self:Enter(changeLeaderState) then
            self.currentStates[changeLeaderState:GetId()] = changeLeaderState;
        end
    end
end

--获得行为管理器绑定的战斗单位
---@public
---@return BattleObject 行为管理器绑定的战斗单位
function ActionStateManage:GetObject()
    return self.battleObject;
end

--获得位置
---@public
---@return Vector3 位置
function ActionStateManage:GetPosition()
    return self.position;
end

--获得朝向
---@public
---@return Vector3 朝向
function ActionStateManage:GetDirection()
    return self.direction;
end

--获得速度
---@public
---@return Vector3 速度
function ActionStateManage:GetVelocity()
    return self.velocity;
end

--设置位置
---@public
---@param _position Vector3 位置
function ActionStateManage:SetPosition(_position)
    self.position = _position;
end

--设置朝向
---@public
---@param _direction Vector3 朝向
function ActionStateManage:SetDirection(_direction)
    self.direction = _direction;
end

--设置速度
---@public
---@param _velocity Vector3 速度
function ActionStateManage:SetVelocity(_velocity)
    self.velocity = _velocity;
end

return ActionStateManage;
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hejincheng
--- DateTime: 2022/03/02 14:36
--- Describe: 用于元素的组件
---
---2022-6-17 和颜良的对话
---
---哦。，你意思是加不上，就不加，是吧新加的清掉？
--
--嗯
--
--我再复述一遍啊，没问题我要开始改了
--
--我之前的实现是，身上有6个元素位，添加元素的时候，有铜元素就叠加，没有就附着，有艺元素就反应，反应不了就附着，就会出现身上有俩元素的情况
--之后要改成，身上就1个元素为，添加元素的时候，没有元素，就附着，有铜元素就叠加，有艺元素就反应，反应不了，就添加不上，废掉这次的元素添加
--
--嗯
--
--ok
--那我今天就改这个了，改了你们再测一遍，从结构上要改改
--
--好


require "Battle/Logic/Constants/BattleElementConst"

---@class BattleObjCom_Element : BattleObjectComponentBase
BattleObjCom_Element = class(BattleObjectComponentBase, "BattleObjCom_Element")

function BattleObjCom_Element:ctor()
    self:__ctor(BattleObjectComponentType.Element)
end

---@public
---@param _battleObject BattleObjectBase
function BattleObjCom_Element:Init(_battleObject)
    self:__Init(_battleObject)

    self.battleRoom = _battleObject:GetBattleRoom()
    -- TODO 等着接入看看怎么判断
    ---@type boolean 是否驱动元素
    self.driveElement = false
    if IsServer() or self.battleRoom.indieGame then
        self.driveElement = true
    end

    ---@type boolean 警告状态
    self.warnState = false
    ---@type number 当前元素id
    self.curElementId = 0
    ---@type number 当前元素值
    self.curElementValue = 0
    ---@type number 元素衰减速度
    self.elementReduceSpeed = 0
    ---@type number 元素量最大值
    self.elementMax = 0
    ---@type number 元素附着衰减比
    self.elementAttachLoseRatio = 1
    ---@type table<number,number> 元素反应CD dict <反应id，到期时间>
    self.reactCdEndTimeDic = {}

    ---@type BattleDefault
    local battleDefaultElementMax = self.battleRoom.inputDataSource:GetDict("BattleDefault", BATTLE_ELEMENT_CONST.ELEMENT_MAX_ID)
    if battleDefaultElementMax then
        self.elementMax = battleDefaultElementMax.value
    end
    ---@type BattleDefault
    local battleDefaultElementAttachLoseRatio = self.battleRoom.inputDataSource:GetDict("BattleDefault", BATTLE_ELEMENT_CONST.ELEMENT_ATTACH_LOSE_RATIO_ID)
    if battleDefaultElementAttachLoseRatio then
        self.elementAttachLoseRatio = battleDefaultElementAttachLoseRatio.value3
    end
    ---@type BattleDefault
    local elementReductionWarningTime = self.battleRoom.inputDataSource:GetDict("BattleDefault", BATTLE_ELEMENT_CONST.ELEMENT_REDUCTION_WARNING_TIME_ID)
    if elementReductionWarningTime then
        self.elementReductionWarningTime = elementReductionWarningTime.value3
    end
end

function BattleObjCom_Element:__EnterWarnState()
    self.warnState = true
    if IsClient() and self:GetObject():GetParentUnit():GetUnitType() == BattleUnitType.Player then
        -- 怪物应该没有元素UI吧？
        self:__ClientSendElementReduceWarningToView()
    end
end

function BattleObjCom_Element:__ExitWarnState()
    self.warnState = false
    if IsClient() and self:GetObject():GetParentUnit():GetUnitType() == BattleUnitType.Player then
        self:__ClientSendElementCancelReduceWarningToView()
    end
end

-- 检测元素反应
---@protected
---@param _element BattleElementType 元素类型
---@param _attackerNetId number 攻击者netId
---@param _attackerObjectId number 攻击者objectId
---@return ElementalReaction 反应表数据
function BattleObjCom_Element:__CheckElementReact(_element, _attackerNetId, _attackerObjectId)
    if self.curElementId == 0 or self.curElementValue == 0 then
        -- 没有元素，不能反应
        return nil
    end

    local _attackerUnit = self.battleRoom.battleUnitManager:GetUnit(_attackerNetId)
    if _attackerUnit then
        -- 释放者死了暂时先不管
        ---@type BattleUnitCom_Camp
        local targetComCamp = self:GetObject():GetParentUnit():GetComponent(BattleUnitComponentType.Camp)
        ---@type BattleUnitCom_Camp
        local attackerComCamp = _attackerUnit:GetComponent(BattleUnitComponentType.Camp)
        if attackerComCamp and targetComCamp then
            if attackerComCamp:CheckFirstCamp(targetComCamp:GetFirstCamp()) and attackerComCamp:CheckSecCamp(targetComCamp:GetFirstCamp()) then
                -- 一二级阵营全部相同，不能触发反应
                return nil
            end
        end
    end

    local _reaction = self.battleRoom.inputDataSource:getEleReactByTrigIdAndAttachId(_element:GetId(), self.curElementId)
    if not _reaction then
        -- 没有对应的元素反应
        return nil
    end
    if not self:__CheckElementReactCdTime(_reaction) then
        -- 元素反应CD中
        if LogTools.ElementLog and CheckLogLevel(LogLevel.logErr) then
            -- 不传默认自己为释放者
            local _castObject = self:GetObject()
            if _attackerUnit then
                if _attackerObjectId then
                    _castObject = _attackerUnit:GetHeroObject(_attackerObjectId)
                end
                if _castObject == nil then
                    -- 不传objectId默认取当前object
                    _castObject = _attackerUnit:GetCurrentHeroObject()
                end
            end
            local mainElementId = _reaction.attachmentId
            local secondElementId = _reaction.triggerID
            local _castObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(_castObject:GetParentUnit():GetUnitType()) .. "][" .. _castObject:GetParentUnit():GetNetId() .. "][" .. tostring(_castObject:GetDicId()) .. "]"
            local _targetObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(self:GetObject():GetParentUnit():GetUnitType()) .. "][" .. self:GetObject():GetParentUnit():GetNetId() .. "][" .. tostring(self:GetObject():GetDicId()) .. "]"
            LogTools.LogByLevel(LogLevel.log, "元素", "元素反应[" .. tostring(_reaction.id) .. "][" .. _reaction.reactionType .. "]触发失败", "元素反应CD[" .. tostring(_reaction.buffCd) .. "s]中", "释放者" .. _castObjectLog .. "触发目标" .. _targetObjectLog .. "元素反应", GetBattleElementNameById(mainElementId), GetBattleElementNameById(secondElementId))
        end
        return nil
    end
    return _reaction
end

-- 检测元素反应CD
---@public
---@param _reaction ElementalReaction 元素反应表数据
---@return boolean CD检测是否通过
function BattleObjCom_Element:__CheckElementReactCdTime(_reaction)
    local cdEndTime = self:__GetReactCdEndTime(_reaction)
    if not cdEndTime then
        -- 无CD记录
        return true
    end
    if TimeUtils.battleNow(self:GetBattleId()) < cdEndTime then
        -- CD没结束
        return false
    end
    -- 置空CD结束时间nil
    self:__UpdateReactCdEndTime(_reaction, nil)
    return true
end

-- 更新反应CD时间
---@protected
---@param _reaction ElementalReaction 元素反应数据
---@param _endTime number 结束时间
function BattleObjCom_Element:__UpdateReactCdEndTime(_reaction, _endTime)
    -- 元素反应CD为全局CD，不因为切换角色而改变。
    self.reactCdEndTimeDic[tostring(_reaction.id)] = _endTime
end

-- 获取反应CD时间
---@protected
---@param _reaction ElementalReaction 元素反应数据
---@return number CD结束时间
function BattleObjCom_Element:__GetReactCdEndTime(_reaction)
    -- 元素反应CD为全局CD，不因为切换角色而改变。
    return self.reactCdEndTimeDic[tostring(_reaction.id)]
end

-- 元素反应
---@protected
---@param _reaction ElementalReaction 元素反应数据
---@param _reactElementValue number 元素反应值
---@param _hurtParam any 伤害参数
---@param _attackerNetId number 攻击者netId
---@param _attackerObjectId number 攻击者objectId
---@param _bodyPartId number 部位
---@param _castSkillId number 初始来源技能ID
function BattleObjCom_Element:__ElementReact(_reaction, _reactElementValue, _hurtParam, _attackerNetId, _attackerObjectId, _bodyPartId, _castSkillId)
    ---@type number 次元素id
    local secondElementId = _reaction.triggerID
    ---@type number 主元素id
    local mainElementId = _reaction.attachmentId

    ---@type ElementCorrect
    local elementCorrect = self.battleRoom.inputDataSource:GetDict("ElementCorrect", secondElementId)
    ---@type function
    local getRatioFunc = GetBattleElementTypeById(mainElementId):GetRatioFunc()
    local ratio = 1
    if getRatioFunc and elementCorrect then
        ratio = getRatioFunc(elementCorrect)
    end

    -- 元素体质单位不消耗元素
    local costValue = 0
    if not self:GetObject():IsElementConstitution() then
        costValue = _reactElementValue * ratio
    end

    -- 1.扣除元素值
    if costValue > 0 then
        self:ChangeElementValue(-costValue, ELEMENT_CHANGE_TYPE.Reaction)
    end
    -- 2.CD重置
    self:__UpdateReactCdEndTime(_reaction, TimeUtils.battleNow(self:GetBattleId()) + _reaction.buffCd * 1000)
    -- 3.元素反应触发加buff

    -- 不传默认自己为释放者
    local _castObject = self:GetObject()
    if _attackerNetId then
        local _attackerUnit = self.battleRoom.battleUnitManager:GetUnit(_attackerNetId)
        if _attackerUnit then
            if _attackerObjectId then
                _castObject = _attackerUnit:GetHeroObject(_attackerObjectId)
            end
            if _castObject == nil then
                -- 不传objectId默认取当前object
                _castObject = _attackerUnit:GetCurrentHeroObject()
            end
        end
    end

    ---@type BattleObjCom_Buff
    local comBuff
    if _reaction.target == 1 then
        -- 给目标加buff
        comBuff = self:GetObject():GetComponent(BattleObjectComponentType.Buff)
    elseif _reaction.target == 2 then
        -- 给释放者加buff
        comBuff = _castObject:GetComponent(BattleObjectComponentType.Buff)
    end

    if comBuff then
        local _generateStackInfo = {specifiedReacId = _reaction.id, hurtParamFix = _hurtParam}
        for _, _buffGroupId in pairs(_reaction.buffId) do
            local battleBuff = BattleBuffService:GenerateCastBuffTemplate(_buffGroupId, _castObject,_castSkillId, nil)
            _hurtParamFix = BattleBuffService.CheckHurtParamFixCustomParam(self.battleRoom, _buffGroupId)
            battleBuff.generateStackInfo = _generateStackInfo
            battleBuff.bodyPartId = _bodyPartId
            comBuff:AddBattleBuff(battleBuff)
        end
        if LogTools.ElementLog and CheckLogLevel(LogLevel.log) then
            local _castObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(_castObject:GetParentUnit():GetUnitType()) .. "][" .. _castObject:GetParentUnit():GetNetId() .. "][" .. tostring(_castObject:GetDicId()) .. "]"
            local _targetObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(self:GetObject():GetParentUnit():GetUnitType()) .. "][" .. self:GetObject():GetParentUnit():GetNetId() .. "][" .. tostring(self:GetObject():GetDicId()) .. "]"
            local _buffInstanceTable = {}
            for _, _buffGroupId in pairs(_reaction.buffId) do
                ---@type BuffGroup
                local _buffGroup = self.battleRoom.inputDataSource:GetDict("BuffGroup", _buffGroupId)
                table.insert(_buffInstanceTable, _buffGroup.buffInstanceId)
            end
            LogTools.LogByLevel(LogLevel.log, "元素", "元素反应[" .. tostring(_reaction.id) .. "][" .. _reaction.reactionType .. "]", "释放者" .. _castObjectLog .. "触发目标" .. _targetObjectLog .. "元素反应", GetBattleElementNameById(mainElementId), GetBattleElementNameById(secondElementId), "Buff", dumpTableEx(_reaction.buffId), "Buff实例", dumpTableEx(_buffInstanceTable))
        end
    end

    self:__OnElementReact(_attackerNetId, _attackerObjectId, _reaction, costValue)
end

-- 改变元素值
---@protected
---@param _changeValue number 改变元素值
---@param _changeType string ElementChangeType 改变原因
---@return number 当前元素值
function BattleObjCom_Element:ChangeElementValue(_changeValue, _changeType)
    if not _changeValue or _changeValue == 0 then
        return self.curElementValue
    end
    local curElementValue = self.curElementValue
    local oldValue = curElementValue
    if curElementValue == nil then
        curElementValue = _changeValue
    else
        curElementValue = curElementValue + _changeValue
    end
    -- 边界处理
    local removed = false
    if _changeValue < 0 then
        curElementValue = Mathf.Max(curElementValue, 0)
        if curElementValue == 0 then
            removed = true
        end
    else
        curElementValue = Mathf.Min(curElementValue, self.elementMax)
    end
    local newValue = curElementValue

    if LogTools.ElementLog and CheckLogLevel(LogLevel.log) then
        local _targetObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(self:GetObject():GetParentUnit():GetUnitType()) .. "][" .. self:GetObject():GetParentUnit():GetNetId() .. "][" .. tostring(self:GetObject():GetDicId()) .. "]"
        LogTools.LogByLevel(LogLevel.log, "元素", "元素值改变[" .. _changeType .. "]", "目标" .. _targetObjectLog, GetBattleElementNameById(self.curElementId) .. ":" .. tostring(oldValue) .. "->" .. tostring(newValue) .. "(最大值" .. tostring(self.elementMax) .. ")")
    end

    self:__OnElementChange(self.curElementId, newValue, oldValue)
    if removed then
        if LogTools.ElementLog and CheckLogLevel(LogLevel.log) then
            local _targetObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(self:GetObject():GetParentUnit():GetUnitType()) .. "][" .. self:GetObject():GetParentUnit():GetNetId() .. "][" .. tostring(self:GetObject():GetDicId()) .. "]"
            LogTools.LogByLevel(LogLevel.log, "元素", "元素值改变[" .. ELEMENT_CHANGE_TYPE.Remove .. "]", "目标[" .. _targetObjectLog, GetBattleElementNameById(self.curElementId) .. ":" .. tostring(newValue))
        end
        self:__OnElementRemove(self.curElementId)
        self:__UpdateElementIdValue(0, 0)
    else
        self:__UpdateElementIdValue(self.curElementId, newValue)
    end
    return newValue
end

-- 更改元素量
---@protected
---@param _elementId number 元素id
---@param _elementValue number 元素值
function BattleObjCom_Element:__UpdateElementIdValue(_elementId, _elementValue)
    if _elementId then
        if self.warnState and self.curElementId ~= _elementId then
            -- 元素id替换了，或者附着，或者移除，取消警告状态
            self:__ExitWarnState()
        end
        self.curElementId = _elementId
    end
    if _elementValue then
        self.curElementValue = _elementValue

        local remainTime = 0
        if self.elementReduceSpeed and self.elementReduceSpeed > 0 then
            remainTime = self.curElementValue / self.elementReduceSpeed
        end
        if self.warnState and self.curElementValue == 0 then
            -- 警告状态中，并且元素量归0
            self:__ExitWarnState()
        elseif self.warnState and remainTime > self.elementReductionWarningTime then
            -- 警告状态中，并且剩余时间超出警告时间
            self:__ExitWarnState()
        elseif not self.warnState and remainTime <= self.elementReductionWarningTime then
            -- 非警告状态中，并且剩余时间小于等于警告时间
            self:__EnterWarnState()
        end
    end
end

-- 元素附着
---@protected
---@param _element BattleElementType 元素类型
---@param _elementValue number 元素值
---@param _attackerNetId number 攻击者netId
---@param _attackerObjectId number 攻击者objectId
function BattleObjCom_Element:__ElementAttach(_element, _elementValue, _attackerNetId, _attackerObjectId)
    ---@type string
    local _changeType

    ---@type ElementalInfo
    local elementInfo = self.battleRoom.inputDataSource:GetDict("ElementalInfo", _element:GetId())
    if elementInfo and elementInfo.isAttached == 0 then
        return
    end

    local originElementValue = _elementValue
    -- 元素附着衰减
    _elementValue = _elementValue * self.elementAttachLoseRatio

    if self.curElementId == 0 then
        -- 元素附着
        self:__OnElementAttach(_element:GetId(), _elementValue, _attackerNetId, _attackerObjectId)
        self.curElementId = _element:GetId()

        if LogTools.ElementLog and CheckLogLevel(LogLevel.log) then
            _changeType = ELEMENT_CHANGE_TYPE.Attach
            local _castUnit = self.battleRoom.battleUnitManager:GetUnit(_attackerNetId)
            if not _castUnit then
                _castUnit = self:GetObject():GetParentUnit()
            end
            local _castObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(_castUnit:GetUnitType()) .. "][" .. _castUnit:GetNetId() .. "][" .. tostring(_castUnit:GetCurrentHeroObject():GetDicId()) .. "]"
            local _targetObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(self:GetObject():GetParentUnit():GetUnitType()) .. "][" .. self:GetObject():GetParentUnit():GetNetId() .. "][" .. tostring(self:GetObject():GetDicId()) .. "]"
            LogTools.LogByLevel(LogLevel.log, "元素", "元素附着", "释放者" .. _castObjectLog .. "附着目标" .. _targetObjectLog, GetBattleElementNameById(_element:GetId()) .. ":" .. tostring(_elementValue))
        end
    else
        -- 元素叠加
        if LogTools.ElementLog and CheckLogLevel(LogLevel.log) then
            _changeType = ELEMENT_CHANGE_TYPE.Add
            local _castUnit = self.battleRoom.battleUnitManager:GetUnit(_attackerNetId)
            if not _castUnit then
                _castUnit = self:GetObject():GetParentUnit()
            end
            local _castObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(_castUnit:GetUnitType()) .. "][" .. _castUnit:GetNetId() .. "][" .. tostring(_castUnit:GetCurrentHeroObject():GetDicId()) .. "]"
            local _targetObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(self:GetObject():GetParentUnit():GetUnitType()) .. "][" .. self:GetObject():GetParentUnit():GetNetId() .. "][" .. tostring(self:GetObject():GetDicId()) .. "]"
            LogTools.LogByLevel(LogLevel.log, "元素", "元素叠加", "释放者" .. _castObjectLog .. "叠加目标" .. _targetObjectLog, GetBattleElementNameById(_element:GetId()) .. ":" .. tostring(_elementValue))
        end
    end

    -- 更改元素量
    self:ChangeElementValue(_elementValue, _changeType)
    -- 更新元素衰减速度
    self:__UpdateElementReductionSpeedByValue(_element:GetId(), originElementValue)
end

-- 更新元素衰减速度
---@protected
---@param _elementId number
---@param _elementValue number
function BattleObjCom_Element:__UpdateElementReductionSpeedByValue(_elementId, _elementValue)
    _elementValue = Mathf.Floor(_elementValue)
    ---@type ElementStrength
    local _elementStrength = self.battleRoom.inputDataSource:getEleStrengthByEleIdAndAttachId(_elementId, _elementValue)
    local reduceSpeed = 0
    if _elementStrength ~= nil then
        reduceSpeed = _elementStrength.reduceSpeed
    end
    self.elementReduceSpeed = Mathf.Max(reduceSpeed, self.elementReduceSpeed)
end

-- 元素衰减
---@protected
function BattleObjCom_Element:__ElementReduction()
    if self.curElementId == 0 or self.curElementValue <= 0 then
        -- 当前没有元素附着
        return
    end
    if self:GetObject():IsElementConstitution() then
        -- 元素体质怪，不衰减元素
        return
    end
    if self.nextReduceTime and TimeUtils.battleNow(self:GetBattleId()) < self.nextReduceTime then
        return
    end
    self.nextReduceTime = TimeUtils.battleNow(self:GetBattleId()) + BATTLE_ELEMENT_CONST.ELEMENT_REDUCE_DURING
    self:ChangeElementValue(-self.elementReduceSpeed, ELEMENT_CHANGE_TYPE.Reduction)
end

------------------------------------------------------------------------------------------------------------------------

-- 元素反应
---@protected
---@param _attackerNetId number 攻击者netId
---@param _attackerObjectId number 攻击者objectId
---@param _reaction ElementalReaction 元素反应
---@param  _reactElementValue number 元素反应值
function BattleObjCom_Element:__OnElementReact(_attackerNetId, _attackerObjectId, _reaction, _reactElementValue)
    ---@type BattleUnitBase
    local _unit = self:GetObject():GetParentUnit()
    -- 元素反应事件
    self.battleRoom.battleLogicEventService:OnTriggerElementReactEvent(_attackerNetId, _attackerObjectId, _unit:GetNetId(), self:GetObject():GetObjectId(), _reaction.id);

    local changeData = {
        elementReact = {
            reactionId = _reaction.id,
            reactElementValue = _reactElementValue,
            curElementId = self.curElementId,
            curElementValue = self.curElementValue,
        }
    }
    -- 输出数据
    local outputData = {
        netId = _unit:GetNetId(),
        objId = self:GetObject():GetObjectId(),
        elementChange = changeData
    }
    self.battleRoom.outputDataSource:AddBattleUnitKeyData(outputData)
end

-- 元素移除
---@protected
---@param _elementId number 元素id
function BattleObjCom_Element:__OnElementRemove(_elementId)
    -- 元素移除事件
    self.battleRoom.battleLogicEventService:OnTriggerElementRemoveEvent(self:GetObject():GetParentUnit():GetNetId(), self:GetObject():GetObjectId(), _elementId);

    local _unit = self:GetObject():GetParentUnit()
    local changeData = {
        elementRemove = {
            elementId = _elementId
        }
    }
    -- 输出数据
    local outputData = {
        netId = _unit:GetNetId(),
        objId = self:GetObject():GetObjectId(),
        elementChange = changeData
    }
    self.battleRoom.outputDataSource:AddBattleUnitKeyData(outputData)
end

-- 元素附着
---@protected
---@param _elementId number 元素id
---@param _elementValue number 元素值
---@param _attackerNetId number 攻击者netId
---@param _attackerObjectId number 攻击者objectId
function BattleObjCom_Element:__OnElementAttach(_elementId, _elementValue, _attackerNetId, _attackerObjectId)
    -- 元素附着事件
    self.battleRoom.battleLogicEventService:OnTriggerElementAttachEvent(_attackerNetId, _attackerObjectId, self:GetObject():GetParentUnit():GetNetId(), self:GetObject():GetObjectId(), _elementId, _elementValue);

    if not self:GetObject():IsElementConstitution() then
        -- 非元素体质单位，表现附着特效
        local _unit = self:GetObject():GetParentUnit()
        local changeData = {
            elementAttach = {
                elementId = _elementId,
                curElementValue = _elementValue
            }
        }
        -- 输出数据
        local outputData = {
            netId = _unit:GetNetId(),
            objId = self:GetObject():GetObjectId(),
            elementChange = changeData
        }
        self.battleRoom.outputDataSource:AddBattleUnitKeyData(outputData)
    end
end

-- 元素改变
---@protected
---@param _elementId number 元素id
---@param _newValue number 新值
---@param _oldValue number 旧值
function BattleObjCom_Element:__OnElementChange(_elementId, _newValue, _oldValue)
end

------------------------------------------------------------------------------------------------------------------------

---@public
function BattleObjCom_Element:OnUpdate(_deltaTime)
    self:__ElementReduction()
end

---是否有元素附着
---@public
function BattleObjCom_Element:IsElementAttach()
    return self.curElementId > 0 and self.curElementValue > 0
end

-- 增加元素强度
---@public
---@param _elementStrengthId number 元素强度id
---@param _attackerNetId number 攻击者netId
---@param _attackerObjectId number 攻击者objectId
---@param _bodyPartId number 攻击部位
---@param canTriggerReact number 是否可触发元素反应
---@param _originalSkillId number 初始来源技能ID
function BattleObjCom_Element:AddElementStrength(_elementStrengthId, _attackerNetId, _attackerObjectId, _bodyPartId, canTriggerReact, _originalSkillId)
    ---@type ElementStrength
    local _elementStrength = self.battleRoom.inputDataSource:GetDict("ElementStrength", _elementStrengthId)
    if not _elementStrength then
        return
    end
    local _elementType = GetBattleElementTypeById(_elementStrength.elementId)
    self:AddElement(_elementType, _elementStrength.addNum, nil, _attackerNetId, _attackerObjectId, _bodyPartId, canTriggerReact, _originalSkillId)
end

-- 增加元素
---@public
---@param _element BattleElementType 元素类型
---@param _elementValue number 元素值
---@param _hurtParam any 伤害参数
---@param _attackerNetId number 攻击者netId
---@param _attackerObjectId number 攻击者objectId
---@param _bodyPartId number 部位
---@param canTriggerReact boolean 是否可触发元素反应
---@param _castSkillId number 初始来源技能ID
---@return ElementalReaction 反应表数据
function BattleObjCom_Element:AddElement(_element, _elementValue, _hurtParam, _attackerNetId, _attackerObjectId, _bodyPartId, canTriggerReact, _castSkillId)
    if not _element or not _elementValue or _elementValue <= 0 then
        return
    end

    ---@type BattleObjCom_Buff
    local comBuff = self:GetObject():GetComponent(BattleObjectComponentType.Buff)
    if comBuff then
        local invincibleElementIds = comBuff:IsElementInvincible()
        if invincibleElementIds then
            for _, _elementId in pairs(invincibleElementIds) do
                if _elementId == BattleElementTypeEnum.NONE:GetId() or _element:GetId() == _elementId then
                    -- 全部元素无敌 or 指定元素无敌
                    return;
                end
            end
        end
    end

    if self.curElementId == 0 or _element:GetId() == self.curElementId then
        -- 没有元素，或添加同元素，进行元素附着或叠加
        self:__ElementAttach(_element, _elementValue, _attackerNetId, _attackerObjectId)
        return
    end

    if canTriggerReact ~= nil and not canTriggerReact then
        -- 不能触发元素反应
        return
    end
    -- 添加异元素，判断元素反应
    ---@type ElementalReaction
    local _reaction = self:__CheckElementReact(_element, _attackerNetId, _attackerObjectId)
    if not _reaction then
        -- 触发不了元素反应，那这次添加元素就作废
        return
    end
    -- 触发反应
    self:__ElementReact(_reaction, _elementValue, _hurtParam, _attackerNetId, _attackerObjectId, _bodyPartId, _castSkillId)
    return _reaction
end

---------------------------------------------------------------------------------------------------------------------------------------------------------

-- 客户端发送到显示层
---@private
---@param _reactionId number
function BattleObjCom_Element:__ClientSendElementReactToView(_reactionId)
    local msg = {
        netId = self.__object:GetParentUnit():GetNetId(),
        objectId = self:GetObject():GetObjectId(),
        reactionId = _reactionId
    }
    self.battleRoom.outputDataSource:ElementReact_L2S(msg)
end

-- 客户端发送到显示层
---@private
---@param _elementId number
function BattleObjCom_Element:__ClientSendElementAttachToView(_elementId)
    local msg = {
        netId = self.__object:GetParentUnit():GetNetId(),
        objectId = self:GetObject():GetObjectId(),
        elementId = _elementId
    }
    self.battleRoom.outputDataSource:ElementAttach_L2S(msg)
end

-- 客户端发送到显示层
---@private
---@param _elementId number
function BattleObjCom_Element:__ClientSendElementRemoveToView(_elementId)
    local msg = {
        netId = self.__object:GetParentUnit():GetNetId(),
        objectId = self:GetObject():GetObjectId(),
        elementId = _elementId
    }
    self.battleRoom.outputDataSource:ElementRemove_L2S(msg)
end

-- 客户端发送到显示层
---@private
function BattleObjCom_Element:__ClientSendElementReduceWarningToView()
    -- 怪物应该没有元素UI吧？
    local msg = {
        netId = self:GetObject():GetParentUnit():GetNetId(),
        objectId = self:GetObject():GetObjectId(),
        elementId = self.curElementId
    }
    self.battleRoom.outputDataSource:ElementReduceWarning_L2S(msg)
end

-- 客户端发送到显示层
---@private
function BattleObjCom_Element:__ClientSendElementCancelReduceWarningToView()
    -- 怪物应该没有元素UI吧？
    local msg = {
        netId = self:GetObject():GetParentUnit():GetNetId(),
        objectId = self:GetObject():GetObjectId(),
        elementId = self.curElementId
    }
    self.battleRoom.outputDataSource:ElementCancelReduceWarning_L2V(msg)
end

-- 客户端发送到显示层
---@private
---@param _elementBallId number
---@param _targetObjId number
---@param _fromObjId number
---@param _targetObjPos number
---@param _fromObjPos number
---@param _effectId number
function BattleObjCom_Element:__ClientSendCreateLightningBallToView(_elementBallId, _targetObjId, _fromObjId, _targetObjPos, _fromObjPos, _effectId)
    local msg = {
        id = _elementBallId,
        targetObjId = _targetObjId,
        fromObjId = _fromObjId,
        targetObjPos = _targetObjPos,
        fromObjPos = _fromObjPos,
        effectId = _effectId
    }
    self.battleRoom.outputDataSource:CreateElementLightningBall_L2S(msg)
end

-- 客户端发送到显示层
---@private
---@param _elementBallId number
---@param _targetObjId number
---@param _fromObjId number
---@param _targetObjPos number
---@param _fromObjPos number
---@param _spreadSpeed number
---@param _spreadAccSpeed number
---@param _effectId number
---@param _endEffectId number
---@param _spreadMaxSpeed number
function BattleObjCom_Element:__ClientSendCreateIceWindBallToView(_elementBallId, _targetObjId, _fromObjId, _targetObjPos, _fromObjPos, _spreadSpeed, _spreadAccSpeed, _effectId, _endEffectId, _spreadMaxSpeed)
    local msg = {
        id = _elementBallId,
        targetObjId = _targetObjId,
        fromObjId = _fromObjId,
        targetObjPos = _targetObjPos,
        fromObjPos = _fromObjPos,
        spreadSpeed = _spreadSpeed,
        spreadAccSpeed = _spreadAccSpeed,
        effectId = _effectId,
        endEffectId = _endEffectId,
        spreadMaxSpeed = _spreadMaxSpeed,
    }
    self.battleRoom.outputDataSource:CreateElementIceWindBall_L2V(msg)
end

---------------------------------------------------------------------------------------------------------------------------------------------------------

-- 客户端接收输出数据
---@public
---@param _elementChange table
function BattleObjCom_Element:ClientReceiveOutputData(_elementChange)
    if _elementChange.elementReact then
        -- 元素反应，通知显示层
        self:__ClientSendElementReactToView(_elementChange.elementReact.reactionId)
        if not self.driveElement then
            -- 不驱动元素组件，收到消息更正元素量
            self:__UpdateElementIdValue(_elementChange.elementReact.curElementId, _elementChange.elementReact.curElementValue)
        end
    end
    if _elementChange.elementAttach then
        -- 元素附着，通知显示层
        self:__ClientSendElementAttachToView(_elementChange.elementAttach.elementId)
        if not self.driveElement then
            -- 不驱动元素组件，收到消息更正元素量
            self:__UpdateElementIdValue(_elementChange.elementAttach.elementId, _elementChange.elementAttach.curElementValue)
        end
    end
    if _elementChange.elementRemove then
        -- 元素移除，通知显示层
        self:__ClientSendElementRemoveToView(_elementChange.elementRemove.elementId)
        if not self.driveElement then
            -- 不驱动元素组件，收到消息更正元素量
            self:__UpdateElementIdValue(_elementChange.elementRemove.elementId, 0)
        end
    end
    if _elementChange.createLightningBall then
        -- 创建闪电球，通知显示层
        self:__ClientSendCreateLightningBallToView(
                _elementChange.createLightningBall.id,
                _elementChange.createLightningBall.targetObjId,
                _elementChange.createLightningBall.fromObjId,
                _elementChange.createLightningBall.targetObjPos,
                _elementChange.createLightningBall.fromObjPos,
                _elementChange.createLightningBall.effectId)
    end
    if _elementChange.createIceWinBall then
        -- 创建冰风球，通知显示层
        self:__ClientSendCreateIceWindBallToView(
                _elementChange.createIceWinBall.id,
                _elementChange.createIceWinBall.targetObjId,
                _elementChange.createIceWinBall.fromObjId,
                _elementChange.createIceWinBall.targetObjPos,
                _elementChange.createIceWinBall.fromObjPos,
                _elementChange.createIceWinBall.spreadSpeed,
                _elementChange.createIceWinBall.spreadAccSpeed,
                _elementChange.createIceWinBall.effectId,
                _elementChange.createIceWinBall.endEffectId,
                _elementChange.createIceWinBall.spreadMaxSpeed)
    end
end

---服务器逻辑核生成用于发送给前端逻辑核的全量信息
---@public
function BattleObjCom_Element:GetCreateSyncMessage_S2C()
    local _elementSyncInfo = {}
    _elementSyncInfo.elementId = self.curElementId
    _elementSyncInfo.elementValue = self.curElementValue
    return _elementSyncInfo
end

---前端逻辑核生成用于发送给表现的层全量信息
---@public
function BattleObjCom_Element:GetCreateSyncMessage_L2V(_message)
    local _elementSyncInfo = {}
    _elementSyncInfo.elementId = self.curElementId
    _elementSyncInfo.elementValue = self.curElementValue
    return _elementSyncInfo
end

---@public
function BattleObjCom_Element:Clear()
    self:__Clear()
    self.reactCdEndTimeDic = nil
end

return BattleObjCom_Element
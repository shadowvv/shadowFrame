---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/09/23 15:37
--- Describe: unit层的一些属性扔到这
---

---@class BattleUnitCom_UnitProp : BattleUnitComponentBase
BattleUnitCom_UnitProp = class(BattleUnitComponentBase, "BattleUnitCom_UnitProp")
function BattleUnitCom_UnitProp:ctor(_data)
	self:__ctor(BattleUnitComponentType.UnitProp)
end

---@public
---@param _battleUnit BattleUnitBase
---@param _battlePlayerInfo table msg.BattlePlayerInfo
function BattleUnitCom_UnitProp:Init(_battleUnit, _battlePlayerInfo)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_UnitProp", "Init start")
	self:__Init(_battleUnit)

    ---@private
    ---@type number[]
    self.__unitPropDic = {}
    ---@private
    ---@type number[]
    self.__changedPropDic = {}
    ---@private
    self.__sprintRecoverTimeAcc = 0
    ---@private
    self.__inSprintRecoverCd = true
    ---@private
    self.__unitPropDirty = false

    self:__InitXls()
    self:__InitEnterData(_battlePlayerInfo)
    self:__InitConsumeProps()
    --LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_UnitProp", "Init end", "self.__behavIndex", self.__behavIndex, "netId", self.__netId)
end

---@private
function BattleUnitCom_UnitProp:__InitXls()
    local _inputDataSource = self:GetBattleRoom().inputDataSource
    local _allPropDic = self.__unitPropDic
    --闪避值恢复速度
	---@type BattleDefault
	local _sprintRecoverXls = _inputDataSource:GetDict("BattleDefault", 2)
    _allPropDic[BattlePropertyEnum.Sprint_En_Recover] = _sprintRecoverXls.value3
	--最大闪避值
	local _sprintMaxXls = _inputDataSource:GetDict("BattleDefault", 1)
    _allPropDic[BattlePropertyEnum.Sprint_En_Max] = _sprintMaxXls.value3
	--当前闪避值 = 最大闪避值
    _allPropDic[BattlePropertyEnum.Sprint_En_Cur] = _sprintMaxXls.value3
    local _sprintMaxXls_2 = _inputDataSource:GetDict("BattleDefault", 9)
    _allPropDic[BattlePropertyEnum.Sprint_En_Max_2] = _sprintMaxXls_2.value3 * _sprintMaxXls.value3
    --LogTools.LogByLevel(LogLevel.logErr, "BattleUnitCom_UnitProp:__InitXls", "self.__unitPropDic[BattlePropertyEnum.Sprint_En_Cur]", self.__unitPropDic[BattlePropertyEnum.Sprint_En_Cur], "self.__unitPropDic[BattlePropertyEnum.Sprint_En_Max]", self.__unitPropDic[BattlePropertyEnum.Sprint_En_Max], "self.__unitPropDic[BattlePropertyEnum.Sprint_En_Max_2]", self.__unitPropDic[BattlePropertyEnum.Sprint_En_Max_2])
    ---@private
    self.__sprintRecoverCd_Zero = _inputDataSource:GetDict("BattleDefault", 3).value3
    ---@private
    self.__sprintRecoverCd_Normal = _inputDataSource:GetDict("BattleDefault", 4).value3
    
    _allPropDic[BattlePropertyEnum.RogueUnitSkillEnMax_Fire] = 100
    _allPropDic[BattlePropertyEnum.RogueUnitSkillEnMax_Thunder] = 100
    _allPropDic[BattlePropertyEnum.RogueUnitSkillEnMax_Ice] = 100
    _allPropDic[BattlePropertyEnum.RogueUnitSkillEnMax_Wind] = 100
end

---@private
function BattleUnitCom_UnitProp:__InitEnterData(_battlePlayerInfo)
    if not _battlePlayerInfo then return end
    local _CalcPropModelInfo = _battlePlayerInfo.unitPropInfo
    if not _CalcPropModelInfo then return end
    if not _CalcPropModelInfo.attributeMap then return end

    local _allPropDic = self.__unitPropDic
    for _, _ProtoHashInt2Float in pairs(_CalcPropModelInfo.attributeMap) do
        _allPropDic[ProtoEnumTool.GetPropertyKey(_ProtoHashInt2Float.key)] = _ProtoHashInt2Float.value
    end

end

---@private
function BattleUnitCom_UnitProp:__InitConsumeProps()
    local _allPropDic = self.__unitPropDic
    local _tab = {}
    
    --todo: 这里特么是个空
    local _max = self:GetPropByName(BattlePropertyEnum.RogueUnitSkillEnMax_Fire)
    local _curName = BattlePropertyEnum.RogueUnitSkillEnCur_Fire
    if not _allPropDic[_curName] then 
        _allPropDic[_curName] = 0
    elseif _allPropDic[_curName] > _max then
        _allPropDic[_curName] = _max
    end
	_tab[_curName] = _allPropDic[_curName]
    
    _max = self:GetPropByName(BattlePropertyEnum.RogueUnitSkillEnMax_Thunder)
    _curName = BattlePropertyEnum.RogueUnitSkillEnCur_Thunder
	if not _allPropDic[_curName] then 
        _allPropDic[_curName] = 0
    elseif _allPropDic[_curName] > _max then
        _allPropDic[_curName] = _max
    end
	_tab[_curName] = _allPropDic[_curName]
    
    _max = self:GetPropByName(BattlePropertyEnum.RogueUnitSkillEnMax_Ice)
    _curName = BattlePropertyEnum.RogueUnitSkillEnCur_Ice
	if not _allPropDic[_curName] then 
        _allPropDic[_curName] = 0
    elseif _allPropDic[_curName] > _max then
        _allPropDic[_curName] = _max
    end
	_tab[_curName] = _allPropDic[_curName]
    
    _max = self:GetPropByName(BattlePropertyEnum.RogueUnitSkillEnMax_Wind)
    _curName = BattlePropertyEnum.RogueUnitSkillEnCur_Wind
	if not _allPropDic[_curName] then 
        _allPropDic[_curName] = 0
    elseif _allPropDic[_curName] > _max then
        _allPropDic[_curName] = _max
    end
	_tab[_curName] = _allPropDic[_curName]
    
    self.__consumeProps = _tab
end

--------------------------------------------------属性------------------------------------------------------------------
---同步unit层属性变化
---@protected
function BattleUnitCom_UnitProp:__SnapUnitProps()
    local _props = {}
    for _propId, _value in pairs(self.__changedPropDic) do
        local _prop = 
		{
            propId = _propId,
            propValue = _value
        }
        ----LogTools.LogByLevel(LogLevel.log, "checksprint", "propValue", _value)
        table.insert(_props, _prop)
		self.__changedPropDic[_propId] = nil
    end

    if #_props > 0 then
        if IsServer() then
            -- 输出数据
            local outputData = {
                netId = self.__netId,
                objId = self.__currentHeroObjectId,
                changeUnitProps = {props = _props}
            }
            self:GetBattleRoom().outputDataSource:AddBattleUnitChangeData(outputData)
        else
            self:__onReceiveChangeUnitProps({props = _props})
        end
    end

    self.__unitPropDirty = false
end

---回复闪避值
---@private
function BattleUnitCom_UnitProp:__RecoverSprint(_dt)
    if self.__unit:GetActionManager():CheckInState(SprintActionState:GetId()) or
       self.__unit:GetActionManager():CheckInState(DashActionState:GetId()) then 
        self.__inSprintRecoverCd = true
        self.__sprintRecoverTimeAcc = 0
        return 
    end

    local _nowSprint = self.__unitPropDic[BattlePropertyEnum.Sprint_En_Cur]
    local _maxSprint = self.__unitPropDic[BattlePropertyEnum.Sprint_En_Max]
    --自动回复使用上限1进行检查
    if _nowSprint >= _maxSprint then
        self.__inSprintRecoverCd = true
        self.__sprintRecoverTimeAcc = 0
        return
    end

    if self.__inSprintRecoverCd then
        local _sprintRecoverTimeAcc = self.__sprintRecoverTimeAcc + _dt
        local _sprintRecoverTimeTotal = self.__sprintRecoverCd_Normal
        if _nowSprint == 0 then
            _sprintRecoverTimeTotal = self.__sprintRecoverCd_Zero
        end
        if _sprintRecoverTimeAcc > _sprintRecoverTimeTotal then
            self.__inSprintRecoverCd = false
            self.__sprintRecoverTimeAcc = 0
        end
    end

    local _sprintRecover = self.__unitPropDic[BattlePropertyEnum.Sprint_En_Recover]
    local _final = _nowSprint + _sprintRecover * _dt
    if _final > _maxSprint then
        _final = _maxSprint
    end
    self:SetPropByName(BattlePropertyEnum.Sprint_En_Cur, _final)
end

---收到远端的玩家层属性同步信息
function BattleUnitCom_UnitProp:__onReceiveChangeUnitProps(_changeUnitProps)

    if _changeUnitProps and _changeUnitProps.props then
        for _, prop in pairs(_changeUnitProps.props) do
            --LogTools.LogByLevel(LogLevel.log, "check sprint", "prop.propId", prop.propId, "prop.propValue", prop.propValue)
            self.__unitPropDic[ProtoEnumTool.GetPropertyKey(prop.propId)] = prop.propValue
        end

        local _battleUnitPropChange_L2V =
        {
            netId = self.__netId,
            objId = -1,
            changeProps = _changeUnitProps
        }
        -- 推给显示层
        self:GetBattleRoom().outputDataSource:BattleUnitPropChangeL2V(_battleUnitPropChange_L2V)
        --LogTools.LogByLevel(LogLevel.logErr, "BattleUnitCom_UnitProp __onReceiveChangeUnitProps", "_battleUnitPropChange_L2V", dumpTableEx(_battleUnitPropChange_L2V))
    end
end

------------------------------------------------------------------------------------------------------------------------
---@public
function BattleUnitCom_UnitProp:Update(_dt)
	self:__RecoverSprint(_dt)
	if self.__unitPropDirty then
        self:__SnapUnitProps()
    end
end

---检查是否是记在Unit层的属性
---@public
function BattleUnitCom_UnitProp:CheckUnitProp(_str)
    return self.__unitPropDic[_str] ~= nil
end

---@public
function BattleUnitCom_UnitProp:SetPropByName(_str, _value)
    local _oldValue = self.__unitPropDic[_str] or 0
    --体力设置接口统一用上限2进行检查，体力自动回复会自己检查上限1
    if _str == BattlePropertyEnum.Sprint_En_Cur then
        local _maxSprint = self.__unitPropDic[BattlePropertyEnum.Sprint_En_Max_2]
        if _value > _maxSprint then _value = _maxSprint end
        if _value < 0 then _value = 0 end
    elseif _str == BattlePropertyEnum.RogueUnitSkillEnCur_Fire then
        local _maxValue = self.__unitPropDic[BattlePropertyEnum.RogueUnitSkillEnMax_Fire]
        if _value > _maxValue then _value = _maxValue end
        if _value < 0 then _value = 0 end
    elseif _str == BattlePropertyEnum.RogueUnitSkillEnCur_Thunder then
        local _maxValue = self.__unitPropDic[BattlePropertyEnum.RogueUnitSkillEnMax_Thunder]
        if _value > _maxValue then _value = _maxValue end
        if _value < 0 then _value = 0 end
    elseif _str == BattlePropertyEnum.RogueUnitSkillEnCur_Ice then
        local _maxValue = self.__unitPropDic[BattlePropertyEnum.RogueUnitSkillEnMax_Ice]
        if _value > _maxValue then _value = _maxValue end
        if _value < 0 then _value = 0 end
    elseif _str == BattlePropertyEnum.RogueUnitSkillEnCur_Wind then
        local _maxValue = self.__unitPropDic[BattlePropertyEnum.RogueUnitSkillEnMax_Wind]
        if _value > _maxValue then _value = _maxValue end
        if _value < 0 then _value = 0 end
    end

    if _oldValue == _value then return 0 end

    self.__unitPropDic[_str] = _value
    self.__changedPropDic[ProtoEnumTool.GetPropertyId(_str)] = _value
    self.__unitPropDirty = true
    return _value - _oldValue
end

---@public
function BattleUnitCom_UnitProp:GetPropByName(_str)
	return self.__unitPropDic[_str]
end

---@public
function BattleUnitCom_UnitProp:IncreasePropByName(_str, _value)
	local _prop = self:GetPropByName(_str)
    return self:SetPropByName(_str, _prop + _value)
end

---@public
function BattleUnitCom_UnitProp:DecreasePropByName(_str, _value)
    if not _value then
        return 0;
    end
    local _prop = self:GetPropByName(_str)
    --LogTools.LogByLevel(LogLevel.log, "check sprint", "BattleUnitCom_UnitProp:DecreaseUnitPropByName", "_prop", _prop, "_value", _value)
    local _change = self:SetPropByName(_str, _prop - _value)
    self:__OnConsumeRelativePropertyChange(_str)
    return _change
end

---@private
function BattleUnitCom_UnitProp:__OnConsumeRelativePropertyChange(_str)

    local _maxName = nil
    local _curName = nil
    
    if _str == BattlePropertyEnum.RogueUnitSkillEnMax_Fire then
        _maxName = _str
        _curName = BattlePropertyEnum.RogueUnitSkillEnCur_Fire
    elseif _str == BattlePropertyEnum.RogueUnitSkillEnMax_Thunder then
        _maxName = _str
        _curName = BattlePropertyEnum.RogueUnitSkillEnCur_Thunder
    elseif _str == BattlePropertyEnum.RogueUnitSkillEnMax_Ice then
        _maxName = _str
        _curName = BattlePropertyEnum.RogueUnitSkillEnCur_Ice
    elseif _str == BattlePropertyEnum.RogueUnitSkillEnMax_Wind then
        _maxName = _str
        _curName = BattlePropertyEnum.RogueUnitSkillEnCur_Wind
    end

    if _maxName and _curName then
        if self.__unitPropDic[_curName] > self.__unitPropDic[_maxName] then
           self:SetPropByName(_curName, self.__unitPropDic[_maxName]) 
        end
    end
    
end

-- 获取属性百分比快照
function BattleUnitCom_UnitProp:GetConsumePropPercentSnapShot()
    local attributeMap = {}
    table.insert(attributeMap, self:__GetPropPercentKvByName(BattlePropertyEnum.RogueUnitSkillEnCur_Fire))
    table.insert(attributeMap, self:__GetPropPercentKvByName(BattlePropertyEnum.RogueUnitSkillEnCur_Thunder))
    table.insert(attributeMap, self:__GetPropPercentKvByName(BattlePropertyEnum.RogueUnitSkillEnCur_Ice))
    table.insert(attributeMap, self:__GetPropPercentKvByName(BattlePropertyEnum.RogueUnitSkillEnCur_Wind))
    return attributeMap
end

-- 获取属性快照
---@param _propName string 属性名
---@return table<number,number> 键值对
function BattleUnitCom_UnitProp:__GetPropPercentKvByName(_propName)
    ---@type table<number,number>
    local _kv = {}
    _kv.key = ProtoEnumTool.GetPropertyId(_propName)
    _kv.value = Mathf.Round(self:GetPropertyPercentById(_propName) * 10000) / 100
    return _kv
end

---获取属性百分比
---只有消耗属性有百分比，面板属性百分比始终为1
---返回0-1
---@public
function BattleUnitCom_UnitProp:GetPropertyPercentById(_propName)

    local _cur = self:GetPropByName(_propName)
    if not _cur then return 1 end

    if _propName == BattlePropertyEnum.RogueUnitSkillEnCur_Fire then
        return _cur / self:GetPropByName(BattlePropertyEnum.RogueUnitSkillEnMax_Fire)
    elseif _propName == BattlePropertyEnum.RogueUnitSkillEnCur_Thunder then
        return _cur / self:GetPropByName(BattlePropertyEnum.RogueUnitSkillEnMax_Thunder)
    elseif _propName == BattlePropertyEnum.RogueUnitSkillEnCur_Ice then
        return _cur / self:GetPropByName(BattlePropertyEnum.RogueUnitSkillEnMax_Ice)
    elseif _propName == BattlePropertyEnum.RogueUnitSkillEnCur_Wind then
        return _cur / self:GetPropByName(BattlePropertyEnum.RogueUnitSkillEnMax_Wind)
        --elseif _propName == BattlePropertyEnum.RogueUnitSkillEnCur_Thunder then

    else
        return 1
    end

end

------------------------------------------------------------------------------------------------------------------------
---服务器逻辑核生成用于发送给前端逻辑核的全量信息
---@public
function BattleUnitCom_UnitProp:GetCreateSyncMessage_S2C()
    local _propertyKeyValueList = {}
    for _propId, _propValue in pairs(self.__unitPropDic) do
        local _propertyKeyValue = {}
        _propertyKeyValue.propId = _propId
        _propertyKeyValue.propValue = _propValue
        table.insert(_propertyKeyValueList, _propertyKeyValue)
    end
    return _propertyKeyValueList
end

---前端逻辑核用服务器发来的全量信息刷新自身数据
---@public
function BattleUnitCom_UnitProp:OnReceiveCreateSyncMessage_S2C(_propertyKeyValueList)
    for _, _propertyKeyValue in pairs(_propertyKeyValueList) do
        self.__unitPropDic[_propertyKeyValue.propId] = _propertyKeyValue.propValue
    end
end

---前端逻辑核生成用于发送给表现的层全量信息
---@public
function BattleUnitCom_UnitProp:GetCreateSyncMessage_L2V()
    local _protoHashInt2FloatList = {}
	for _key, _value in pairs(self.__unitPropDic) do
		local _protoHashInt2Float = {}
		_protoHashInt2Float.key = ProtoEnumTool.GetPropertyId(_key)
		_protoHashInt2Float.value = _value
		table.insert(_protoHashInt2FloatList, _protoHashInt2Float)
	end
    return _protoHashInt2FloatList
end
return BattleUnitCom_UnitProp
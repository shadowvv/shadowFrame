---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/1/27 16:16

---@class BehaviorProcessor : table
BehaviorProcessor = class(nil, 'BehaviorProcessor');
function BehaviorProcessor:ctor(_battleId)
	self.battleId = _battleId
	self.battleRoom = GetBattleRoom(self.battleId)
end

-- log
function BehaviorProcessor:CheckLuaBehavLog(...)
	
end

-- 检查关卡AI主导权
function BehaviorProcessor:CheckLevelAIHost()
    return false
end

-- 检查怪物AI主导权
function BehaviorProcessor:CheckMonsAIHost()
    return false
end

--- 战斗计时器开始
---@public
function BehaviorProcessor:OnBattleStart()
    self.battleRoom:OnBattleStart()
end

--- 战斗计时器暂停
---@public
function BehaviorProcessor:OnBattlePause()
    self.battleRoom:OnBattlePause()
end

--- 战斗计时器恢复
---@public
function BehaviorProcessor:OnBattleResume()
    self.battleRoom:OnBattleResume()
end

--- 战斗计时器重置
---@public
function BehaviorProcessor:OnBattleReset()
    self.battleRoom:OnBattleReset()
end

------------------------------------------------------------------------------------------------------------------------
---投放所有玩家
function BehaviorProcessor:CreateAllPlayerUnit(_forceLeaderId)
    if not self:CheckLevelAIHost() then return end
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("CreateAllPlayerUnit start", "_forceLeaderId", _forceLeaderId)
	end

	--local _creatInfo = {}
	local _unitManager = self.battleRoom.battleUnitManager
    local _playerOriginalManager = _unitManager:GetOriginalPlayerInfoManager()
    local _playerOriginalDataList = _playerOriginalManager:GetAllPlayer()

	for i = 1, #_playerOriginalDataList do
		local _birthData = self.battleRoom.battleLevelManager.levelConfigManager:GetLevelEditorConfig().birthPoint[i]
		if _birthData == nil then
			self.battleRoom.exceptionProcessor:OnBattleDataNil("#_playerOriginalDataList:", tostring(#_playerOriginalDataList), "#birthPoint", tostring(#self.battleRoom.battleLevelManager.levelConfigManager:GetLevelEditorConfig().birthPoint))
		else
			
			local _BattleUnitGenerateInfo = {}
			_BattleUnitGenerateInfo.unitType = BattleUnitType.Player
			_BattleUnitGenerateInfo.netId = self.battleRoom.idCreator:GetAndIncreaseNetId()
			_BattleUnitGenerateInfo.dicId = _forceLeaderId
			_BattleUnitGenerateInfo.playerId = _playerOriginalDataList[i]:GetPlayerId()
			_BattleUnitGenerateInfo.firstCamp = BattleUnitCampType.Player
			_BattleUnitGenerateInfo.secCamp = _BattleUnitGenerateInfo.playerId
			_BattleUnitGenerateInfo.position = _birthData.position
			_BattleUnitGenerateInfo.rotation = _birthData.rotation
			_BattleUnitGenerateInfo.scale = _birthData.scale
			_BattleUnitGenerateInfo.velocity = Vector3.zero_global()
			_BattleUnitGenerateInfo.delayTime = 0
			_BattleUnitGenerateInfo.objIdList = {}
			local _heroInfos = _playerOriginalDataList[i]:GetPlayerInfo().leaders
			for _ = 1, #_heroInfos do
				table.insert(_BattleUnitGenerateInfo.objIdList, self.battleRoom.idCreator:GetAndIncreaseObjId())
			end
			_BattleUnitGenerateInfo.timeStamp = TimeUtils.battleNow(self.battleId)
			_BattleUnitGenerateInfo.targetPointId = -1
			
			---@type BattleUnitDelayCreateData
			local _battleUnitDelayCreateData = BattleUnitDelayCreateData.New(_BattleUnitGenerateInfo)
			_unitManager:AddDelayUnitCreateData(_battleUnitDelayCreateData)
		end
    end
	
	_unitManager:CheckDelayCreateUnits()
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("CreateAllPlayerUnit end")
	end
end

---投放关卡单位
---@param _param LuaBehav_LevelDropUnitParam
function BehaviorProcessor:CreateLevelUnit(_param)
    if not self:CheckLevelAIHost() then return end
	--LogTools.LogByLevel(LogLevel.logErr, "BehaviorProcessor", "_param", dumpTableEx(_param), "frame", LOOPER.GetFrameId())
	local _generateLevelTrigger = {}
	local _generateLevelTriggerInfoList = {}
	_generateLevelTrigger.infoList = _generateLevelTriggerInfoList
	
	local _randomUtil = self.battleRoom.randomUtil
	local _unitManager = self.battleRoom.battleUnitManager

	local _levelUnitManager = self.battleRoom.battleLevelManager.levelUnitManager
	if _param.dropType == LuaBehav_Define_LevelUnitDropType.LevelUnit then --单个投放
		local _levelUnitData = _levelUnitManager:GetLevelUnit(_param.id)
		_levelUnitData:SetState(LevelUnitStateEnum.INITIAL)
		local _levelUnitType = _levelUnitData.type
		local _targetPointId = _levelUnitData.targetPointId or -1
		if _levelUnitType == LevelUnitTypeEnum.TRIGGER then
			--关卡触发器回头单独处理
			local _generateLevelTriggerInfo = {}
			_generateLevelTriggerInfo.id = _levelUnitData.id
			_generateLevelTriggerInfo.position = _levelUnitData:GetBornPosition()
			_generateLevelTriggerInfo.rotation = _levelUnitData.rotation
			_generateLevelTriggerInfo.scale = _levelUnitData.scale
			_generateLevelTriggerInfo.delayTime = 0
			_generateLevelTriggerInfo.battleId = self.battleId
			_generateLevelTriggerInfo.timeStamp = TimeUtils.battleNow(self.battleId)
			table.insert(_generateLevelTriggerInfoList, _generateLevelTriggerInfo)
		elseif _levelUnitType == LevelUnitTypeEnum.OBJ then
			
			local _BattleUnitGenerateInfo = {}
			_BattleUnitGenerateInfo.unitType = BattleUnitType.SceneObj
			_BattleUnitGenerateInfo.netId = self.battleRoom.idCreator:GetAndIncreaseNetId()
			_BattleUnitGenerateInfo.dicId = _levelUnitData.instanceId
			_BattleUnitGenerateInfo.firstCamp = _levelUnitData:GetConfigFirstCamp(_param.firstCamp)
			_BattleUnitGenerateInfo.secCamp = 1
			_BattleUnitGenerateInfo.position = _levelUnitData:GetBornPosition()
			_BattleUnitGenerateInfo.rotation = _levelUnitData.rotation
			_BattleUnitGenerateInfo.scale = _levelUnitData.scale
			_BattleUnitGenerateInfo.velocity = Vector3.zero_global()
			_BattleUnitGenerateInfo.levelUnitId = _levelUnitData.id
			_BattleUnitGenerateInfo.initState = _levelUnitData.initState
			_BattleUnitGenerateInfo.timeStamp = TimeUtils.battleNow(self.battleId)
			_BattleUnitGenerateInfo.delayTime = 0
			_BattleUnitGenerateInfo.objIdList = {self.battleRoom.idCreator:GetAndIncreaseObjId()}
			_BattleUnitGenerateInfo.targetPointId = _targetPointId
			
			---@type BattleUnitDelayCreateData
			local _battleUnitDelayCreateData = BattleUnitDelayCreateData.New(_BattleUnitGenerateInfo)
			_unitManager:AddDelayUnitCreateData(_battleUnitDelayCreateData)
		elseif _levelUnitType == LevelUnitTypeEnum.MONSTER then
			
			local _BattleUnitGenerateInfo = {}
			_BattleUnitGenerateInfo.unitType = BattleUnitType.Monster
			_BattleUnitGenerateInfo.netId = self.battleRoom.idCreator:GetAndIncreaseNetId()
			_BattleUnitGenerateInfo.dicId = _levelUnitData.instanceId
			_BattleUnitGenerateInfo.firstCamp = _levelUnitData:GetConfigFirstCamp(_param.firstCamp)
			_BattleUnitGenerateInfo.secCamp = _param.secCamp
			_BattleUnitGenerateInfo.position = _levelUnitData:GetBornPosition()
			_BattleUnitGenerateInfo.rotation = _levelUnitData.rotation
			_BattleUnitGenerateInfo.scale = _levelUnitData.scale
			_BattleUnitGenerateInfo.velocity = Vector3.zero_global()
			_BattleUnitGenerateInfo.levelUnitId = _levelUnitData.id
			_BattleUnitGenerateInfo.timeStamp = TimeUtils.battleNow(self.battleId)
			_BattleUnitGenerateInfo.delayTime = 0
			_BattleUnitGenerateInfo.objIdList = {self.battleRoom.idCreator:GetAndIncreaseObjId()}
			_BattleUnitGenerateInfo.targetPointId = _targetPointId
			
			---@type BattleUnitDelayCreateData
			local _battleUnitDelayCreateData = BattleUnitDelayCreateData.New(_BattleUnitGenerateInfo)
			_unitManager:AddDelayUnitCreateData(_battleUnitDelayCreateData)
		elseif _levelUnitType == LevelUnitTypeEnum.TARGET_POINT then
			
			local _BattleUnitGenerateInfo = {}
			_BattleUnitGenerateInfo.unitType = BattleUnitType.TargetPoint
			_BattleUnitGenerateInfo.netId = self.battleRoom.idCreator:GetAndIncreaseNetId()
			_BattleUnitGenerateInfo.dicId = _levelUnitData.instanceId
			_BattleUnitGenerateInfo.firstCamp = _levelUnitData:GetConfigFirstCamp(_param.firstCamp)
			_BattleUnitGenerateInfo.secCamp = _param.secCamp
			_BattleUnitGenerateInfo.position = _levelUnitData:GetBornPosition()
			_BattleUnitGenerateInfo.rotation = _levelUnitData.rotation
			_BattleUnitGenerateInfo.scale = _levelUnitData.scale
			_BattleUnitGenerateInfo.velocity = Vector3.zero_global()
			_BattleUnitGenerateInfo.levelUnitId = _levelUnitData.id
			_BattleUnitGenerateInfo.timeStamp = TimeUtils.battleNow(self.battleId)
			_BattleUnitGenerateInfo.delayTime = 0
			_BattleUnitGenerateInfo.objIdList = {self.battleRoom.idCreator:GetAndIncreaseObjId()}
			_BattleUnitGenerateInfo.targetPointId = _targetPointId
			
			---@type BattleUnitDelayCreateData
			local _battleUnitDelayCreateData = BattleUnitDelayCreateData.New(_BattleUnitGenerateInfo)
			_unitManager:AddDelayUnitCreateData(_battleUnitDelayCreateData)
		end
	elseif _param.dropType == LuaBehav_Define_LevelUnitDropType.LevelUnitGroup then --按组投放
		local _levelUnitList = _levelUnitManager:GetLevelUnitByGroup(_param.id)
		 
		local _delayType = _param.delayType
		local _delayBottom = _param.delayBottom
		local _delayTop = _param.delayTop
		local _delayTimeCnt = 0
		for i = 1, #_levelUnitList do
			local _levelUnitData = _levelUnitList[i]
			_levelUnitData:SetState(LevelUnitStateEnum.INITIAL)
			local _levelUnitType = _levelUnitData.type
			local _targetPointId = _levelUnitData.targetPointId or -1
			
			if _levelUnitType == LevelUnitTypeEnum.TRIGGER then
				local _generateLevelTriggerInfo = {}
				_generateLevelTriggerInfo.id = _levelUnitData.id
				_generateLevelTriggerInfo.position = _levelUnitData:GetBornPosition()
				_generateLevelTriggerInfo.rotation = _levelUnitData.rotation
				_generateLevelTriggerInfo.scale = _levelUnitData.scale
				_generateLevelTriggerInfo.delayTime = 0
				_generateLevelTriggerInfo.battleId = self.battleId
				_generateLevelTriggerInfo.timeStamp = TimeUtils.battleNow(self.battleId)
				if _delayType == LuaBehav_Define_LevelDropUnitDelayType.OneByOne then
					_delayTimeCnt = _delayTimeCnt + _randomUtil:RandomFloat(_delayBottom, _delayTop)
					_generateLevelTriggerInfo.delayTime = _delayTimeCnt
				elseif _delayType == LuaBehav_Define_LevelDropUnitDelayType.Random then
					_generateLevelTriggerInfo.delayTime = _randomUtil:RandomFloat(_delayBottom, _delayTop)
				end
				table.insert(_generateLevelTriggerInfoList, _generateLevelTriggerInfo)
			elseif _levelUnitType == LevelUnitTypeEnum.OBJ then
				local _BattleUnitGenerateInfo = {}
				_BattleUnitGenerateInfo.unitType = BattleUnitType.SceneObj
				_BattleUnitGenerateInfo.netId = self.battleRoom.idCreator:GetAndIncreaseNetId()
				_BattleUnitGenerateInfo.dicId = _levelUnitData.instanceId
				_BattleUnitGenerateInfo.firstCamp = _levelUnitData:GetConfigFirstCamp(_param.firstCamp)
				_BattleUnitGenerateInfo.secCamp = 1
				_BattleUnitGenerateInfo.position = _levelUnitData:GetBornPosition()
				_BattleUnitGenerateInfo.rotation = _levelUnitData.rotation
				_BattleUnitGenerateInfo.scale = _levelUnitData.scale
				_BattleUnitGenerateInfo.velocity = Vector3.zero_global()
				_BattleUnitGenerateInfo.levelUnitId = _levelUnitData.id
				_BattleUnitGenerateInfo.initState = _levelUnitData.initState
				_BattleUnitGenerateInfo.timeStamp = TimeUtils.battleNow(self.battleId)
				_BattleUnitGenerateInfo.delayTime = 0
				if _delayType == LuaBehav_Define_LevelDropUnitDelayType.OneByOne then
					_delayTimeCnt = _delayTimeCnt + _randomUtil:RandomFloat(_delayBottom, _delayTop)
					_BattleUnitGenerateInfo.delayTime = _delayTimeCnt
				elseif _delayType == LuaBehav_Define_LevelDropUnitDelayType.Random then
					_BattleUnitGenerateInfo.delayTime = _randomUtil:RandomFloat(_delayBottom, _delayTop)
				end
				_BattleUnitGenerateInfo.objIdList = {self.battleRoom.idCreator:GetAndIncreaseObjId()}
				_BattleUnitGenerateInfo.targetPointId = _targetPointId
				
				---@type BattleUnitDelayCreateData
				local _battleUnitDelayCreateData = BattleUnitDelayCreateData.New(_BattleUnitGenerateInfo)
				_unitManager:AddDelayUnitCreateData(_battleUnitDelayCreateData)
			elseif _levelUnitType == LevelUnitTypeEnum.MONSTER then
				
				local _BattleUnitGenerateInfo = {}
				_BattleUnitGenerateInfo.unitType = BattleUnitType.Monster
				_BattleUnitGenerateInfo.netId = self.battleRoom.idCreator:GetAndIncreaseNetId()
				_BattleUnitGenerateInfo.dicId = _levelUnitData.instanceId
				_BattleUnitGenerateInfo.firstCamp = _levelUnitData:GetConfigFirstCamp(_param.firstCamp)
				_BattleUnitGenerateInfo.secCamp = _param.secCamp
				_BattleUnitGenerateInfo.position = _levelUnitData:GetBornPosition()
				_BattleUnitGenerateInfo.rotation = _levelUnitData.rotation
				_BattleUnitGenerateInfo.scale = _levelUnitData.scale
				_BattleUnitGenerateInfo.velocity = Vector3.zero_global()
				_BattleUnitGenerateInfo.levelUnitId = _levelUnitData.id
				_BattleUnitGenerateInfo.timeStamp = TimeUtils.battleNow(self.battleId)
				_BattleUnitGenerateInfo.delayTime = 0
				if _delayType == LuaBehav_Define_LevelDropUnitDelayType.OneByOne then
					_delayTimeCnt = _delayTimeCnt + _randomUtil:RandomFloat(_delayBottom, _delayTop)
					_BattleUnitGenerateInfo.delayTime = _delayTimeCnt
				elseif _delayType == LuaBehav_Define_LevelDropUnitDelayType.Random then
					_BattleUnitGenerateInfo.delayTime = _randomUtil:RandomFloat(_delayBottom, _delayTop)
				end
				_BattleUnitGenerateInfo.objIdList = {self.battleRoom.idCreator:GetAndIncreaseObjId()}
				_BattleUnitGenerateInfo.targetPointId = _targetPointId
				
				---@type BattleUnitDelayCreateData
				local _battleUnitDelayCreateData = BattleUnitDelayCreateData.New(_BattleUnitGenerateInfo)
				_unitManager:AddDelayUnitCreateData(_battleUnitDelayCreateData)
			elseif _levelUnitType == LevelUnitTypeEnum.TARGET_POINT then
				
				local _BattleUnitGenerateInfo = {}
				_BattleUnitGenerateInfo.unitType = BattleUnitType.TargetPoint
				_BattleUnitGenerateInfo.netId = self.battleRoom.idCreator:GetAndIncreaseNetId()
				_BattleUnitGenerateInfo.dicId = _levelUnitData.instanceId
				_BattleUnitGenerateInfo.firstCamp = _levelUnitData:GetConfigFirstCamp(_param.firstCamp)
				_BattleUnitGenerateInfo.secCamp = _param.secCamp
				_BattleUnitGenerateInfo.position = _levelUnitData:GetBornPosition()
				_BattleUnitGenerateInfo.rotation = _levelUnitData.rotation
				_BattleUnitGenerateInfo.scale = _levelUnitData.scale
				_BattleUnitGenerateInfo.velocity = Vector3.zero_global()
				_BattleUnitGenerateInfo.levelUnitId = _levelUnitData.id
				_BattleUnitGenerateInfo.timeStamp = TimeUtils.battleNow(self.battleId)
				_BattleUnitGenerateInfo.delayTime = 0
				if _delayType == LuaBehav_Define_LevelDropUnitDelayType.OneByOne then
					_delayTimeCnt = _delayTimeCnt + _randomUtil:RandomFloat(_delayBottom, _delayTop)
					_BattleUnitGenerateInfo.delayTime = _delayTimeCnt
				elseif _delayType == LuaBehav_Define_LevelDropUnitDelayType.Random then
					_BattleUnitGenerateInfo.delayTime = _randomUtil:RandomFloat(_delayBottom, _delayTop)
				end
				_BattleUnitGenerateInfo.objIdList = {self.battleRoom.idCreator:GetAndIncreaseObjId()}
				_BattleUnitGenerateInfo.targetPointId = _targetPointId
				
				---@type BattleUnitDelayCreateData
				local _battleUnitDelayCreateData = BattleUnitDelayCreateData.New(_BattleUnitGenerateInfo)
				_unitManager:AddDelayUnitCreateData(_battleUnitDelayCreateData)
			end
			
			--break
		end
	end
	
	_unitManager:CheckDelayCreateUnits()
	if #_generateLevelTriggerInfoList > 0 then
		self.battleRoom.outputDataSource:CreateLevelTriggerS2C(_generateLevelTrigger)
	end
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("CreateLevelUnit end")
	end
end

---创建区域单位
---@public
---@param _rotation Vector3
---@param _snapShotData SnapShotData
---@param _sourceType CreateAreatriggerSourceType
---@param _buffTempList BattleBuffCastTemplate[] 外部注入buffTemp列表
---@param _timeStamp number 创建时间
---@param _originalBlockId number 初始部位ID
---@param _generateStackInfo table msg.UnitGenerateStackInfo 透传信息 
---@param _specificStackNum number 指定添加BUFF的层数
function BehaviorProcessor:CreateAreaTriggerUnit(_dicId, _snapShotData, _sourceType, _sourceId, _skillNodeId, _position, _rotation, _buffTempList, _maxDis, _timeStamp, _originalBlockId, _generateStackInfo, _specificStackNum)
	if not self:CheckLevelAIHost() then return end
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "BehaviorProcessor", "CreateAreaTriggerUnit start", "_dicId", _dicId, "_sourceType", LogTools.GetEnumTableDesc(CreateAreatriggerSourceType, _sourceType), "_sourceId", _sourceId, "_skillNodeId", _skillNodeId, IsClient(), "_position", _position, "_rotation", _rotation, "_originalBlockId", _originalBlockId, "_originalSkillID", _snapShotData:GetOriginalHeroSkillId())
	end
	
	local _BattleUnitGenerateInfo = {}
	_BattleUnitGenerateInfo.unitType = BattleUnitType.AreaTrigger
	_BattleUnitGenerateInfo.netId = self.battleRoom.idCreator:GetAndIncreaseNetId()
	_BattleUnitGenerateInfo.dicId = _dicId
	_BattleUnitGenerateInfo.firstCamp = _snapShotData:GetFirstCamp()
	_BattleUnitGenerateInfo.secCamp = _snapShotData:GetSecCamp()
	local _parentUnit = self.battleRoom.battleUnitManager:GetUnit(_snapShotData:GetNetId(), true)
	if _position then
		_BattleUnitGenerateInfo.position = _position
	elseif _parentUnit then
		_BattleUnitGenerateInfo.position = _parentUnit:GetActionManager():GetPosition()
	else
		_BattleUnitGenerateInfo.position = Vector3.zero_global()
	end
	if _rotation then
		_BattleUnitGenerateInfo.rotation = _rotation
	elseif _parentUnit then
		_BattleUnitGenerateInfo.rotation = Quaternion.ToEulerAngles(_parentUnit:GetActionManager():GetRotation())
	else
		_BattleUnitGenerateInfo.rotation = Vector3.zero_global()
	end
	_BattleUnitGenerateInfo.scale = Vector3.one_global()
	_BattleUnitGenerateInfo.velocity = Vector3.zero_global()
	_BattleUnitGenerateInfo.levelUnitId = -1
	_BattleUnitGenerateInfo.timeStamp = _timeStamp
	_BattleUnitGenerateInfo.delayTime = 0
	_BattleUnitGenerateInfo.objIdList = {self.battleRoom.idCreator:GetAndIncreaseObjId()}
	_BattleUnitGenerateInfo.castObjId = _snapShotData:GetObjId()
	_BattleUnitGenerateInfo.snapShotIndex = _snapShotData:GetIndex()
    _BattleUnitGenerateInfo.subordinateNetId = _snapShotData:GetNetId()
	_BattleUnitGenerateInfo.subordinateObjId = _snapShotData:GetObjId()
	_BattleUnitGenerateInfo.sourceType = _sourceType
	_BattleUnitGenerateInfo.sourceId = _sourceId
	_BattleUnitGenerateInfo.skillNodeId = _skillNodeId
	_BattleUnitGenerateInfo.originalHeroSkillId = _snapShotData:GetOriginalHeroSkillId()
	_BattleUnitGenerateInfo.maxDis = _maxDis
	_BattleUnitGenerateInfo.buffTempList = _buffTempList
	_BattleUnitGenerateInfo.hurtParamFix = _snapShotData:GetHurtParam()
	_BattleUnitGenerateInfo.baseProps = {}
    for i = 100, 104 do
        local _prop = {}
        _prop.propId = i
        _prop.propValue = _snapShotData:GetBasePropById(i) or 0
        table.insert(_BattleUnitGenerateInfo.baseProps, _prop)
    end
	_BattleUnitGenerateInfo.subordinateLevel = _snapShotData:GetLevel()
	_BattleUnitGenerateInfo.originalBlockId = _originalBlockId
	_BattleUnitGenerateInfo.generateStackInfo = _generateStackInfo
	_BattleUnitGenerateInfo.specificStackNum = _specificStackNum
	_BattleUnitGenerateInfo.targetPointId = -1
	
	---@type BattleUnitDelayCreateData
	local _battleUnitDelayCreateData = BattleUnitDelayCreateData.New(_BattleUnitGenerateInfo)
	self.battleRoom.battleUnitManager:AddDelayUnitCreateData(_battleUnitDelayCreateData)
	self.battleRoom.battleUnitManager:CheckDelayCreateUnits()
	
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "BehaviorProcessor", "CreateAreaTriggerUnit end", "_generateAreaInfo", dumpTableEx(_generateAreaInfo))
	end
end

---创建召唤物
---@public
---@param _subordinateNetId number 召唤者的netId
---@param _subordinateObjId number 召唤者的objectId
function BehaviorProcessor:CreateSummonedMonsUnit(_dicId, _subordinateNetId, _subordinateObjId, _originalSkillID)
	if not self:CheckLevelAIHost() then return end
	if LogTools.SummondLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckSummonedMons", "BehaviorProcessor", "CreateSummonedMonsUnit start", "_dicId", _dicId, "_subordinateNetId", _subordinateNetId, "_subordinateObjId", _subordinateObjId, "Frame", self.battleRoom.frameId)
	end

	local _subordinationUnit = self.battleRoom.battleUnitManager:GetUnit(_subordinateNetId)
	if not _subordinationUnit then
		if LogTools.SummondLog and CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckSummonedMons", "BehaviorProcessor", "CreateSummonedMonsUnit", "_subordinationUnit is nil", "Frame", self.battleRoom.frameId)
		end
		return
	end
	local _subordinationObj = self.battleRoom.battleObjectManager:GetObject(_subordinateObjId)
	if not _subordinationObj then
		if LogTools.SummondLog and CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckSummonedMons", "BehaviorProcessor", "CreateSummonedMonsUnit", "_subordinationObj is nil", "Frame", self.battleRoom.frameId)
		end
		return
	end

	---@type SummonedMonster
	local _summondXls = self.battleRoom.inputDataSource:GetDict("SummonedMonster", _dicId)
	if not _summondXls then return end

	---@type BattleUnitCom_Subordination
	local _subordinationCom = _subordinationUnit:GetComponent(BattleUnitComponentType.Subordination)
	if not _subordinationCom then
		if LogTools.SummondLog and CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckSummonedMons", "BehaviorProcessor", "CreateSummonedMonsUnit", "_subordinationCom is nil", "Frame", self.battleRoom.frameId)
		end
		return
	end
	local _list = _subordinationCom:GetManagedObjList(_dicId, BattleObjectType.SummonedMons)
	if #_list == _summondXls.durationCount then
		local _overSummondType = _summondXls.isSummoned
		if _overSummondType == 0 then  --刷新存活时间
			local _firstSummond = self.battleRoom.battleObjectManager:GetObject(_list[1])
			---@type BattleObjCom_LifeCtrl
			local _lifeCom = _firstSummond:GetComponent(BattleObjectComponentType.LifeCtrl)
			_lifeCom:ResetLifeTime()
		elseif _overSummondType == 1 then --干掉第一个，重新召唤
			local _firstSummond = self.battleRoom.battleObjectManager:GetObject(_list[1])
			---@type BattleObjCom_LifeCtrl
			local _lifeCom = _firstSummond:GetComponent(BattleObjectComponentType.LifeCtrl)
			_lifeCom:SetReplaced(true)
			self:__CreateSummonedMonsUnit(_dicId, _subordinateNetId, _subordinateObjId, _subordinationUnit, _subordinationObj, _summondXls)
		else --召唤失败
			if LogTools.SummondLog and CheckLogLevel(LogLevel.log) then
				LogTools.LogByLevel(LogLevel.log, "CheckSummonedMons", "BehaviorProcessor", "CreateSummonedMonsUnit", "召唤失败", "_summondXls.durationCount", _summondXls.durationCount, "#_list", #_list, "_overSummondType", _overSummondType, "Frame", self.battleRoom.frameId)
			end
			return
		end
	else
		self:__CreateSummonedMonsUnit(_dicId, _subordinateNetId, _subordinateObjId, _subordinationUnit, _subordinationObj, _summondXls, _originalSkillID)
	end
end
---@private
---@param _subordinationUnit BattleUnitBase 召唤者unit
---@param _subordinationObj BattleObjectBase 召唤者object
---@param _summonedXls SummonedMonster
function BehaviorProcessor:__CreateSummonedMonsUnit(_dicId, _subordinateNetId, _subordinateObjId, _subordinationUnit, _subordinationObj, _summonedXls, _originalSkillID)
	
	local _BattleUnitGenerateInfo = {}
	_BattleUnitGenerateInfo.unitType = BattleUnitType.SummonedMons
	_BattleUnitGenerateInfo.netId = self.battleRoom.idCreator:GetAndIncreaseNetId()
	_BattleUnitGenerateInfo.dicId = _dicId
	_BattleUnitGenerateInfo.subordinateNetId = _subordinateNetId
	_BattleUnitGenerateInfo.subordinateObjId = _subordinateObjId
    if _summonedXls.campType == -1 then --使用召唤者阵营
		---@type BattleUnitCom_Camp
		local _parentCampCom = _subordinationUnit:GetComponent(BattleUnitComponentType.Camp)
		_BattleUnitGenerateInfo.firstCamp = _parentCampCom:GetFirstCamp()
		_BattleUnitGenerateInfo.secCamp = _parentCampCom:GetSecCamp()
	else
		_BattleUnitGenerateInfo.firstCamp = _summonedXls.campType
		_BattleUnitGenerateInfo.secCamp = 1
	end
    
    _BattleUnitGenerateInfo.position = Vector3.New(_summonedXls.bornDeviation[1] or 0, _summonedXls.bornDeviation[2] or 0, _summonedXls.bornDeviation[3] or 0)
	local _rotationV3 = Vector3.New(_summonedXls.bornOrientations[1] or 0, _summonedXls.bornOrientations[2] or 0, _summonedXls.bornOrientations[3] or 0)
	--LogTools.LogByLevel(LogLevel.log, "CheckSummonedMons", "_rotationV3", _rotationV3, "_summonedXls.bornPosition", _summonedXls.bornPosition, "self.position", self.position, "_summonedXls.bornDeviation", dumpTableEx(_summonedXls.bornDeviation))
	_BattleUnitGenerateInfo.rotation = _rotationV3
	if _summonedXls.bornPosition == 0 then --基于施法者
		local _parentActionMgr = _subordinationUnit:GetActionManager()
		_BattleUnitGenerateInfo.position = _parentActionMgr:GetRotation() * _BattleUnitGenerateInfo.position + _parentActionMgr:GetPosition()
		_BattleUnitGenerateInfo.rotation = Quaternion.ToEulerAngles(Quaternion.FromEuler(_rotationV3) * _parentActionMgr:GetRotation())
	end
	_BattleUnitGenerateInfo.scale = Vector3.one_global()
	_BattleUnitGenerateInfo.velocity = Vector3.zero_global()
	_BattleUnitGenerateInfo.timeStamp = TimeUtils.battleNow(self.battleId)
	_BattleUnitGenerateInfo.delayTime = 0
	_BattleUnitGenerateInfo.objIdList = {self.battleRoom.idCreator:GetAndIncreaseObjId()}
    _BattleUnitGenerateInfo.baseProps = {}
    ---@type BattleObjCom_Property
    local _parentPropCom = _subordinationObj:GetComponent(BattleObjectComponentType.Property)
    for i = 100, 104 do
        local _prop = {}
        _prop.propId = i
        _prop.propValue = _parentPropCom:GetPropertyById(i) or 0
        table.insert(_BattleUnitGenerateInfo.baseProps, _prop)
    end
    _BattleUnitGenerateInfo.subordinateLevel = _parentPropCom:GetLevel()
	_BattleUnitGenerateInfo.originalHeroSkillId = _originalSkillID
	_BattleUnitGenerateInfo.targetPointId = -1
	
	---@type BattleUnitDelayCreateData
	local _battleUnitDelayCreateData = BattleUnitDelayCreateData.New(_BattleUnitGenerateInfo)
	self.battleRoom.battleUnitManager:AddDelayUnitCreateData(_battleUnitDelayCreateData)
	self.battleRoom.battleUnitManager:CheckDelayCreateUnits()
	if LogTools.SummondLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckSummonedMons", "BehaviorProcessor", "CreateSummonedMonsUnit end", "_generateSummonedMonsInfo", dumpTableEx(_generateSummonedMonsInfo))
	end
end

---创建护罩
---@public
---@param _subordinateNetId number 创建者的netId
---@param _subordinateObjId number 创建者的objectId
function BehaviorProcessor:CreateShieldUnit(_dicId, _subordinateNetId, _subordinateObjId)
	if not self:CheckLevelAIHost() then return end
	if LogTools.ShieldLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckShield", "BehaviorProcessor", "CreateShieldUnit start", "_dicId", _dicId, "_subordinateNetId", _subordinateNetId, "_subordinateObjId", _subordinateObjId, IsClient())
	end

	local _subordinationUnit = self.battleRoom.battleUnitManager:GetUnit(_subordinateNetId)
	if not _subordinationUnit then
		if LogTools.ShieldLog and CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckShield", "BehaviorProcessor", "CreateShieldUnit", "_subordinationUnit is nil", "Frame", self.battleRoom.frameId)
		end
		return
	end

	local _subordinationObj = self.battleRoom.battleObjectManager:GetObject(_subordinateObjId)
	if not _subordinationObj then
		if LogTools.ShieldLog and CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckShield", "BehaviorProcessor", "CreateShieldUnit", "_subordinationObj is nil", "Frame", self.battleRoom.frameId)
		end
		return
	end

	---@type Shield
	local _shieldXls = self.battleRoom.inputDataSource:GetDict("Shield", _dicId)
	if not _shieldXls then 
		if LogTools.ShieldLog and CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckShield", "BehaviorProcessor", "CreateShieldUnit", "_shieldXls is nil", "Frame", self.battleRoom.frameId)
		end
		return 
	end
	
	---@type BattleUnitCom_Subordination
	local _subordinationCom = _subordinationUnit:GetComponent(BattleUnitComponentType.Subordination)
	if not _subordinationCom then
		if LogTools.ShieldLog and CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckShield", "BehaviorProcessor", "CreateShieldUnit", "_subordinationCom is nil", "Frame", self.battleRoom.frameId)
		end
		return
	end

	local _stackTypeList = _shieldXls.stackableType
	---@type BattleObject_Shield[]
	local _curShieldObjList = _subordinationCom:GetManagedObjListByObjType(BattleObjectType.Shield)
	for i = 1, #_curShieldObjList do
		if _curShieldObjList[i]:CheckInStackTypeDicByList(_stackTypeList) then
			if LogTools.ShieldLog and CheckLogLevel(LogLevel.log) then
				LogTools.LogByLevel(LogLevel.log, "CheckShield", "BehaviorProcessor", "需要强制替换护罩")
			end
			self.battleRoom.battleUnitManager:OnBattleObjectDead(_curShieldObjList[i]:GetParentUnit():GetNetId(), _curShieldObjList[i]:GetObjectId(), LuaBehav_Define_DeadType.DeadSilence)
		end
	end
	
	local _BattleUnitGenerateInfo = {}
	_BattleUnitGenerateInfo.unitType = BattleUnitType.Shield
	_BattleUnitGenerateInfo.netId = self.battleRoom.idCreator:GetAndIncreaseNetId()
	_BattleUnitGenerateInfo.dicId = _dicId
	_BattleUnitGenerateInfo.subordinateNetId = _subordinateNetId
	_BattleUnitGenerateInfo.subordinateObjId = _subordinateObjId
	local _parentUnit = self.battleRoom.battleUnitManager:GetUnit(_subordinateNetId, true)
	---@type BattleUnitCom_Camp
	local _campCom = _parentUnit:GetComponent(BattleUnitComponentType.Camp)
	_BattleUnitGenerateInfo.firstCamp = _campCom:GetFirstCamp()
	_BattleUnitGenerateInfo.secCamp = _campCom:GetSecCamp()
	---@type ActionStateManage
	local _actionStateManager = _parentUnit:GetActionManager()
	_BattleUnitGenerateInfo.position = _actionStateManager:GetPosition()
	_BattleUnitGenerateInfo.rotation = Quaternion.ToEulerAngles(_actionStateManager:GetRotation())
	_BattleUnitGenerateInfo.scale = Vector3.one_global()
	_BattleUnitGenerateInfo.velocity = Vector3.zero_global()
	_BattleUnitGenerateInfo.timeStamp = TimeUtils.battleNow(self.battleId)
	_BattleUnitGenerateInfo.delayTime = 0
	_BattleUnitGenerateInfo.objIdList = {self.battleRoom.idCreator:GetAndIncreaseObjId()}
    _BattleUnitGenerateInfo.baseProps = {}
    ---@type BattleObjCom_Property
    local _parentPropCom = _subordinationObj:GetComponent(BattleObjectComponentType.Property)
    for i = 100, 104 do
        local _prop = {}
        _prop.propId = i
        _prop.propValue = _parentPropCom:GetPropertyById(i) or 0
        table.insert(_BattleUnitGenerateInfo.baseProps, _prop)
    end
	_BattleUnitGenerateInfo.subordinateLevel = _parentPropCom:GetLevel()
	_BattleUnitGenerateInfo.targetPointId = -1
	
	---@type BattleUnitDelayCreateData
	local _battleUnitDelayCreateData = BattleUnitDelayCreateData.New(_BattleUnitGenerateInfo)
	self.battleRoom.battleUnitManager:AddDelayUnitCreateData(_battleUnitDelayCreateData)
	self.battleRoom.battleUnitManager:CheckDelayCreateUnits()
	if LogTools.ShieldLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckShield", "BehaviorProcessor", "CreateShieldUnit end")
	end
end

-------------------------------------------------------------------------------------------------------------------------
---关卡强制胜利失败
---只设置服务器，前端通过服务器的关卡模块通知
---@param _param LuaBehav_LevelDropMonsParam
function BehaviorProcessor:LevelForceEnd(_result)
    if not self:CheckLevelAIHost() then return end
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelForceEnd start")
	end
    --todo: 调用关卡接口 
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelForceEnd end")
	end
end

---关卡播放剧情
---@param _param LuaBehav_LevelPlayPlotParam
function BehaviorProcessor:LevelPlayPlot(_param)
	if not self:CheckLevelAIHost() then return end
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelPlayPlot start", "_param", dumpTableEx(_param))
	end
	self.battleRoom.battlePlayerActManager:StartPlayPlot(_param.id,
													 _param.type,
													 _param.id, 
										function() 
														LuaBehav_RuntimeTask_LevelPlayPlot.OnPlayEnd(_param.task)
													  end, 
													 _param.timeOut, true)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelPlayPlot end")
	end
end

---关卡打开高能预警UI
function BehaviorProcessor:LevelOpenWarningUi()
	if not self:CheckLevelAIHost() then return end
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelOpenWarningUi start")
	end
	local _battleFieldData = {}
	_battleFieldData.UIInfo = {}
	_battleFieldData.UIInfo.warningOpen = 1
	_battleFieldData.UIInfo.warningClose = -1
	_battleFieldData.UIInfo.communicationId = -1
	self.battleRoom.outputDataSource:AddBattleFieldData(_battleFieldData)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelOpenWarningUi end")
	end
end

---关卡关闭高能预警UI
function BehaviorProcessor:LevelCloseWarningUi()
	if not self:CheckLevelAIHost() then return end
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelCloseWarningUi start")
	end

	local _battleFieldData = {}
	_battleFieldData.UIInfo = {}
	_battleFieldData.UIInfo.warningOpen = -1
	_battleFieldData.UIInfo.warningClose = 1
	_battleFieldData.UIInfo.communicationId = -1
	self.battleRoom.outputDataSource:AddBattleFieldData(_battleFieldData)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelCloseWarningUi end")
	end
end

---关卡打开战斗内通讯
function BehaviorProcessor:LevelOpenBattleCommunication(_talkGroupId)
	if not self:CheckLevelAIHost() then return end
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelOpenBattleCommunication start", "_talkGroupId", _talkGroupId)
	end

	local _battleFieldData = {}
	_battleFieldData.UIInfo = {}
	_battleFieldData.UIInfo.warningOpen = -1
	_battleFieldData.UIInfo.warningClose = -1
	_battleFieldData.UIInfo.communicationId = _talkGroupId
	self.battleRoom.outputDataSource:AddBattleFieldData(_battleFieldData)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelOpenBattleCommunication end")
	end
end

---关卡控制AI
---@param _param LuaBehav_UnitAiOperateParam
function BehaviorProcessor:LevelOperateAi(_param)
    if not self:CheckLevelAIHost() then return end
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelOperateAi start", "_param", dumpTableEx(_param))
	end

	local _battleUnitManager = self.battleRoom.battleUnitManager
	if _param.targetType == LuaBehav_Define_AiOperationTargetType.AllUnit then
		local _unitList = _battleUnitManager:GetUnitListByUnitType(BattleUnitType.Monster)
		for _, _unit in pairs(_unitList) do
			if _param.operateType == LuaBehav_Define_AiOperationType.PauseAi then
				self:__MonsPauseAi(_unit:GetNetId())
			elseif _param.operateType == LuaBehav_Define_AiOperationType.ResumeAi then
				self:__MonsResumeAi(_unit:GetNetId())
			end
		end
		
		return
	end
	
	local _levelUnitManager = self.battleRoom.battleLevelManager.levelUnitManager
	for i, _id in pairs(_param.idList) do
		if _param.targetType == LuaBehav_Define_AiOperationTargetType.SpecificUnit then
			local _levelUnit = _levelUnitManager:GetLevelUnit(_id)
			---@type BattleUnitBase
			local _unit = _battleUnitManager:GetUnit(_levelUnit.netId)
			if _unit then
				if _param.operateType == LuaBehav_Define_AiOperationType.PauseAi then
					self:__MonsPauseAi(_unit:GetNetId())
				elseif _param.operateType == LuaBehav_Define_AiOperationType.ResumeAi then
					self:__MonsResumeAi(_unit:GetNetId())
				end
			end
		elseif _param.targetType == LuaBehav_Define_AiOperationTargetType.SpecificUnitGroup then
			local _levelUnitList = _levelUnitManager:GetLevelUnitByGroup(_id)
			for _, _levelUnit in pairs(_levelUnitList) do
				local _unit = _battleUnitManager:GetUnit(_levelUnit.netId)
				if _unit then
					if _param.operateType == LuaBehav_Define_AiOperationType.PauseAi then
						self:__MonsPauseAi(_unit:GetNetId())
					elseif _param.operateType == LuaBehav_Define_AiOperationType.ResumeAi then
						self:__MonsResumeAi(_unit:GetNetId())
					end
				end
			end
		end
	end

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelOperateAi end")
	end
end

---关卡强制杀死某个类型的所有单位
---@public
function BehaviorProcessor:LevelKillUnitsByType(_unitType, _deadType, _forceKiller)
	if not self:CheckLevelAIHost() then return end
	
	_deadType = _deadType or LuaBehav_Define_DeadType.DeadSilence
	local _battleUnitManager = self.battleRoom.battleUnitManager
	local _unitList = _battleUnitManager:GetUnitListByUnitType(_unitType)
	for _, _unit in pairs(_unitList) do
		local _deadParam = {}
			_deadParam.netId = _unit:GetNetId()
			_deadParam.deadType = _deadType
			_deadParam.forceKiller = _forceKiller
			self:__MonsDead(_deadParam)
	end
end

---关卡强制杀死单位
---@param _param LuaBehav_LevelKillUnitParam
function BehaviorProcessor:LevelKillUnit(_param)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelKillUnit start", "_param", dumpTableEx(_param))
	end

    if not self:CheckLevelAIHost() then return end
	local _deadType = _param.deadType
	local _forceKiller = _param.forceKiller

	local _battleUnitManager = self.battleRoom.battleUnitManager
	if _param.targetType == LuaBehav_Define_AiOperationTargetType.AllUnit then
		local _unitList = _battleUnitManager:GetUnitListByUnitType(BattleUnitType.Monster)
		for _, _unit in pairs(_unitList) do
			local _deadParam = {}
			_deadParam.netId = _unit:GetNetId()
			_deadParam.deadType = _deadType
			_deadParam.forceKiller = _forceKiller
			
			self:__MonsDead(_deadParam)
		end
		
		return
	end
	
	local _levelUnitManager = self.battleRoom.battleLevelManager.levelUnitManager
	for i, _id in pairs(_param.idList) do
		if _param.targetType == LuaBehav_Define_AiOperationTargetType.SpecificUnit then
			local _levelUnit = _levelUnitManager:GetLevelUnit(_id)
			---@type BattleUnitBase
			local _unit = _battleUnitManager:GetUnit(_levelUnit.netId)
			if _unit then
				local _deadParam = {}
				_deadParam.netId = _unit:GetNetId()
				_deadParam.deadType = _deadType
				_deadParam.forceKiller = _forceKiller
				
				self:__MonsDead(_deadParam)
			end
		elseif _param.targetType == LuaBehav_Define_AiOperationTargetType.SpecificUnitGroup then
			local _levelUnitList = _levelUnitManager:GetLevelUnitByGroup(_id)
			----LogTools.LogByLevel(LogLevel.log, "BehaviorProcessor", "LevelKillUnit", "_levelUnitList", #_levelUnitList)
			for _, _levelUnit in pairs(_levelUnitList) do
				local _unit = _battleUnitManager:GetUnit(_levelUnit.netId)
				if _unit then
					local _deadParam = {}
					_deadParam.netId = _unit:GetNetId()
					_deadParam.deadType = _deadType
					_deadParam.forceKiller = _forceKiller
					
					self:__MonsDead(_deadParam)
				end
			end
		end
	end

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelKillUnit end")
	end
end

---关卡设置单位属性
---@param _param LuaBehav_LevelSetUnitPropertyParam
function BehaviorProcessor:LevelSetUnitProp(_param)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelSetUnitProp start", "_param", dumpTableEx(_param))
	end

    if not self:CheckLevelAIHost() then return end
	--local _propId = _param.propId
	--local _value = _param.value
	--local _valueDescType = _param.valueDescType
	--
	--local _battleUnitManager = self.battleRoom.battleUnitManager
	--if _param.targetType == LuaBehav_Define_AiOperationTargetType.AllUnit then
	--	local _unitList = _battleUnitManager:GetAllUnitList()
	--	for _, _unit in pairs(_unitList) do
	--		---@type LuaBehav_MonsSetPropertyParam
	--		local _paramTab = {}
	--		_paramTab.netId = _unit:GetNetId()
	--		_paramTab.propId = _propId
	--		_paramTab.valueDescType = _valueDescType
	--		_paramTab.value = _value
	--		
	--		self:__MonsSetProperty(_paramTab)
	--	end
	--	
	--	return
	--end
	--
	--local _levelUnitManager = self.battleRoom.battleLevelManager.levelUnitManager
	--for i, _id in pairs(_param.idList) do
	--	if _param.targetType == LuaBehav_Define_AiOperationTargetType.SpecificUnit then
	--		local _levelUnit = _levelUnitManager:GetLevelUnit(_id)
	--		---@type BattleUnitBase
	--		local _unit = _battleUnitManager:GetUnit(_levelUnit.netId)
	--		if _unit then
	--			local _paramTab = {}
	--			_paramTab.netId = _unit:GetNetId()
	--			_paramTab.propId = _propId
	--			_paramTab.valueDescType = _valueDescType
	--			_paramTab.value = _value
	--			
	--			self:__MonsSetProperty(_paramTab)
	--		end
	--	elseif _param.targetType == LuaBehav_Define_AiOperationTargetType.SpecificUnitGroup then
	--		local _levelUnitList = _levelUnitManager:GetLevelUnitByGroup(_id)
	--		for _, _levelUnit in pairs(_levelUnitList) do
	--			local _unit = _battleUnitManager:GetUnit(_levelUnit.netId)
	--			if _unit then
	--				local _paramTab = {}
	--				_paramTab.netId = _unit:GetNetId()
	--				_paramTab.propId = _propId
	--				_paramTab.valueDescType = _valueDescType
	--				_paramTab.value = _value
	--				
	--				self:__MonsSetProperty(_paramTab)
	--			end
	--		end
	--	end
	--end

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelSetUnitProp end")
	end
end

function BehaviorProcessor:LevelRemoveTrigger(_id)
	if not self:CheckLevelAIHost() then return end
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelRemoveTrigger start", "_id", _id)
	end

	self.battleRoom.levelTriggerManager:RemoveTrigger(_id)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelRemoveTrigger end", "_id", _id)
	end
end

function BehaviorProcessor:LevelRemoveTargetPoint(_levelUnitId, _forceKiller)
	if not self:CheckLevelAIHost() then return end
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelRemoveTargetPoint start", "_levelUnitId", _levelUnitId, _forceKiller)
	end
	
	local _levelUnit = self.battleRoom.battleLevelManager.levelUnitManager:GetLevelUnit(_levelUnitId)
	if not _levelUnit then return end
	--LogTools.LogByLevel(LogLevel.log, "CheckTargetPoint", "BehaviorProcessor", "LevelRemoveTargetPoint start", "2")
	
	---@type LuaBehav_MonsDeadParam
	local _tab = {}
	_tab.netId = _levelUnit.netId
	_tab.deadType = LuaBehav_Define_DeadType.DeadSilence
	_tab.forceKiller = _forceKiller
	
	self:__MonsDead(_tab)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog("LevelRemoveTargetPoint end", "_levelUnitId", _levelUnitId)
	end
end

function BehaviorProcessor:LevelTrigGuideUIOperate(_inBattleGuideId, _operType)
	if not self:CheckLevelAIHost() then return end
	local _LevelTrigUIOperate_S2C = {}
	_LevelTrigUIOperate_S2C.inBattleGuideId = _inBattleGuideId
	_LevelTrigUIOperate_S2C.operType = _operType
	self.battleRoom.outputDataSource:LevelTrigGuideUIOperateS2C(_LevelTrigUIOperate_S2C)
end

function BehaviorProcessor:LevelTrigNormalUIOperate(_uiId, _textId, _operType, _duration, _placeholder)
	if not self:CheckLevelAIHost() then return end
	local _LevelTrigNormalUIOperate_S2C = {}
	_LevelTrigNormalUIOperate_S2C.uiId = _uiId
	_LevelTrigNormalUIOperate_S2C.textId = _textId
	_LevelTrigNormalUIOperate_S2C.operType = _operType
	_LevelTrigNormalUIOperate_S2C.duration = _duration
	_LevelTrigNormalUIOperate_S2C.placeholder = _placeholder or ""
	self.battleRoom.outputDataSource:LevelTrigNormalUIOperateS2C(_LevelTrigNormalUIOperate_S2C)
end

function BehaviorProcessor:LevelTrigControllerOperate(_controllerIdList, _operType)
	if not self:CheckLevelAIHost() then return end
	local _LevelTrigControllerOperate_S2C = {}
	_LevelTrigControllerOperate_S2C.controllerIdList = _controllerIdList
	_LevelTrigControllerOperate_S2C.operType = _operType
	self.battleRoom.outputDataSource:LevelTrigControllerOperateS2C(_LevelTrigControllerOperate_S2C)
end

--buff只在后端添加，通过Buff消息同步
function BehaviorProcessor:LevelTrigUnitBuff(_targetType, _targetId, _buffGroupId, _operType, _stackNum, _isUnitBuff)
	if not self:CheckLevelAIHost() then return end
	---@type BattleObjCom_Buff
	local _buffCom
	if _targetType == LuaBehav_Define_LevelCheckUnitTargetType_2.PlayerUnit then
		local _unitList = self.battleRoom.battleUnitManager:GetUnitListByUnitType(BattleUnitType.Player)
		local _unit = _unitList[1]
		if not _unit then return end

		if _isUnitBuff then
			_buffCom = _unit:GetComponent(BattleUnitComponentType.Buff)
		else
			local _objList = _unit:GetTypeObjectList(BattleObjectType.LeaderHero)
			local _obj = _objList[_targetId]
			if not _obj then return end
			_buffCom = _obj:GetComponent(BattleObjectComponentType.Buff)
		end
	else
		local _levelUnit = self.battleRoom.battleLevelManager.levelUnitManager:GetLevelUnit(_targetId)
		if not _levelUnit then return end
		local _unit = self.battleRoom.battleUnitManager:GetUnit(_levelUnit.netId)
		if not _unit then return end

		if _isUnitBuff then
			_buffCom = _unit:GetComponent(BattleUnitComponentType.Buff)
		else
			local _obj = _unit:GetCurrentHeroObject()
			if not _obj then return end
			_buffCom = _obj:GetComponent(BattleObjectComponentType.Buff)
		end
	end
	if not _buffCom then return end
	
	if _operType == LuaBehav_Define_BuffOperateType.Add then
		_buffCom:AddBattleBuffById(_buffGroupId, nil, nil)
	elseif _stackNum and _stackNum > 0 then
		_buffCom:RemoveBuffStackNum(_buffGroupId, _stackNum)
	else
		_buffCom:RemoveBuffByGroupId(_buffGroupId)
	end
end

--关卡切换场景物件状态
function BehaviorProcessor:LevelChangeSceneObjState(_levelUnitId, _stateId)
	--LogTools.LogByLevel(LogLevel.log, "CheckSceneObj", "BehaviorProcessor", "LevelChangeSceneObjState", "_levelUnitId", _levelUnitId, "_stateId", _stateId)
	if not self:CheckLevelAIHost() then return end
	
	local _levelUnit = self.battleRoom.battleLevelManager.levelUnitManager:GetLevelUnit(_levelUnitId)
	if not _levelUnit then return end

	self:__SceneObjChangeSelfState(_levelUnit.netId, _stateId)
	--LogTools.LogByLevel(LogLevel.log, "CheckSceneObj", "BehaviorProcessor", "LevelChangeSceneObjState end", "_levelUnit.netId", _levelUnit.netId)
end

--关卡移除场景物件
function BehaviorProcessor:LevelRemoveSceneObj(_levelUnitId, _forceKiller)
	--LogTools.LogByLevel(LogLevel.log, "CheckSceneObj", "BehaviorProcessor", "LevelRemoveSceneObj start", "_levelUnitId", _levelUnitId)
	if not self:CheckLevelAIHost() then return end
	
	--LogTools.LogByLevel(LogLevel.log, "CheckSceneObj", "BehaviorProcessor", "LevelRemoveSceneObj start", "1")
	local _levelUnit = self.battleRoom.battleLevelManager.levelUnitManager:GetLevelUnit(_levelUnitId)
	if not _levelUnit then return end
	--LogTools.LogByLevel(LogLevel.log, "CheckSceneObj", "BehaviorProcessor", "LevelRemoveSceneObj start", "2")
	
	---@type LuaBehav_MonsDeadParam
	local _tab = {}
	_tab.netId = _levelUnit.netId
	_tab.deadType = LuaBehav_Define_DeadType.DeadSilence
	_tab.forceKiller = _forceKiller
	self:__MonsDead(_tab)
	--LogTools.LogByLevel(LogLevel.log, "CheckSceneObj", "BehaviorProcessor", "LevelRemoveSceneObj start", "_tab", dumpTableEx(_tab))
end

--关卡切换BGM
function BehaviorProcessor:LevelChangeBGM(_id)
	if not self:CheckLevelAIHost() then return end
	
	local _battleFieldData = {}
	_battleFieldData.bgmInfo = {}
	_battleFieldData.bgmInfo.enterId = _id
	self.battleRoom.outputDataSource:AddBattleFieldData(_battleFieldData)
end

--关卡修改波次
function BehaviorProcessor:LevelSetWaveValue(_value)
	if not self:CheckLevelAIHost() then return end
	--self.battleRoom.battleLogicEventService:OnTriggerTagValueChangeEvent(TAG_ENUM.MONSTER_WAVE, _value)
end

--关卡标签操作
function BehaviorProcessor:LevelTagOperate(_tag, _operType, _value)
	if not self:CheckLevelAIHost() then return end
	
	if _operType == LuaBehav_Define_LevelTagOperateType.Set then
		self.battleRoom.tagManager:UpdateTagValue(_tag, _value)
	elseif _operType == LuaBehav_Define_LevelTagOperateType.Add then
		local _curValue = self.battleRoom.tagManager:GetTagValue(_tag) or 0
		self.battleRoom.tagManager:UpdateTagValue(_tag, _curValue + _value)
	end

	--self.battleRoom.battleLogicEventService:OnTriggerTagValueChangeEvent(TAG_ENUM.MONSTER_WAVE, _value)
end

--关卡强制杀死指定关卡触发器中的单位
---@public
---@param _param LuaBehav_LevelKillUnitInTriggerParam
function BehaviorProcessor:LevelKillUnitInTrigger(_param)
	if not self:CheckLevelAIHost() then return end

	local _levelTrigger = self.battleRoom.levelTriggerManager:GetTrigger(_param.triggerId)
	if not _levelTrigger then return end
	_levelTrigger:KillInner(_param.deadType, _param.needKeyTag, _param.forceKiller)
end

--关卡修改倒计时
function BehaviorProcessor:LevelChangeTimeCount(_value)
	if not self:CheckLevelAIHost() then return end
	self.battleRoom.battleLevelManager:ChangeRunBattleLimitTime(_value)
end

--关卡打断怪物技能
function BehaviorProcessor:LevelBreakMonsSkill(_targetType, _idList)
	if not self:CheckLevelAIHost() then return end
	
	local _battleUnitManager = self.battleRoom.battleUnitManager
	if _targetType == LuaBehav_Define_AiOperationTargetType.AllUnit then
		local _monsList = _battleUnitManager:GetUnitListByUnitTypeUnsafe(BattleUnitType.Monster)
		for _, _unit in pairs(_monsList) do
			_unit:GetActionManager():ExitSkill(true, true, nil)
		end
	elseif _targetType == LuaBehav_Define_AiOperationTargetType.SpecificUnit then
		local _levelUnitManager = self.battleRoom.battleLevelManager.levelUnitManager
		---@type LevelUnitBase
		local _levelUnit
		---@type BattleUnitBase
		local _battleUnit
		for _, _levelUnitId in pairs(_idList) do
			_levelUnit = _levelUnitManager:GetLevelUnit(_levelUnitId)
			_battleUnit = _battleUnitManager:GetUnit(_levelUnit.netId)
			_battleUnit:GetActionManager():ExitSkill(true, true, nil)
		end
	elseif _targetType == LuaBehav_Define_AiOperationTargetType.SpecificUnitGroup then
		local _levelUnitManager = self.battleRoom.battleLevelManager.levelUnitManager
		---@type LevelUnitBase[]
		local _levelUnitList
		---@type BattleUnitBase
		local _battleUnit
		for _, _levelUnitGroupId in pairs(_idList) do
			_levelUnitList = _levelUnitManager:GetLevelUnitByGroup(_levelUnitGroupId)
			for _, _levelUnit in pairs(_levelUnitList) do
				_battleUnit = _battleUnitManager:GetUnit(_levelUnit.netId)
				_battleUnit:GetActionManager():ExitSkill(true, true, nil)
			end
		end
	end
end
------------------------------------------------------------------------------------------------------------------------
---怪物暂停AI
function BehaviorProcessor:MonsPauseAi(_netId)
    if not self:CheckMonsAIHost() then return end
    self:__MonsPauseAi(_netId)
end
function BehaviorProcessor:__MonsPauseAi(_netId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsPauseAi start", "_netId", _netId)
	end
	
	local _MonsPauseAi_S2C = {}
	_MonsPauseAi_S2C.netId = _netId
	self.battleRoom.outputDataSource:PauseMonsAiS2C(_MonsPauseAi_S2C)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsPauseAi end", "_netId", _netId)
	end
end

---怪物恢复AI
function BehaviorProcessor:MonsResumeAi(_netId)
	if not self:CheckMonsAIHost() then return end
    self:__MonsResumeAi(_netId)
end
function BehaviorProcessor:__MonsResumeAi(_netId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsResumeAi start", "_netId", _netId)
	end
    
	local _MonsResumeAi_S2C = {}
	_MonsResumeAi_S2C.netId = _netId
	self.battleRoom.outputDataSource:ResumeMonsAiS2C(_MonsResumeAi_S2C)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsResumeAi end", "_netId", _netId)
	end
end

---怪物选择目标
---@param _param LuaBehav_MonsSelectTargetParam
function BehaviorProcessor:MonsSelectTarget(_param)
	if not self:CheckMonsAIHost() then return end
    self:__MonsSelectTarget(_param)
end
function BehaviorProcessor:__MonsSelectTarget(_param)
	--self:CheckLuaBehavLog("LevelRemoveTrigger __MonsSelectTarget start", "_param", dumpTableEx(_param))
	local _unit = self.battleRoom.battleUnitManager:GetUnit(_param.netId)
	if not _unit then
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor MonsSelectTarget, cannot find unit !!!", _param.netId)
		return
	end

	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	
	_behavCom:SelectTarget(_param)
	--self:CheckLuaBehavLog("LevelRemoveTrigger __MonsSelectTarget end", "_netId", _param.netId)
end

---怪物开启巡逻
---@param _param LuaBehav_MonsPatrolParam
function BehaviorProcessor:MonsPatrol(_param)
	if not self:CheckMonsAIHost() then return end
    self:__MonsPatrol(_param)
end
function BehaviorProcessor:__MonsPatrol(_param)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsPatrol start", "_param", dumpTableEx(_param))
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_param.netId)
	if not _unit then
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor MonsPatrol, cannot find unit !!!", _param.netId)
		return
	end

	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	if _behavCom:CheckBehavRunning(BattleUnitBehavType.Patrol) then return end

	local _UnitPatrol_S2C = {}
	_UnitPatrol_S2C.netId = _param.netId
	_UnitPatrol_S2C.centerOnBorn = _param.centerOnBorn
	self.battleRoom.outputDataSource:StartMonsPatrolS2C(_UnitPatrol_S2C)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsPatrol end", "_netId", _param.netId)
	end
end

---怪物停止巡逻
function BehaviorProcessor:MonsPatrolEnd(_netId)
	if not self:CheckMonsAIHost() then return end
    self:__MonsPatrolEnd(_netId)
end
function BehaviorProcessor:__MonsPatrolEnd(_netId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsPatrolEnd start", "_netId", _netId)
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor MonsPatrolEnd, cannot find unit !!!", _netId)
		return
	end
	
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	if not _behavCom:CheckBehavRunning(BattleUnitBehavType.Patrol) then return end
	
	local _UnitPatrolCancel_S2C = {}
	_UnitPatrolCancel_S2C.netId = _netId
	self.battleRoom.outputDataSource:StopMonsPatrolS2C(_UnitPatrolCancel_S2C)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsPatrolEnd end", "_netId", _netId)
	end
end

---开始追逐目标
function BehaviorProcessor:MonsChaseTarget(_netId)
	if not self:CheckMonsAIHost() then return end
    self:__MonsChaseTarget(_netId)
end
function BehaviorProcessor:__MonsChaseTarget(_netId)
	--LogTools.LogByLevel(LogLevel.log, "BehaviorProcessor:__MonsChaseTarget", "_netId", _netId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsChaseTarget start", "_netId", _netId)
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return end
	
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	if _behavCom:CheckBehavRunning(BattleUnitBehavType.ChaseTarget) then return end

	local _targetNetId = _behavCom:GetTarget()
	if not _targetNetId then return end

	--local _UnitChaseTarget_S2C = {}
	--_UnitChaseTarget_S2C.netId = _netId
	--_UnitChaseTarget_S2C.targetNetId = _targetNetId
    --self.battleRoom.outputDataSource:StartChaseTargetS2C(_UnitChaseTarget_S2C)
	
	self.battleRoom.battleUnitManager:UnitChaseTargetS2C(_netId, _targetNetId)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsChaseTarget end", "_netId", _netId, "_targetNetId", _targetNetId)
	end
end

---停止追逐目标
function BehaviorProcessor:MonsStopChaseTarget(_netId)
	if not self:CheckMonsAIHost() then return end
    self:__MonsStopChaseTarget(_netId)
end
function BehaviorProcessor:__MonsStopChaseTarget(_netId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsStopChaseTarget start", "_netId", _netId)
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return end
	
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	if not _behavCom:CheckBehavRunning(BattleUnitBehavType.ChaseTarget) then return end
	
	self.battleRoom.battleUnitManager:UnitStopChaseTargetS2C(_netId)
	
	--local _UnitStopChaseTarget_S2C = {}
	--_UnitStopChaseTarget_S2C.netId = _netId
	--self.battleRoom.outputDataSource:StopChaseTargetS2C(_UnitStopChaseTarget_S2C)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsStopChaseTarget end", "_netId", _netId)
	end
end

---开始远离目标
function BehaviorProcessor:MonsEscapeTarget(_netId)
	if not self:CheckMonsAIHost() then return end
    self:__MonsEscapeTarget(_netId)
end
function BehaviorProcessor:__MonsEscapeTarget(_netId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsEscapeTarget start", "_netId", _netId)
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor MonsEscapeTarget, cannot find unit !!!", _netId)
		return
	end

	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	if _behavCom:CheckBehavRunning(BattleUnitBehavType.EscapeTarget) then return end

	local _targetNetId = _behavCom:GetTarget()
	if not _targetNetId then return end
	
	self.battleRoom.battleUnitManager:UnitEscapeTargetS2C(_netId, _targetNetId)

	--local _UnitEscapeTarget_S2C = {}
	--_UnitEscapeTarget_S2C.netId = _netId
	--_UnitEscapeTarget_S2C.targetNetId = _targetNetId
    --self.battleRoom.outputDataSource:StartEscapeTargetS2C(_UnitEscapeTarget_S2C)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsEscapeTarget end", "_netId", _netId)
	end
end

---停止远离目标
function BehaviorProcessor:MonsStopEscapeTarget(_netId)
	if not self:CheckMonsAIHost() then return end
    self:__MonsStopEscapeTarget(_netId)
end
function BehaviorProcessor:__MonsStopEscapeTarget(_netId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsStopEscapeTarget start", "_netId", _netId)
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor MonsStopEscapeTarget, cannot find unit !!!", _netId)
		return
	end
	
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	if not _behavCom:CheckBehavRunning(BattleUnitBehavType.EscapeTarget) then return end
	
	self.battleRoom.battleUnitManager:UnitStopEscapeTargetS2C(_netId)
	
	--local _UnitStopEscapeTarget_S2C = {}
	--_UnitStopEscapeTarget_S2C.netId = _netId
	--self.battleRoom.outputDataSource:StopEscapeTargetS2C(_UnitStopEscapeTarget_S2C)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsStopEscapeTarget end", "_netId", _netId)
	end
end

---开始指定移动
---@param _param LuaBehav_MonsMoveTowardsParam
function BehaviorProcessor:MonsMoveTowards(_param)
	if not self:CheckMonsAIHost() then return end
    self:__MonsMoveTowards(_param)
end
function BehaviorProcessor:__MonsMoveTowards(_param)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsMoveTowards start", "_param", dumpTableEx(_param))
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_param.netId)
	if not _unit then
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor MonsMoveTowards, cannot find unit !!!", _param.netId)
		return
	end

	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	if _behavCom:CheckBehavRunning(BattleUnitBehavType.MoveTowards) then return end
	
	self.battleRoom.battleUnitManager:UnitMoveTowardsS2C(_param.netId, _param.spaceType, _param.posShift, _param.stopWhenArrive)
	
	--local _UnitMoveTowards_S2C = {}
	--_UnitMoveTowards_S2C.netId = _param.netId
	--_UnitMoveTowards_S2C.spaceType = _param.spaceType
	--_UnitMoveTowards_S2C.posShift = {x = _param.posShift.x, y = _param.posShift.y, z = _param.posShift.z}
	--_UnitMoveTowards_S2C.stopWhenArrive = _param.stopWhenArrive
	--self.battleRoom.outputDataSource:StartMoveTowardsS2C(_UnitMoveTowards_S2C)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsMoveTowards end", "_netId", _param.netId)
	end
end

---停止指定移动
function BehaviorProcessor:MonsStopMoveTowards(_netId) 
	if not self:CheckMonsAIHost() then return end
    self:__MonsStopMoveTowards(_netId)
end
function BehaviorProcessor:__MonsStopMoveTowards(_netId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsStopMoveTowards start", "_netId", _netId)
	end
	
	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor MonsStopMoveTowards, cannot find unit !!!", _netId)
		return
	end
	
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	if not _behavCom:CheckBehavRunning(BattleUnitBehavType.MoveTowards) then return end
	
	self.battleRoom.battleUnitManager:UnitStopMoveTowardsS2C(_netId)
	
	--local _UnitStopMoveTowards_S2C = {}
	--_UnitStopMoveTowards_S2C.netId = _netId
	--self.battleRoom.outputDataSource:StopMoveTowardsS2C(_UnitStopMoveTowards_S2C)

	self:CheckLuaBehavLog(" __MonsStopMoveTowards end", "_netId", _netId)
end


---开始平移
---@param _param LuaBehav_MonsMoveTowards_2_Param
function BehaviorProcessor:MonsMoveTowards_2(_param)
	if not self:CheckMonsAIHost() then return end
    self:__MonsMoveTowards_2(_param)
end
---@param _param LuaBehav_MonsMoveTowards_2_Param
function BehaviorProcessor:__MonsMoveTowards_2(_param)

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_param.netId)
	if not _unit then
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor __MonsMoveTowards_2, cannot find unit !!!", _param.netId)
		return
	end

	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	if _behavCom:CheckBehavRunning(BattleUnitBehavType.MoveTowards_2) then return end
	
	self.battleRoom.battleUnitManager:UnitMoveTowards_2_S2C(_param.netId, _param.posShift, _param.faceTarget)

end

---停止平移
function BehaviorProcessor:MonsStopMoveTowards_2(_netId)
	if not self:CheckMonsAIHost() then return end
    self:__MonsStopMoveTowards_2(_netId)
end
function BehaviorProcessor:__MonsStopMoveTowards_2(_netId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsStopMoveTowards_2 start", "_netId", _netId)
	end
	
	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor __MonsStopMoveTowards_2, cannot find unit !!!", _netId)
		return
	end

	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	if not _behavCom:CheckBehavRunning(BattleUnitBehavType.MoveTowards_2) then return end
	
	self.battleRoom.battleUnitManager:UnitStopMoveTowards_2_S2C(_netId)

	--local _UnitStopMoveTowards_2_S2C = {}
	--_UnitStopMoveTowards_2_S2C.netId = _netId
	--self.battleRoom.outputDataSource:StopMoveTowards_2_S2C(_UnitStopMoveTowards_2_S2C)
	--
	--self.battleRoom.battleUnitManager:UnitStopMoveTowards_2_S2C(_netId)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsStopMoveTowards_2 end", "_netId", _netId)
	end
end

---开始转向目标
function BehaviorProcessor:MonsFaceTarget(_netId)
	if not self:CheckMonsAIHost() then return end
    self:__MonsFaceTarget(_netId)
end
function BehaviorProcessor:__MonsFaceTarget(_netId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsFaceTarget start", "_netId", _netId)
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor MonsFaceTarget, cannot find unit !!!", _netId)
		return
	end

	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	if _behavCom:CheckBehavRunning(BattleUnitBehavType.FaceTarget) then
		----LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor MonsFaceTarget, is facing")
		return 
	end

	local _targetNetId = _behavCom:GetTarget()
	if not _targetNetId then return end
	
	self.battleRoom.battleUnitManager:UnitFaceTargetS2C(_netId, _targetNetId)
	
	--local _UnitFaceTarget_S2C = {}
	--_UnitFaceTarget_S2C.netId = _netId
	--_UnitFaceTarget_S2C.targetNetId = _targetNetId
	--self.battleRoom.outputDataSource:StartFaceTargetS2C(_UnitFaceTarget_S2C)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsFaceTarget end", "_netId", _netId)
	end
end

---停止转向目标
function BehaviorProcessor:MonsStopFaceTarget(_netId)
	if not self:CheckMonsAIHost() then return end
    self:__MonsStopFaceTarget(_netId)
end
function BehaviorProcessor:__MonsStopFaceTarget(_netId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsStopFaceTarget start", "_netId", _netId)
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor MonsStopFaceTarget, cannot find unit !!!", _netId)
		return
	end
	
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	if not _behavCom:CheckBehavRunning(BattleUnitBehavType.FaceTarget) then return end
	
	self.battleRoom.battleUnitManager:UnitStopFaceTargetS2C(_netId)
	
	--local _UnitStopFaceTarget_S2C = {}
	--_UnitStopFaceTarget_S2C.netId = _netId
	--self.battleRoom.outputDataSource:StopFaceTargetS2C(_UnitStopFaceTarget_S2C)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsStopFaceTarget end", "_netId", _netId)
	end
end

---开始跟随召唤者
function BehaviorProcessor:MonsChaseSubordinate(_param)
	if not self:CheckMonsAIHost() then return end
    self:__MonsChaseSubordinate(_param)
end
---@param _param LuaBehav_ChaseSubordinateParam
function BehaviorProcessor:__MonsChaseSubordinate(_param)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsChaseSubordinate start", "_netId", _param.netId, "_param", dumpTableEx(_param))
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_param.netId)
	if not _unit then
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor MonsChaseTarget, cannot find unit !!!", _netId)
		return
	end
	
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	if _behavCom:CheckBehavRunning(BattleUnitBehavType.ChaseSubordinate) then return end
	
	self.battleRoom.battleUnitManager:UnitChaseSubordinateS2C(_param.netId, _param.chaseType, _param.posShift)
	
	--local _unitChaseSubordinate_S2C = {}
	--_unitChaseSubordinate_S2C.netId = _param.netId
	--_unitChaseSubordinate_S2C.chaseType = _param.chaseType
	--_unitChaseSubordinate_S2C.posShift = Vector3.Clone(_param.posShift)
	--self.battleRoom.outputDataSource:StartChaseSubordinateS2C(_unitChaseSubordinate_S2C)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsChaseSubordinate end", "_netId", _param.netId)
	end
end

---停止跟随召唤者
function BehaviorProcessor:MonsStopChaseSubordinate(_netId)
	if not self:CheckMonsAIHost() then return end
    self:__MonsStopChaseSubordinate(_netId)
end
function BehaviorProcessor:__MonsStopChaseSubordinate(_netId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsStopChaseSubordinate start", "_netId", _netId)
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor MonsStopChaseTarget, cannot find unit !!!", _netId)
		return
	end
	
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	if not _behavCom:CheckBehavRunning(BattleUnitBehavType.ChaseSubordinate) then return end
	
	self.battleRoom.battleUnitManager:UnitStopChaseSubordinateS2C(_netId)
	
	--local _UnitStopChaseSubordinate_S2C = {}
	--_UnitStopChaseSubordinate_S2C.netId = _netId
	--self.battleRoom.outputDataSource:StopChaseSubordinateS2C(_UnitStopChaseSubordinate_S2C)


	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsStopChaseSubordinate end", "_netId", _netId)
	end
end

---开始导航点移动
---@param _param LuaBehav_MonsMoveNavPointsParam
function BehaviorProcessor:MonsMoveNavPoints(_param)
	if not self:CheckMonsAIHost() then return end
    self:__MonsMoveNavPoints(_param)
end
---@param _param LuaBehav_MonsMoveNavPointsParam
function BehaviorProcessor:__MonsMoveNavPoints(_param)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsMoveNavPoints start", "_param", dumpTableEx(_param))
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_param.netId)
	if not _unit then
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor __MonsMoveNavPoints, cannot find unit !!!", _param.netId)
		return
	end

	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	if _behavCom:CheckBehavRunning(BattleUnitBehavType.MoveNavPoints) then return end

	local _navPointList = {}
	if _param.moveType == LuaBehav_Define_MoveNavPointsType.AllNavPoints then
		local _list = self.battleRoom.battleLevelManager.levelUnitManager:GetLevelUnitByType(LevelUnitTypeEnum.NAV_POINT:GetId())
		for i = 1, #_list do
			table.insert(_navPointList, _list[i].position)
		end
	else
		for i = 1, #_param.navPointsList do
			local _navPoint = self.battleRoom.battleLevelManager.levelUnitManager:GetNavLevelUnit(_param.navPointsList[i])
			table.insert(_navPointList, _navPoint.position)
		end
	end
	
	--local _UnitMoveNavPoints_S2C = {}
	--_UnitMoveNavPoints_S2C.netId = _param.netId
	--_UnitMoveNavPoints_S2C.pointList = _navPointList
	--_UnitMoveNavPoints_S2C.loopAtEnd = _param.loopAtEnd
	--self.battleRoom.outputDataSource:StartMoveNavPointsS2C(_UnitMoveNavPoints_S2C)

	self.battleRoom.battleUnitManager:UnitMoveNavPoints_S2C(_param.netId, _navPointList, _param.loopAtEnd)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsMoveNavPoints end", "_netId", _param.netId)
	end
end

---停止导航点移动
function BehaviorProcessor:MonsStopMoveNavPoints(_netId)
	if not self:CheckMonsAIHost() then return end
    self:__MonsStopMoveNavPoints(_netId)
end
function BehaviorProcessor:__MonsStopMoveNavPoints(_netId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsStopMoveNavPoints start", "_netId", _netId)
	end
	
	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor __MonsStopMoveNavPoints, cannot find unit !!!", _netId)
		return
	end

	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	if not _behavCom:CheckBehavRunning(BattleUnitBehavType.MoveNavPoints) then return end

	--local _UnitStopMoveNavPoints_S2C = {}
	--_UnitStopMoveNavPoints_S2C.netId = _netId
	--self.battleRoom.outputDataSource:StopMoveNavPointsS2C(_UnitStopMoveNavPoints_S2C)

	self.battleRoom.battleUnitManager:UnitStopMoveNavPoints_S2C(_netId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsStopMoveNavPoints end", "_netId", _netId)
	end
end


---开始调整高度
function BehaviorProcessor:MonsStartFixHeight(_netId)
	if not self:CheckMonsAIHost() then return end
    self:__MonsStartFixHeight(_netId)
end
function BehaviorProcessor:__MonsStartFixHeight(_netId)
	--LogTools.LogByLevel(LogLevel.log, "BehaviorProcessor:__MonsStartFixHeight", "_netId", _netId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsStartFixHeight start", "_netId", _netId)
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return end
	
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	if _behavCom:CheckBehavRunning(BattleUnitBehavType.FixHeight) then return end

	local _targetNetId = _behavCom:GetTarget()
	if not _targetNetId then return end
	
	self.battleRoom.battleUnitManager:UnitFixHeightS2C(_netId)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsStartFixHeight end", "_netId", _netId)
	end
end

---停止调整高度
function BehaviorProcessor:MonsStopFixHeight(_netId)
	if not self:CheckMonsAIHost() then return end
    self:__MonsStopFixHeight(_netId)
end
function BehaviorProcessor:__MonsStopFixHeight(_netId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsStopFixHeight start", "_netId", _netId)
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return end
	
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	if not _behavCom:CheckBehavRunning(BattleUnitBehavType.FixHeight) then return end
	
	self.battleRoom.battleUnitManager:UnitStopFixHeightS2C(_netId)
	
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsStopFixHeight end", "_netId", _netId)
	end
end

---怪物施放技能
---@param _param LuaBehav_MonsCastSkillParam
function BehaviorProcessor:MonsCastSkill(_param)
	if not self:CheckMonsAIHost() then return end
    return self:__MonsCastSkill(_param)
end
function BehaviorProcessor:__MonsCastSkill(_param)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsCastSkill start", "_param", dumpTableEx(_param))
	end
	
	local _unitManager = self.battleRoom.battleUnitManager
	local _unit = _unitManager:GetUnit(_param.netId)
	if not _unit then
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor MonsCastSkill, cannot find unit !!!", _param.netId)
		return false, false
	end

	if not _unitManager:GetSkillTokenManager():GetSkillToken(_unit) then
		return true, false
	end

	if _param.forceBreak then
		_unit:GetActionManager():ExitSkill(true, true, nil)
	end
	
	_unit:GetActionManager():CastSkill(_param.skillId)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsCastSkill end", "_netId", _param.netId)
	end
	
	return true, true
end

---怪物打断技能
function BehaviorProcessor:MonsBreakSkill(_netId)
	if not self:CheckMonsAIHost() then return end
    self:__MonsBreakSkill(_netId)
end
function BehaviorProcessor:__MonsBreakSkill(_netId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsBreakSkill start", "_netId", _netId)
	end
	
	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return end
	
	_unit:GetActionManager():ExitSkill(true, true, nil)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsBreakSkill end", "_netId", _netId)
	end
end

---怪物添加buff
---服务器添加，通过同步消息同步给前端
function BehaviorProcessor:MonsOperateBuff(_param)
	if not self:CheckMonsAIHost() then return end
    self:__MonsOperateBuff(_param)
end
---@param _param LuaBehav_MonsAddBuffParam
function BehaviorProcessor:__MonsOperateBuff(_param)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsOperateBuff start", "_param", dumpTableEx(_param))
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_param.netId)
	if not _unit then
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor __MonsOperateBuff, cannot find unit !!!", _param.netId)
		return
	end
	local _castObj = _unit:GetCurrentHeroObject()
	if not _castObj then return end
	
	local _castObjId = _castObj:GetObjectId()
	local _isRemove = _param.operateType == LuaBehav_Define_BuffOperateType.Remove
	
	
	---@type BattleObjCom_Buff
	local _buffCom
	local _battleBuff
	---@type BattleObjectBase
	local _currentObj = nil
	if _param.targetType == LuaBehav_Define_MonsAddBuffTargetType.SelfUnit then
		if _param.isUnitBuff then
			_buffCom = _unit:GetComponent(BattleUnitComponentType.Buff)
			if _isRemove then
				_buffCom:RemoveBuffStackNum(_param.buffGroupId, _param.removeNum)
			else
				_battleBuff = BattleBuffService:GenerateUnitCastBuffTemplate(_param.buffGroupId, _unit, _castObjId, nil, nil)
			end
		else
			_currentObj = _unit:GetCurrentHeroObject()
			_buffCom = _currentObj and _currentObj:GetComponent(BattleObjectComponentType.Buff)
			if _isRemove then
				_buffCom:RemoveBuffStackNum(_param.buffGroupId, _param.removeNum)
			else
				_battleBuff = BattleBuffService:GenerateCastBuffTemplate(_param.buffGroupId, _castObj, nil, nil)
			end
		end
	elseif _param.targetType == LuaBehav_Define_MonsAddBuffTargetType.CurTarget then
		---@type BattleUnitCom_Behav
		local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
		if not _behavCom then return end
		local _targetNetId = _behavCom:GetTarget()
		if not _targetNetId then return end
		local _targetUnit = self.battleRoom.battleUnitManager:GetUnit(_targetNetId)
		if not _targetUnit then return end

		if _param.isUnitBuff then
			_buffCom = _targetUnit:GetComponent(BattleUnitComponentType.Buff)
			if _isRemove then
				_buffCom:RemoveBuffStackNum(_param.buffGroupId, _param.removeNum)
			else
				_battleBuff = BattleBuffService:GenerateUnitCastBuffTemplate(_param.buffGroupId, _unit, _castObjId, nil, nil)
			end
		else
			_currentObj = _targetUnit:GetCurrentHeroObject()
			_buffCom = _currentObj and _currentObj:GetComponent(BattleObjectComponentType.Buff)
			if _isRemove then
				_buffCom:RemoveBuffStackNum(_param.buffGroupId, _param.removeNum)
			else
				_battleBuff = BattleBuffService:GenerateCastBuffTemplate(_param.buffGroupId, _castObj, nil, nil)
			end
		end
	elseif _param.targetType == LuaBehav_Define_MonsAddBuffTargetType.Subordination then
		---@type BattleUnitCom_Subordination
		local _subordinationCom = _unit:GetComponent(BattleUnitComponentType.Subordination)
		if not _subordinationCom then return end
		local _targetUnit = _subordinationCom:GetSubordinatedUnit()
		if not _targetUnit or not _targetUnit:CheckAlive() then return end

		if _param.isUnitBuff then
			_buffCom = _targetUnit:GetComponent(BattleUnitComponentType.Buff)
			if _isRemove then
				_buffCom:RemoveBuffStackNum(_param.buffGroupId, _param.removeNum)
			else
				_battleBuff = BattleBuffService:GenerateUnitCastBuffTemplate(_param.buffGroupId, _unit, _castObjId, nil, nil)
			end
		else
			_currentObj = _targetUnit:GetCurrentHeroObject()
			_buffCom = _currentObj and _currentObj:GetComponent(BattleObjectComponentType.Buff)
			if _isRemove then
				_buffCom:RemoveBuffStackNum(_param.buffGroupId, _param.removeNum)
			else
				_battleBuff = BattleBuffService:GenerateCastBuffTemplate(_param.buffGroupId, _castObj, nil, nil)
			end
		end
	end

	if not _buffCom then return end
	if not _battleBuff then return end
	_buffCom:AddBattleBuff(_battleBuff)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsOperateBuff end", "_netId", _param.netId)
	end
end

---怪物向范围添加buff
---服务器添加，通过同步消息同步给前端
function BehaviorProcessor:MonsAddBuffInBoundary(_netId, _radius, _selectType, _selectParam, _buffGroupId, _isUnitBuff)
	if not self:CheckMonsAIHost() then return end
    self:__MonsAddBuffInBoundary(_netId, _radius, _selectType, _selectParam, _buffGroupId, _isUnitBuff)
end
function BehaviorProcessor:__MonsAddBuffInBoundary(_netId, _radius, _selectType, _selectParam, _buffGroupId, _isUnitBuff)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor:MonsAddBuffInBoundary", "_netId", _netId, "_radius", _radius, "_selectType", LogTools.GetEnumTableDesc(LuaBehav_Define_AddBuffInBoundarySelectType, _selectType), "_selectParam", dumpTableEx(_selectParam), "_buffGroupId", _buffGroupId, "_isUnitBuff", _isUnitBuff)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsAddBuffInBoundary start", "_netId", _netId, "_radius", _radius, "_selectType", _selectType, "_selectParam", dumpTableEx(_selectParam), "_buffGroupId", _buffGroupId)
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return end
	local _castObj = _unit:GetCurrentHeroObject()
	if not _castObj then return end
	local _castObjId = _castObj:GetObjectId()

	---@type BattleUnitBase[]
	local _checkUnitList
	---@type BattleObjectBase
	local _checkObject
	---@type BattleObjCom_Buff
	local _comBuff
	local _battleBuff
	local _checkDis = _radius * _radius
	if _selectType == LuaBehav_Define_AddBuffInBoundarySelectType.SpecificCamps then
		for _, _campId in pairs(_selectParam) do
			_checkUnitList = self.battleRoom.battleUnitManager:GetUnitListByCampType(_campId)
			for _, _checkUnit in pairs(_checkUnitList) do
				if self.battleRoom.transUtil:GetDisBetweenUnits(_netId, _checkUnit:GetNetId(), BattleUnitDisRecordType.CollisionDis) < _checkDis then
					if _isUnitBuff then
						_comBuff = _checkUnit:GetComponent(BattleUnitComponentType.Buff)
						_battleBuff = BattleBuffService:GenerateUnitCastBuffTemplate(_buffGroupId, _unit, _castObjId, nil, nil)
					else
						_checkObject = _checkUnit:GetCurrentHeroObject()
						_comBuff = _checkObject and _checkObject:GetComponent(BattleObjectComponentType.Buff)
						_battleBuff = BattleBuffService:GenerateCastBuffTemplate(_buffGroupId,_castObj,nil, nil)
					end

					if _comBuff and _battleBuff then
						_comBuff:AddBattleBuff(_battleBuff)
					end
				end
			end
		end
	elseif _selectType == LuaBehav_Define_AddBuffInBoundarySelectType.SpecificUnitTypes then
		for _, _unitType in pairs(_selectParam) do
			_checkUnitList = self.battleRoom.battleUnitManager:GetUnitListByUnitTypeUnsafe(_unitType)
			for _, _checkUnit in pairs(_checkUnitList) do
				if self.battleRoom.transUtil:GetDisBetweenUnits(_netId, _checkUnit:GetNetId(), BattleUnitDisRecordType.CollisionDis) < _checkDis then
					if _isUnitBuff then
						_comBuff = _checkUnit:GetComponent(BattleUnitComponentType.Buff)
						_battleBuff = BattleBuffService:GenerateUnitCastBuffTemplate(_buffGroupId, _unit, _castObjId, nil, nil)
					else
						_checkObject = _checkUnit:GetCurrentHeroObject()
						_comBuff = _checkObject and _checkObject:GetComponent(BattleObjectComponentType.Buff)
						_battleBuff = BattleBuffService:GenerateCastBuffTemplate(_buffGroupId, _castObj, nil, nil)
					end

					if _comBuff and _battleBuff then
						_comBuff:AddBattleBuff(_battleBuff)
					end
				end
			end
		end
	end

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsAddBuffInBoundary end", "_netId", _netId)
	end
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor:MonsAddBuffInBoundary end")
end

---设置属性
---服务器直接设置，通过属性同步同步给前端
---@param _param LuaBehav_MonsSetPropertyParam
function BehaviorProcessor:MonsSetProperty(_param)
    if not self:CheckMonsAIHost() then return end
    self:__MonsSetProperty(_param)
end
function BehaviorProcessor:__MonsSetProperty(_param)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsSetProperty start", "_param", dumpTableEx(_param))
	end
	
	--local _unit = self.battleRoom.battleUnitManager:GetUnit(_param.netId)
	--if not _unit then return end
	-----@type BattleObjCom_Property
	--local _propCom = _unit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Property)
	--if not _propCom then return end
	--
	--if _param.valueDescType == LuaBehav_Define_ValueDesType.SpecificValue then
	--	--数值
	--	_propCom:SetProperty(_param.propId, _param.value)
	--else
	--	--数值百分比
	--	local _propMax = _propCom:GetPropertyMax(_param.propId)
	--	_propCom:SetProperty(_param.propId, _propMax * _param.value)
	--end

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsSetProperty end", "_netId", _param.netId)
	end
end

---怪物开始切换血量阶段
function BehaviorProcessor:MonsStartChangeStage(_netId)
    if not self:CheckMonsAIHost() then return end
    self:__MonsStartChangeStage(_netId)
end
function BehaviorProcessor:__MonsStartChangeStage(_netId)
	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return end
	
	---@type BattleObjCom_Property
	local _propCom = _unit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Property)
	_propCom:StartChangingStage()
	
end

---怪物进入下一血量阶段
---@param _param LuaBehav_MonsSetPropertyParam
function BehaviorProcessor:MonsChangeStage(_netId)
    if not self:CheckMonsAIHost() then return end
    self:__MonsChangeStage(_netId)
end
function BehaviorProcessor:__MonsChangeStage(_netId)
	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return end
	
	---@type BattleObjCom_Property
	local _propCom = _unit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Property)
	_propCom:GoToNextStage()
end

---怪物死亡
---@param _param LuaBehav_MonsDeadParam
function BehaviorProcessor:MonsDead(_param)
	if not self:CheckMonsAIHost() then return end
    self:__MonsDead(_param)
end
function BehaviorProcessor:__MonsDead(_param)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsDead start", "_param", dumpTableEx(_param))
	end
	
	local _unit = self.battleRoom.battleUnitManager:GetUnit(_param.netId)
	if not _unit then
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor MonsDead, cannot find unit !!!", _param.netId)
		return
	end

	if _param.forceKiller then
		---@type BattleUnitCom_TagSelector
		local _tagCom = _unit:GetComponent(BattleUnitComponentType.TagSelector)
		_tagCom:SetTag(BattleUnitTagEnum.LastHurtFromNetID, 1)
	end

	self.battleRoom.battleUnitManager:OnBattleObjectDead(_param.netId, _unit:GetCurrentHeroObjectId(), _param.deadType)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsDead end", "_netId", _param.netId)
	end
end

---修改stateParamId
---@param _param LuaBehav_MonsChangeStateParamIdParam
function BehaviorProcessor:MonsChangeStateParamId(_param)
	if not self:CheckMonsAIHost() then return end
    self:__MonsChangeStateParamId(_param)
end
---@param _param LuaBehav_MonsChangeStateParamIdParam
function BehaviorProcessor:__MonsChangeStateParamId(_param)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsChangeStateParamId start", "_param", dumpTableEx(_param))
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_param.netId)
	if not _unit then return end
	_unit:SetStateParamId(_param.stateParamId)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsChangeStateParamId end", "_netId", _param.netId)
	end
end

---修改旋转轴锁定
---@public
function BehaviorProcessor:MonsRotateAxisLock(_netId, _axisLockType)
	if not self:CheckMonsAIHost() then return end
    self:__MonsRotateAxisLock(_netId, _axisLockType)
end
function BehaviorProcessor:__MonsRotateAxisLock(_netId, _axisLockType)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsRotateAxisLock start", "_netId", _netId, "_axisLockType", LogTools.GetEnumTableDesc(LuaBehav_Define_RotateAxisLockType, _axisLockType))
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return end
	
	---@type BattleUnitCom_TagSelector
	local _tagCom = _unit:GetComponent(BattleUnitComponentType.TagSelector)
	if not _tagCom then return end
	
	_tagCom:SetTag(BattleUnitTagEnum.RotateAxisLockType, _axisLockType)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsRotateAxisLock end", "_netId", _netId)
	end
end

---移除某个Unit的所有下属单位
function BehaviorProcessor:RemoveManagedSubodinationOfUnit(_trigType, _netId)
	if not self:CheckMonsAIHost() then return end
    self:__RemoveManagedSubodinationOfUnit(_trigType, _netId)
end
function BehaviorProcessor:__RemoveManagedSubodinationOfUnit(_trigType, _netId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __RemoveManagedSubodinationOfUnit start", "_trigType", _trigType, "_netId", _netId)
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return end
	---@type BattleUnitCom_Subordination
	local _subordinationCom = _unit:GetComponent(BattleUnitComponentType.Subordination)
	_subordinationCom:SetAllManagedDead(_trigType, LuaBehav_Define_DeadType.DeadSilence)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __RemoveManagedSubodinationOfUnit end", "_netId", _netId)
	end
end

---战场物件修改自身状态
---@public
function BehaviorProcessor:SceneObjChangeSelfState(_netId, _stateId)
	if not self:CheckMonsAIHost() then return end
    self:__SceneObjChangeSelfState(_netId, _stateId)
end
function BehaviorProcessor:__SceneObjChangeSelfState(_netId, _stateId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __SceneObjChangeSelfState start", "_netId", _netId, "_stateId", _stateId)
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return end

	---@type BattleUnitCom_TagSelector
	local _tagCom = _unit:GetComponent(BattleUnitComponentType.TagSelector)
	if not _tagCom then return end

	_tagCom:SetTag(BattleUnitTagEnum.SceneObjState, _stateId)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __SceneObjChangeSelfState end", "_netId", _netId)
	end
end

---单位修改分块状态
function BehaviorProcessor:MonsChangeBlockState(_netId, _blockId, _stateId, _weaknessId)
	if not self:CheckMonsAIHost() then return end
    self:__MonsChangeBlockState(_netId, _blockId, _stateId, _weaknessId)
end
function BehaviorProcessor:__MonsChangeBlockState(_netId, _blockId, _stateId, _weaknessId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsChangeBlockState start", "_netId", _netId, "_blockId", _blockId, "_stateId", _stateId, "_weaknessId", _weaknessId)
	end
	
	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehaviorProcessor __MonsChangeBlockState, cannot find unit !!!", _netId)
		return
	end
	self.battleRoom.battleUnitManager:OnUnitChangeBlockStateS2C(_netId, _unit:GetCurrentHeroObjectId(), _blockId, _stateId, _weaknessId)
	
	--local _UnitChangeBlockState_S2C = {}
	--_UnitChangeBlockState_S2C.netId = _netId
	--_UnitChangeBlockState_S2C.objId = _unit:GetCurrentHeroObjectId()
	--_UnitChangeBlockState_S2C.blockId = _blockId
	--_UnitChangeBlockState_S2C.stateId = _stateId
	--_UnitChangeBlockState_S2C.weaknessId = _weaknessId
	--self.battleRoom.outputDataSource:UnitChangeBlockStateS2C(_UnitChangeBlockState_S2C)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsChangeBlockState end", "_netId", _netId)
	end
end

--战场物件修改采集者金币积分
function BehaviorProcessor:SceneObjChangeCoinPoints(_netIdSelf, _operType, _value)
	if not self:CheckMonsAIHost() then return end

	local _unitSelf = self.battleRoom.battleUnitManager:GetUnit(_netIdSelf, true)
	if not _unitSelf then return end
	---@type BattleUnitCom_TagSelector
	local _tagSelf = _unitSelf:GetComponent(BattleUnitComponentType.TagSelector)
	if not _tagSelf then return end
	local _unitCollector = self.battleRoom.battleUnitManager:GetUnit(_tagSelf:GetTag(BattleUnitTagEnum.CollectorNetId))
	if not _unitCollector then return end
	---@type BattleUnitCom_TagSelector
	local _tagCollector = _unitCollector:GetComponent(BattleUnitComponentType.TagSelector)
	if not _tagCollector then return end

	local _realValue = 0
	if _operType == LuaBehav_Define_LevelTagOperateType.Set then
		_tagCollector:SetTag(BattleUnitTagEnum.CollectCoinPoints, _value)
		_realValue = _value
	elseif _operType == LuaBehav_Define_LevelTagOperateType.Add then
		local _points = _tagCollector:GetTag(BattleUnitTagEnum.CollectCoinPoints) + _value
		if _points < 0 then _points = 0 end
		_tagCollector:SetTag(BattleUnitTagEnum.CollectCoinPoints, _points)
		_realValue = _points
	end

	if _value > 0 then
		local _num = _tagCollector:GetTag(BattleUnitTagEnum.CollectCoinNum) + _value
		_tagCollector = _tagCollector:SetTag(BattleUnitTagEnum.CollectCoinNum, _num)
	end

	self.battleRoom.battleLogicEventService:OnTriggerUnitTagValueChangeEvent(_unitCollector:GetNetId(), _unitCollector:GetCurrentHeroObjectId(), BattleUnitTagEnum.CollectCoinPoints, _realValue)
	self.battleRoom.battleLogicEventService:OnTriggerCollectCoinEvent(_unitCollector:GetNetId(), _unitCollector:GetCurrentHeroObjectId())
end

---清除最后伤害者记录
---@public
function BehaviorProcessor:MonsClearLastHurtFromTag(_netId)
	if not self:CheckMonsAIHost() then return end
    self:__MonsClearLastHurtFromTag(_netId)
end
function BehaviorProcessor:__MonsClearLastHurtFromTag(_netId)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsClearLastHurtFromTag start", "_netId", _netId)
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return end

	---@type BattleUnitCom_TagSelector
	local _tagCom = _unit:GetComponent(BattleUnitComponentType.TagSelector)
	if not _tagCom then return end
	
	_tagCom:SetTag(BattleUnitTagEnum.LastHurtFromNetID, -1)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsClearLastHurtFromTag end", "_netId", _netId)
		end
end

---怪物改变自身勇士状态
---@public
function BehaviorProcessor:MonsChangeWarriorState(_netId, _isOpen)
	if not self:CheckMonsAIHost() then return end
    self:__MonsChangeWarriorState(_netId, _isOpen)
end
function BehaviorProcessor:__MonsChangeWarriorState(_netId, _isOpen)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsChangeWarriorState start", "_netId", _netId, "_isOpen", _isOpen)
	end

	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return end

	---@type BattleObjCom_Config
	local _configCom = _unit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Config)
	if not _configCom then return end

	local _value = 0
	if _isOpen then
		_value = _configCom:GetDefaultWarriorStateId()
	end
	
	self.battleRoom.battleUnitManager:UnitChangeWarriorState(_unit, _value)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __MonsChangeWarriorState end", "_netId", _netId)
	end
end

---单位主动掉落
---@public
---@param _netId number
---@param _fallingId number 掉落物ID
---@param _num number 掉落数量
---@param _posShift Vector3 掉落偏移
---@param _shiftSpace LuaBehav_Define_SpaceType 偏移用的坐标系
function BehaviorProcessor:UnitCallFallingDown(_netId, _fallingId, _num, _posShift, _shiftSpace)
	if not self:CheckMonsAIHost() then return end
    self:__UnitCallFallingDown(_netId, _fallingId, _num, _posShift, _shiftSpace)
end
function BehaviorProcessor:__UnitCallFallingDown(_netId, _fallingId, _num, _posShift, _shiftSpace)
	if CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BehaviorProcessor:__UnitCallFallingDown", "_netId", _netId, "_fallingId", _fallingId, "_num", _num, "_posShift", _posShift, "_shiftSpace", _shiftSpace)
	end

	local _dropUnit = self.battleRoom.battleUnitManager:GetUnit(_netId, true)
	if not _dropUnit then return end
	
	local _dropActionManager = _dropUnit:GetActionManager()
	local _dropRot = _dropActionManager:GetRotation()

	local _dropPos
	if _shiftSpace == LuaBehav_Define_SpaceType.WorldSpace then
		_dropPos = _dropActionManager:GetPosition() + _posShift
	else
		Vector3.MulQuat(_posShift, _dropRot)
		_dropPos = _dropActionManager:GetPosition() + _posShift
	end

	self.battleRoom.fallObjectManager:DropFallObject(_fallingId, _num, 0, 0, _netId, _dropPos, _dropRot, false)

	if CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BehaviorProcessor:__UnitCallFallingDown end", "_netId", _netId, "_dropPos", _dropPos, "_dropRot", _dropRot)
	end
end

------------------------------------------------------------------------------------------------------------------------
---
---触发新手引导
---@param _param LuaBehav_MonsSetPropertyParam
function BehaviorProcessor:TrigBattleGuide(_guideId, _trigType)
    if not self:CheckLevelAIHost() then return end
    self:__TrigBattleGuide(_guideId, _trigType)
end
function BehaviorProcessor:__TrigBattleGuide(_guideId, _trigType)
	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __TrigBattleGuide start", "_guideId", _guideId, "_trigType", LogTools.GetEnumTableDesc(LuaBehav_Define_BattleGuideTrigType, _trigType))
	end
	
	local TrigBattleGuide_S2C = {}
	TrigBattleGuide_S2C.guideId = _guideId
	TrigBattleGuide_S2C.trigType = _trigType
	self.battleRoom.outputDataSource:TrigBattleGuideS2C(TrigBattleGuide_S2C)

	if CheckLogLevel(LogLevel.log) then
		self:CheckLuaBehavLog(" __TrigBattleGuide end", "_guideId", _guideId, "_trigType", LogTools.GetEnumTableDesc(LuaBehav_Define_BattleGuideTrigType, _trigType))
	end
end



---投放怪物(废弃)
---@param _param LuaBehav_LevelDropMonsParam
function BehaviorProcessor:CreateMonster(_param) end
return BehaviorProcessor
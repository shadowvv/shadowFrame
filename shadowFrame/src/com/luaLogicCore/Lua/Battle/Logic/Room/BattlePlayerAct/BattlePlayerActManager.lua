---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hejincheng.
--- DateTime: 2022/2/26 11:59
--- 玩家表演管理器

require "Lib/class"
require "Battle/Logic/Constants/BattleLevelConst"
require "Battle/Logic/Room/BattlePlayerAct/BattlePlayerAct_Define"
require "Battle/Logic/Room/BattlePlayerAct/Model/PlayUiModel"
require "Battle/Logic/Room/BattlePlayerAct/Model/PlayActModel"
require "Battle/Logic/Room/BattlePlayerAct/Model/PlayPlotModel"
require "Battle/Logic/Room/BattlePlayerAct/ActState"

---@class BattlePlayerActManager : table
BattlePlayerActManager = class(nil, 'BattlePlayerActManager');

function BattlePlayerActManager:ctor(_battleId)
    ---@type number
    self.battleId = _battleId
    self.battleRoom = GetBattleRoom(self.battleId)
end

-- 初始化
---@public
function BattlePlayerActManager:Init()
    ---@type PlayActModel[] 表演数据
    self.actDic = {}
    ---@type table 表演结束玩家列表 <id, uid[]>
    self.actWaitFinishPlayers = {}

    ---@type PlayPlotModel[] 剧情数据
    self.plotDic = {}
    ---@type table 剧情结束玩家列表 <id, uid[]>
    self.plotWaitFinishPlayers = {}

    ---@type PlayUiModel[] UI数据
    self.uiDic = {}

    ---@type PlayActModel[]
    self.playActModelQueue = {}
    ---@type PlayUiModel[]
    self.playUiModelQueue = {}
    ---@type PlayPlotModel[]
    self.playPlotModelQueue = {}

    ---@type PlayActModel 当前进行的表演
    self.curActInQueue = nil
    ---@type PlayUiModel 当前进行的Ui
    self.curUiInQueue = nil
    ---@type PlayPlotModel 当前进行的剧情
    self.curPlotInQueue = nil

    ---@type table<string, table<string,PlayActModel>>
    self.allActModelDic = {}
    ---@type table<string, table<string,PlayPlotModel>>
    self.allPlotModelDic = {}
    ---@type table<string, table<string,PlayUiModel>>
    self.allUiModelDic = {}
end

-- 初始化
---@public
function BattlePlayerActManager:__Clear()
    self.actDic = nil
    self.actWaitFinishPlayers = nil
    self.plotDic = nil
    self.plotWaitFinishPlayers = nil
    self.uiDic = nil
    self.playActModelQueue = nil
    self.playUiModelQueue = nil
    self.playPlotModelQueue = nil
    self.curActInQueue = nil
    self.curUiInQueue = nil
    self.curPlotInQueue = nil
end

--- 获取ui状态
---@param _uiId number
---@param _uiType number
---@return ActState 表演状态
function BattlePlayerActManager:GetUiState(_uiId, _uiType)
    local uiModelDic = self.allUiModelDic[tostring(_uiType)]
    if uiModelDic and uiModelDic[tostring(_uiId)] then
        return uiModelDic[tostring(_uiId)]:GetState()
    end
    return ActState.NOT_PLAY
end

--- 获取表演状态
---@param _actId number
---@param _actType number
---@return ActState 表演状态
function BattlePlayerActManager:GetActState(_actId, _actType)
    local actModelDic = self.allActModelDic[tostring(_actType)]
    if actModelDic and actModelDic[tostring(_actId)] then
        return actModelDic[tostring(_actId)]:GetState()
    end
    return ActState.NOT_PLAY
end

--- 获取剧情状态
---@param _plotId number
---@param _plotType number
---@return ActState 表演状态
function BattlePlayerActManager:GetPlotState(_plotId, _plotType)
    local plotModelDic = self.allPlotModelDic[tostring(_plotType)]
    if plotModelDic and plotModelDic[tostring(_plotId)] then
        return plotModelDic[tostring(_plotId)]:GetState()
    end
    return ActState.NOT_PLAY
end

---@private
---@param _uiModel PlayUiModel
function BattlePlayerActManager:__OnPlayUiFinish(_uiModel)
    _uiModel:SetState(ActState.FINISH)
    -- 回调
    local callback = _uiModel:GetCallback()
    if callback then
        callback(self.battleRoom)
    end
    -- 移除Dic
    self.uiDic[tostring(_uiModel:GetId())] = nil
    if not _uiModel:GetImmediately() then
        self.curUiInQueue = nil
    end
end

---@private
---@param _actModel PlayActModel
function BattlePlayerActManager:__OnPlayActFinish(_actModel)
    _actModel:SetState(ActState.FINISH)
    -- 回调
    local callback = _actModel:GetCallback()
    if callback then
        callback(self.battleRoom)
    end
    -- 移除Dic，清空等待list
    local _id = tostring(_actModel:GetId())
    self.actDic[_id] = nil
    self.actWaitFinishPlayers[_id] = {}
    if not _actModel:GetImmediately() then
        self.curActInQueue = nil
    end
end

---@private
---@param _plotModel PlayPlotModel
function BattlePlayerActManager:__OnPlayPlotFinish(_plotModel)
    _plotModel:SetState(ActState.FINISH)
    -- 回调
    local callback = _plotModel:GetCallback()
    if callback then
        callback(self.battleRoom)
    end
    -- 移除Dic，清空等待list
    local _id = tostring(_plotModel:GetId())
    self.plotDic[_id] = nil
    self.plotWaitFinishPlayers[_id] = {}
    if not _plotModel:GetImmediately() then
        self.curPlotInQueue = nil
    end
end

-- 检测UI数据
---@protected
---@param _deltaTime number
---@param _frameId number
function BattlePlayerActManager:__CheckPlayUi(_deltaTime, _frameId)
    -- 1.播放UI(上一个播完了 and 队列有数据)
    if self.curUiInQueue == nil and #self.playUiModelQueue > 0 then
        ---@type PlayUiModel
        local playUiModel = table.remove(self.playUiModelQueue, 1)
        self:__DoPlayUi(playUiModel)
        self.curUiInQueue = playUiModel
    end

    -- 2.遍历UI检测超时
    for _, _uiModel in pairs(self.uiDic) do
        -- 超时结束
        if TimeUtils.battleNow(self.battleId) >= _uiModel:GetPlayEndTime() then
            self:__OnPlayUiFinish(_uiModel)
        end
    end
end

-- 检测表演数据
---@protected
---@param _deltaTime number
---@param _frameId number
function BattlePlayerActManager:__CheckPlayAct(_deltaTime, _frameId)
    -- 1.播放表演(上一个播完了 and 队列有数据)
    if self.curActInQueue == nil and #self.playActModelQueue > 0 then
        ---@type PlayActModel
        local playActModel = table.remove(self.playActModelQueue, 1)
        self:__DoPlayAct(playActModel)
        self.curActInQueue = playActModel
    end

    -- 2.检测表演结束或超时
    ---@type PlayActModel[]
    local tmpFinishAct = {}
    for _, _actModel in pairs(self.actDic) do
        if (_actModel:GetTimeOutEndTime() > 0 and TimeUtils.battleNow(self.battleId) >= _actModel:GetTimeOutEndTime())
                or self:__CheckAllPlayerActFinish(_actModel:GetId()) then
            table.insert(tmpFinishAct, _actModel)
        end
    end
    if #tmpFinishAct > 0 then
        for _, _actModel in pairs(tmpFinishAct) do
            self:__OnPlayActFinish(_actModel)
        end
    end
end

-- 检测剧情数据
---@protected
---@param _deltaTime number
---@param _frameId number
function BattlePlayerActManager:__CheckPlayPlot(_deltaTime, _frameId)
    -- 1.播放剧情(上一个播完了 and 队列有数据)
    if self.curPlotInQueue == nil and #self.playPlotModelQueue > 0 then
        ---@type PlayPlotModel
        local playPlotModel = table.remove(self.playPlotModelQueue, 1)
        self:__DoPlayPlot(playPlotModel)
        self.curPlotInQueue = playPlotModel
    end

    -- 2.检测剧情结束或超时
    ---@type PlayPlotModel[]
    local tmpFinishPlot = {}
    for _, _plotModel in pairs(self.plotDic) do
        if _plotModel:GetTimeOutEndTime() > 0 and TimeUtils.battleNow(self.battleId) >= _plotModel:GetTimeOutEndTime() then
            if CheckLogLevel(LogLevel.log) then
                LogTools.LogByLevel(LogLevel.log, "BattlePlayerActManager", "__CheckPlayPlot", "Time Out")
            end
            table.insert(tmpFinishPlot, _plotModel)
        elseif self:__CheckAllPlayerPlotFinish(_plotModel:GetId()) then
            if CheckLogLevel(LogLevel.log) then
                LogTools.LogByLevel(LogLevel.log, "BattlePlayerActManager", "__CheckPlayPlot", "AllPlayerPlotFinish")
            end
            table.insert(tmpFinishPlot, _plotModel)
        end
    end
    if #tmpFinishPlot > 0 then
        for _, _plotModel in pairs(tmpFinishPlot) do
            self:__OnPlayPlotFinish(_plotModel)
        end
    end
end

---@protected
---@param _id number
function BattlePlayerActManager:__CheckAllPlayerPlotFinish(_id)
    ---@type BattleUnit_Player[]
    local _unitPlayerList = self.battleRoom.battleUnitManager:GetUnitListByUnitType(BattleUnitType.Player)
    for _, _unit in pairs(_unitPlayerList) do
        if _unit and _unit:CheckOnlineState(BattleUnitOnlineState.OnLine) then
            -- 有一个人没确认，就return false
            local waitPlayers = self.plotWaitFinishPlayers[tostring(_id)]
            if not waitPlayers then
                return false
            end
            if not waitPlayers[tostring(_unit:GetPlayerId())] then
                return false
            end
        end
    end
    -- 所有人都确认
    return true
end

---@protected
---@param _id number
function BattlePlayerActManager:__CheckAllPlayerActFinish(_id)
    ---@type BattleUnit_Player[]
    local _unitPlayerList = self.battleRoom.battleUnitManager:GetUnitListByUnitType(BattleUnitType.Player)
    for _, _unit in pairs(_unitPlayerList) do
        if _unit and _unit:CheckOnlineState(BattleUnitOnlineState.OnLine) then
            -- 有一个人没确认，就return false
            local waitPlayers = self.actWaitFinishPlayers[tostring(_id)]
            if not waitPlayers then
                return false
            end
            if not waitPlayers[tostring(_unit:GetPlayerId())] then
                return false
            end
        end
    end
    -- 所有人都确认
    return true
end

---@protected
---@param _deltaTime number
---@param _frameId number
function BattlePlayerActManager:__OnUpdate(_deltaTime, _frameId)
    -- 检测UI数据
    self:__CheckPlayUi(_deltaTime, _frameId)
    -- 检测表演数据
    self:__CheckPlayAct(_deltaTime, _frameId)
    -- 检测剧情数据
    self:__CheckPlayPlot(_deltaTime, _frameId)
end

-- 开始你的表演
---@protected
---@param _playActModel PlayActModel
function BattlePlayerActManager:__DoPlayAct(_playActModel)
    if CheckLogLevel(LogLevel.log) then
        LogTools.Info(LogLevel.log, "BattlePlayerActManager", "__DoPlayAct", dumpTableEx(_playActModel))
    end

    -- 广播所有玩家开始播放
    local playActData = {
        actData = _playActModel:GetActData()
    }
    self.battleRoom.outputDataSource:BattlePlayAct_S2C(playActData)

    ---@type number
    local _timeout = _playActModel:GetTimeOut()
    -- 记录表演数据
    if not _timeout then
        _timeout = BATTLE_LEVEL_CONST.DEFAULT_ACT_TIME_OUT
    end
    ---@type number
    local _actTimoutTime = TimeUtils.battleNow(self.battleId) + _timeout
    _playActModel:SetTimeOutEndTime(_actTimoutTime)
    _playActModel:SetState(ActState.PLAYING)

    self.actDic[tostring(_playActModel:GetId())] = _playActModel

    -- 等待结束列表
    self.actWaitFinishPlayers[tostring(_playActModel:GetId())] = {}
end

-- 开始你的表演
---@protected
---@param _playUiModel PlayUiModel
function BattlePlayerActManager:__DoPlayUi(_playUiModel)
    if CheckLogLevel(LogLevel.log) then
        LogTools.Info(LogLevel.log, "BattlePlayerActManager", "__DoPlayUi", dumpTableEx(_playUiModel))
    end

    local playUiData = {
        uiData = _playUiModel:GetUiData()
    }
    self.battleRoom.outputDataSource:BattlePlayUI_S2C(playUiData)
    ---@type number 记录UI数据
    local playTime = _playUiModel:GetTimeout()
    if not playTime then
        playTime = BATTLE_LEVEL_CONST.DEFAULT_ACT_TIME_OUT
    end
    ---@type number
    local _uiEndTime = TimeUtils.battleNow(self.battleId) + playTime

    _playUiModel:SetPlayEndTime(_uiEndTime)
    _playUiModel:SetState(ActState.PLAYING)

    self.uiDic[tostring(_playUiModel:GetId())] = _playUiModel
end

-- 开始你的表演
---@protected
---@param _playPlotModel PlayPlotModel
function BattlePlayerActManager:__DoPlayPlot(_playPlotModel)
    if CheckLogLevel(LogLevel.log) then
        LogTools.Info(LogLevel.log, "BattlePlayerActManager", "__DoPlayPlot", dumpTableEx(_playPlotModel))
    end

    local playPlotData = {
        plotData = _playPlotModel:GetPlotData()
    }
    self.battleRoom.outputDataSource:BattlePlayPlot_S2C(playPlotData)
    ---@type number 记录UI数据
    local playTime = _playPlotModel:GetTimeOut()
    if playTime then
        ---@type number
        local _plotEndTime = TimeUtils.battleNow(self.battleId) + playTime
        _playPlotModel:SetTimeOutEndTime(_plotEndTime)
        _playPlotModel:SetState(ActState.PLAYING)
    end

    self.plotDic[tostring(_playPlotModel:GetId())] = _playPlotModel
end

------------------------------------------------------------------------------------------------------------------------

---@public
---@param _deltaTime number
---@param _frameId number
function BattlePlayerActManager:OnUpdate(_deltaTime, _frameId)
    self:__OnUpdate(_deltaTime, _frameId)
end

------------------------------------------------------------------------------------------------------------------------
-- 对外接口
------------------------------------------------------------------------------------------------------------------------

-- 开始玩家剧情
---@public
---@param _plotId number
---@param _plotType number PlotTypeEnum
---@param _param string
---@param _callBack function 播完回调 ，参数PlayerPlotModel
---@param _timeout number 超时，等所有人播完的最长超时时间，过了这个时间，就认为都播完了
---@param _immediately boolean 是否立即开始（立即开始不排队，否则有多个表演的时候，依次播放）
function BattlePlayerActManager:StartPlayPlot(_plotId, _plotType, _param, _callBack, _timeout, _immediately)
    if CheckLogLevel(LogLevel.log) then
        LogTools.Info("BattlePlayerActManager", "StartPlayPlot", "_plotType", _plotType, "_plotId", _plotId, "_param", _param, "_callBack", _callBack, "_timeout", _timeout, "_immediately", _immediately)
    end

    local _id = self.battleRoom.idCreator:GetAndIncreaseActId()
    local _plotData = {
        id = _id,
        plotType = _plotType,
        param = tostring(_param),
    }
    ---@type PlayPlotModel
    local playPlotModel = PlayPlotModel.New(_id, _plotId, _plotData, _callBack, _timeout, 0, _immediately)

    if playPlotModel:GetPlotType() and playPlotModel:GetId() then
        -- 放入dic
        local plotModelDic = self.allPlotModelDic[tostring(playPlotModel:GetPlotType())]
        if plotModelDic == nil then
            self.allPlotModelDic[tostring(playPlotModel:GetPlotType())] = {}
            plotModelDic = self.allPlotModelDic[tostring(playPlotModel:GetPlotType())]
        end
        plotModelDic[tostring(playPlotModel:GetPlotId())] = playPlotModel
    end

    if _immediately then
        -- 立即开始
        self:__DoPlayPlot(playPlotModel)
    else
        -- 进入表演队列
        table.insert(self.playPlotModelQueue, playPlotModel)
    end
end

-- 开始播放UI
---@public
---@param _uiId number UI id
---@param _uiType number UI类型
---@param _playTime number 播放时间ms
---@param _param string UI参数
---@param _callBack function 播完回调 ，参数PlayerUiModel
---@param _immediately boolean 是否立即开始（立即开始不排队，否则有多个ui的时候，依次播放）
function BattlePlayerActManager:StartPlayUi(_uiId, _uiType, _playTime, _param, _callBack, _immediately)
    if CheckLogLevel(LogLevel.log) then
        LogTools.Info(LogLevel.log, "BattlePlayerActManager", "StartPlayUi", "_playTime", _playTime, "_uiType", _uiType, "_callBack", _callBack, "_immediately", _immediately)
    end

    -- 广播所有玩家播放UI
    local _uiData = {
        uiType = tostring(_uiType),
        param = tostring(_param)
    }
    local _id = self.battleRoom.idCreator:GetAndIncreaseActId()
    ---@type PlayUiModel
    local playUiModel = PlayUiModel.New(_id, _uiId, _playTime, 0, _uiData, _callBack, _immediately)

    if playUiModel:GetUiType() and playUiModel:GetId() then
        -- 放入dic
        local uiModelDic = self.allUiModelDic[tostring(playUiModel:GetUiType())]
        if uiModelDic == nil then
            self.allUiModelDic[tostring(playUiModel:GetUiType())] = {}
            uiModelDic = self.allUiModelDic[tostring(playUiModel:GetUiType())]
        end
        uiModelDic[tostring(playUiModel:GetUiId())] = playUiModel
    end

    if _immediately then
        self:__DoPlayUi(playUiModel)
    else
        -- 进入UI队列
        table.insert(self.playUiModelQueue, playUiModel)
    end
end

-- 开始玩家表演
---@public
---@param _actId number
---@param _actType number ActType
---@param _param string
---@param _position Vector3
---@param _rotation Vector3
---@param _callBack function 播完回调 ，参数PlayerActModel
---@param _timeout number 超时，等所有人播完的最长超时时间，过了这个时间，就认为都播完了
---@param _immediately boolean 是否立即开始（立即开始不排队，否则有多个表演的时候，依次播放）
function BattlePlayerActManager:StartPlayAct(_actId ,_actType, _param, _position, _rotation, _callBack, _timeout, _immediately)
    if CheckLogLevel(LogLevel.log) then
        LogTools.Info(LogLevel.log, "BattlePlayerActManager", "StartPlayAct", "_actType", _actType, "_callBack", _callBack, "_timeout", _timeout, "_immediately", _immediately)
    end

    local _id = self.battleRoom.idCreator:GetAndIncreaseActId()
    local _actData = {
        id = _id,
        actType = _actType,
        param = tostring(_param),
        position = _position,
        roatation = _rotation
    }
    ---@type PlayActModel
    local playActModel = PlayActModel.New(_id, _actId, _actData, _callBack, _timeout, 0, _immediately)

    if playActModel:GetActType() and playActModel:GetActId() then
        -- 放入dic
        local actModelDic = self.allActModelDic[tostring(playActModel:GetActType())]
        if actModelDic == nil then
            self.allActModelDic[tostring(playActModel:GetActType())] = {}
            actModelDic = self.allActModelDic[tostring(playActModel:GetActType())]
        end
        actModelDic[tostring(playActModel:GetActId())] = playActModel
    end

    if _immediately then
        -- 立即开始
        self:__DoPlayAct(playActModel)
    else
        -- 进入表演队列
        table.insert(self.playActModelQueue, playActModel)
    end
end

-- 停止剧情
---@public
---@param _id number 剧情id
function BattlePlayerActManager:StopPlayPlot(_id)
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattlePlayerActManager", "StopPlayPlot", _id, "_id")
    end
    -- 清空数据
    local plotModel = self.plotDic[tostring(_id)]
    if plotModel then
        self.plotDic[tostring(_id)] = nil
        -- 结束当前
        local endPlot = {
            id = _id
        }
        self.battleRoom.outputDataSource:BattlePlayPlotEnd_S2C(endPlot)
    end
    -- 清空玩家等待列表
    self.plotWaitFinishPlayers[tostring(_id)] = nil
    -- 清空队列中的剧情
    for i = #self.playPlotModelQueue, 1, -1 do
        local _plotModel = self.playPlotModelQueue[i]
        if _plotModel:GetId() == _id then
            table.remove(self.playPlotModelQueue, i)
        end
    end
    -- 清空当前
    if self.curPlotInQueue and self.curPlotInQueue.id == _id then
        self.curPlotInQueue = nil
    end

end

-- 停止表演
---@public
---@param _id number 剧情id
function BattlePlayerActManager:StopPlayAct(_id)
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattlePlayerActManager", "StopPlayAct", _id, "_id")
    end
    -- 清空数据
    local actModel = self.actDic[tostring(_id)]
    if actModel then
        self.actDic[tostring(_id)] = nil
        -- 结束当前
        local endAct = {
            id = _id
        }
        self.battleRoom.outputDataSource:BattlePlayActEnd_S2C(endAct)
    end
    -- 清空玩家等待列表
    self.actWaitFinishPlayers[tostring(_id)] = nil
    -- 清空队列中的剧情
    for i = #self.playActModelQueue, 1, -1 do
        local _actModel = self.playActModelQueue[i]
        if _actModel:GetId() == _id then
            table.remove(self.playActModelQueue, i)
        end
    end
    -- 清空当前
    if self.curActInQueue and self.curActInQueue.id == _id then
        self.curActInQueue = nil
    end
end

-- 停止所有剧情
---@public
function BattlePlayerActManager:StopAllPlayPlot()
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattlePlayerActManager", "StopAllPlayPlot")
    end
    ---@type table<number>
    local plotIds = {}
    -- 清空数据
    for _, _plotModel in pairs(self.plotDic) do
        table.insert(plotIds, _plotModel:GetId())
    end
    self.plotDic = {}
    -- 清空玩家等待列表
    self.plotWaitFinishPlayers = {}
    -- 清空队列中的剧情
    self.playPlotModelQueue = {}
    -- 清空当前
    if self.curPlotInQueue then
        self.curPlotInQueue = nil
    end

    for _, _id in pairs(plotIds) do
        local endPlot = {
            id = _id
        }
        self.battleRoom.outputDataSource:BattlePlayPlotEnd_S2C(endPlot)
    end
end

-- 停止所有表演
---@public
function BattlePlayerActManager:StopAllPlayAct()
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattlePlayerActManager", "StopAllPlayAct")
    end
    ---@type table<number>
    local actIds = {}
    -- 清空数据
    for _, _actModel in pairs(self.actDic) do
        table.insert(actIds, _actModel:GetId())
    end
    self.actDic = {}
    -- 清空玩家等待列表
    self.actWaitFinishPlayers = {}
    -- 清空队列中的剧情
    self.playActModelQueue = {}
    -- 清空当前
    if self.curActInQueue then
        self.curActInQueue = nil
    end

    for _, _id in pairs(actIds) do
        local endAct = {
            id = _id
        }
        self.battleRoom.outputDataSource:BattlePlayActEnd_S2C(endAct)
    end
end


-- 开始播放Timeline
---@public
---@param _timelineId number
function BattlePlayerActManager:OnPlayTimeline(_timelineId)
    if not _timelineId then
        return
    end
    -- 单机游戏Timeline特殊需求:逻辑暂停
    ---@type TimelineShow
    local timelineShow = self.battleRoom.inputDataSource:GetDict("TimelineShow", _timelineId)
    if CheckLogLevel(LogLevel.log) then
    -- 排查问题，暂时打开日志
        LogTools.LogByLevel(LogLevel.log, "BattlePlayerActManager", "OnPlayTimeline", "Pause", "_timelineId", _timelineId, "timelineShow", dumpTableEx(timelineShow))
    end
    if not timelineShow then
        return
    end
    if IsClient() then
        -- 联机不能暂停
        if timelineShow.pauseLevel == 1 then
            self.battleRoom:PauseAllLevel()
        end
        if timelineShow.pauseTiming == 1 then
            self.battleRoom:PauseLevelTime()
        end
        if timelineShow.pauseFight == 1 then
            self.battleRoom:PauseLevelNormalLogic()
        end
        if timelineShow.clearSkillArea == 1 then
            self.battleRoom.behaviorProcessor:LevelKillUnitsByType(BattleUnitType.AreaTrigger, LuaBehav_Define_DeadType.DeadSilence)
        end
    end
end

-- 结束播放Timeline
---@public
---@param _timelineId number
function BattlePlayerActManager:OnFinishTimeline(_timelineId)
    if not _timelineId then
        return
    end
    -- 单机游戏Timeline特殊需求:逻辑暂停
    ---@type TimelineShow
    local timelineShow = self.battleRoom.inputDataSource:GetDict("TimelineShow", _timelineId)
    if CheckLogLevel(LogLevel.log) then
    -- 排查问题，暂时打开日志
        LogTools.LogByLevel(LogLevel.log, "BattlePlayerActManager", "__OnFinishTimeline", "Resume", "_timelineId", _timelineId, "timelineShow", dumpTableEx(timelineShow))
    end
    if not timelineShow then
        return
    end

    if IsClient() then
        -- 联机不能暂停
        if timelineShow.pauseLevel == 1 then
            self.battleRoom:ResumeAllLevel()
        end
        if timelineShow.pauseTiming == 1 then
            self.battleRoom:ResumeLevelTime()
        end
        if timelineShow.pauseFight == 1 then
            self.battleRoom:ResumeLevelNormalLogic()
        end
    end
end

------------------------------------------------------------------------------------------------------------------------
-- 服务端客户端交互逻辑
------------------------------------------------------------------------------------------------------------------------

-- 客户端表演结束
---@public
---@param _id number 表演id
---@param _uid number 玩家id
function BattlePlayerActManager:OnClientPlayActFinish(_id, _uid)
    -- 客户端表演结束
    -- 记录表演数据
    local waitPlayers = self.actWaitFinishPlayers[tostring(_id)]
    if not waitPlayers then
        self.actWaitFinishPlayers[tostring(_id)] = {}
        waitPlayers = self.actWaitFinishPlayers[tostring(_id)]
    end
    waitPlayers[tostring(_uid)] = _uid
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattlePlayerActManager", "OnClientPlayActFinish", "_id", _id, "waitPlayers", dumpTableEx(waitPlayers))
    end
end

-- 客户端剧情结束
---@public
---@param _id number 剧情id
---@param _uid number 玩家id
function BattlePlayerActManager:OnClientPlayPlotFinish(_id, _uid)
    -- 客户端剧情结束
    -- 记录剧情数据
    local waitPlayers = self.plotWaitFinishPlayers[tostring(_id)]
    if not waitPlayers then
        self.plotWaitFinishPlayers[tostring(_id)] = {}
        waitPlayers = self.plotWaitFinishPlayers[tostring(_id)]
    end
    waitPlayers[tostring(_uid)] = _uid
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattlePlayerActManager", "OnClientPlayPlotFinish", "_id", _id, "waitPlayers", dumpTableEx(waitPlayers))
    end
end

------------------------------------------------------------------------------------------------------------------------
-- 客户端显示层交互逻辑
------------------------------------------------------------------------------------------------------------------------

-- 显示层开始播放UI
---@public
---@param _uiType number UI类型
---@param _param string UI参数
function BattlePlayerActManager:OnClientStartPlayUi(_uiType, _param)
    -- 通知显示层播放UI
    local playUiData = {
        uiData = {
            uiType = _uiType,
            param = _param
        }
    }
    self.battleRoom.outputDataSource:ClientStartPlayUi(playUiData)
end

-- 显示层开始玩家剧情
---@public
---@param _id number
---@param _plotType number PlayPlotEnum
---@param _param string
function BattlePlayerActManager:OnClientStartPlayPlot(_id, _plotType, _param)
    -- 通知显示层表演
    local playPlotData = {
        plotData = {
            id = _id,
            plotType = _plotType,
            param = tostring(_param),
        }
    }
    self.battleRoom.outputDataSource:ClientStartPlayPlot(playPlotData)
end

-- 显示层开始玩家表演
---@public
---@param _id number
---@param _actType number PlayActEnum
---@param _param string
---@param _position Vector3
---@param _rotation Vector3
function BattlePlayerActManager:OnClientStartPlayAct(_id, _actType, _param, _position, _rotation)
    -- 通知显示层表演
    local playActData = {
        actData = {
            id = _id,
            actType = _actType,
            param = tostring(_param),
            position = _position,
            roatation = _rotation
        }
    }
    self.battleRoom.outputDataSource:ClientStartPlayAct(playActData)
end

-- 通知显示层停止玩家剧情
---@public
---@param _id number
function BattlePlayerActManager:OnServerEndPlayPlot(_id)
    -- 通知显示层表演
    local endPlotData = {
        id = _id,
    }
    self.battleRoom.outputDataSource:ServerEndPlayAct(endPlotData)
end

-- 通知显示层停止玩家表演
---@public
---@param _id number
function BattlePlayerActManager:OnServerEndPlayAct(_id)
    -- 通知显示层表演
    local endActData = {
        id = _id,
    }
    self.battleRoom.outputDataSource:ServerEndPlayAct(endActData)
end

-- 显示层表演结束
---@public
---@param _id number
function BattlePlayerActManager:OnClientViewPlayActFinish(_id)
    -- 显示层表演结束
    local playActEndData = {
        id = _id
    }
    self.battleRoom.outputDataSource:BattlePlayActEnd(playActEndData)
end

-- 显示层剧情结束
---@public
---@param _id number
function BattlePlayerActManager:OnClientViewPlayPlotFinish(_id)
    -- 显示层表演结束
    local playPlotEndData = {
        id = _id
    }
    self.battleRoom.outputDataSource:BattlePlotPlotEnd(playPlotEndData)
end

function BattlePlayerActManager:Clear()
    self:__Clear()
end

return BattlePlayerActManager;
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hejincheng.
--- DateTime: 2022/3/23 11:17

require "Lib/class"
require "Battle/Logic/Room/Element/ElementBallCreator"

---@class ElementManager : table
ElementManager = class(nil, 'ElementManager');

function ElementManager:ctor(_battleId)
    ---@type number
    self.battleId = _battleId
    self.battleRoom = GetBattleRoom(self.battleId)
end

function ElementManager:Init()
    self:__Init()
end

function ElementManager:__Init()
    -- 元素球创建工厂
    ---@type ElementBallCreator
    self.elementBallCreator = ElementBallCreator.New()

    ---@type ElementBall[] 元素球
    self.elementBallDic = {}
end

function ElementManager:__Clear()
    self.elementBallDic = nil
end

---@protected
---@param _dt number
function ElementManager:__OnUpdate(_dt)
    for i = #self.elementBallDic, 1, -1 do
        local _elementBall = self.elementBallDic[i]
        _elementBall:OnUpdate()
        -- 失效，消失
        if not _elementBall.active then
            if LogTools.ElementLog and CheckLogLevel(LogLevel.log) then
                LogTools.LogByLevel(LogLevel.log, "元素", _elementBall:GetElementBallLogName() .. "[" .. tostring(_elementBall.id) .. "]消失")
            end

            table.remove(self.elementBallDic, i)
        end
    end
end

------------------------------------------------------------------------------------------------------------------------

---@public
---@param _dt number
function ElementManager:OnUpdate(_dt)
    self:__OnUpdate(_dt)
end

-- 产生元素球
---@public
---@param _elementBallType ElementBallType 元素球类型
---@param _unit BattleUnitBase 产生的单位
---@param _castUnitId number 释放者netId
---@param _buffGroupIds number 元素球生效buffIds
---@param _generateBuffParams table buff参数
---@param _generateStackInfo table 元素球附带参数
---@return ElementBall 元素球
function ElementManager:CreateElementBall(_elementBallType, _unit, _castUnitId, _buffGroupIds, _generateBuffParams, _generateStackInfo)
    if not _unit then
        -- 单位不存在或者单位已死
        if CheckLogLevel(LogLevel.logErr) then
            LogTools.LogByLevel(LogLevel.logErr, "ElementManager", "CreateElementBall", "_unit nil")
        end
        return
    end

    local _castUnit = self.battleRoom.battleUnitManager:GetUnit(_castUnitId, true)

    -- 创建元素球
    ---@type ElementBall
    local _elementBall = self.elementBallCreator:CreateElementBall(_elementBallType, _unit, _castUnit, _buffGroupIds, _generateBuffParams, _generateStackInfo)
    table.insert(self.elementBallDic, _elementBall)
    -- 初始生效
    _elementBall:ElementBallEffect()
    -- 开始传导
    _elementBall:SpreadElementBall()
    return _elementBall
end

function ElementManager:ClientReceiveFieldData(_elementFieldInfo)
    local createLightningBall = _elementFieldInfo.createLightningBall
    if createLightningBall then
        -- 创建闪电球，通知显示层
        self:__ClientSendCreateLightningBallToView(
                createLightningBall.id,
                createLightningBall.targetObjId,
                createLightningBall.fromObjId,
                createLightningBall.targetObjPos,
                createLightningBall.fromObjPos,
                createLightningBall.effectId)
    end
    local createIceWinBall = _elementFieldInfo.createIceWinBall
    if createIceWinBall then
        -- 创建冰风球，通知显示层
        self:__ClientSendCreateIceWindBallToView(
                createIceWinBall.id,
                createIceWinBall.targetObjId,
                createIceWinBall.fromObjId,
                createIceWinBall.targetObjPos,
                createIceWinBall.fromObjPos,
                createIceWinBall.spreadSpeed,
                createIceWinBall.spreadAccSpeed,
                createIceWinBall.effectId,
                createIceWinBall.endEffectId,
                createIceWinBall.spreadMaxSpeed)
    end
end

-- 客户端发送到显示层
---@private
---@param _elementBallId number
---@param _targetObjId number
---@param _fromObjId number
---@param _targetObjPos number
---@param _fromObjPos number
---@param _effectId number
function ElementManager:__ClientSendCreateLightningBallToView(_elementBallId, _targetObjId, _fromObjId, _targetObjPos, _fromObjPos, _effectId)
    local msg = {
        id = _elementBallId,
        targetObjId = _targetObjId,
        fromObjId = _fromObjId,
        targetObjPos = _targetObjPos,
        fromObjPos = _fromObjPos,
        effectId = _effectId
    }
    self.battleRoom.outputDataSource:CreateElementLightningBall_L2S(msg)
end

-- 客户端发送到显示层
---@private
---@param _elementBallId number
---@param _targetObjId number
---@param _fromObjId number
---@param _targetObjPos number
---@param _fromObjPos number
---@param _spreadSpeed number
---@param _spreadAccSpeed number
---@param _effectId number
---@param _endEffectId number
---@param _spreadMaxSpeed number
function ElementManager:__ClientSendCreateIceWindBallToView(_elementBallId, _targetObjId, _fromObjId, _targetObjPos, _fromObjPos, _spreadSpeed, _spreadAccSpeed, _effectId, _endEffectId, _spreadMaxSpeed)
    local msg = {
        id = _elementBallId,
        targetObjId = _targetObjId,
        fromObjId = _fromObjId,
        targetObjPos = _targetObjPos,
        fromObjPos = _fromObjPos,
        spreadSpeed = _spreadSpeed,
        spreadAccSpeed = _spreadAccSpeed,
        effectId = _effectId,
        endEffectId = _endEffectId,
        spreadMaxSpeed = _spreadMaxSpeed,
    }
    self.battleRoom.outputDataSource:CreateElementIceWindBall_L2V(msg)
end

function ElementManager:Clear()
    self:__Clear()
end

return ElementManager;
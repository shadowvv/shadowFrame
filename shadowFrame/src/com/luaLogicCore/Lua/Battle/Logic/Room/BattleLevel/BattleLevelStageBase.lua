---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/01/13 10:58
--- Describe: 关卡逻辑阶段基类
---

---@class BattleLevelStageBase : table
BattleLevelStageBase = class(nil, "BattleLevelStageBase")
function BattleLevelStageBase:ctor()
end
------------------------------------------------------------------------------------------------------------------------
---@param _battleStageManager BattleLevelStageManager
---@param _stageIndex number
function BattleLevelStageBase:__Init(_battleStageManager, _stageIndex)
    ---@type BattleLevelStageManager
    self.battleStageManager = _battleStageManager
    self.battleId = self.battleStageManager.levelManager.battleId
    self.battleRoom = self.battleStageManager.levelManager.battleRoom
    ---@type number 超时时间(ms)
    self.timeOut = BattleLevel_Define_StageEnum.TimeOut(self.battleRoom, _stageIndex)
    ---@type number 阶段是否超时
    self.stageTimeOut = false
    ---@type number 阶段index
    self.stageIndex = _stageIndex
    ---@type number 运行时间(s)
    self.runTime = 0
    ---@type boolean 执行房间消息
    self.runRoomMessage = true
    ---@type boolean 执行房间逻辑
    self.runRoomLogic = true
    ---@type boolean 执行玩家消息
    self.runPlayerMessage = true
    ---@type boolean 执行单位逻辑
    self.runUnitLogic = true
    ---@type boolean 触发事件
    self.fireEvent = true
    ---@type boolean 广播输出消息
    self.broadCastOutputData = true
end

---@param _deltaTime number
---@param _frameId number
function BattleLevelStageBase:__OnUpdate(_deltaTime, _frameId)
    -- 更新阶段运行时间
    if not self.battleRoom:CheckPauseLevelTime() then
        self.runTime = self.runTime + _deltaTime
    end
    ----------------------------------------------------------------------------------------------------
    -- 任何暂停都必须执行1,2步的房间逻辑，才能处理暂停的恢复逻辑
    ----------------------------------------------------------------------------------------------------
    -- 1.执行房间消息
    if self.runRoomMessage then
        self.battleRoom:RunRoomMessage()
    end
    -- 2.执行房间逻辑
    if self.runRoomLogic then
        self.battleRoom:RunRoomLogic(_deltaTime, _frameId)
    end
    ----------------------------------------------------------------------------------------------------
    if not self.battleRoom:CheckPauseAllLevel() or not self.battleRoom:CheckPauseLevelNormalLogic() then
        -- 3.执行玩家消息
        if self.runPlayerMessage then
            self.battleRoom:RunPlayerMessage();
        end
        -- 4.执行单位逻辑
        if self.runUnitLogic then
            self.battleRoom:RunUnitLogic(_deltaTime, _frameId);
        end
        -- 5.触发事件
        if self.fireEvent then
            self.battleRoom:FireEvent(_deltaTime, _frameId);
        end
        -- 6.广播输出消息
        if self.broadCastOutputData then
            self.battleRoom:BroadCastOutputData(_deltaTime, _frameId);
        end
        -- 7.阶段超时结束判断
        if self.battleStageManager.driveStage and self.timeOut > 0 then
            if not self.stageTimeOut and self.runTime * 1000 >= self.timeOut then
                -- 阶段超时
                self:OnStageTimeOut()
            end
        end
    end
end

function BattleLevelStageBase:__OnStageTimeOut()
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(BattleLevel_Define.LogLevel, "BattleLevel", self.__cname, "OnStageTimeOut", "TimeOut", self.timeOut)
    end
    self.stageTimeOut = true

    if self.battleStageManager.driveStage and not self.battleRoom.battleLevelManager.serverChangingStage
            and self.battleStageManager.curStageEnum == self.stageIndex then
        -- 阶段已经切换的就不要重复切换了
        -- 服务端核心广播切换
        local nextStageEnum = self.battleStageManager.curStageEnum + 1;

        if CheckLogLevel(LogLevel.log) then
            LogTools.LogByLevel(BattleLevel_Define.LogLevel, "BattleLevel", self.__cname, "CurStage", self.stageIndex, "GoTo", "NextStage", nextStageEnum)
        end
        self.battleRoom.outputDataSource:BattleLevelGoToStage(nextStageEnum, self.battleStageManager.curStageEnum)
    end
end

function BattleLevelStageBase:__OnEnter()
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(BattleLevel_Define.LogLevel, "BattleLevel", self.__cname, "OnEnter", "TimeOut", self.timeOut)
    end

    ---@type number 运行开始时间(ms)
    self.runStartTime = TimeUtils.battleNow(self.battleId)

    if self.battleStageManager.driveStage then
        self.battleRoom.outputDataSource:UpdateBattleLevelStage(self.battleStageManager.curStageEnum)
    end
end

function BattleLevelStageBase:__OnPause()
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(BattleLevel_Define.LogLevel, "BattleLevel", self.__cname, "OnPause")
    end
end

function BattleLevelStageBase:__OnResume()
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(BattleLevel_Define.LogLevel, "BattleLevel", self.__cname, "OnResume")
    end
end

function BattleLevelStageBase:__OnExit()
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(BattleLevel_Define.LogLevel, "BattleLevel", self.__cname, "OnExit", "runTime", self.runTime)
    end

    -- 清空阶段玩家确认table
    self.battleStageManager.levelManager:ClearConfirmPlayers()
end

function BattleLevelStageBase:__OnPlayerDisconnect(_playerId)
end

function BattleLevelStageBase:__OnPlayerReconnect(_playerId)
end

function BattleLevelStageBase:__OnPlayerLeave(_playerId)
end

function BattleLevelStageBase:__OnPlayerEnter(_playerId)
end

function BattleLevelStageBase:__StageTrustClient()
    return false
end

function BattleLevelStageBase:__Clear()
    self.battleStageManager = nil
    self.stageTimeOut = nil
end
------------------------------------------------------------------------------------------------------------------------

-- 初始阶段
---@public
---@param _battleStageManager BattleLevelStageManager
---@param _stageIndex number
function BattleLevelStageBase:Init(_battleStageManager, _stageIndex)
    self:__Init(_battleStageManager, _stageIndex)
end

-- 阶段驱动
---@public
---@param _deltaTime number
---@param _frameId number
function BattleLevelStageBase:OnUpdate(_deltaTime, _frameId)
    self:__OnUpdate(_deltaTime, _frameId)
end

-- 阶段超时
---@public
function BattleLevelStageBase:OnStageTimeOut()
    self:__OnStageTimeOut()
end

-- 进入阶段
---@public
function BattleLevelStageBase:OnEnter()
    self:__OnEnter()
end

-- 阶段暂停
---@public
function BattleLevelStageBase:OnPause()
    self:__OnPause()
end

-- 阶段恢复
---@public
function BattleLevelStageBase:OnResume()
    self:__OnResume()
end

-- 退出阶段
---@public
function BattleLevelStageBase:OnExit()
    self:__OnExit()
end

-- 玩家掉线
---@public
---@param _playerId number 玩家Id
function BattleLevelStageBase:OnPlayerDisconnect(_playerId)
    self:__OnPlayerDisconnect(_playerId);
end

-- 玩家重连
---@public
---@param _playerId number 玩家Id
function BattleLevelStageBase:OnPlayerReconnect(_playerId)
    self:__OnPlayerReconnect(_playerId);
end

-- 玩家离开房间
---@public
---@param _playerId number 玩家Id
function BattleLevelStageBase:OnPlayerLeave(_playerId)
    self:__OnPlayerLeave(_playerId);
end

-- 玩家进入战斗房间
---@public
---@param _playerId number 玩家Id
function BattleLevelStageBase:OnPlayerEnter(_playerId)
    self:__OnPlayerEnter(_playerId);
end

---信任客户端的阶段
---@public
---@return boolean
function BattleLevelStageBase:StageTrustClient()
    return self:__StageTrustClient()
end

--- 获取运行时间(s)
---@return number
function BattleLevelStageBase:GetRunTimeSecond()
    return self.runTime
end

---修改阶段限制时间（目前仅Run阶段有用）
---@public
---@param _changeTimeSec number 修改时间
---@return number 限制时间
function BattleLevelStageBase:ChangeTimeLimit(_changeTimeSec)
    return 0
end

---是否可进入阶段
---@public
---@param _toStageEnum number 阶段
---@return boolean 是否可进入
function BattleLevelStageBase:CanEnter(_toStageEnum)
    return BattleLevel_Define_StageEnum.CanEnter(self.stageIndex, _toStageEnum)
end

---清空阶段
function BattleLevelStageBase:Clear()
    self.timeOut = nil
    self:__Clear()
end

return BattleLevelStageBase
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/2/14 16:13

require "Lib/class"
require "Battle/Logic/Room/BattleObject/ActionState/ActionState"

---@class DeadActionState : ActionState
---@field battleRoom BattleRoom 战斗
---@field stateParam StateParameter 状态参数配置
---@field unitType number 单位类型
DeadActionState = class(ActionState, 'DeadActionState');

---@param _battleId number 战斗id
---@param _stateParamId number 状态参数配置id
---@param _unitType number 单位类型
function DeadActionState:ctor(_battleId, _stateParamId, _unitType)
	self.battleRoom = GetBattleRoom(_battleId)
	self.stateParam = self.battleRoom.inputDataSource:GetDict("StateParameter", _stateParamId);
    self.unitType = _unitType;
end

-- 
function DeadActionState:Init(_deadType)
	self.__deadType = _deadType
end

-- 切换行为,判断行为的参数正确性
---@param _actionStateManager ActionStateManage 行为管理器
---@return boolean 是否可进入行为
function DeadActionState:EnterAction(_actionStateManager)
	--LogTools.LogByLevel(LogLevel.log, "DeadActionState", "EnterAction", "netId", _actionStateManager:GetUnit():GetNetId(), "frame", LOOPER.GetFrameId())
    self.triggerEvent = true;
    return true, self.__deadType
end

-- 执行行为
---@param _actionStateManager ActionStateManage 行为管理器
---@param _dt number 更新时间
---@param _netId number 单位id
---@param _objId number 单位对应实体id
function DeadActionState:DoAction(_actionStateManager, _dt, _netId,_objId)
	--LogTools.LogByLevel(LogLevel.log, "DeadActionState:DoAction", "_netId", _netId, "frame", LOOPER.GetFrameId())

	local battleRoom = GetBattleRoom(_actionStateManager.battleId)
	local _unit = battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return end

	if _unit:CheckUnitType(BattleUnitType.Monster) and not battleRoom:IsBattleOver() then
		-- 记录最后一只击杀怪物id
		local _checkLastMonsterLevelUnitIds = battleRoom.battleLevelManager.overConditionManager.checkLastMonsterLevelUnitIds
		if _checkLastMonsterLevelUnitIds then
			for _, _levelUnitId in pairs(_checkLastMonsterLevelUnitIds) do
				if _unit:GetLevelUnitId() == _levelUnitId then
					battleRoom.battleLevelManager.lastKillMonsterNetId = _unit:GetNetId()
					--LogTools.LogByLevel(LogLevel.log, "CheckDead", "最后一个死亡的怪1", _unit:GetNetId(), _unit:GetDataInstanceXls().id, _unit:GetLevelUnitId(), dumpTableEx(battleRoom.battleLevelManager.overConditionManager.checkLastMonsterLevelUnitIds))
					break
				end
			end
		else
			--LogTools.LogByLevel(LogLevel.log, "CheckDead", "最后一个死亡的怪2", _unit:GetNetId(), _unit:GetDataInstanceXls().id, _unit:GetLevelUnitId(), dumpTableEx(battleRoom.battleLevelManager.overConditionManager.checkLastMonsterLevelUnitIds))
			battleRoom.battleLevelManager.lastKillMonsterNetId = _unit:GetNetId()
		end
	end

	if self.triggerEvent then
		--battleRoom.battleLogicEventService:OnTriggerMonsterDeadEvent(_netId);
		battleRoom.battleLogicEventService:OnTriggerBattleUnitDeadEvent(_netId)
		-- 单位死亡事件
		battleRoom.battleLogicEventService:OnTriggerLevelUnitDeadEvent(_unit:GetLevelUnitId(), _unit:GetUnitType(), _unit:GetNetId())
		-- 关卡管理死亡
		battleRoom.battleLevelManager.levelUnitManager:OnLevelUnitDead(_unit)
		self.triggerEvent = false
	end

	-- 清理附属单位
	self.battleRoom.behaviorProcessor:RemoveManagedSubodinationOfUnit(BattleSubordinationDeadTrigType.UnitDead, _netId)

	if IsServer() then
		local _BattleUnitFieldInfo = {}
		local _BattleUnitDead = {}
		_BattleUnitDead.netId = _unit:GetNetId()
		_BattleUnitDead.objectId = _unit:GetCurrentHeroObjectId()
		_BattleUnitDead.deadType = self.__deadType
		_BattleUnitFieldInfo.unitDeadInfo = _BattleUnitDead
		local _BattleFieldData = {}
		_BattleFieldData.unitInfo = _BattleUnitFieldInfo
		self.battleRoom.outputDataSource:AddBattleFieldData(_BattleFieldData)
	end
	_unit:SetDead(self.__deadType)

	--self.battleRoom.battleUnitManager:OnUnitDeadS2C(_netId, self.__deadType)
end

-- 退出行为
---@param _actionStateManager ActionStateManage 行为管理器
---@param _isBreak boolean 是否为打断退出
---@param _isActive boolean 是否为主动打断
function DeadActionState:ExitAction(_actionStateManager,_isBreak,_isActive)

end

-- 是否为主动状态
---@return boolean 是否为主动状态
function DeadActionState:IsActive()
	return false;
end

-- 行为状态Id
---@return number 行为状态Id 参照stateSwitchRule表
function DeadActionState:GetId()
    return 11;
end

---获得状态冲突表
---@return StateSwitchRule
function DeadActionState:GetSwitchRule()
	return self.battleRoom.inputDataSource:GetDict("StateSwitchRule",self:GetId());
end

return DeadActionState;
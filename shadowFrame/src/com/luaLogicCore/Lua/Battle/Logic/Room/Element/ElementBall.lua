---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hejincheng.
--- DateTime: 2022/3/23 11:22

require "Lib/class"

---@class ElementBall : table
---@field id number 元素球id
---@field maxRadius number 扩展半径
---@field maxDistance number 最大传导距离
---@field eachMaxDistance number 单次最大传导距离
---@field spreadTime number 传导时间
---@field maxCount number 最大传导次数
---@field initTime number 元素球初始时间
---@field curBattleUnit BattleUnitBase 元素球当前所在单位
---@field castUnit BattleUnitBase 释放者
---@field buffGroupIds number buff id
---@field customParam table[] buff参数
---@field targetBattleUnit BattleUnitBase 元素球传导目标单位
---@field repeatSpread boolean 是否可重复传导
ElementBall = class(nil, 'ElementBall');

local ElementBallInActiveReason = {
    NEXT_TARGET_DEAD = "传递目标死亡",
    CUR_TARGET_DEAD = "当前目标死亡",
    SELECT_EMPTY_TARGETS = "没有找到传递目标",
}

---@protected
---@param _repeatSpread boolean 是否可重复传导
---@param _battleUnit BattleUnitBase
---@param _castUnit BattleUnitBase
---@param _buffGroupIds number buff id
---@param _behindParam table BuffAndActionTemplate.behindParam
---@param _maxRadius number
---@param _eachMaxDistance number
---@param _maxDistance number
---@param _spreadTime number
---@param _maxCount number
---@param _effectIdIndex number
function ElementBall:__Init(_repeatSpread, _battleUnit, _castUnit, _buffGroupIds, _generateInfo, _behindParam, _maxRadius, _eachMaxDistance, _maxDistance, _spreadTime, _maxCount, _effectIdIndex)
    self.battleId = _battleUnit.battleId
    self.battleRoom = GetBattleRoom(self.battleId)

    -- 特效id
    ---@type BattleDefault
    local _effectConfig = self.battleRoom.inputDataSource:GetDict("BattleDefault", _effectIdIndex)
    local _effectId = 0
    if _effectConfig then
        _effectId = _effectConfig.value
    else
        if CheckLogLevel(LogLevel.logErr) then
            LogTools.LogByLevel(LogLevel.logErr, "ElementBall", "BattleDefault", _effectIdIndex, "effectId nil")
        end
    end
    self.effectId = _effectId
    --是否可重复传导
    self.repeatSpread = _repeatSpread

    self.initTime = TimeUtils.battleNow(self.battleId)
    self.castUnit = _castUnit
    self.castUnitBattleObject = _castUnit:GetCurrentHeroObject()

    ---@type BattleUnitCom_Camp
    local comCamp = self.castUnit:GetComponent(BattleUnitComponentType.Camp)
    ---@type number
    self.castFirstCamp = comCamp:GetFirstCamp()

    self.fromObjId = 0
    self.curBattleUnit = _battleUnit
    self.targetBattleUnit = nil
    self.reachedBattleUnits = {}
    -- 先把自己加进来
    self.reachedBattleUnits[tostring(self.curBattleUnit:GetNetId())] = self.curBattleUnit:GetNetId()

    self.buffGroupIds = _buffGroupIds
    self.behindParam = _behindParam
    self.generateInfo = _generateInfo

    self.maxRadius = _maxRadius
    if not self.maxRadius then
        self.maxRadius = 0
    end

    self.eachMaxDistance = _eachMaxDistance
    if not self.eachMaxDistance then
        self.eachMaxDistance = 0
    end

    self.maxDistance = _maxDistance
    if not self.maxDistance then
        self.maxDistance = 0
    end

    self.spreadTime = _spreadTime
    if not self.spreadTime then
        self.spreadTime = 0
    end

    self.maxCount = _maxCount
    if not self.maxCount then
        self.maxCount = 0
    end

    ---@type number id
    self.id = self.battleRoom.idCreator:GetAndIncreaseLightningBallId()
    ---@type Vector3 起始点
    self.initPosition = _battleUnit:GetActionManager().position
    ---@type number 当前传导距离
    self.curDistance = 0
    ---@type number 当前传导次数
    self.curCount = 0

    ---@type table<number,BattleUnitBase> 已传导的目标
    self.spreadUnits = {}

    ---@type boolean 闪电激活
    self.active = true
end

-- 寻找下一个目标
-- 默认以最近距离筛选目标
---@protected
---@return BattleUnitBase 筛选出来的目标
function ElementBall:__SelectNextTarget()
    ---@type BattleUnitBase
    local minDistanceTarget
    ---@type number
    local minDistance

    if not self.curBattleUnit then
        return
    end

    local curPosition = self.curBattleUnit:GetActionManager().position

    -- 筛选出符合条件的最近的目标
    for _, _campType in pairs(BattleUnitCampType) do
        if BattleUnitCom_Camp.CheckCampHurtable(self.castFirstCamp, _campType) then
            -- 可攻击阵营
            local _unitList = self.battleRoom.battleUnitManager:GetUnitListByCampType(_campType, true)
            for _, _unit in pairs(_unitList) do
                if _unit then
                    ---@type BattleUnitCom_Subordination
                    local _subordinationCom = _unit:GetComponent(BattleUnitComponentType.Subordination)
                    if not _subordinationCom or _subordinationCom:GetManagedTypeObjNum(BattleObjectType.Shield) == 0 then
                        -- 有护罩的单位不能被选中
                        ---@type number 距离
                        local _targetDistance = Vector3.Distance(_unit:GetActionManager().position, curPosition)
                        if self.curBattleUnit:GetNetId() ~= _unit:GetNetId() and self:__CheckTargetCondition(_unit, _targetDistance) then
                            if not minDistanceTarget or _targetDistance < minDistance then
                                minDistanceTarget = _unit
                                minDistance = _targetDistance
                            end
                        end
                    end
                end
            end
        end
    end
    return minDistanceTarget
end

---@protected
---@param _targetUnit BattleUnitBase 检查目标是否符合传导条件
---@param _targetDistance number 距离
---@return boolean 是否可以传导
function ElementBall:__CheckTargetCondition(_targetUnit, _targetDistance)
    ---@type string
    local _targetObjectLog
    if CheckLogLevel(LogLevel.log) and LogTools.ElementBallLog then
        _targetObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(_targetUnit:GetUnitType()) .. "][" .. _targetUnit:GetNetId() .. "][" .. _targetUnit:GetCurrentHeroObjectId() .. "][" .. tostring(_targetUnit:GetCurrentHeroObject():GetDicId()) .. "]"
    end
    --1.目标是否可以被瞄准
    if not _targetUnit:GetCurrentHeroObject():CheckCanBeAimed() then
        if CheckLogLevel(LogLevel.log) and LogTools.ElementBallLog then
            LogTools.LogByLevel(LogLevel.logErr, "元素", self:GetElementBallLogName() .. "[" .. tostring(self.id) .. "]", "目标" .. _targetObjectLog .. "条件检查", "目标不可瞄准")
        end
        return false
    end
    --2.目标是否已被传导
    if not self.repeatSpread and self.reachedBattleUnits[tostring(_targetUnit:GetNetId())] then
        if CheckLogLevel(LogLevel.log) and LogTools.ElementBallLog then
            LogTools.LogByLevel(LogLevel.logErr, "元素", self:GetElementBallLogName() .. "[" .. tostring(self.id) .. "]", "目标" .. _targetObjectLog .. "条件检查", "目标已经被传导")
        end
        return false
    end
    local _curRadius = Vector3.Distance(_targetUnit:GetActionManager().position, self.initPosition)
    --3.传导可扩散半径
    if _curRadius > self.maxRadius then
        if CheckLogLevel(LogLevel.log) and LogTools.ElementBallLog then
            LogTools.LogByLevel(LogLevel.logErr, "元素", self:GetElementBallLogName() .. "[" .. tostring(self.id) .. "]", "目标" .. _targetObjectLog .. "条件检查", "当前扩散半径[" .. tostring(_curRadius) .. "] > 最大扩散半径[" .. tostring(self.maxRadius) .. "]")
        end
        return false
    end
    --4.单次最大传导距离
    if self.eachMaxDistance > 0 and _targetDistance > self.eachMaxDistance then
        if CheckLogLevel(LogLevel.log) and LogTools.ElementBallLog then
            LogTools.LogByLevel(LogLevel.logErr, "元素", self:GetElementBallLogName() .. "[" .. tostring(self.id) .. "]", "目标" .. _targetObjectLog .. "条件检查", "目标距离[" .. tostring(_targetDistance) .. "] > 单次最大传导距离[" .. tostring(self.eachMaxDistance) .. "]")
        end
        return false
    end
    --5.最大传导距离
    if self.maxDistance > 0 and _targetDistance + self.curDistance > self.maxDistance then
        if CheckLogLevel(LogLevel.log) and LogTools.ElementBallLog then
            LogTools.LogByLevel(LogLevel.logErr, "元素", self:GetElementBallLogName() .. "[" .. tostring(self.id) .. "]", "目标" .. _targetObjectLog .. "条件检查", "当前传导距离[" .. tostring(self.curDistance) .. "] + 目标距离[" .. tostring(_targetDistance) .. "] > 最大传导距离[" .. tostring(self.maxDistance) .. "]")
        end
        return false
    end
    --6.最大传导次数
    if self.curCount >= self.maxCount then
        if CheckLogLevel(LogLevel.log) and LogTools.ElementBallLog then
            LogTools.LogByLevel(LogLevel.logErr, "元素", self:GetElementBallLogName() .. "[" .. tostring(self.id) .. "]", "目标" .. _targetObjectLog .. "条件检查", "当前传导次数[" .. tostring(self.curCount) .. "] 达到最大传导次数[" .. tostring(self.maxCount) .. "]")
        end
        return false
    end
    return true
end

---@protected
function ElementBall:__OnUpdate()
    if self.reachTargetTime and self.reachTargetTime > 0 and TimeUtils.battleNow(self.battleId) >= self.reachTargetTime then
        self:__OnReachTarget()
    end
end

--到达传递目标
---@public
function ElementBall:__OnReachTarget() 
    if not self.targetBattleUnit or not self.targetBattleUnit:CheckAlive() then
        -- 目标死了，不传了
        self:__SetElementBallInActive(ElementBallInActiveReason.NEXT_TARGET_DEAD)
        return
    end
    -- 记录
    self:__RecordReach()
    -- 元素球生效
    self:ElementBallEffect()
    -- 传导到目标
    self:OnSpreadToUnit()
    -- 继续传导
    self:SpreadElementBall()
end

-- 记录传导数据
---@protected
---@param _targetUnit BattleUnitBase
function ElementBall:__RecordSpread(_targetUnit)
    self.fromPosition = self.curBattleUnit:GetActionManager().position
    self.fromObjId = self.curBattleUnit:GetCurrentHeroObjectId()
    self.targetBattleUnit = _targetUnit

    local _spreadTime = self:__GetSpreadTime()
    ---@type number 传导到达时间
    self.reachTargetTime = TimeUtils.battleNow(self.battleId) + _spreadTime

    if LogTools.ElementBallLog and CheckLogLevel(LogLevel.log) then
        local _curBattleUnitLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(self.curBattleUnit:GetUnitType()) .. "][" .. self.curBattleUnit:GetNetId() .. "][" .. self.curBattleUnit:GetCurrentHeroObjectId() .. "][" .. tostring(self.curBattleUnit:GetCurrentHeroObject():GetDicId()) .. "]"
        local _targetObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(self.targetBattleUnit:GetUnitType()) .. "][" .. self.targetBattleUnit:GetNetId() .. "][" .. self.targetBattleUnit:GetCurrentHeroObjectId() .. "][" .. tostring(self.targetBattleUnit:GetCurrentHeroObject():GetDicId()) .. "]"
        LogTools.LogByLevel(LogLevel.log, "元素", self:GetElementBallLogName() .. "[" .. tostring(self.id) .. "]", "开始传导", _curBattleUnitLog .. " -> " .. _targetObjectLog, "传导时间:" .. tostring(_spreadTime) .. "ms")
    end
end

-- 获取传导速度
---@protected
function ElementBall:__GetSpreadTime()
    return self.spreadTime
end

-- 记录传导到达数据
---@protected
function ElementBall:__RecordReach()
    -- 重置目标
    local distance = 0
    if self.curBattleUnit:GetActionManager() and self.targetBattleUnit:GetActionManager() then
        distance = Vector3.Distance(self.curBattleUnit:GetActionManager().position, self.targetBattleUnit:GetActionManager().position)
    end
    self.curBattleUnit = self.targetBattleUnit
    self.targetBattleUnit = nil
    self.reachedBattleUnits[tostring(self.curBattleUnit:GetNetId())] = self.curBattleUnit:GetNetId()
    --传导次数
    self.curCount = self.curCount + 1
    --传导距离
    self.curDistance = self.curDistance + distance
    --重置开始传导时间
    self.reachTargetTime = 0

    if CheckLogLevel(LogLevel.log) and LogTools.ElementBallLog then
        local _curBattleUnitLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(self.curBattleUnit:GetUnitType()) .. "][" .. self.curBattleUnit:GetNetId() .. "][" .. self.curBattleUnit:GetCurrentHeroObjectId() .. "][" .. tostring(self.curBattleUnit:GetCurrentHeroObject():GetDicId()) .. "]"
        LogTools.LogByLevel(LogLevel.log, "元素", self:GetElementBallLogName() .. "[" .. tostring(self.id) .. "]", "传导到" .. _curBattleUnitLog, "传导次数", self.curCount, "传导距离", distance)
    end
end

---@protected
---@param _reason string 失效原因
function ElementBall:__SetElementBallInActive(_reason)
    self.active = false
    if CheckLogLevel(LogLevel.log) and LogTools.ElementBallLog then
        local _curBattleUnitLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(self.curBattleUnit:GetUnitType()) .. "][" .. self.curBattleUnit:GetNetId() .. "][" .. self.curBattleUnit:GetCurrentHeroObjectId() .. "][" .. tostring(self.curBattleUnit:GetCurrentHeroObject():GetDicId()) .. "]"
        LogTools.LogByLevel(LogLevel.log, "元素", self:GetElementBallLogName() .. "[" .. tostring(self.id) .. "]失效[" .. _reason .. "]", "最后传递到" .. _curBattleUnitLog, "传导次数", self.curCount)
    end
end

-- 元素球log名字
---@public
---@return string
function ElementBall:GetElementBallLogName()
    return "元素球"
end

------------------------------------------------------------------------------------------------------------------------

-- 元素球生效
---@public
function ElementBall:ElementBallEffect()
    -- 上buff
    local _battleObject = self.curBattleUnit:GetCurrentHeroObject()
    if not _battleObject then
        return
    end
    ---@type BattleObjCom_Buff
    local comBuff = _battleObject:GetComponent(BattleObjectComponentType.Buff)
    if not comBuff then
        return
    end
    local castObject = self.castUnitBattleObject
    if not self.castUnitBattleObject or not self.castUnitBattleObject:GetParentUnit():CheckAlive() then
        castObject = self.curBattleUnit:GetCurrentHeroObject()
        if CheckLogLevel(LogLevel.logErr) then
            LogTools.LogByLevel(LogLevel.logErr, "cast unit nil or dead, castUnit = targetUnit")
        end
    end
    -- 传参
    if not self.generateInfo then
        self.generateInfo = {}
    end

    ---添加的本体还没创建出ElementBall，不会有这个，第一次传导后的目标才会走这里
    local _findFixCnt = self.curCount
    self.generateInfo.elementBallCount = _findFixCnt
    local _eleSpreadHurtFix = self.behindParam[_findFixCnt + 8]
    if not _eleSpreadHurtFix then
        _eleSpreadHurtFix = self.behindParam[#self.behindParam]
    end
    self.generateInfo.eleBallSpreadHurtFix = _eleSpreadHurtFix
    if CheckLogLevel(LogLevel.log) and LogTools.ElementBallLog then
        LogTools.LogByLevel(LogLevel.log, "元素", self:GetElementBallLogName(), "ElementBall:ElementBallEffect", "self.generateInfo.elementBallCount", self.generateInfo.elementBallCount, "self.curCount", self.curCount, "self.generateInfo.eleBallSpreadHurtFix", self.generateInfo.eleBallSpreadHurtFix)
    end

    for _, buffGroupId in pairs(self.buffGroupIds) do
        local _buffTemplate = BattleBuffService:GenerateCastBuffTemplate(buffGroupId, castObject)
        _buffTemplate.generateStackInfo = {}
        TableUtil.Copy(self.generateInfo, _buffTemplate.generateStackInfo)
        comBuff:AddBattleBuff(_buffTemplate)
    end
end

-- 传导元素球
---@public
function ElementBall:SpreadElementBall()
    if not self.curBattleUnit then
        -- 找不到合适的传导目标，闪电消失
        self:__SetElementBallInActive(ElementBallInActiveReason.CUR_TARGET_DEAD)
        return
    end
    -- 选择目标
    local _targetUnit = self:__SelectNextTarget()
    if not _targetUnit then
        -- 找不到合适的传导目标，闪电消失
        self:__SetElementBallInActive(ElementBallInActiveReason.SELECT_EMPTY_TARGETS)
        return
    end

    self:__RecordSpread(_targetUnit)
    self:OnStartSpread()
end

-- 传导元素球
---@public
function ElementBall:OnStartSpread()
end

-- 传导到目标
---@public
function ElementBall:OnSpreadToUnit()
end

---@public
function ElementBall:OnUpdate()
    self:__OnUpdate()
end

return ElementBall;
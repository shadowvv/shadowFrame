---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hejincheng.
--- DateTime: 2022/8/1 11:56
--- 关卡目标manager

require "Lib/class"
require "Battle/Logic/Room/BattleLevel/LevelTarget/LevelTarget"

---@class LevelTargetManager : table
LevelTargetManager = class(nil, 'LevelTargetManager');

-- 关卡目标作用域
LevelTargetScope = {
    -- 作用域全局关卡
    Level = 0,
    -- 作用域玩家
    Player = 1
}

function LevelTargetManager:ctor(_battleId)
    ---@type number
    self.battleId = _battleId
    ---@type BattleRoom
    self.battleRoom = GetBattleRoom(self.battleId)
end

function LevelTargetManager:__Init()
    -----@type table<string, LevelTarget> 关卡目标事件映射
    self.levelTargetEventDic = {}
    -----@type table<string, table<string, LevelTarget>> 玩家目标事件映射
    self.playerTargetEventDic = {}
    --
    -----@type table<string, number[]> 目标事件映射
    self.levelEventIdTargetIdsDic = {}
    -----@type table<string, table<string, number[]>> 玩家事件映射
    self.playerEventIdTargetIdsDic = {}

    local _levelInstanceXls = self.battleRoom.battleLevelManager.levelConfigManager:GetLevelInstanceXls()
    local newLevelTitleId = _levelInstanceXls.newLevelTitle
    if newLevelTitleId > 0 then
        -- 关卡监听条件
        ---@type NewLevelTitle
        local _levelTitle = self.battleRoom.inputDataSource:GetDict("NewLevelTitle", _levelInstanceXls.newLevelTitle);
        if not _levelTitle then
            self.battleRoom.exceptionProcessor:OnBattleDataNil("NewLevelInstance[" .. tostring(_levelInstanceXls.id) .. "].newLevelTitle[" .. tostring(_levelInstanceXls.newLevelTitle) .. "] nil")
            return
        end
        self:AddListenEvent(1, _levelTitle.id, _levelTitle.levelTitleType1, _levelTitle.levelTitle1Value1, _levelTitle.levelTitle1Value2, _levelTitle.levelTitle1Value3)
        self:AddListenEvent(2, _levelTitle.id, _levelTitle.levelTitleType2, _levelTitle.levelTitle2Value1, _levelTitle.levelTitle2Value2, _levelTitle.levelTitle2Value3)
        self:AddListenEvent(3, _levelTitle.id, _levelTitle.levelTitleType3, _levelTitle.levelTitle3Value1, _levelTitle.levelTitle3Value2, _levelTitle.levelTitle3Value3)
    end
    self:__InitCustomData()
end

function LevelTargetManager:Init()
    self:__Init()
end


-- 初始自定义监听数据
---@protected
function LevelTargetManager:__InitCustomData()
end

function LevelTargetManager:__OnUpdate(_deltaTime, _frameId)
end

-- 条件触发
---@public
---@param _battleLogicEvent BattleLogicEventV2 事件
---@param _levelTargetIds number[] 条件ids
---@param _targetEventDic table<string, LevelTarget> 事件dic
---@param _uid number 玩家id
function LevelTargetManager:__OnTargetsTrigger(_battleLogicEvent, _levelTargetIds, _targetEventDic, _uid)
    -- 遍历所有监听这个事件的所有条件
    for i = #_levelTargetIds, 1, -1 do
        local _targetId = _levelTargetIds[i]
        local _levelTarget = _targetEventDic[tostring(_targetId)]
        if _levelTarget and not _levelTarget.finish then
            -- 添加进度
            local _curProgress, _maxProgress = _levelTarget:UpdateProgress(_battleLogicEvent, _uid)
            if _curProgress and _maxProgress then
                local _unitPlayers = _levelTarget:SelectCheckEventTarget(_uid, self.battleId)
                for _, _unitPlayer in pairs(_unitPlayers) do
                    -- 消息通知
                    local _battleUnitKeyData = {}
                    _battleUnitKeyData.netId = _unitPlayer:GetNetId()
                    _battleUnitKeyData.objId = _unitPlayer:GetCurrentHeroObjectId()
                    _battleUnitKeyData.levelTargetData = {}
                    _battleUnitKeyData.levelTargetData.id = _levelTarget.mainId
                    _battleUnitKeyData.levelTargetData.index = _levelTarget.id
                    _battleUnitKeyData.levelTargetData.curProgress = _curProgress
                    _battleUnitKeyData.levelTargetData.maxProgress = _maxProgress
                    self.battleRoom.outputDataSource:AddBattleUnitKeyData(_battleUnitKeyData)
                end

                if _levelTarget.finish then
                    -- 移除回调列表
                    table.remove(_levelTargetIds, i)
                end

                if CheckLogLevel(LogLevel.log) then
                    LogTools.LogByLevel(LogLevel.log, "LevelTargetManager", "OnEventTrigger",
                            "_levelTargetEvent.id", _levelTarget.id,
                            "_levelTargetEvent.type", _levelTarget.targetType:GetId(),
                            "_levelTarget.targetType.event", _levelTarget.targetType:GetEvent(),
                            tostring(_curProgress) .. "/" .. tostring(_maxProgress),
                            "_targetEvent.finish", _levelTarget.finish)
                end
            end
        end
    end
end

------------------------------------------------------------------------------------------------------------------------

-- 获取关卡的关卡目标数据
---@return table
function LevelTargetManager:GetLevelTargetDatas()
    local _levelTargetDatas = {}
    for _, _levelTarget in pairs(self.levelTargetEventDic) do
        if _levelTarget.maxProgress and _levelTarget.maxProgress > 0 then
            local levelTargetData = {}
            levelTargetData.id = _levelTarget.mainId
            levelTargetData.index = _levelTarget.id
            levelTargetData.curProgress = _levelTarget.curProgress
            levelTargetData.maxProgress = _levelTarget.maxProgress
            table.insert(levelTargetData, levelTargetData)
        end
    end
    return _levelTargetDatas
end

-- 获取玩家的关卡目标数据
---@return table
function LevelTargetManager:GetPlayerLevelTargetDatas(_uid)
    if not _uid then
        return
    end
    local _levelTargets = self.playerTargetEventDic[tostring(_uid)]
    if not _levelTargets then
        return
    end
    local _levelTargetDatas = {}
    for _, _levelTarget in pairs(self._levelTargets) do
        if _levelTarget.maxProgress and _levelTarget.maxProgress > 0 then
            local levelTargetData = {}
            levelTargetData.id = _levelTarget.mainId
            levelTargetData.index = _levelTarget.id
            levelTargetData.curProgress = _levelTarget.curProgress
            levelTargetData.maxProgress = _levelTarget.maxProgress
            table.insert(levelTargetData, levelTargetData)
        end
    end
    return _levelTargetDatas
end

-- 事件触发
---@param _battleLogicEvent BattleLogicEventV2
function LevelTargetManager:OnEventTrigger(_battleLogicEvent)
    local _eventType = _battleLogicEvent.eventType
    if not _eventType then
        return
    end

    ---@type number 玩家id
    local _uid = 0
    if _battleLogicEvent.netId then
        ---@type BattleUnit_Player
        local _unit = self.battleRoom.battleUnitManager:GetUnit(_battleLogicEvent.netId)
        if _unit and _unit:GetUnitType() == BattleUnitType.Player then
            _uid = _unit:GetPlayerId()
        end
    end

    -- 关卡全局条件dic
    local _levelTargetIds = self.levelEventIdTargetIdsDic[tostring(_eventType)]
    if _levelTargetIds then
        -- 关卡条件触发
        self:__OnTargetsTrigger(_battleLogicEvent, _levelTargetIds, self.levelTargetEventDic, _uid)
    end
    -- 玩家条件dic
    local _playerLevelTargetIds = self.playerEventIdTargetIdsDic[tostring(_uid)]
    if _playerLevelTargetIds then
        local _targetIds = _playerLevelTargetIds[tostring(_eventType)]
        if _targetIds then
            local _targetEventDic = self.playerTargetEventDic[tostring(_uid)]
            -- 玩家条件触发
            self:__OnTargetsTrigger(_battleLogicEvent, _targetIds, _targetEventDic, _uid)
        end
    end
end

-- 添加监听事件
---@public
---@param _index number
---@param _mainId number
---@param _targetIndex number
---@param _targetValue1 number
---@param _targetValue2 number
---@param _targetValue3 table
function LevelTargetManager:AddListenEvent(_index, _mainId, _targetIndex, _targetValue1, _targetValue2, _targetValue3)
    if not _targetIndex or _targetIndex == 0 then
        -- 没有配置目标
        return
    end
    local _levelTargetType = GetLevelTargetTypeById(_targetIndex)
    if not _levelTargetType then
        if CheckLogLevel(LogLevel.logErr) then
            LogTools.LogByLevel(LogLevel.logErr, "LevelTargetManager", "AddListenEvent", "_targetIndex", _targetIndex)
        end
        return
    end

    ---@type LevelTarget
    local _levelTarget = LevelTarget.New(_index, _mainId, _levelTargetType, _targetValue1, _targetValue2, _targetValue3)

    -- 关卡全局事件条件id映射
    if self:CheckTargetScope(_levelTarget.targetType, LevelTargetScope.Level) then
        self:__AddLevelListenEvent(_levelTarget)
    end
    -- 关卡玩家事件条件id映射
    if self:CheckTargetScope(_levelTarget.targetType, LevelTargetScope.Player) then
        self:__AddPlayerListenEvent(_levelTarget)
    end

    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "LevelTargetManager", "AddListenEvent", "_levelTarget.id", _levelTarget.id)
    end
end

---添加目标事件监听
---@protected
---@param _targetEvent LevelTarget 目标事件
function LevelTargetManager:__AddLevelListenEvent(_targetEvent)
    -- 条件事件dic
    self.levelTargetEventDic[tostring(_targetEvent.id)] = _targetEvent
    -- 事件条件dic
    local _targetIdsDic = self.levelEventIdTargetIdsDic[tostring(_targetEvent.eventType)]
    if not _targetIdsDic then
        self.levelEventIdTargetIdsDic[tostring(_targetEvent.eventType)] = {}
        _targetIdsDic = self.levelEventIdTargetIdsDic[tostring(_targetEvent.eventType)]
    end
    table.insert(_targetIdsDic, _targetEvent.id)
end

------------------------------------------------------------------------------------------------------------------------

---添加玩家事件监听
---@protected
---@param _levelTarget LevelTarget 条件事件
function LevelTargetManager:__AddPlayerListenEvent(_levelTarget)
    local _allPlayers = self.battleRoom.battleUnitManager:GetOriginalPlayerInfoManager():GetAllPlayer()
    if not _allPlayers or #_allPlayers > 0 then
        return
    end
    for _, _originPlayerInfo in pairs(_allPlayers) do
        local _uid = _originPlayerInfo:GetPlayerId()

        -- 条件事件dic
        self.playerTargetEventDic[tostring(_levelTarget.id)] = _levelTarget
        local _targetEventDic = self.playerTargetEventDic[tostring(_uid)]
        if not _targetEventDic then
            self.playerTargetEventDic[tostring(_uid)] = {}
            _targetEventDic = self.playerTargetEventDic[tostring(_uid)]
        end
        _targetEventDic[tostring(_levelTarget.id)] = _levelTarget

        -- 事件条件dic
        -- 取出玩家的事件集
        local _playerTargetIdsDic = self.playerEventIdTargetIdsDic[tostring(_uid)]
        if not _playerTargetIdsDic then
            self.playerEventIdTargetIdsDic[tostring(_uid)] = {}
            _playerTargetIdsDic = self.playerEventIdTargetIdsDic[tostring(_uid)]
        end
        -- 取出事件集
        local _targetIdsDic = _playerTargetIdsDic[tostring(_levelTarget.eventType)]
        if not _targetIdsDic then
            _playerTargetIdsDic[tostring(_levelTarget.eventType)] = {}
            _targetIdsDic = _playerTargetIdsDic[tostring(_levelTarget.eventType)]
        end
        table.insert(_targetIdsDic, _levelTarget.id)
    end
end

function LevelTargetManager:OnUpdate(_deltaTime, _frameId)
    self:__OnUpdate(_deltaTime, _frameId)
end

---@param _levelTargetType LevelTargetType
---@param _scope number 条件作用域
function LevelTargetManager:CheckTargetScope(_levelTargetType, _scope)
    return _levelTargetType:GetScope() == _scope
end

-- 清空
function LevelTargetManager:__Clear()
end

-- 清空
function LevelTargetManager:Clear()
    self:__Clear()
end

return LevelTargetManager;
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/2/17 10:41

require "Lib/class"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicEventV2"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicCommonEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicPressKeyEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicAnimationEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicMonsterSpawnEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicMonsterDeadEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicRaidTimeoutEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicLevelUnitDeadEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicLevelUnitCreateEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicUnitReachPointEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicUseSkillStartEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicUseSkillEndEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicUnitReachLastPointEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicBeDamageEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicAllKeyUnitDeadEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicProtectTargetUnitDeadEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicAllTypeUnitDeadEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicAllProtectTargetUnitDeadEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicKeyUnitDeadEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicBossUnitDeadEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicAllBossUnitDeadEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicBattleOverEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicBattleRunStartEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicElementReactEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicElementEffectEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicChangeElementEffectingTimeEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicChangeLeaderEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicObjectDeadEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicBattleUnitCreateEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicBattleUnitDeadEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicBossAnimationEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicElementAttachEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicElementAddEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicElementRemoveEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicWeaponEnergyCostEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicTriggerLevelConditionEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicTriggerTagValueChangeEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicTriggerLevelUnitEnterLevelUnitEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicTriggerBattleObjectHpChangeEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicBuffOverEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicCollectCoinEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicDestroyBulletEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicCollectSuccessEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicUnitTagChangeEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicChangeStateEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicSkillAddBuffEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicReloadEndEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicChangeWarriorStatusEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicHitEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicHealBuffEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicWeakPointBreakEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicPropChangeEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicAddBuffEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicCasterAddBuffEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicCasterBuffStackChangeEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicElementLightningBallEvent"
require "Battle/Logic/Room/BattleLogicEvent/BattleUnitCollideEvent"

---@class BattleLogicEventServiceV2 : table 事件服务管理器
---@field frameEvents BattleLogicEventV2[] 触发的事件
BattleLogicEventServiceV2 = class(nil, 'BattleLogicEventServiceV2');

function BattleLogicEventServiceV2:ctor(_battleId)
    self.battleId = _battleId
    self.battleRoom = GetBattleRoom(self.battleId)
    self.frameEvents = {};
end

---判断是否客户端触发
---@public
---@param _eventType number 事件类型
---@return boolean 是否客户端触发
function BattleLogicEventServiceV2:IsClientTrigger(_eventType)
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.COMMON_EVENT then
        return true;
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.ANIMATION_EVENT then
        return true;
    end
end

---触发事件
---@private
---@param _eventType number 事件类型
---@param _battleId number 战斗id
---@param _eventCompareParam table 事件参数
---@param _eventTriggerParam table 事件透传参数
---@param _netId number 事件产出单位Id
---@param _objectId number 事件产出物体Id
function BattleLogicEventServiceV2:OnTriggerEvent(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId)
    local event = self:GenerateEvent(_eventType,_eventCompareParam,_eventTriggerParam,_netId,_objectId);
    if not event then
        return;
    end

    local removeList = {};
    for i, v in pairs(self.frameEvents) do
        if v:CheckMutexEvent(event) then
            table.insert(removeList,i);
        end
    end
    for i, v in pairs(removeList) do
        self.frameEvents[v] = nil;
    end
    table.insert(self.frameEvents, event);
end

---生成事件
---@param _eventType number 事件类型
---@param _battleId number 战斗id
---@param _eventCompareParam table 事件参数
---@param _eventTriggerParam table 事件透传参数
---@param _netId number 事件产出单位Id
---@param _objectId number 事件产出物体Id
---@return BattleLogicEventV2 事件
function BattleLogicEventServiceV2:GenerateEvent(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId)
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.COMMON_EVENT then
        return BattleLogicCommonEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.KEY_EVENT then
        return BattleLogicPressKeyEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.ANIMATION_EVENT then
        return BattleLogicAnimationEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.MONSTER_SPAWN_EVENT then
        return BattleLogicMonsterSpawnEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.MONSTER_DEAD_EVENT then
        return BattleLogicMonsterDeadEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.COUNT_DOWN_TIME_OUT then
        return BattleLogicRaidTimeoutEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.LEVEL_UNIT_DEAD then
        return BattleLogicLevelUnitDeadEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.LEVEL_UNIT_CREATE then
        return BattleLogicLevelUnitCreateEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.UNIT_REACH_POINT then
        return BattleLogicUnitReachPointEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.USE_SKILL_START then
        return BattleLogicUseSkillStartEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.USE_SKILL_END then
        return BattleLogicUseSkillEndEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.UNIT_REACH_LAST_POINT then
        return BattleLogicUnitReachLastPointEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.BE_DAMAGED then
        return BattleLogicBeDamageEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.ALL_KEY_UNIT_DEAD then
        return BattleLogicAllKeyUnitDeadEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.PROTECT_TARGET_UNIT_DEAD then
        return BattleLogicProtectTargetUnitDeadEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.ALL_TYPE_UNIT_DEAD then
        return BattleLogicAllTypeUnitDeadEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.ALL_PROTECT_TARGET_UNIT_DEAD then
        return BattleLogicAllProtectTargetUnitDeadEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.KEY_UNIT_DEAD then
        return BattleLogicKeyUnitDeadEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.BOSS_UNIT_DEAD then
        return BattleLogicBossUnitDeadEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.ALL_BOSS_UNIT_DEAD then
        return BattleLogicAllBossUnitDeadEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.BATTLE_OVER then
        return BattleLogicBattleOverEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.BATTLE_RUN_START then
        return BattleLogicBattleRunStartEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.ELEMENT_REACT then
        return BattleLogicElementReactEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.ELEMENT_EFFECT then
        return BattleLogicElementEffectEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.CHANGE_ELEMENT_EFFECT_TIME then
        return BattleLogicChangeElementEffectingTimeEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.CHANGE_LEADER then
        return BattleLogicChangeLeaderEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.OBJECT_DEAD then
        return BattleLogicObjectDeadEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.BATTLE_UNIT_CREATE then
        return BattleLogicBattleUnitCreateEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.BATTLE_UNIT_DEAD then
        return BattleLogicBattleUnitDeadEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.BOSS_ANIMATION then
        return BattleLogicBossAnimationEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.ELEMENT_ATTACH then
        return BattleLogicElementAttachEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.ELEMENT_ADD then
        return BattleLogicElementAddEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.ELEMENT_REMOVE then
        return BattleLogicElementRemoveEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.WEAPON_ENERGY_COST then
        return BattleLogicWeaponEnergyCostEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.TRIGGER_LEVEL_CONDITION then
        return BattleLogicTriggerLevelConditionEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.LEVEL_TAG_VALUE_CHANGE then
        return BattleLogicTriggerTagValueChangeEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.LEVEL_UNIT_ENTER_LEVEL_UNIT then
        return BattleLogicTriggerLevelUnitEnterLevelUnitEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.BATTLE_OBJECT_HP_CHANGE then
        return BattleLogicTriggerBattleObjectHpChangeEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.BUFF_OVER then
        return BattleLogicBuffOverEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.DESTROY_BULLET then
        return BattleLogicDestroyBulletEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.BATTLE_COLLECT_SUCCESS then
        return BattleLogicCollectSuccessEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.UNIT_TAG_VALUE_CHANGE then
        return BattleLogicUnitTagChangeEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.CHANGE_STATE then
        return BattleLogicChangeStateEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.SKILL_ADD_BUFF then
        return BattleLogicSkillAddBuffEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.RELOAD_END_EVENT then
        return BattleLogicReloadEndEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.CHANGE_WARRIOR_STATUS then
        return BattleLogicChangeWarriorStatusEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.HIT_TARGET then
        return BattleLogicHitEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.HEAL_TARGET then
        return BattleLogicHealBuffEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.WEAK_POINT_BREAK then
        return BattleLogicWeakPointBreakEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.PROP_CHANGE then
        return BattleLogicPropChangeEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.BUFF_ADD then
        return BattleLogicAddBuffEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.CASTER_BUFF_ADD then
        return BattleLogicCasterAddBuffEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.CASTER_BUFF_STACK_CHANGE then
        return BattleLogicCasterBuffStackChangeEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.COLLECT_COIN then
        return BattleLogicCollectCoinEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.ELEMENT_LIGHTNING_BALL then
        return BattleLogicElementLightningBallEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    if _eventType == BATTLE_LOGIC_EVENT_ENUM.UNIT_COLLIDE then
        return BattleUnitCollideEvent.New(_eventType, _eventCompareParam,_eventTriggerParam, _netId,_objectId,self.battleId);
    end
    return nil;
end

---检测事件触发
---@public
---@param _eventType number 事件类型
---@param _netId number 事件产出单位Id
---@param _objectId number 事件产出物体Id
---@param _eventCompareParam table 事件参数
---@return boolean 是否触发
function BattleLogicEventServiceV2:CheckEventTrigger(_eventType,_netId,_objectId,_eventCompareParam)
    for i, v in pairs(self.frameEvents) do
        if v.eventType == _eventType then
            if _netId == nil or _netId == v.netId then
                if _objectId == nil or _objectId == v.objectId then
                    if v:CheckEventTrigger(_eventCompareParam) then
                        return true;
                    end
                end
            end
        end
    end
    return false;
end

---事件回调
---@public
function BattleLogicEventServiceV2:FireEvent()
    for _, v in pairs(self.frameEvents) do
        v:FireEvent();
        if v.eventType ~= BATTLE_LOGIC_EVENT_ENUM.BATTLE_OVER then
            -- 关卡结束事件特殊单独调用
            if v.survival == 0 then
                -- 关卡条件事件触发
                self.battleRoom.battleLevelManager.levelConditionManager:OnEventTrigger(v)
                -- 关卡目标事件触发
                self.battleRoom.battleLevelManager.levelTargetManager:OnEventTrigger(v)
                self.battleRoom.rogueUnitSkillService:OnTrigEvent(v)
            end
        else
            -- 关卡已结束，后续事件不用再执行（否则可能取BattleRoom报空）
            break
        end
    end
end

--- 清除事件
---@public
function BattleLogicEventServiceV2:ClearEvent()
    for i, v in pairs(self.frameEvents) do
        if v:CheckRemoveEvent() then
            self.frameEvents[i] = nil;
        end
    end
end

---触发切换角色
---@public
---@param _oldObjectId number 旧objectId
---@param _newObjectId number 新objectId
---@param _netId number 怪物NetId
function BattleLogicEventServiceV2:OnTriggerChangeLeaderEvent(_oldObjectId, _newObjectId, _netId)
    local compareParam = {};
    local triggerParam = {};
    triggerParam.oldObjectId = _oldObjectId
    triggerParam.newObjectId = _newObjectId
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.CHANGE_LEADER, compareParam, triggerParam,_netId);
end

---检测切换角色
---@public
---@param _netId number 怪物NetId
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckChangeLeaderEvent(_netId)
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.CHANGE_LEADER, _netId, nil);
end

---触发怪物死亡
---@public
---@param _netId number 怪物NetId
function BattleLogicEventServiceV2:OnTriggerMonsterDeadEvent(_netId)
    local compareParam = {};
    local triggerParam = {};
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.MONSTER_DEAD_EVENT,compareParam,triggerParam,_netId);
end

---检测怪物死亡
---@public
---@param _netId number 怪物NetId
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckMonsterDeadEvent(_netId)
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.MONSTER_DEAD_EVENT,_netId,nil);
end

---触发单位到达目标点
---@public
---@param _netId number 怪物NetId
function BattleLogicEventServiceV2:OnTriggerUnitReachPoint(_netId)
    local compareParam = {};
    local triggerParam = {};
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.UNIT_REACH_POINT,compareParam,triggerParam,_netId);
end

---检测单位到达目标点
---@public
---@param _netId number 怪物NetId
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckUnitReachPoint(_netId)
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.UNIT_REACH_POINT,_netId,nil);
end

---触发单位到达最终目标点
---@public
---@param _netId number 怪物NetId
function BattleLogicEventServiceV2:OnTriggerUnitReachLastPoint(_netId)
    local compareParam = {};
    local triggerParam = {};
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.UNIT_REACH_LAST_POINT,compareParam,triggerParam,_netId);
end

---检测单位到达最终目标点
---@public
---@param _netId number 怪物NetId
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckUnitReachLastPoint(_netId)
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.UNIT_REACH_LAST_POINT,_netId,nil);
end

---触发怪物出生
---@public
---@param _netId number 怪物NetId
function BattleLogicEventServiceV2:OnTriggerMonsterSpawnEvent(_netId)
    local compareParam = {};
    local triggerParam = {};
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.MONSTER_SPAWN_EVENT,compareParam,triggerParam,_netId);
end

---检测怪物出生
---@public
---@param _netId number 怪物NetId
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckMonsterSpawnEvent(_netId)
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.MONSTER_SPAWN_EVENT,_netId,nil,compareParam);
end

---触发按键事件
---@public
---@param _netId number 玩家netId
---@param _key number 按键Id
---@param _pressType boolean 按键类型
function BattleLogicEventServiceV2:OnTriggerKeyPressEvent(_netId,_key,_pressType)
    local compareParam = {};
    local triggerParam = {};
    compareParam.key = _key;
    compareParam.pressType = _pressType;
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.KEY_EVENT,compareParam,triggerParam,_netId);
end

---检测按键事件
---@public
---@param _netId number 玩家netId
---@param _key number 按键Id
---@param _pressType boolean 按键类型
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckKeyPressEvent(_netId,_key,_pressType)
    local compareParam = {};
    compareParam.key = _key;
    compareParam.pressType = _pressType;
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.KEY_EVENT,_netId,nil,compareParam);
end

---触发客户端事件
---@public
---@param _eventType number 事件类型
---@param _netId number 玩家netId
---@param _eventId number 事件Id
function BattleLogicEventServiceV2:OnTriggerClientEvent(_eventType,_netId,_eventId)
    local compareParam = {};
    local triggerParam = {};
    compareParam.eventId = tonumber(_eventId);
    self:OnTriggerEvent(_eventType,compareParam,triggerParam,_netId);
end

---检测客户端事件
---@public
---@param _eventType number 事件类型
---@param _netId number 玩家netId
---@param _eventId number 事件Id
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckClientEvent(_eventType,_netId,_eventId)
    local compareParam = {};
    compareParam.eventId = _eventId;
    return self:CheckEventTrigger(_eventType,_netId,nil,compareParam);
end

---触发按键事件
---@public
---@param _sourceNetId number 伤害来源NetId
---@param _sourceObjectId number 伤害来源ObjectId
---@param _targetNetId number 伤害目标netId
---@param _targetObjectId number 伤害目标objectId
---@param _targetType number 伤害目标类型
---@param _damageSourceId number 伤害类型Id
---@param _damageSourceType number 伤害来源类型
---@param _damage number 造成伤害
---@param _damageType number 伤害类型
---@param _isCritical boolean 是否暴击
---@param _targetDead boolean 目标是否死亡
---@param _targetOldHp number 扣血前血量
---@param _targetCurHp number 扣血后血量
---@param _elementId number 伤害的元素id
---@param _trigEvent boolean 是否触发后续事件（正昊新角色需求）
---@param _hurtDisReduceEnum number 伤害距离衰减类型，对应 HurtDisReduceEnum 定义的值
---@param _isWeakness boolean 是否命中弱点
---@param _curAttachEleId number 当前已附着的元素类型ID（默认为BattleElementTypeEnum.PHYSIC:GetId()）
---@param _isAccumulatedAttack boolean 是否蓄力攻击
function BattleLogicEventServiceV2:OnTriggerBeDamageEvent(_sourceNetId, _sourceObjectId, _targetNetId, _targetObjectId, _targetType, _damageSourceId, _damageSourceType, _damage, _damageType, _isCritical, _targetDead, _targetOldHp, _targetCurHp, _elementId, _trigEvent, _hurtDisReduceEnum, _isWeakness, _curAttachEleId, _isAccumulatedAttack)
    local compareParam = {};
    local triggerParam = {};
    triggerParam.sourceNetId = _sourceNetId;
    triggerParam.sourceObjectId = _sourceObjectId;
    triggerParam.targetNetId = _targetNetId;
    triggerParam.targetObjectId = _targetObjectId;
    triggerParam.targetType = _targetType;
    triggerParam.damageSourceId = _damageSourceId;
    triggerParam.damageSourceType = _damageSourceType;
    triggerParam.damage = _damage;
    triggerParam.damageType = _damageType;
    triggerParam.isCritical = _isCritical;
    triggerParam.targetDead = _targetDead;
    triggerParam.targetOldHp = _targetOldHp;
    triggerParam.targetCurHp = _targetCurHp;
    triggerParam.elementId = _elementId;
    triggerParam.trigEvent = _trigEvent
    triggerParam.hurtDisReduceEnum = _hurtDisReduceEnum
    triggerParam.isWeakness = _isWeakness
    triggerParam.curAttachEleId = _curAttachEleId
    triggerParam.isAccumulatedAttack = _isAccumulatedAttack

    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.BE_DAMAGED,compareParam,triggerParam);
end

---触发按键事件
---@public
---@param _sourceNetId number 伤害来源NetId
---@param _sourceObjectId number 伤害来源ObjectId
---@param _targetNetId number 伤害目标netId
---@param _targetObjectId number 伤害目标objectId
---@param _targetType number 伤害目标类型
---@param _damageSourceId number 伤害类型Id
---@param _damageSourceType number 伤害来源类型
---@param _damage number 造成伤害
---@param _damageType number 伤害类型
---@param _isCritical boolean 是否暴击
---@param _targetDead boolean 目标是否死亡
---@param _targetOldHp number 扣血前血量
---@param _targetCurHp number 扣血后血量
---@param _elementId number 伤害的元素id
---@param _trigEvent boolean 是否触发后续事件（正昊新角色需求）
---@param _hurtDisReduceEnum number 伤害距离衰减类型，对应 HurtDisReduceEnum 定义的值
---@param _isWeakness boolean 是否命中弱点
---@param _curAttachEleId number 当前已附着的元素类型ID（默认为BattleElementTypeEnum.PHYSIC:GetId()）
---@param _isAccumulatedAttack boolean 是否蓄力攻击
---@param _skillBarrageId number 技能弹幕id
---@param _originalHeroSkillId number 原始技能id
function BattleLogicEventServiceV2:OnTriggerHitTargetEvent(_sourceNetId, _sourceObjectId, _targetNetId, _targetObjectId, _targetType, _damageSourceId, _damageSourceType, _damage, _damageType, _isCritical, _targetDead, _targetOldHp, _targetCurHp, _elementId, _trigEvent, _hurtDisReduceEnum, _isWeakness, _curAttachEleId, _isAccumulatedAttack,_skillBarrageId,_originalHeroSkillId)
    local compareParam = {};
    local triggerParam = {};
    triggerParam.sourceNetId = _sourceNetId;
    triggerParam.sourceObjectId = _sourceObjectId;
    triggerParam.targetNetId = _targetNetId;
    triggerParam.targetObjectId = _targetObjectId;
    triggerParam.targetType = _targetType;
    triggerParam.damageSourceId = _damageSourceId;
    triggerParam.damageSourceType = _damageSourceType;
    triggerParam.damage = _damage;
    triggerParam.damageType = _damageType;
    triggerParam.isCritical = _isCritical;
    triggerParam.targetDead = _targetDead;
    triggerParam.targetOldHp = _targetOldHp;
    triggerParam.targetCurHp = _targetCurHp;
    triggerParam.elementId = _elementId;
    triggerParam.trigEvent = _trigEvent
    triggerParam.hurtDisReduceEnum = _hurtDisReduceEnum
    triggerParam.isWeakness = _isWeakness
    triggerParam.curAttachEleId = _curAttachEleId
    triggerParam.isAccumulatedAttack = _isAccumulatedAttack
    triggerParam.skillBarrageId = _skillBarrageId
    triggerParam.originalHeroSkillId = _originalHeroSkillId

    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.HIT_TARGET,compareParam,triggerParam);
end

---触发元素反应事件
---@public
---@param _sourceNetId number 伤害来源NetId
---@param _sourceObjectId number 伤害来源ObjectId
---@param _targetNetId number 目标NetId
---@param _targetObjectId number 目标ObjectId
---@param _elementReactId number 元素反应Id
function BattleLogicEventServiceV2:OnTriggerElementReactEvent(_sourceNetId, _sourceObjectId, _targetNetId, _targetObjectId, _elementReactId)
    local compareParam = {};
    compareParam.elementReactId = _elementReactId;
    local triggerParam = {};
    triggerParam.sourceNetId = _sourceNetId;
    triggerParam.sourceObjectId = _sourceObjectId;
    triggerParam.targetNetId = _targetNetId;
    triggerParam.targetObjectId = _targetObjectId;

    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.ELEMENT_REACT, compareParam, triggerParam, nil, nil);
end

---触发元素效果事件
---@public
---@param _sourceNetId number 伤害来源NetId
---@param _sourceObjectId number 伤害来源ObjectId
---@param _targetNetId number 目标NetId
---@param _targetObjectId number 目标ObjectId
---@param _elementId number 元素Id
function BattleLogicEventServiceV2:OnTriggerElementEffectEvent(_sourceNetId, _sourceObjectId, _targetNetId, _targetObjectId, _elementId)
    local compareParam = {};
    compareParam.elementId = _elementId;
    local triggerParam = {};
    triggerParam.sourceNetId = _sourceNetId;
    triggerParam.sourceObjectId = _sourceObjectId;
    triggerParam.targetNetId = _targetNetId;
    triggerParam.targetObjectId = _targetObjectId;

    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.ELEMENT_EFFECT, compareParam, triggerParam, _sourceNetId, _sourceObjectId);
end

---触发元素效果修改时间事件
---@public
---@param _sourceNetId number NetId
---@param _sourceObjId number ObjectId
---@param _targetNetId number NetId
---@param _targetObjId number ObjectId
---@param _elementId number 元素id
---@param _changeTime number 修改时间
function BattleLogicEventServiceV2:OnTriggerChangeElementEffectingTimeEvent(_sourceNetId, _sourceObjId, _targetNetId, _targetObjId, _elementId, _changeTime)
    local compareParam = {};
    compareParam.elementId = _elementId;
    local triggerParam = {};
    triggerParam.changeTime = _changeTime;
    triggerParam.targetNetId = _targetNetId;
    triggerParam.targetObjId = _targetObjId;
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.CHANGE_ELEMENT_EFFECT_TIME, compareParam, triggerParam, _sourceNetId, _sourceObjId);
end

---元素附着事件
---@public
---@param _sourceNetId number 伤害来源NetId
---@param _sourceObjectId number 伤害来源ObjectId
---@param _targetNetId number 目标NetId
---@param _targetObjectId number 目标ObjectId
---@param _elementId number 元素Id
---@param _elementValue number 元素值
function BattleLogicEventServiceV2:OnTriggerElementAttachEvent(_sourceNetId, _sourceObjectId, _targetNetId, _targetObjectId, _elementId, _elementValue)
    local compareParam = {};
    compareParam.elementId = _elementId;
    local triggerParam = {};
    triggerParam.sourceNetId = _sourceNetId;
    triggerParam.sourceObjectId = _sourceObjectId;
    triggerParam.targetNetId = _targetNetId;
    triggerParam.targetObjectId = _targetObjectId;
    triggerParam.elementValue = _elementValue;

    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.ELEMENT_ATTACH, compareParam, triggerParam, nil, nil);
end

---元素添加事件
---@public
---@param _sourceNetId number 伤害来源NetId
---@param _sourceObjectId number 伤害来源ObjectId
---@param _targetNetId number 目标NetId
---@param _targetObjectId number 目标ObjectId
---@param _elementId number 元素Id
---@param _changeValue number 元素值
function BattleLogicEventServiceV2:OnTriggerElementAddEvent(_sourceNetId, _sourceObjectId, _targetNetId, _targetObjectId, _elementId, _changeValue)
    local compareParam = {};
    compareParam.elementId = _elementId;
    local triggerParam = {};
    triggerParam.sourceNetId = _sourceNetId;
    triggerParam.sourceObjectId = _sourceObjectId;
    triggerParam.targetNetId = _targetNetId;
    triggerParam.targetObjectId = _targetObjectId;
    triggerParam.changeValue = _changeValue;

    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.ELEMENT_ADD, compareParam, triggerParam, nil, nil);
end

---元素移除事件
---@public
---@param _targetNetId number 目标NetId
---@param _targetObjectId number 目标ObjectId
---@param _elementId number 元素Id
function BattleLogicEventServiceV2:OnTriggerElementRemoveEvent(_targetNetId, _targetObjectId, _elementId)
    local compareParam = {};
    compareParam.elementId = _elementId;
    local triggerParam = {};
    triggerParam.targetNetId = _targetNetId;
    triggerParam.targetObjectId = _targetObjectId;

    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.ELEMENT_REMOVE, compareParam, triggerParam, nil, nil);
end

---检测元素反应事件
---@public
---@param _netId number 玩家netId
---@param _objectId number objectId
---@param _elementReactId number 元素反应Id
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckElementReactEvent(_netId,_objectId,_elementReactId)
    local compareParam = {};
    compareParam.elementReactId = _elementReactId;
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.ELEMENT_REACT, _netId, _objectId, compareParam);
end

---检测元素效果事件
---@public
---@param _netId number 玩家netId
---@param _objectId number objectId
---@param _elementEffectId number 元素Id
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckElementEffectEvent(_netId, _objectId, _elementEffectId)
    local compareParam = {};
    compareParam.elementEffectId = _elementEffectId;
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.ELEMENT_EFFECT, _netId, _objectId, compareParam);
end

---检测元素效果时间修改事件
---@public
---@param _netId number 玩家netId
---@param _objectId number objectId
---@param _elementId number 元素Id
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckElementChangeEffectingTimeEvent(_netId, _objectId, _elementId)
    local compareParam = {};
    compareParam.elementId = _elementId;
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.CHANGE_ELEMENT_EFFECT_TIME, _netId, _objectId, compareParam);
end

---触发技能释放事件
---@public
---@param _netId number 玩家netId
---@param _objectId number objectId
---@param _skillId number 技能Id
function BattleLogicEventServiceV2:OnTriggerSkillStartEvent(_netId,_objectId,_skillId)
    local compareParam = {};
    local triggerParam = {};
    compareParam.skillId = _skillId;
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.USE_SKILL_START,compareParam,triggerParam,_netId,_objectId);
end

---检测技能释放事件
---@public
---@param _netId number 玩家netId
---@param _objectId number objectId
---@param _skillId number 技能Id
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckSkillStartEvent(_netId,_objectId,_skillId)
    local compareParam = {};
    compareParam.skillId = _skillId;
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.USE_SKILL_START,_netId,_objectId,compareParam);
end

---触发技能结束事件
---@public
---@param _netId number 玩家netId
---@param _objectId number objectId
---@param _skillId number 技能Id
---@param _isBreak boolean 是否是打断
function BattleLogicEventServiceV2:OnTriggerSkillEndEvent(_netId, _objectId, _skillId, _isBreak)
    local compareParam = {};
    local triggerParam = {};
    compareParam.skillId = _skillId
    compareParam.isBreak = _isBreak
    triggerParam.netId = _netId
    triggerParam.objId = _objectId
    triggerParam.skillId = _skillId
    triggerParam.isBreak = _isBreak
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.USE_SKILL_END, compareParam, triggerParam, _netId, _objectId);
end

---检测技能结束事件
---@public
---@param _netId number 玩家netId
---@param _objectId number objectId
---@param _skillId number 技能Id
---@param _isBreak boolean 是否是打断
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckSkillEndEvent(_netId, _objectId, _skillId, _isBreak)
    local compareParam = {};
    compareParam.skillId = _skillId;
    compareParam.isBreak = _isBreak
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.USE_SKILL_END, _netId, _objectId, compareParam);
end

---触发单位死亡事件
---@public
---@param _netId number 玩家netId
---@param _objectId number objectId
function BattleLogicEventServiceV2:OnTriggerObjectDeadEvent(_netId, _objectId, _lastHurtNetId)
    local compareParam = {};
    local triggerParam = {};
    triggerParam.lastHurtNetId = _lastHurtNetId
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.OBJECT_DEAD, compareParam, triggerParam, _netId, _objectId);
end

---检测单位死亡事件
---@public
---@param _netId number 玩家netId
---@param _objectId number objectId
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckObjectDeadEvent(_netId,_objectId)
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.OBJECT_DEAD,_netId,_objectId);
end

---触发boss进入动画事件
---@public
---@param _netId number boss netId
---@param _objectId number boss objectId
---@param _start boolean 是开始动画还是结束动画
function BattleLogicEventServiceV2:OnBossAnimationEvent(_netId,_objectId,_start)
    local compareParam = {};
    compareParam.start = _start;
    local triggerParam = {};
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.BOSS_ANIMATION,compareParam,triggerParam,_netId,_objectId);
end

---检测boss进入动画事件
---@public
---@param _start boolean 是开始动画还是结束动画
---@param _netId number boss netId
---@param _objectId number boss objectId
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckBossAnimationEvent(_start,_netId,_objectId)
    local compareParam = {};
    compareParam.start = _start;
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.BOSS_ANIMATION,_netId,_objectId,compareParam);
end

---关卡单位创建事件
---@public
---@param _unit BattleUnitBase
function BattleLogicEventServiceV2:OnTriggerLevelUnitCreateEvent(_unit)
    local compareParam = {};
    compareParam.levelUnitId = _levelUnitId;
    local triggerParam = {};
    triggerParam.unit = _unit;

    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.LEVEL_UNIT_CREATE, compareParam, triggerParam, _unit:GetNetId(), nil);
end

---关卡单位创建事件
---@public
---@param _levelUnitId number 关卡单位id
---@param _netId number netId
---@param _objectId number objectId
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckLevelUnitCreateEvent(_levelUnitId, _netId)
    local compareParam = {};
    compareParam.levelUnitId = _levelUnitId;
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.LEVEL_UNIT_CREATE, _netId, nil, compareParam);
end

---战斗单位创建事件
---@public
---@param _netId number netId
function BattleLogicEventServiceV2:OnTriggerBattleUnitCreateEvent(_netId)
    local compareParam = {};
    local triggerParam = {};
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.BATTLE_UNIT_CREATE, compareParam, triggerParam, _netId, nil);
end

---战斗单位创建事件
---@public
---@param _netId number netId
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckBattleUnitCreateEvent(_netId)
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.BATTLE_UNIT_CREATE, _netId, nil);
end

---战斗单位死亡事件
---@public
---@param _netId number netId
function BattleLogicEventServiceV2:OnTriggerBattleUnitDeadEvent(_netId)
    local compareParam = {};
    local triggerParam = {};
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.BATTLE_UNIT_DEAD, compareParam, triggerParam, _netId, nil);
end

---战斗单位死亡事件
---@public
---@param _netId number netId
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckBattleUnitDeadEvent(_netId)
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.BATTLE_UNIT_DEAD, _netId, nil);
end

---关卡单位死亡事件
---@public
---@param _levelUnitId number 关卡单位id
---@param _levelUnitType BattleUnitType 单位类型
---@param _unitNetId number netId
function BattleLogicEventServiceV2:OnTriggerLevelUnitDeadEvent(_levelUnitId, _levelUnitType, _unitNetId)
    local compareParam = {};
    compareParam.levelUnitId = _levelUnitId;
    local triggerParam = {};
    triggerParam.levelUnitType = _levelUnitType;
    triggerParam.unitNetId = _unitNetId;
    triggerParam.levelUnitId = _levelUnitId;

    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.LEVEL_UNIT_DEAD, compareParam, triggerParam, _unitNetId, nil);
end

---关卡单位死亡事件
---@public
---@param _levelUnitId number 关卡单位id
---@param _netId number netId
---@param _objectId number objectId
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckLevelUnitDeadEvent(_levelUnitId, _netId, _objectId)
    local compareParam = {};
    compareParam.levelUnitId = _levelUnitId;
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.LEVEL_UNIT_DEAD, _netId, _objectId, compareParam);
end

---战斗开始事件
---@public
function BattleLogicEventServiceV2:OnTriggerBattleRunStartEvent()
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.BATTLE_RUN_START, nil, nil, nil, nil)
end

---战斗开始事件
---@public
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckBattleRunStartEvent()
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.BATTLE_RUN_START, nil, nil, nil);
end

---战斗结束事件
---@public
---@param _result number
function BattleLogicEventServiceV2:OnTriggerBattleOverEvent(_result)
    local compareParam = {};
    compareParam.result = _result;
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.BATTLE_OVER, compareParam, nil, nil, nil)
end

---战斗结束事件
---@public
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckBattleOverEvent(_result)
    local compareParam = {};
    compareParam.result = _result;
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.BATTLE_OVER, nil, nil, compareParam);
end

---所有BOSS目标死亡事件
---@public
function BattleLogicEventServiceV2:OnTriggerAllBossUnitDeadEvent()
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.ALL_BOSS_UNIT_DEAD, nil, nil, nil, nil)
end

---所有BOSS目标死亡事件
---@public
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckAllBossUnitDeadEvent()
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.ALL_BOSS_UNIT_DEAD, nil, nil, nil);
end

---BOSS目标死亡事件
---@public
---@param _levelUnitId number
function BattleLogicEventServiceV2:OnTriggerBossUnitDeadEvent(_levelUnitId)
    local compareParam = {};
    compareParam.levelUnitId = _levelUnitId;
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.BOSS_UNIT_DEAD, compareParam, nil, nil, nil)
end

---BOSS目标死亡事件
---@public
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckBossUnitDeadEvent(_levelUnitId)
    local compareParam = {};
    compareParam.levelUnitId = _levelUnitId;
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.BOSS_UNIT_DEAD, nil, nil, compareParam);
end

---所有目标类型死亡事件
---@public
---@param _type number
function BattleLogicEventServiceV2:OnTriggerAllTypeUnitDeadEvent(_type)
    local compareParam = {};
    compareParam.type = _type;
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.ALL_TYPE_UNIT_DEAD, compareParam, nil, nil, nil)
end

---所有目标类型死亡事件
---@public
---@param _type number
function BattleLogicEventServiceV2:CheckAllTypeUnitDeadEvent(_type)
    local compareParam = {};
    compareParam.type = _type;
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.ALL_TYPE_UNIT_DEAD, nil, nil, compareParam);
end

---所有守护目标死亡事件
---@public
function BattleLogicEventServiceV2:OnTriggerAllProtectUnitDeadEvent()
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.ALL_PROTECT_TARGET_UNIT_DEAD, nil, nil, nil, nil)
end

---所有守护目标死亡事件
---@public
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckAllProtectUnitDeadEvent()
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.ALL_PROTECT_TARGET_UNIT_DEAD, nil, nil, nil);
end

---守护目标死亡事件
---@public
---@param _levelUnitId number
function BattleLogicEventServiceV2:OnTriggerProtectUnitDeadEvent(_levelUnitId)
    local compareParam = {};
    compareParam.levelUnitId = _levelUnitId;
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.PROTECT_TARGET_UNIT_DEAD, compareParam, nil, nil, nil)
end

---守护目标死亡事件
---@public
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckProtectUnitDeadEvent(_levelUnitId)
    local compareParam = {};
    compareParam.levelUnitId = _levelUnitId;
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.PROTECT_TARGET_UNIT_DEAD, nil, nil, compareParam);
end

---所有关键目标死亡事件
---@public
function BattleLogicEventServiceV2:OnTriggerAllKeyUnitDeadEvent()
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.ALL_KEY_UNIT_DEAD, nil, nil, nil, nil)
end

---所有关键目标死亡事件
---@public
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckAllKeyUnitDeadEvent()
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.ALL_KEY_UNIT_DEAD, nil, nil, nil);
end

---关键目标死亡事件
---@public
---@param _levelUnitId number
function BattleLogicEventServiceV2:OnTriggerKeyUnitDeadEvent(_levelUnitId)
    local compareParam = {};
    compareParam.levelUnitId = _levelUnitId;
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.KEY_UNIT_DEAD, compareParam, nil, nil, nil)
end

---关键目标死亡事件
---@public
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckKeyUnitDeadEvent(_levelUnitId)
    local compareParam = {};
    compareParam.levelUnitId = _levelUnitId;
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.KEY_UNIT_DEAD, nil, nil, compareParam);
end

---战斗倒计时结束事件
---@public
function BattleLogicEventServiceV2:OnTriggerCountDownTimeOutEvent()
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.COUNT_DOWN_TIME_OUT, nil, nil, nil, nil)
end

---战斗倒计时结束事件
---@public
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckCountDownTimeOutEvent()
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.COUNT_DOWN_TIME_OUT, nil, nil, nil);
end

---触发武器消耗事件
---@public
---@param _netId number 玩家netId
---@param _objectId number objectId
---@param _costType number 消耗类型1技能，2buff
---@param _typeSourceId number Id
---@param _cost number 消耗
function BattleLogicEventServiceV2:OnTriggerWeaponEnergyCostEvent(_netId,_objectId,_costType,_typeSourceId,_cost)
    local compareParam = {};
    local triggerParam = {};
    triggerParam.costType = _costType;
    triggerParam.typeSourceId = _typeSourceId;
    triggerParam.cost = _cost;
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.WEAPON_ENERGY_COST,compareParam,triggerParam,_netId,_objectId);
end

---检测武器消耗事件
---@public
---@param _netId number 玩家netId
---@param _objectId number objectId
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckWeaponEnergyCostEvent(_netId,_objectId)
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.USE_SKILL_START, _netId, _objectId);
end

---触发关卡条件完成事件
---@public
---@param _conditionId number 玩家netId
---@param _uid number 玩家uid
---@param _oldState ConditionEventState 触发前状态
---@param _newState ConditionEventState 触发后状态
---@param _scope number 条件作用域
function BattleLogicEventServiceV2:OnTriggerLevelConditionTriggerEvent(_conditionId, _uid, _oldState, _newState, _scope)
    local compareParam = {};
    compareParam.conditionId = _conditionId;
    local triggerParam = {};
    triggerParam.uid = _uid;
    triggerParam.oldState = _oldState;
    triggerParam.newState = _newState;
    triggerParam.scope = _scope;
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.TRIGGER_LEVEL_CONDITION, compareParam, triggerParam, nil, nil);
end

---触发关卡条件完成事件
---@public
---@param _tag number 标签
---@param _value number 当前值
function BattleLogicEventServiceV2:OnTriggerTagValueChangeEvent(_tag, _value)
    local compareParam = {};
    compareParam.tag = _tag;
    local triggerParam = {};
    triggerParam.value = _value;
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.LEVEL_TAG_VALUE_CHANGE, compareParam, triggerParam, nil, nil);
end

---触发单位进入单位事件
---@public
---@param _levelUnitId number 被进入单位id
---@param _enterNetId number 进入的单位netId
function BattleLogicEventServiceV2:OnTriggerLevelUnitEnterLevelUnitEvent(_levelUnitId, _enterNetId)
    local compareParam = {};
    local triggerParam = {};
    triggerParam.levelUnitId = _levelUnitId;
    triggerParam.enterNetId = _enterNetId;
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.LEVEL_UNIT_ENTER_LEVEL_UNIT, compareParam, triggerParam, nil, nil);
end

---触发血量变化事件
---@public
---@param _netId number netId
---@param _objectId number objectId
---@param _oldHp number 变化前血量
---@param _newHp number 当前血量
function BattleLogicEventServiceV2:OnTriggerBattleObjectHpChangeEvent(_netId, _objectId, _oldHp, _newHp)
    local compareParam = {};
    local triggerParam = {};
    triggerParam.oldHp = _oldHp;
    triggerParam.newHp = _newHp;
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.BATTLE_OBJECT_HP_CHANGE, compareParam, triggerParam, _netId, _objectId);
end

---buff结束
---@public
---@param _netId number netId
---@param _objectId number objectId
---@param _buffId number buffId
---@param _stackNum number buff层数
---@param _isTimeOver number 是否为事件结束
function BattleLogicEventServiceV2:OnTriggerBuffOverEvent(_netId, _objectId,_buffId,_stackNum,_isTimeOver)
    local compareParam = {};
    compareParam.buffId = _buffId;
    compareParam.stackNum = _stackNum;
    compareParam.isTimeOver = _isTimeOver;
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.BUFF_OVER, compareParam, nil, _netId, _objectId);
end

---buff结束
---@public
---@param _netId number netId
---@param _objectId number objectId
---@param _buffId number buffId
---@param _castNetId number buff释放者NetId
---@param _castObjectId number buff释放者objectId
function BattleLogicEventServiceV2:OnTriggerAddBuffEvent(_netId, _objectId,_buffId,_stackNum,_castNetId,_castObjectId)
    local compareParam = {};
    compareParam.buffId = _buffId;
    compareParam.castNetId = _castNetId;
    compareParam.castObjectId = _castObjectId;
    local triggerParam = {};
    triggerParam.stackNum = _stackNum
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.BUFF_ADD, compareParam, triggerParam, _netId, _objectId);
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.CASTER_BUFF_ADD, compareParam, triggerParam, _castNetId, _castObjectId);
end

---
---@public
---@param _netId number netId
---@param _objectId number objectId
---@param _buffId number buffId
---@param _castNetId number buff释放者NetId
---@param _castObjectId number buff释放者objectId
---@param _startStack number buff原始层数
---@param _endStack number buff变化最终层数
function BattleLogicEventServiceV2:OnTriggerBuffStackChangeEvent(_netId, _objectId, _buffId, _castNetId, _castObjectId, _startStack, _endStack)
    local compareParam = {};
    compareParam.buffId = _buffId;
    local triggerParam = {};
    triggerParam.netId = _netId
    triggerParam.objectId = _objectId
    triggerParam.castNetId = _castNetId
    triggerParam.castObjectId = _castObjectId
    triggerParam.startStack = _startStack
    triggerParam.endStack = _endStack
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.CASTER_BUFF_STACK_CHANGE, compareParam, triggerParam, _castNetId, _castObjectId);
end

---收集金币
---@public
---@param _netId number netId
---@param _objectId number objectId
function BattleLogicEventServiceV2:CheckCollectCoinEvent(_netId, _objectId)
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.COLLECT_COIN, _netId, _objectId, nil);
end

---收集金币
---@public
---@param _netId number netId
---@param _objectId number objectId
function BattleLogicEventServiceV2:OnTriggerCollectCoinEvent(_netId, _objectId)
    local compareParam = {};
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.COLLECT_COIN, compareParam, nil, _netId, _objectId);
end

---消弹事件
---@public
---@param _netId number netId
---@param _position number objectId
function BattleLogicEventServiceV2:OnTriggerDestroyBulletEvent(_netId, _objectId,_position)
    local compareParam = {};
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.DESTROY_BULLET, compareParam, nil, _netId, _objectId);
end

---消弹事件
---@public
---@param _netId number netId
---@param _position number objectId
function BattleLogicEventServiceV2:CheckDestroyBulletEvent(_netId, _objectId,_position)
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.DESTROY_BULLET, _netId, _objectId);
end

---触发采集成功
---@public
---@param _fromNetId number 采集者netId
---@param _fromObjId number 采集者objId
---@param _targetNetId number 被采集者netId
---@param _targetObjId number 被采集者objId
function BattleLogicEventServiceV2:OnTriggerCollectSuccessEvent(_fromNetId, _fromObjId, _targetNetId, _targetObjId)
    local compareParam = {};
    local triggerParam = {};
    triggerParam.fromNetId = _fromNetId
    triggerParam.fromObjId = _fromObjId
    triggerParam.targetNetId = _targetNetId
    triggerParam.targetObjId = _targetObjId
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.BATTLE_COLLECT_SUCCESS,compareParam,triggerParam,_fromNetId, _fromObjId);
    --LogTools.LogByLevel(LogLevel.log, "BattleLogicEventServiceV2", "OnTriggerCollectSuccessEvent", "triggerParam", dumpTableEx(triggerParam))
end

---检测采集成功
---@public
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckCollectSuccessEvent()
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.BATTLE_COLLECT_SUCCESS,nil,nil,nil);
end

---触发玩家tag改变
---@public
---@param _netId number 采集者netId
---@param _objId number 采集者objId
---@param _tag number tag
---@param _value number 值
function BattleLogicEventServiceV2:OnTriggerUnitTagValueChangeEvent(_netId, _objId, _tag, _value)
    local compareParam = {};
    local triggerParam = {};
    triggerParam.netId = _netId
    triggerParam.objId = _objId
    triggerParam.tag = _tag
    triggerParam.value = _value
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.UNIT_TAG_VALUE_CHANGE, compareParam, triggerParam, _netId, _objId);
end

---检测玩家tag改变
---@public
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckUnitTagValueChangeEvent(_netId, _objectId, _tag)
    local compareParam = {};
    compareParam.tag = _tag
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.UNIT_TAG_VALUE_CHANGE, _netId, _objectId, compareParam);
end

---触发切换状态事件
---@public
---@param _stateId number stateId
---@param _isLeave boolean 离开
---@param _netId number netId
---@param _objectId number objId
function BattleLogicEventServiceV2:OnChangeStateEvent(_stateId,_isLeave, _netId, _objectId)
    local compareParam = {};
    compareParam.stateId = _stateId
    compareParam.isLeave = _isLeave
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.CHANGE_STATE, compareParam, nil, _netId, _objectId);
end

---检测切换状态事件
---@public
---@param _stateId number stateId
---@param _isLeave boolean 离开
---@param _netId number NetId
---@param _objectId number ObjectId
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckChangeStateEvent(_stateId,_isLeave,_netId,_objectId)
    local compareParam = {};
    compareParam.stateId = _stateId
    compareParam.isLeave = _isLeave
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.CHANGE_STATE, _netId, _objectId, compareParam);
end

---触发技能添加BUFF事件
---@public
---@param _skillId number 技能ID
---@param _addBuffIdList number[] 添加的BUFF列表
---@param _removeBuffIdList number[] 移除的BUFF列表
function BattleLogicEventServiceV2:OnTriggerSkillAddBuffEvent(_skillId, _addBuffIdList, _removeBuffIdList)
    --LogTools.LogByLevel(LogLevel.log, "skillAddBuff", "BattleLogicEventServiceV2:OnTriggerSkillAddBuffEvent", _skillId)
    local triggerParam = {};
    triggerParam.skillId = _skillId;
    triggerParam.addBuffList = _addBuffIdList
    triggerParam.removeBuffList = _removeBuffIdList

    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.SKILL_ADD_BUFF, nil, triggerParam, nil, nil);
end

---触发装弹结束事件
---@public
---@param _netId number 玩家netId
---@param _objectId number objectId
---@param _isBreak boolean 是否是打断
function BattleLogicEventServiceV2:OnTriggerReloadEndEvent(_netId, _objectId, _isBreak)
    local compareParam = {};
    local triggerParam = {};
    compareParam.isBreak = _isBreak
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.RELOAD_END_EVENT, compareParam, triggerParam, _netId, _objectId);
end

---检测装弹结束事件
---@public
---@param _netId number 玩家netId
---@param _objectId number objectId
---@param _isBreak boolean 是否是打断
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckReloadEndEvent(_netId, _objectId, _isBreak)
    local compareParam = {};
    compareParam.isBreak = _isBreak
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.RELOAD_END_EVENT, _netId, _objectId, compareParam);
end

---触发装弹结束事件
---@public
---@param _netId number 玩家netId
---@param _objectId number objectId
---@param _triggerChangeNetId number 触发改变的netId
---@param _triggerChangeObjectId number 触发改变的nobjId
---@param _fromStatus number 原状态id
---@param _toStatus number 目标状态id
function BattleLogicEventServiceV2:OnTriggerChangeWarriorStatusEvent(_netId, _objectId, _triggerChangeNetId,_triggerChangeObjectId,_fromStatus,_toStatus)
    local compareParam = {};
    local triggerParam = {};
    compareParam.triggerChangeNetId = _triggerChangeNetId;
    compareParam.triggerChangeObjectId = _triggerChangeObjectId;
    compareParam.fromStatus = _fromStatus;
    compareParam.toStatus = _toStatus;
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.CHANGE_WARRIOR_STATUS, compareParam, triggerParam, _netId, _objectId);
end

---检测装弹结束事件
---@public
---@param _netId number 玩家netId
---@param _objectId number objectId
---@param _triggerChangeNetId number 触发改变的netId
---@param _triggerChangeObjectId number 触发改变的nobjId
---@param _fromStatus number 原状态id
---@param _toStatus number 目标状态id
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckChangeWarriorStatusEvent(_netId, _objectId, _triggerChangeNetId,_triggerChangeObjectId,_fromStatus,_toStatus)
    local compareParam = {};
    compareParam.triggerChangeNetId = _triggerChangeNetId;
    compareParam.triggerChangeObjectId = _triggerChangeObjectId;
    compareParam.fromStatus = _fromStatus;
    compareParam.toStatus = _toStatus;
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.CHANGE_WARRIOR_STATUS, _netId, _objectId, compareParam);
end

---治疗触发
---@public
---@param _netId number netId
---@param _objectId number objectId
---@param _sourceNetId number netId
---@param _sourceObjectId number objectId
---@param _castSkillId number 治疗技能Id
function BattleLogicEventServiceV2:OnTriggerHealEvent(_netId, _objectId,_sourceNetId,_sourceObjectId,_castSkillId)
    local compareParam = {};
    local eventTriggerParam = {};
    eventTriggerParam.sourceNetId = _sourceNetId;
    eventTriggerParam.sourceObjectId = _sourceObjectId;
    eventTriggerParam.castSkillId = _castSkillId;
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.HEAL_TARGET, compareParam, eventTriggerParam, _netId, _objectId);
end

---触发弱点击破事件
---@public
---@param _netId number 玩家netId
---@param _objectId number objectId
---@param _triggerUnitNetId number 触发弱点的netId
---@param _triggerUnitObjectId number 触发弱点的objectId
---@param _weakPointId number 弱点id
function BattleLogicEventServiceV2:OnTriggerWeakPointBreakEvent(_netId, _objectId, _triggerUnitNetId, _triggerUnitObjectId, _weakPointId)
    local compareParam = {};
    compareParam.weakPointId = _weakPointId;
    local triggerParam = {};
    triggerParam.triggerUnitNetId = _triggerUnitNetId;
    triggerParam.triggerUnitObjectId = _triggerUnitObjectId;
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.WEAK_POINT_BREAK, compareParam, triggerParam, _netId, _objectId);
end

---检测弱点击破事件
---@public
---@param _netId number 玩家netId
---@param _objectId number objectId
---@param _triggerUnitNetId number 触发弱点的netId
---@param _triggerUnitObjectId number 触发弱点的objectId
---@param _weakPointId number 弱点id
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckWeakPointBreakEvent(_netId, _objectId, _triggerUnitNetId, _triggerUnitObjectId, _weakPointId)
    local compareParam = {};
    compareParam.weakPointId = _weakPointId;
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.WEAK_POINT_BREAK, _netId, _objectId, compareParam);
end

---触发属性改变
---@public
---@param _propId number 发生改变的属性ID
---@param _oldValue number 改变的属性值
---@param _netId number 发生改变的netId
---@param _objId number 发生改变的objId
function BattleLogicEventServiceV2:OnTriggerPropChangeEvent(_propId, _oldValue, _netId, _objId)
    local compareParam = {};
    local triggerParam = {};
    triggerParam.propId = _propId
    triggerParam.oldValue = _oldValue
    triggerParam.netId = _netId
    triggerParam.objId = _objId
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.PROP_CHANGE, compareParam, triggerParam, _netId, _objId);
end

---检测属性改变
---@public
---@param _propId number 发生改变的属性ID
---@param _netId number 发生改变的netId
---@param _objId number 发生改变的objId
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckPropChangeEvent(_propId, _netId, _objId)
    local compareParam = {};
    compareParam.propId = _propId;
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.PROP_CHANGE, _netId, _objId, compareParam);
end

---触发属性改变
---@public
---@param _netId number 发生改变的netId
---@param _objId number 发生改变的objId
function BattleLogicEventServiceV2:OnTriggerElementLightningBallEvent(_netId, _objId)
    local compareParam = {};
    local triggerParam = {};
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.ELEMENT_LIGHTNING_BALL, compareParam, triggerParam, _netId, _objId);
end

---检测属性改变
---@public
---@param _netId number netId
---@param _objId number objId
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckElementLightningBallEvent(_netId, _objId)
    local compareParam = {};
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.ELEMENT_LIGHTNING_BALL, _netId, _objId, compareParam);
end

---触发属性改变
---@public
---@param _netId number 发生改变的netId
---@param _objId number 发生改变的objId
function BattleLogicEventServiceV2:OnTriggerUnitCollideEvent(_netId, _objId)
    local compareParam = {};
    local triggerParam = {};
    self:OnTriggerEvent(BATTLE_LOGIC_EVENT_ENUM.UNIT_COLLIDE, compareParam, triggerParam, _netId, _objId);
end

---检测属性改变
---@public
---@param _netId number netId
---@param _objId number objId
---@return boolean 是否触发事件
function BattleLogicEventServiceV2:CheckUnitCollideEvent(_netId, _objId)
    local compareParam = {};
    return self:CheckEventTrigger(BATTLE_LOGIC_EVENT_ENUM.UNIT_COLLIDE, _netId, _objId, compareParam);
end

return BattleLogicEventServiceV2;
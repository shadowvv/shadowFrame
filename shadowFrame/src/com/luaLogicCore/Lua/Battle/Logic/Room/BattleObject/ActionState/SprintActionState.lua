---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/2/9 18:38

require "Lib/class"
require "Battle/Logic/Room/BattleObject/ActionState/ActionState"

---@class SprintActionState : ActionState 冲刺
---@field battleRoom BattleRoom 战斗
---@field stateParam StateParameter 状态参数配置
---@field unitType number 单位类型
---@field moveParam Vector3 移动参数
SprintActionState = class(ActionState, 'SprintActionState');

---@param _battleId number 战斗id
---@param _stateParamId number 状态参数配置Id
---@param _unitType number 单位类型
function SprintActionState:ctor(_battleId, _stateParamId,_unitType)
    self.battleRoom = GetBattleRoom(_battleId)
    self.stateParam = self.battleRoom.inputDataSource:GetDict("StateParameter", _stateParamId);
    self.unitType = _unitType;
    self.moveParam = nil;
    self.hitWall = false;

    self.hitPosition = nil;
    self.hitMoveDir = nil;
end

---@param _moveParam Vector3 移动参数
function SprintActionState:Init(_moveParam,_hitWall,_hitPosition,_hitMoveDir)
    self.moveParam = _moveParam;
    if _hitWall then
        self.hitWall = _hitWall;
    end

    self.hitPosition = _hitPosition;
    self.hitMoveDir = _hitMoveDir;
end

function SprintActionState:EnterAction(_actionStateManager)
    local sprintCur = _actionStateManager:GetUnit():GetPropertyByName(BattlePropertyEnum.Sprint_En_Cur);
    local dashCast = self.stateParam.dashCast * (1 + _actionStateManager:GetUnit():GetPropertyByName(BattlePropertyEnum.Sprint_En_Consume));
    if sprintCur <  dashCast then
        _actionStateManager:Exit(self);
        _actionStateManager:GetUnit():GetActionManager():Move(self.moveParam,self.cameraParam,false,self.hitWall,true,self.hitPosition,self.hitMoveDir);
        return false;
    end
    return true;
end

-- 执行行为
---@param _actionStateManager ActionStateManage 行为管理器
---@param _dt number 更新时间
---@param _netId number 单位id
---@param _objId number 单位对应实体id
function SprintActionState:DoAction(_actionStateManager, _dt, _netId,_objId)
    local _unit = _actionStateManager:GetUnit()
    local sprintCur = _unit:GetPropertyByName(BattlePropertyEnum.Sprint_En_Cur);
    local dashCast = self.stateParam.dashCast * (1 + _unit:GetPropertyByName(BattlePropertyEnum.Sprint_En_Consume));
    if sprintCur <  dashCast then
        _actionStateManager:Exit(self);
        _actionStateManager:EnterCommonMove(self.moveParam,nil,self.hitWall,self.hitPosition,self.hitMoveDir);
        return;
    end
    --_unit:DecreaseUnitPropByName(BattlePropertyEnum.Sprint_En_Cur,dashCast);
     ---@type BattleUnitCom_UnitProp
    local _unitPropCom = _unit:GetComponent(BattleUnitComponentType.UnitProp)
    if _unitPropCom then
        _unitPropCom:DecreasePropByName(BattlePropertyEnum.Sprint_En_Cur, dashCast)
    end

    local currentV = _actionStateManager:GetVelocity();
    local currentDirection = _actionStateManager:GetRotation();
    local currentPosition = _actionStateManager:GetPosition();

    local moveParam = self.moveParam;
    local sprintAccelerate = Quaternion.New(self.stateParam.dashAccelerate[1],self.stateParam.dashAccelerate[2],self.stateParam.dashAccelerate[3],self.stateParam.dashAccelerate[4]);
    local pos = Vector3.zero_local();
    local a = Vector3.zero_local();
    local maxVelocity = self.stateParam.dashMaxVelocity * (1 + _actionStateManager:GetUnit():GetPropertyByName(BattlePropertyEnum.Sprint_Add));;

    local _v3CalcCurVelocity = self.battleRoom.vector3Pool:Pop()   --计算得到的当前速度
    local _v3CalcPosChange = self.battleRoom.vector3Pool:Pop()     --计算得到的位置变化
    local _v3CalcCurAcc = self.battleRoom.vector3Pool:Pop()        --计算得到的当前加速度

    if self.battleRoom.battleLevelManager.levelConfigManager:GetLevelInstanceXls().controlMode == 0 then
        MOVE_UTILS.Move(self.battleRoom, _v3CalcCurVelocity, _v3CalcPosChange, _v3CalcCurAcc, moveParam,currentV,currentDirection,sprintAccelerate,self.stateParam.airFriction,self.stateParam.breakAccelerate,maxVelocity,_actionStateManager:GetForceAcc(),_dt,self.hitMoveDir); 
    else
        MOVE_UTILS.Move_FreeFly(self.battleRoom, _v3CalcCurVelocity, _v3CalcPosChange, _v3CalcCurAcc, moveParam,currentV,currentDirection,sprintAccelerate,self.stateParam.airFriction,self.stateParam.breakAccelerate,maxVelocity,_actionStateManager:GetForceAcc(),_dt,self.hitMoveDir);
    end
    Vector3.Copy(currentV, _v3CalcCurVelocity)
    Vector3.Copy(pos, _v3CalcPosChange)
    Vector3.Copy(a, _v3CalcCurAcc)
    self.battleRoom.vector3Pool:Push(_v3CalcCurVelocity)
    self.battleRoom.vector3Pool:Push(_v3CalcPosChange)
    self.battleRoom.vector3Pool:Push(_v3CalcCurAcc)
    currentPosition = currentPosition + pos;

    if moveParam == Vector3.zero_local() then
        _actionStateManager:Exit(self);
        _actionStateManager:EnterCommonMove(self.moveParam,nil,self.hitWall,self.hitPosition,self.hitMoveDir);
    end

    --检测碰撞
    ---@type BattleObjectBase
    local currentObject = _actionStateManager:GetUnit():GetCurrentHeroObject();
    ---@type BattleObjCom_Collider
    local colliderCom = currentObject:GetComponent(BattleObjectComponentType.Collider);
    if colliderCom then
        local collision = self.battleRoom.battleField:ObjectMove(colliderCom.objectCollider,currentPosition,_actionStateManager.rotation);
        if collision then
            _actionStateManager:Exit(self);
            _actionStateManager:Idle();
            return;
        end
    end

    _actionStateManager:SetVelocity(currentV);
    if not self.hitWall then
        _actionStateManager:SetPosition(currentPosition);
    end

    local battleUnitMoveOutput = {};
    battleUnitMoveOutput.v = _actionStateManager:GetVelocity();
    battleUnitMoveOutput.position = _actionStateManager:GetPosition()
    battleUnitMoveOutput.rotation = _actionStateManager:GetRotation()
    battleUnitMoveOutput.accelerate = sprintAccelerate;

    --2022-6-18 冲刺左摇杆无干量的时候需要伪造成向前
    --battleUnitMoveOutput.moveParam = _actionStateManager.moveParam;
    battleUnitMoveOutput.moveParam = moveParam;
    battleUnitMoveOutput.cameraParam = _actionStateManager.cameraParam;
    battleUnitMoveOutput.airFriction = self.stateParam.airFriction;
    battleUnitMoveOutput.breakAcc = self.stateParam.breakAccelerate;
    battleUnitMoveOutput.maxVelocity = maxVelocity;
    battleUnitMoveOutput.forceAcc = _actionStateManager:GetForceAcc();
    battleUnitMoveOutput.type = self:GetId();

    local battleUnitMoveData = {};
    battleUnitMoveData.netId = _netId;
    battleUnitMoveData.objId = _objId;
    battleUnitMoveData.moveInfo = battleUnitMoveOutput;

    self.battleRoom.outputDataSource:AddBattleUnitMoveData(battleUnitMoveData);
end

-- 退出行为
---@param _actionStateManager ActionStateManage 行为管理器
---@param _isBreak boolean 是否为打断退出
---@param _isActive boolean 是否为主动打断
function SprintActionState:ExitAction(_actionStateManager,_isBreak,_isActive)

    if _isBreak then
        _actionStateManager:SetVelocity(Vector3.zero_local());
    end
    local maxVelocity = self.stateParam.dashMaxVelocity * (1 + _actionStateManager:GetUnit():GetPropertyByName(BattlePropertyEnum.Sprint_Add));;

    local battleUnitMoveOutput = {};
    battleUnitMoveOutput.v = _actionStateManager:GetVelocity();
    battleUnitMoveOutput.position = _actionStateManager:GetPosition();
    battleUnitMoveOutput.rotation = _actionStateManager:GetRotation();
    battleUnitMoveOutput.accelerate = Vector3.zero_local();
    battleUnitMoveOutput.moveParam = _actionStateManager.moveParam;
    battleUnitMoveOutput.cameraParam = _actionStateManager.cameraParam;
    battleUnitMoveOutput.airFriction = self.stateParam.airFriction;
    battleUnitMoveOutput.breakAcc = self.stateParam.breakAccelerate;
    battleUnitMoveOutput.maxVelocity = maxVelocity;
    battleUnitMoveOutput.forceAcc = _actionStateManager:GetForceAcc();
    battleUnitMoveOutput.type = 1;

    local battleUnitMoveData = {};
    battleUnitMoveData.netId = _actionStateManager:GetUnit():GetNetId();
    battleUnitMoveData.objId = _actionStateManager:GetUnit():GetCurrentHeroObjectId();
    battleUnitMoveData.moveInfo = battleUnitMoveOutput;

    self.battleRoom.outputDataSource:AddBattleUnitMoveData(battleUnitMoveData);
end

-- 是否为主动状态
---@return boolean 是否为主动状态
function SprintActionState:IsActive()
    return true;
end


function SprintActionState:GetId()
    return 4;
end

---获得状态冲突表
---@return StateSwitchRule
function SprintActionState:GetSwitchRule()
    return self.battleRoom.inputDataSource:GetDict("StateSwitchRule",self:GetId());
end

return SprintActionState;
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/04/12 17:31
--- Describe:
---

---@class AreaTriggerTargetData : table
AreaTriggerTargetData = class(nil, "AreaTriggerTargetData")
function AreaTriggerTargetData:ctor() end

---@public
function AreaTriggerTargetData:Init(_netId, _objId)
	---@private
	self.__netId = _netId
	---@private
	self.__objId = _objId
	---@private
	self.__timeAcc = 0
	---@private
	self.__curCnt = 0
end

---@public
function AreaTriggerTargetData:GetNetId()
	return self.__netId
end

---@public
function AreaTriggerTargetData:GetObjectId()
	return self.__objId
end

---@public
function AreaTriggerTargetData:CheckTrigDelta(_deltaTime, _actionDelta)
	self.__timeAcc = self.__timeAcc + _deltaTime
	if self.__timeAcc < _actionDelta then return false end

	self.__timeAcc = self.__timeAcc - _actionDelta
	self.__curCnt = self.__curCnt + 1
	return true
end

---@public
function AreaTriggerTargetData:CheckEnd(_actMaxCnt)
	return self.__curCnt >= _actMaxCnt
end

---@public
function AreaTriggerTargetData:Clear()
	self.__netId = nil
	self.__timeAcc = nil
	self.__curCnt = nil
end
------------------------------------------------------------------------------------------------------------------------
---@class AreaTriggerActionData : table
AreaTriggerActionData = class(nil, "AreaTriggerActionData")
function AreaTriggerActionData:ctor(_data) end

function AreaTriggerActionData:Init(_battleId, _areaTriggerActionCtrl, _id, _actionDelta, _actionMaxTimes, _castObj, _registBuffTempList, _generateStackInfo, _specificStackNum)
	---@type number
	self.battleId = _battleId
	---@type BattleRoom
	self.battleRoom = GetBattleRoom(self.battleId)
	---@type AreaTriggerActionCtrl
	self.__trigActionCtrl = _areaTriggerActionCtrl
	---@type AreaColliderAction
	local _xls = self.battleRoom.inputDataSource:GetDict("AreaColliderAction", _id)
	---@private
	self.__type = _xls.type
	---@private
	self.__param = _xls.param
	---@private
	self.__actionDelta = _actionDelta
	---@private
	self.__actMaxCnt = _actionMaxTimes
	---@private
	---@type BattleObjectBase
	self.__castObj = _castObj
	---@private
	---@type AreaTriggerTargetData[]
	self.__targetDataDic = {}
	---@private
	---@type BattleBuffCastTemplate[]
	self.__registBuffTempList = _registBuffTempList
	---@private
	---@type table 
	self.__generateStackInfo = _generateStackInfo
	---@private
	---@type number
	self.__specificStackNum = _specificStackNum
end

---@public
function AreaTriggerActionData:Trig(_netIdList, _deltaTime)
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "AreaTriggerActionData Trig start", "_netIdList", dumpTableEx(_netIdList))
	end
	local _targetDataDic = self.__targetDataDic
	local _actDelta = self.__actionDelta
	local _actMaxCnt = self.__actMaxCnt
	
	local _castObj = self.__castObj
	local _unitManger = self.battleRoom.battleUnitManager
	for i = 1, #_netIdList do
		local _netId = _netIdList[i]
		
		local _targetData = _targetDataDic[_netId]
		if not _targetData then
			local _unit = _unitManger:GetUnit(_netId)
			if _unit then
				_targetData = AreaTriggerTargetData.New()
				_targetData:Init(_netId, _unit:GetCurrentHeroObjectId())
				_targetDataDic[_netId] = _targetData
			end
		end
		
		if _targetData and _targetData:CheckTrigDelta(_deltaTime, _actDelta) then
			if self.__type == AreaTriggerActionType.AddBuff then
				self:__TrigAddBuff(_targetData, _castObj)
			elseif self.__type == AreaTriggerActionType.RemoveBuff then
				self:__TrigRemoveBuff(_targetData, _castObj)
			end

			if _targetData:CheckEnd(_actMaxCnt) then
				_targetData:Clear()
				_targetDataDic[_netId] = nil
			end
		end
	end
end

---@private
---@param _targetData AreaTriggerTargetData
---@param _castObj BattleObjectBase 这个是施法者的obj  不是area的obj
function AreaTriggerActionData:__TrigAddBuff(_targetData, _castObj)
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "AreaTriggerActionData __TrigAddBuff start", "addBuffGroupId", self.__param, "_targetData:GetNetId()", _targetData:GetNetId())
	end
	local _unit = self.battleRoom.battleUnitManager:GetUnit(_targetData:GetNetId())
	if not _unit then return end

	local _areaUnit = self.__trigActionCtrl:GetTriggerCom():GetObject():GetParentUnit()
	local _buffGroupId = tonumber(self.__param)
	local _buffTemplate = BattleBuffService:GenerateCastBuffTemplate(_buffGroupId, _castObj, _areaUnit:GetOriginalHeroSkillId(), nil, nil, self.__specificStackNum)
	_buffTemplate.generateStackInfo = self.__generateStackInfo
	self:__DealAddBuff(_unit, _castObj, _buffTemplate)
	for i = 1, #self.__registBuffTempList do
		self:__DealAddBuff(_unit, _castObj, self.__registBuffTempList[i])
	end
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "AreaTriggerActionData __TrigAddBuff end")
	end
end

---@private
---@param _unit BattleUnitBase
---@param _castObj BattleObjectBase 这个是施法者的obj  不是area的obj
---@param _buffTemplate BattleBuffCastTemplate
function AreaTriggerActionData:__DealAddBuff(_unit, _castObj, _buffTemplate)
	---@type BuffGroup
	local addBuffGroup = self.battleRoom.inputDataSource:GetDict("BuffGroup", _buffTemplate.buffGroupId)
	if not addBuffGroup then return end
	
	_buffTemplate.bodyPartId = self.__trigActionCtrl:GetTriggerCom():GetObject():GetParentUnit():GetOriginalBlockId()
	---@type BattleObjCom_Buff
	local _buffCom
	for _, _object in pairs(_unit:GetAllObjectDic()) do
		_buffCom = _object:GetComponent(BattleObjectComponentType.Buff)
		if _buffCom then
			--LogTools.LogByLevel(LogLevel.log, "CheckArea", "AreaTriggerActionData __DealAddBuff _object", _object:GetObjectId(), "_buffTemplate.bodyPartId", _buffTemplate.bodyPartId, "netId", self.__trigActionCtrl:GetTriggerCom():GetObject():GetParentUnit():GetNetId(), "_buffTemplate.stackNum", _buffTemplate.stackNum)
			_buffCom:AddBattleBuff(_buffTemplate)
		end
	end
end

---@private
---@param _targetData AreaTriggerTargetData
function AreaTriggerActionData:__TrigRemoveBuff(_targetData, _castObj)
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "AreaTriggerActionData __TrigRemoveBuff start", "removeBuffGroupId", self.__param)
	end
	local _unit = self.battleRoom.battleUnitManager:GetUnit(_targetData:GetNetId())
	if not _unit then return end
	
	local _heroObjList
	if _unit:CheckUnitType(BattleUnitType.Player) then
		_heroObjList = _unit:GetTypeObjectList(BattleObjectType.LeaderHero)
	elseif _unit:CheckUnitType(BattleUnitType.Monster) then
		_heroObjList = _unit:GetTypeObjectList(BattleObjectType.MonsterHero)
	end
	if not _heroObjList then return end

	for i = #self.__registBuffTempList, 1, -1 do
		self:__DealRemoveBuff(_heroObjList, self.__registBuffTempList[i].buffGroupId)
	end
	self:__DealRemoveBuff(_heroObjList, tonumber(self.__param))

	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "AreaTriggerActionData __TrigRemoveBuff end")
	end
end

---@private
---@param _heroObjList BattleObjectBase[]
---@param _buffGroupId number
function AreaTriggerActionData:__DealRemoveBuff(_heroObjList, _buffGroupId)
	---@type BattleObjCom_Buff
	local _buffCom
	for _, _heroObj in pairs(_heroObjList) do
		_buffCom = _heroObj:GetComponent(BattleObjectComponentType.Buff)
		if _buffCom then
			--LogTools.LogByLevel(LogLevel.log, "CheckArea", "AreaTriggerActionData __DealRemoveBuff _object", _heroObj:GetObjectId())
			_buffCom:RemoveBuffStackNum(_buffGroupId, 1)
		end
	end
end

---@public
function AreaTriggerActionData:Clear()
	self.__type = nil
	self.__param = nil
	self.__actionDelta = nil
	self.__actMaxCnt = nil
	for _, _targetData in pairs(self.__targetDataDic) do
		_targetData:Clear()
	end
	self.__targetDataDic = nil
	self.__registBuffTempList = nil
end
return AreaTriggerActionData
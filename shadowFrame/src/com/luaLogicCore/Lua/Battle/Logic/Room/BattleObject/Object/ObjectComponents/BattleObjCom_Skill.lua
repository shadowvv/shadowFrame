---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/3/7 16:47

require "Lib/class"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillBuffResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillTargetBuffResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillBarrageBuffResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillBuffTimeResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillAreaBuffResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillUpSkillLevelResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillAreaTimeResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillChangeSkillCoolDownResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillChangeBuffCurrentTimeResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillRemoveBuffResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillTargetGenerateBulletResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillCreateDropObjectResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillUpPercentBuffResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillChangePropByDamageResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillSummonBuffResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillChangeLeaderBuffResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillChangeElementDamageResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillAddElementEffectResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillChangeBuffTempParamResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillChangeBuffInstanceParamResult"
require "Battle/Logic/TalentSkill/TalentSkillResult/TalentSkillChangeBuffStackNumResult"


require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillNoneTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillBattleStartTimeTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillHitTimeTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillHitCountTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillKillCountTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillDamageTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillCriticalTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillManaMinTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillManaMaxTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillElementReactTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillCastSkillTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillHpMinTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillHpMaxTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillOnBuffTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillBeDamageTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillRemoveBuffTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillUseLeaderTimeTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillDestroyBulletTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillBarrageTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillChangeLeaderTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillBuffKillCountTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillReloadEndTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillUnitLostBloodTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillCheckObjectExist"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillLoseHPTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillAimToTargetTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillSpecialCounterTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillChangeWarriorStatusTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillJIZouPercentTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillCheckPropEqualTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillChangeHitTargetTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillHealTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillBeHealTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillEnemyDeadTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillInSprintActionTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillElementEffectTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillAddBuffTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillCheckCurrentObjectTrigger"
require "Battle/Logic/TalentSkill/TalentSkillTrigger/TalentSkillCheckPropValueTrigger"

---@class BattleObjCom_Skill : BattleObjectComponentBase
---@field skillCoolDowns number[] 技能cd
---@field skillCastTimes number[] 技能释放次数
---@field playModeSkillChange BattlePlayerActiveSkill[] 技能替换技能 key = 技能类型
---@field buffSkillChange BattlePlayerActiveSkill[] buff替换技能 key = 技能类型
---@field skillHurtParam number[] 技能伤害参数替换 key = 技能Id
---@field talentSkills BattlePlayerTalentSkill[] 被动技能信息
---@field activeSkills BattlePlayerActiveSkill[] 主动技能信息
BattleObjCom_Skill = class(BattleObjectComponentBase, 'BattleObjCom_Skill');

function BattleObjCom_Skill:ctor()
    self:__ctor(BattleObjectComponentType.Skill)

    ---key 技能id
    self.skillCoolDowns = {};
    ---key 技能id
    self.skillCastTimes = {};

    ---key 技能类型
    self.playModeSkillChange = {};
    ---key 技能类型
    self.buffSkillChange = {};

    ---key 技能id
    self.skillHurtParam = {};
    self.changeSkillElement = {};

    ---@type BattlePlayerTalentSkill[]
    self.talentSkills = {};
    ---@type BattlePlayerActiveSkill[]
    self.activeSkills = {};

    self.hasSkillCdOver = false;
end

---@public
---@param _battleObject BattleObjectBase 战斗单位
---@param _leaderBattleInfo table 战斗数据
function BattleObjCom_Skill:Init(_battleObject,_leaderBattleInfo)
    self:__Init(_battleObject)
    if _leaderBattleInfo == nil then
        return;
    end
    local tempTalentP = {};
    if _leaderBattleInfo.talentSkills then
        for _, _talentSkillInfo in pairs(_leaderBattleInfo.talentSkills) do
            ---@type TalentSkill
            local talentSkillConfig = self.battleRoom.inputDataSource:GetTalentSkill(_talentSkillInfo.id,_talentSkillInfo.level);
            if LogTools.SkillLog and CheckLogLevel(LogLevel.log) and not talentSkillConfig then
                LogTools.LogByLevel(LogLevel.log,"被动技能没有配置",_talentSkillInfo.id,_talentSkillInfo.level);
            end
            if talentSkillConfig then
                if not talentSkillConfig.groupId or talentSkillConfig.groupId == 0 then
                    local talentSkill = self:CreateTalentSkill(_talentSkillInfo);
                    self.talentSkills[talentSkill.id] = talentSkill;
                else
                    if not tempTalentP[talentSkillConfig.groupId] then
                        tempTalentP[talentSkillConfig.groupId] = talentSkillConfig.id;
                    end
                    ---@type TalentSkill
                    local tempConfig = self.battleRoom.inputDataSource:GetDict("TalentSkill",tempTalentP[talentSkillConfig.groupId]);
                    if talentSkillConfig.priority >= tempConfig.priority then
                        local talentSkill = self:CreateTalentSkill(_talentSkillInfo);
                        self.talentSkills[tempConfig.id] = nil;
                        self.talentSkills[talentSkill.id] = talentSkill;
                    end
                end
            end
        end
    end
    if _leaderBattleInfo.activeSkills then
        for _, _activeSkillInfo in pairs(_leaderBattleInfo.activeSkills) do
            local activeSkill = self:CreateActiveSkill(_activeSkillInfo);
            self.activeSkills[activeSkill.id] = activeSkill;
        end
    end
end

--- 生成被动技能
---@param _talentSkillInfo table
---@return BattlePlayerTalentSkill
function BattleObjCom_Skill:CreateTalentSkill(_talentSkillInfo)
    ---@type BattlePlayerTalentSkill
    local talentSkill = BattlePlayerTalentSkill.New()
    talentSkill.id = _talentSkillInfo.id;
    talentSkill.level = _talentSkillInfo.level;
    talentSkill.state = _talentSkillInfo.state;
    if _talentSkillInfo.count and _talentSkillInfo.count > 0 then
        talentSkill.count = _talentSkillInfo.count;
    end

    talentSkill.skillResults = self:GetSkillResultById(talentSkill.id,talentSkill.level);
    talentSkill.skillTriggers = self:GetSkillTriggerById(talentSkill.id,talentSkill.level);
    return talentSkill
end

---被动技能结果
---@param _id number 被动技能Id
---@param _level number 技能等级
---@return TalentSkillResultBase[]
function BattleObjCom_Skill:GetSkillResultById(_id,_level)
    local results = {};
    ---@type TalentSkill
    local talentSkillConfig = self.battleRoom.inputDataSource:GetTalentSkill(_id,_level);
    if LogTools.SkillLog and CheckLogLevel(LogLevel.log) and not talentSkillConfig then
        LogTools.LogByLevel(LogLevel.log,"被动技能没有配置",_id,_level);
    end
    if not talentSkillConfig then
        return results
    end
    for i, v in pairs(talentSkillConfig.results) do
        ---@type SkillResult
        local talentResult = self.battleRoom.inputDataSource:GetDict("SkillResult",v);
        if LogTools.SkillLog and CheckLogLevel(LogLevel.log) and not talentResult then
            LogTools.LogByLevel(LogLevel.log,"被动技能result没有配置",v);
        end
        if talentResult then
            if talentResult.resultType == TalentSkillBuffResult:GetType() then
                results[v] = TalentSkillBuffResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSkillTargetBuffResult:GetType() then
                results[v] = TalentSkillTargetBuffResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSkillBarrageBuffResult:GetType() then
                results[v] = TalentSkillBarrageBuffResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSKillBuffTimeResult:GetType() then
                results[v] = TalentSKillBuffTimeResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSkillAreaBuffResult:GetType() then
                results[v] = TalentSkillAreaBuffResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSkillUpSkillLevelResult:GetType() then
                results[v] = TalentSkillUpSkillLevelResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSkillAreaTimeResult:GetType() then
                results[v] = TalentSkillAreaTimeResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSkillChangeSkillCoolDownResult:GetType() then
                results[v] = TalentSkillChangeSkillCoolDownResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSkillChangeBuffCurrentTimeResult:GetType() then
                results[v] = TalentSkillChangeBuffCurrentTimeResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSkillRemoveBuffResult:GetType() then
                results[v] = TalentSkillRemoveBuffResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSkillTargetGenerateBulletResult:GetType() then
                results[v] = TalentSkillTargetGenerateBulletResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSkillCreateDropObjectResult:GetType() then
                results[v] = TalentSkillCreateDropObjectResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSkillUpPercentBuffResult:GetType() then
                results[v] = TalentSkillUpPercentBuffResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSkillChangePropByDamageResult:GetType() then
                results[v] = TalentSkillChangePropByDamageResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSkillSummonBuffResult:GetType() then
                results[v] = TalentSkillSummonBuffResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSkillChangeLeaderBuffResult:GetType() then
                results[v] = TalentSkillChangeLeaderBuffResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSkillChangeElementDamageResult:GetType() then
                results[v] = TalentSkillChangeElementDamageResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSkillAddElementEffectResult:GetType() then
                results[v] = TalentSkillAddElementEffectResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSkillChangeBuffTempParamResult:GetType() then
                results[v] = TalentSkillChangeBuffTempParamResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSkillChangeBuffInstanceParamResult:GetType() then
                results[v] = TalentSkillChangeBuffInstanceParamResult.New(self:GetBattleId());
            end
            if talentResult.resultType == TalentSkillChangeBuffStackNumResult:GetType() then
                results[v] = TalentSkillChangeBuffStackNumResult.New(self:GetBattleId());
            end
        end
    end
    return results;
end

---被动技能触发
---@param _id number 被动技能Id
---@param _level number 技能等级
---@return TalentSkillNoneTrigger[]
function BattleObjCom_Skill:GetSkillTriggerById(_id,_level)
    local triggers = {};
    ---@type TalentSkill
    local talentSkillConfig = self.battleRoom.inputDataSource:GetTalentSkill(_id,_level);
    if LogTools.SkillLog and CheckLogLevel(LogLevel.log) and not talentSkillConfig then
        LogTools.LogByLevel(LogLevel.log,"被动技能没有配置",_id,_level);
    end
    if talentSkillConfig then
        for i, v in pairs(talentSkillConfig.triggers) do
            ---@type SkillTrigger
            local talentSkillTrigger = self.battleRoom.inputDataSource:GetDict("SkillTrigger",v);
            if LogTools.SkillLog and CheckLogLevel(LogLevel.log) and not talentSkillTrigger then
                LogTools.LogByLevel(LogLevel.log,"被动技能trigger没有配置",v);
            end
            if talentSkillTrigger then
                if talentSkillTrigger.triggerType == TalentSkillNoneTrigger:GetType() then
                    triggers[v] = TalentSkillNoneTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillBattleStartTimeTrigger:GetType() then
                    triggers[v] = TalentSkillBattleStartTimeTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillHitTimeTrigger:GetType() then
                    triggers[v] = TalentSkillHitTimeTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillHitCountTrigger:GetType() then
                    triggers[v] = TalentSkillHitCountTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillKillCountTrigger:GetType() then
                    triggers[v] = TalentSkillKillCountTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillDamageTrigger:GetType() then
                    triggers[v] = TalentSkillDamageTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillCriticalTrigger:GetType() then
                    triggers[v] = TalentSkillCriticalTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillManaMinTrigger:GetType() then
                    triggers[v] = TalentSkillManaMinTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillManaMaxTrigger:GetType() then
                    triggers[v] = TalentSkillManaMaxTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillElementReactTrigger:GetType() then
                    triggers[v] = TalentSkillElementReactTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillCastSkillTrigger:GetType() then
                    triggers[v] = TalentSkillCastSkillTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillHpMinTrigger:GetType() then
                    triggers[v] = TalentSkillHpMinTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillHpMaxTrigger:GetType() then
                    triggers[v] = TalentSkillHpMaxTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillOnBuffTrigger:GetType() then
                    triggers[v] = TalentSkillOnBuffTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillBeDamageTrigger:GetType() then
                    triggers[v] = TalentSkillBeDamageTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillRemoveBuffTrigger:GetType() then
                    triggers[v] = TalentSkillRemoveBuffTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillUseLeaderTimeTrigger:GetType() then
                    triggers[v] = TalentSkillUseLeaderTimeTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillDestroyBulletTrigger:GetType() then
                    triggers[v] = TalentSkillDestroyBulletTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillBarrageTrigger:GetType() then
                    triggers[v] = TalentSkillBarrageTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillChangeLeaderTrigger:GetType() then
                    triggers[v] = TalentSkillChangeLeaderTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillBuffKillCountTrigger:GetType() then
                    triggers[v] = TalentSkillBuffKillCountTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillUnitLostBloodTrigger:GetType() then
                    triggers[v] = TalentSkillUnitLostBloodTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillReloadEndTrigger:GetType() then
                    triggers[v] = TalentSkillReloadEndTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillCheckObjectExist:GetType() then
                    triggers[v] = TalentSkillCheckObjectExist.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillLoseHPTrigger:GetType() then
                    triggers[v] = TalentSkillLoseHPTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillAimToTargetTrigger:GetType() then
                    triggers[v] = TalentSkillAimToTargetTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillSpecialCounterTrigger:GetType() then
                    triggers[v] = TalentSkillSpecialCounterTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillChangeWarriorStatusTrigger:GetType() then
                    triggers[v] = TalentSkillChangeWarriorStatusTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillJIZouPercentTrigger:GetType() then
                    triggers[v] = TalentSkillJIZouPercentTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillCheckPropEqualTrigger:GetType() then
                    triggers[v] = TalentSkillCheckPropEqualTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillChangeHitTargetTrigger:GetType() then
                    triggers[v] = TalentSkillChangeHitTargetTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillHealTrigger:GetType() then
                    triggers[v] = TalentSkillHealTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillBeHealTrigger:GetType() then
                    triggers[v] = TalentSkillBeHealTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillEnemyDeadTrigger:GetType() then
                    triggers[v] = TalentSkillEnemyDeadTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillInSprintActionTrigger:GetType() then
                    triggers[v] = TalentSkillInSprintActionTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillElementEffectTrigger:GetType() then
                    triggers[v] = TalentSkillElementEffectTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillAddBuffTrigger:GetType() then
                    triggers[v] = TalentSkillAddBuffTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillCheckCurrentObjectTrigger:GetType() then
                    triggers[v] = TalentSkillCheckCurrentObjectTrigger.New(self:GetBattleId());
                end
                if talentSkillTrigger.triggerType == TalentSkillCheckPropValueTrigger:GetType() then
                    triggers[v] = TalentSkillCheckPropValueTrigger.New(self:GetBattleId());
                end
            end
        end
    end
    return triggers;
end

---添加被动技能
---@public
---@param _id number 技能id
---@param _level number 技能等级
---@param _state number 技能状态
function BattleObjCom_Skill:AddTalentSkill(_id,_level,_state)
    local talentSKillInfo = {};
    talentSKillInfo.id = _id;
    talentSKillInfo.level = _level;
    talentSKillInfo.state = _state;
    ---@type TalentSkill
    local talentSkillConfig = self.battleRoom.inputDataSource:GetTalentSkill(_id,_level);
    if LogTools.SkillLog and CheckLogLevel(LogLevel.log) and not talentSkillConfig then
        LogTools.LogByLevel(LogLevel.log,"被动技能没有配置",_id,_level);
    end
    if talentSkillConfig then
        for id, v in pairs(self.talentSkills) do
            local tempConfig = self.battleRoom.inputDataSource:GetTalentSkill(v.id,v.level);
            if tempConfig.groupId and tempConfig.groupId ~= 0 and talentSkillConfig.groupId == tempConfig.groupId and talentSkillConfig.priority >= tempConfig.priority then
                local tempSkill = self.talentSkills[tempConfig.id];
                self.talentSkills[tempConfig.id] = nil;
                if tempSkill and tempSkill.triggerCount > 0 then
                    local targetList = tempSkill.triggeredList;
                    for i, result in pairs(tempSkill.skillResults) do
                        ---@type SkillResult
                        local skillResult = self.battleRoom.inputDataSource:GetDict("SkillResult",i);
                        for objectId, targetCount in pairs(targetList) do
                            v:Release(skillResult, objectId,targetCount,v);
                        end
                    end
                    tempSkill.triggeredList = {};
                end

                local talentSkill = self:CreateTalentSkill(talentSKillInfo);
                self.talentSkills[talentSkill.id] = talentSkill;
                return;
            end
        end
        local talentSkill = self:CreateTalentSkill(talentSKillInfo);
        self.talentSkills[talentSkill.id] = talentSkill;
    end
end

---移除被动技能
---@public
---@param _id number 技能id
function BattleObjCom_Skill:RemoveTalentSkill(_id)
    local skill = self.talentSkills[_id];
    self.talentSkills[_id] = nil;
    if skill and skill.triggerCount > 0 then
        local targetList = skill.triggeredList;
        for i, v in pairs(skill.skillResults) do
            ---@type SkillResult
            local skillResult = self.battleRoom.inputDataSource:GetDict("SkillResult",i);
            for objectId, targetCount in pairs(targetList) do
                v:Release(skillResult, objectId,targetCount,skill);
            end
        end
        skill.triggeredList = {};
    end
end

---@public
---击中目标回调
---@param _sourceNetId number 伤害来源netId
---@param _sourceObjectId number 伤害源objectId
---@param _targetNetId number 伤害目标netId
---@param _targetObjectId number 伤害目标objectId
---@param _targetType number 伤害目标类型
---@param _damageSourceId number 伤害类型Id
---@param _damageSourceType number 伤害来源类型
---@param _damage number 造成伤害
---@param _damageType number 伤害类型
---@param _isCritical boolean 是否暴击
---@param _targetDead boolean 目标是否死亡
---@param _hurtDisReduceEnum number 伤害距离衰减类型，对应 HurtDisReduceEnum 定义的值
---@param _isWeakness boolean 是否为弱点攻击
---@param _curAttachEleId number 击中时目标元素
---@param _isAccumulatedAttack boolean 是否为蓄力攻击
---@param _skillBarrageId number 技能弹幕id
function BattleObjCom_Skill:OnSkillHitTarget(_sourceNetId,_sourceObjectId,_targetNetId,_targetObjectId,_targetType,_damageSourceId,_damageSourceType,_damage,_damageType,_isCritical,_targetDead,_hurtDisReduceEnum,_isWeakness,_curAttachEleId,_isAccumulatedAttack,_skillBarrageId)
    if self:GetObject():CheckDead() then
        return;
    end
    for i, talentSkill in pairs(self.talentSkills) do
        if talentSkill.triggerCd <= 0 then
            for i, v in pairs(talentSkill.skillTriggers) do
                if v.OnSkillHitTarget then
                    ---@type SkillTrigger
                    local talentSkillTrigger = self.battleRoom.inputDataSource:GetDict("SkillTrigger",i);
                    if talentSkillTrigger.parm7 ~= BATTLE_TALENT_SKILL_TRIGGER_SOURCE.self or _sourceObjectId == self:GetObject():GetObjectId() then
                        v:OnSkillHitTarget(talentSkillTrigger,self:GetObject(),_targetNetId,_targetObjectId,_targetType,_damageSourceId,_damageSourceType,_damage,_damageType,_isCritical,_targetDead,_hurtDisReduceEnum,_isWeakness,_curAttachEleId,_isAccumulatedAttack,_skillBarrageId);
                    end
                end
            end
        end
    end
end

---@public
---击中目标回调
---@param _sourceNetId number 伤害来源netId
---@param _sourceObjectId number 伤害源objectId
---@param _targetNetId number 伤害目标netId
---@param _targetObjectId number 伤害目标objectId
---@param _targetType number 伤害目标类型
---@param _damageSourceId number 伤害类型Id
---@param _damageSourceType number 伤害来源类型
---@param _damage number 造成伤害
---@param _damageType number 伤害类型
---@param _isCritical boolean 是否暴击
---@param _targetDead boolean 目标是否死亡
---@param _hurtDisReduceEnum number 伤害距离衰减类型，对应 HurtDisReduceEnum 定义的值
---@param _isWeakness boolean 是否为弱点攻击
---@param _curAttachEleId number 击中时目标元素
---@param _isAccumulatedAttack boolean 是否为蓄力攻击
function BattleObjCom_Skill:OnHitTarget(_sourceNetId,_sourceObjectId,_targetNetId,_targetObjectId,_targetType,_damageSourceId,_damageSourceType,_damage,_damageType,_isCritical,_targetDead,_hurtDisReduceEnum,_isWeakness,_curAttachEleId,_isAccumulatedAttack)
    if self:GetObject():CheckDead() then
        return;
    end
    for i, talentSkill in pairs(self.talentSkills) do
        if talentSkill.triggerCd <= 0 then
            for i, v in pairs(talentSkill.skillTriggers) do
                if v.OnHitTarget then
                    ---@type SkillTrigger
                    local talentSkillTrigger = self.battleRoom.inputDataSource:GetDict("SkillTrigger",i);
                    if talentSkillTrigger.parm7 ~= BATTLE_TALENT_SKILL_TRIGGER_SOURCE.self or _sourceObjectId == self:GetObject():GetObjectId() then
                        v:OnHitTarget(talentSkillTrigger,_targetNetId,_targetObjectId,_targetType,_damageSourceId,_damageSourceType,_damage,_damageType,_isCritical,_targetDead,_hurtDisReduceEnum,_isWeakness,_curAttachEleId,_isAccumulatedAttack);
                    end
                end
            end
        end
    end
end

---@public
---击中目标回调
---@param _sourceNetId number 伤害来源netId
---@param _sourceObjectId number 伤害源objectId
---@param _targetNetId number 伤害目标netId
---@param _targetObjectId number 伤害目标objectId
---@param _targetType number 伤害目标类型
---@param _damageSourceId number 伤害类型Id
---@param _damageSourceType number 伤害来源类型
---@param _damage number 造成伤害
---@param _damageType number 伤害类型
---@param _isCritical boolean 是否暴击
---@param _targetDead boolean 目标是否死亡
---@param _hurtDisReduceEnum number 伤害距离衰减类型，对应 HurtDisReduceEnum 定义的值
function BattleObjCom_Skill:OnBeHit(_sourceNetId,_sourceObjectId,_targetNetId,_targetObjectId,_targetType,_damageSourceId,_damageSourceType,_damage,_damageType,_isCritical,_targetDead,_hurtDisReduceEnum)
    if self:GetObject():CheckDead() then
        return;
    end
    for i, talentSkill in pairs(self.talentSkills) do
        if talentSkill.triggerCd <= 0 then
            for i, v in pairs(talentSkill.skillTriggers) do
                if v.OnBeHit then
                    ---@type SkillTrigger
                    local talentSkillTrigger = self.battleRoom.inputDataSource:GetDict("SkillTrigger",i);
                    if talentSkillTrigger.parm7 ~= BATTLE_TALENT_SKILL_TRIGGER_SOURCE.self or _targetObjectId == self:GetObject():GetObjectId() then
                        v:OnBeHit(talentSkillTrigger,_sourceNetId,_sourceObjectId,_targetType,_damageSourceId,_damageSourceType,_damage,_damageType,_isCritical,_targetDead,_hurtDisReduceEnum);
                    end
                end
            end
        end
    end
end

---@public
---释放节能回调
---@param _sourceNetId number 伤害来源netId
---@param _sourceObjectId number 伤害源objectId
---@param _skillId number 技能id
function BattleObjCom_Skill:OnCastSkill(_sourceNetId,_sourceObjectId,_skillId)
    if self:GetObject():CheckDead() then
        return;
    end
    for i, talentSkill in pairs(self.talentSkills) do
        if talentSkill.triggerCd <= 0 then
            for i, v in pairs(talentSkill.skillTriggers) do
                if v.OnCastSkill then
                    ---@Type SkillTrigger
                    local talentSkillTrigger = self.battleRoom.inputDataSource:GetDict("SkillTrigger",i);
                    if talentSkillTrigger.parm7 ~= BATTLE_TALENT_SKILL_TRIGGER_SOURCE.self or _sourceObjectId == self:GetObject():GetObjectId() then
                        v:OnCastSkill(talentSkillTrigger,_skillId);
                    end
                end
            end
        end
        for i, v in pairs(talentSkill.skillResults) do
            if v:GetType() == TalentSkillChangeSkillCoolDownResult:GetType() then
                ---@Type SkillResult
                local talentSkillResult = self.battleRoom.inputDataSource:GetDict("SkillResult",i);
                local skillId = talentSkillResult.resultParm1;
                if skillId == _skillId then
                    v.max = 0;
                end
            end
        end
    end
end

---@public
---buff结束回调
---@param _buffId number buffId
function BattleObjCom_Skill:OnBuffOver(_sourceNetId,_sourceObjectId,_buffId,_stackNum,_isTimeOver)
    if self:GetObject():CheckDead() then
        return;
    end
    for i, talentSkill in pairs(self.talentSkills) do
        for i, v in pairs(talentSkill.skillResults) do
            if v:GetType() == TalentSkillChangeBuffCurrentTimeResult:GetType() then
                local talentSkillResult = self.battleRoom.inputDataSource:GetDict("SkillResult",i);
                local buffId = talentSkillResult.resultParm1;
                if buffId == _buffId then
                    v.max = 0;
                end
            end
        end

        if talentSkill.triggerCd <= 0 then
            for i, v in pairs(talentSkill.skillTriggers) do
                if v.onBuffOver then
                    ---@type SkillTrigger
                    local talentSkillTrigger = self.battleRoom.inputDataSource:GetDict("SkillTrigger",i);
                    if talentSkillTrigger.parm7 ~= BATTLE_TALENT_SKILL_TRIGGER_SOURCE.self or _sourceObjectId == self:GetObject():GetObjectId() then
                        v:onBuffOver(talentSkillTrigger,_buffId,_stackNum,_isTimeOver);
                    end
                end
            end
        end
    end
end

---@public
---buff结束回调
---@param _buffId number buffId
function BattleObjCom_Skill:OnAddBuffToOther(_buffId,_targetNetId,_targetObjectId)
    if self:GetObject():CheckDead() then
        return;
    end
    for i, talentSkill in pairs(self.talentSkills) do
        if talentSkill.triggerCd <= 0 then
            for i, v in pairs(talentSkill.skillTriggers) do
                if v.OnAddBuffToOther then
                    ---@type SkillTrigger
                    local talentSkillTrigger = self.battleRoom.inputDataSource:GetDict("SkillTrigger",i);
                    if talentSkillTrigger.parm7 ~= BATTLE_TALENT_SKILL_TRIGGER_SOURCE.self or _sourceObjectId == self:GetObject():GetObjectId() then
                        v:OnAddBuffToOther(talentSkillTrigger,self:GetObject(),_buffId,_targetNetId,_targetObjectId);
                    end
                end
            end
        end
    end
end

---@public
---释放节能回调
---@param _sourceNetId number 伤害来源netId
---@param _sourceObjectId number 伤害源objectId
---@param _targetNetId number 伤害目标netId
---@param _targetObjectId number 伤害目标objectId
---@param _elementReactId number 元素Id
function BattleObjCom_Skill:OnElementReact(_sourceNetId,_sourceObjectId,_targetNetId,_targetObjectId,_elementReactId)
    if self:GetObject():CheckDead() then
        return;
    end
    for i, talentSkill in pairs(self.talentSkills) do
        if talentSkill.triggerCd <= 0 then
            for i, v in pairs(talentSkill.skillTriggers) do
                if v.OnElementReact then
                    ---@type SkillTrigger
                    local talentSkillTrigger = self.battleRoom.inputDataSource:GetDict("SkillTrigger",i);
                    if talentSkillTrigger.parm7 ~= BATTLE_TALENT_SKILL_TRIGGER_SOURCE.self or _sourceObjectId == self:GetObject():GetObjectId() then
                        v:OnElementReact(talentSkillTrigger,_targetNetId,_targetObjectId,_elementReactId);
                    end
                end
            end
        end
    end
end

---@public
---释放节能回调
---@param _sourceNetId number 伤害来源netId
---@param _sourceObjectId number 伤害源objectId
---@param _targetNetId number 伤害目标netId
---@param _targetObjectId number 伤害目标objectId
---@param _elementEffectId number 元素Id
function BattleObjCom_Skill:OnElementEffect(_sourceNetId,_sourceObjectId,_targetNetId,_targetObjectId,_elementEffectId)
    if self:GetObject():CheckDead() then
        return;
    end
    for i, talentSkill in pairs(self.talentSkills) do
        if talentSkill.triggerCd <= 0 then
            for i, v in pairs(talentSkill.skillTriggers) do
                if v.OnElementEffect then
                    ---@type SkillTrigger
                    local talentSkillTrigger = self.battleRoom.inputDataSource:GetDict("SkillTrigger",i);
                    if talentSkillTrigger.parm7 ~= BATTLE_TALENT_SKILL_TRIGGER_SOURCE.self or _sourceObjectId == self:GetObject():GetObjectId() then
                        v:OnElementEffect(talentSkillTrigger,self:GetObject(),_targetNetId,_targetObjectId,_elementEffectId);
                    end
                end
            end
        end
    end
end

---@public
---切换目标
---@param _targetNetId number 伤害目标netId
function BattleObjCom_Skill:OnChangeTarget(_targetNetId,_sourceObjectId)
    if self:GetObject():CheckDead() then
        return;
    end
    for i, talentSkill in pairs(self.talentSkills) do
        if talentSkill.triggerCd <= 0 then
            for i, v in pairs(talentSkill.skillTriggers) do
                if v.OnChangeTarget then
                    ---@type SkillTrigger
                    local talentSkillTrigger = self.battleRoom.inputDataSource:GetDict("SkillTrigger",i);
                    if talentSkillTrigger.parm7 ~= BATTLE_TALENT_SKILL_TRIGGER_SOURCE.self or _sourceObjectId == self:GetObject():GetObjectId() then
                        v:OnChangeTarget(_targetNetId);
                    end
                end
            end
        end
    end
end

---@public
---创建发射器
---@param _skillId number 技能Id
---@param _barrageId number 发射器id
function BattleObjCom_Skill:OnCreateBarrage(_skillId,_barrageId,_sourceObjectId)
    if self:GetObject():CheckDead() then
        return;
    end
    for i, talentSkill in pairs(self.talentSkills) do
        if talentSkill.triggerCd <= 0 then
            for i, v in pairs(talentSkill.skillTriggers) do
                if v.OnCreateBarrage then
                    ---@type SkillTrigger
                    local talentSkillTrigger = self.battleRoom.inputDataSource:GetDict("SkillTrigger",i);
                    if talentSkillTrigger.parm7 ~= BATTLE_TALENT_SKILL_TRIGGER_SOURCE.self or _sourceObjectId == self:GetObject():GetObjectId() then
                        v:OnCreateBarrage(talentSkillTrigger,_skillId,_barrageId);
                    end
                end
            end
        end
    end
end

---@public 受到治疗
function BattleObjCom_Skill:OnBeHealed(_sourceNetId,_sourceObjectId,_castSkillId)
    if self:GetObject():CheckDead() then
        return;
    end
    for i, talentSkill in pairs(self.talentSkills) do
        if talentSkill.triggerCd <= 0 then
            for i, v in pairs(talentSkill.skillTriggers) do
                if v.OnBeHealed then
                    ---@type SkillTrigger
                    local talentSkillTrigger = self.battleRoom.inputDataSource:GetDict("SkillTrigger",i);
                    if talentSkillTrigger.parm7 ~= BATTLE_TALENT_SKILL_TRIGGER_SOURCE.self or _sourceObjectId == self:GetObject():GetObjectId() then
                        v:OnBeHealed(talentSkillTrigger,_sourceNetId,_sourceObjectId,_castSkillId);
                    end
                end
            end
        end
    end
end

---@public 受到治疗
function BattleObjCom_Skill:OnHealSomeone(_targetNetId,_targetObjectId,_sourceObjectId,_castSkillId)
    if self:GetObject():CheckDead() then
        return;
    end
    for i, talentSkill in pairs(self.talentSkills) do
        if talentSkill.triggerCd <= 0 then
            for i, v in pairs(talentSkill.skillTriggers) do
                if v.OnHealSomeone then
                    ---@type SkillTrigger
                    local talentSkillTrigger = self.battleRoom.inputDataSource:GetDict("SkillTrigger",i);
                    if talentSkillTrigger.parm7 ~= BATTLE_TALENT_SKILL_TRIGGER_SOURCE.self or _sourceObjectId == self:GetObject():GetObjectId() then
                        v:OnHealSomeone(talentSkillTrigger,self:GetObject(),_targetNetId,_targetObjectId,_castSkillId);
                    end
                end
            end
        end
    end
end

---@public 单位死亡
function BattleObjCom_Skill:OnObjectDead(_targetNetId,_targetObjectId)
    if self:GetObject():CheckDead() then
        return;
    end
    for i, talentSkill in pairs(self.talentSkills) do
        if talentSkill.triggerCd <= 0 then
            for i, v in pairs(talentSkill.skillTriggers) do
                if v.OnObjectDead then
                    ---@type SkillTrigger
                    local talentSkillTrigger = self.battleRoom.inputDataSource:GetDict("SkillTrigger",i);
                    v:OnObjectDead(talentSkillTrigger,self:GetObject(),_targetNetId,_targetObjectId,self:GetObject():GetParentUnit():GetNetId(),self:GetObject():GetObjectId());
                end
            end
        end
    end
end

---生成主动技能
---@param _activeSkillInfo table
---@return BattlePlayerActiveSkill
function BattleObjCom_Skill:CreateActiveSkill(_activeSkillInfo)
    local activeSkill = BattlePlayerActiveSkill.New()
    activeSkill:SetId(_activeSkillInfo.id)
    activeSkill:SetLevel(_activeSkillInfo.level)
    activeSkill:SetType(_activeSkillInfo.type)

    ---@type SkillModel
    local skillModel = self.battleRoom.inputDataSource:GetSkillModel(_activeSkillInfo.id);
    if skillModel == nil then
        if LogTools.SkillLog and CheckLogLevel(LogLevel.log) then
            LogTools.LogByLevel(LogLevel.log,"技能没有配置",_activeSkillInfo.id);
        end
        return activeSkill;
    end

    local finalStartTime = self.battleRoom.inputDataSource:GetSkillFinalParam(skillModel.startTime,skillModel.skillId,_activeSkillInfo.level)
    local finalMaxTime = self.battleRoom.inputDataSource:GetSkillFinalParam(skillModel.maxTime,skillModel.skillId,_activeSkillInfo.level)
    local finalCommonCoolDown = self.battleRoom.inputDataSource:GetSkillFinalParam(skillModel.commonCoolDown,skillModel.skillId,_activeSkillInfo.level)

    if finalStartTime ~= finalMaxTime then
        self:SkillEnterCd(_activeSkillInfo.id,finalCommonCoolDown,finalMaxTime - finalStartTime);
    end
    return activeSkill
end

---检测技能cd
---@public
---@param _skillId number 技能id
---@param _maxTime number 最大释放次数
---@return boolean 技能是否在cd
function BattleObjCom_Skill:CheckSkillCd(_skillId,_maxTime)
    if self.skillCastTimes[_skillId] == nil then
        self.skillCastTimes[_skillId] = 0;
        return false;
    end
    if self.skillCastTimes[_skillId] < _maxTime then
        return false;
    end
    return self.skillCoolDowns[_skillId] ~= nil;
end

---检测技能cd
---@public
---@param _skillType number 技能类型
---@return boolean 技能是否在cd
function BattleObjCom_Skill:CheckSKillCdBySkillType(_skillType)
    for skillId, v in pairs(self.skillCoolDowns) do
        ---@type Skill
        local SkillConfig = self.battleRoom.inputDataSource:GetDict("Skill",skillId);
        if SkillConfig and SkillConfig.skillType == _skillType then
            local SkillModel = self.battleRoom.inputDataSource:GetSkillModel(skillId);
            if SkillModel and self.skillCastTimes[skillId] >= self.battleRoom.inputDataSource:GetSkillFinalParam(SkillModel.maxTime, SkillModel.skillId, self:GetSkillLevel(SkillModel.skillId)) then
                return true;
            end
        end
    end
    return false;
end

---检测技能可释放
---@public
---@param _skillId number 技能Id
---@return boolean 技能是否可释放
function BattleObjCom_Skill:CheckCastSKill(_skillId)
    local SkillModel = self.battleRoom.inputDataSource:GetSkillModel(_skillId);
    if not SkillModel then
        if LogTools.SkillLog and CheckLogLevel(LogLevel.log) then
            LogTools.LogByLevel(LogLevel.log,"技能没有配置",_skillId);
        end
        return false;
    end
    local _curHero = self:GetObject();

    if self:CheckSkillCd(SkillModel.skillId,self.battleRoom.inputDataSource:GetSkillFinalParam(SkillModel.maxTime,SkillModel.skillId,self:GetSkillLevel(SkillModel.skillId))) then
        return false;
    end

    ---@type BattleObjCom_Weapon
    local weapon = _curHero:GetComponent(BattleObjectComponentType.Weapon);
    if weapon and not weapon:CheckUseSkill(self.battleRoom.inputDataSource:GetSkillFinalParam(SkillModel.manaCast,SkillModel.skillId,self:GetSkillLevel(SkillModel.skillId))) then
        return false;
    end

    ---@type BattleObjCom_Property
    local property = _curHero:GetComponent(BattleObjectComponentType.Property);
    local curSuperMana = property:GetPropertyByName(BattlePropertyEnum.Jizou_Cur);
    local superCast = self.battleRoom.inputDataSource:GetSkillFinalParam(SkillModel.superCast, SkillModel.skillId, self:GetSkillLevel(SkillModel.skillId))

    if curSuperMana < superCast then
        return false;
    end
    return true;
end

---检测技能可释放
---@public
---@param _skillType number 技能类型
---@return boolean 技能是否可释放
function BattleObjCom_Skill:CheckCastSKillBySkillType(_skillType)
    ---@type BattleObjCom_Config
    local _configCom = self:GetObject():GetComponent(BattleObjectComponentType.Config)
    if not _configCom then
        return false;
    end
    local config = _configCom:GetDataInstanceXls();
    local skillId = 0;
    if _skillType == SkillTypeEnum.NORMAL:GetId() then
        skillId = self:GetFinalSkill(_skillType,config.commonSkillId);
    end
    if _skillType == SkillTypeEnum.ACTIVE:GetId() then
        skillId = self:GetFinalSkill(_skillType,config.activeSkillId);
    end
    if _skillType == SkillTypeEnum.JI_ZOU:GetId() then
        skillId = self:GetFinalSkill(_skillType,config.jizouSkillGroup);
    end
    return self:CheckCastSKill(skillId);
end

---技能进入cd
---@public
---@param _skillId number 技能id
---@param _cdTime number 技能id
---@param _castTime number 释放次数 (0为改变当前cd,其他值为进入cd)
function BattleObjCom_Skill:SkillEnterCd(_skillId,_cdTime,_castTime)

    local SkillModel = self.battleRoom.inputDataSource:GetSkillModel(_skillId);
    if not SkillModel then
        if LogTools.SkillLog and CheckLogLevel(LogLevel.log) then
            LogTools.LogByLevel(LogLevel.log,"技能没有配置",_skillId);
        end
        return;
    end
    if _castTime == nil then
        _castTime = 1;
    end
    local maxNum = self.battleRoom.inputDataSource:GetSkillFinalParam(SkillModel.maxTime,SkillModel.skillId,self:GetSkillLevel(SkillModel.skillId))
    if _castTime > 0 and self.skillCastTimes[_skillId] and self.skillCastTimes[_skillId] >= maxNum then
        return;
    end
    ---改变cd
    if _castTime ~= 0 then
        ---@type Skill
        local skillConfig = self.battleRoom.inputDataSource:GetDict("Skill",_skillId);
        if skillConfig then
            ---@type BattleObjCom_Property
            local com_prop = self:GetObject():GetComponent(BattleObjectComponentType.Property);
            if skillConfig.skillType == SkillTypeEnum.ACTIVE:GetId() then
                _cdTime = _cdTime - _cdTime * com_prop:GetPropertyByName(BattlePropertyEnum.Skill_Active_CD_Reduce);
            elseif skillConfig.skillType == SkillTypeEnum.JI_ZOU:GetId() then
                _cdTime = _cdTime - _cdTime * com_prop:GetPropertyByName(BattlePropertyEnum.Jizou_CD_Reduce);
            end
        end
    end

    if not self.skillCoolDowns[_skillId] or _castTime == 0 then
        self.skillCoolDowns[_skillId] = _cdTime;
    end
    if self.skillCastTimes[_skillId] == nil then
        self.skillCastTimes[_skillId] = 0;
    end
    self.skillCastTimes[_skillId] = self.skillCastTimes[_skillId] + _castTime;
    if self.skillCastTimes[_skillId] == 0 then
        self.skillCastTimes[_skillId] = 1;
    end
    if self.skillCastTimes[_skillId] > maxNum then
        self.skillCastTimes[_skillId] = maxNum;
    end

    local skillCoolDown = {};
    skillCoolDown.skillId = _skillId;
    skillCoolDown.coolDown = self.skillCoolDowns[_skillId];
    skillCoolDown.coolDownNum = self.skillCastTimes[_skillId];
    skillCoolDown.coolDownServerTime = math.floor(TimeUtils.battleNow(self:GetBattleId()) + self.skillCoolDowns[_skillId] * 1000);

    local skillCoolDownInfo = {}
    table.insert(skillCoolDownInfo,skillCoolDown);

    local battleUnitSkillCoolDown = {};
    battleUnitSkillCoolDown.skillCoolDownInfo = skillCoolDownInfo;

    local battleUnitKeyData = {};
    battleUnitKeyData.netId = self:GetObject():GetParentUnit():GetNetId();
    battleUnitKeyData.objId = self:GetObject():GetObjectId();
    battleUnitKeyData.skillCoolDown = battleUnitSkillCoolDown;

    self.battleRoom.outputDataSource:AddBattleUnitKeyData(battleUnitKeyData);
end

---@public
---增加技能释放次数
---@param _skillId number 技能id
---@param _castTime number 释放次数
function BattleObjCom_Skill:IncreaseActionSkillCastTime(_skillId,_castTime)
    if _castTime <= 0 then
        return;
    end
    local cdTime = 0;
    if self.skillCoolDowns[_skillId] then
        cdTime = self.skillCoolDowns[_skillId];
    end
    local castTime = 0;
    if self.skillCastTimes[_skillId] then
        if self.skillCastTimes[_skillId] > _castTime then
            self.skillCastTimes[_skillId] = self.skillCastTimes[_skillId] - _castTime;
            castTime = self.skillCastTimes[_skillId];
        else
            self.skillCastTimes[_skillId] = nil;
            self.skillCoolDowns[_skillId] = nil;
            cdTime = 0;
        end
    end

    local skillCoolDown = {};
    skillCoolDown.skillId = _skillId;
    skillCoolDown.coolDown = cdTime;
    skillCoolDown.coolDownNum = castTime;
    skillCoolDown.coolDownServerTime = math.floor(TimeUtils.battleNow(self:GetBattleId()) + cdTime * 1000);

    local skillCoolDownInfo = {}
    table.insert(skillCoolDownInfo,skillCoolDown);

    local battleUnitSkillCoolDown = {};
    battleUnitSkillCoolDown.skillCoolDownInfo = skillCoolDownInfo;

    local battleUnitKeyData = {};
    battleUnitKeyData.netId = self:GetObject():GetParentUnit():GetNetId();
    battleUnitKeyData.objId = self:GetObject():GetObjectId();
    battleUnitKeyData.skillCoolDown = battleUnitSkillCoolDown;

    self.battleRoom.outputDataSource:AddBattleUnitKeyData(battleUnitKeyData);
end

---修改技能伤害参数
---@public
---@param _skillId number 技能类型
---@param _index number 索引
---@param _hurtParam number 伤害参数
function BattleObjCom_Skill:ChangeSkillHurtParam(_skillId,_index, _hurtParam)
    self.skillHurtParam[_skillId][_index] = _hurtParam;
end

---获得技能伤害参数
---@public
---@param _skillId number 技能类型
---@param _index number 索引
function BattleObjCom_Skill:GetSkillHurtParam(_skillId,_index)
    if not self.skillHurtParam[_skillId] then
        return nil;
    end
    return self.skillHurtParam[_skillId][_index];
end

---修改技能伤害参数
---@public
---@param _skillType number 技能类型
---@param _elementId number 元素id
function BattleObjCom_Skill:ChangeSkillElement(_skillType,_elementId)
    self.changeSkillElement[_skillType] = _elementId;
end
---获得技能伤害参数
---@public
---@param _skillType number 技能类型
function BattleObjCom_Skill:GetSkillElement(_skillType)
    if not self.changeSkillElement[_skillType] then
        return nil;
    end
    return self.changeSkillElement[_skillType];
end


---技能进入cd
---@public
---@param _skillType number 技能类型
---@param _changeCdTime number 改变cd
function BattleObjCom_Skill:ChangeSkillCoolDownBySkillType(_skillType, _changeCdTime)
    local findOriginalSkill = false;
    local originalSkill = self:GetOriginalSkillByType(_skillType);

    for i, v in pairs(self.skillCoolDowns) do
        ---@type Skill
        local skillConfig = self.battleRoom.inputDataSource:GetDict("Skill",i);
        if skillConfig.skillType == _skillType then
            if i == originalSkill then
                findOriginalSkill = true;
            end
            local skillCoolDownTime = v + _changeCdTime;
            if skillCoolDownTime < 0 then
                skillCoolDownTime = 0;
            end
            self:SkillEnterCd(i,skillCoolDownTime,0);
        end
    end

    if findOriginalSkill == false and _changeCdTime > 0 then
        self:SkillEnterCd(originalSkill,_changeCdTime,0)
        return;
    end
end

---获得类型的初始技能
---@private
function BattleObjCom_Skill:GetOriginalSkillByType(_skillType)
    local skillId = 0;
    local dict = self:GetObject():GetDataInstanceXls();
    if(_skillType == SkillTypeEnum.NORMAL:GetId()) then
        skillId = dict.commonSkillId;
    end
    if(_skillType == SkillTypeEnum.ACTIVE:GetId()) then
        skillId = dict.activeSkillId;
    end
    if(_skillType == SkillTypeEnum.JI_ZOU:GetId()) then
        skillId = dict.jizouSkillGroup;
    end
    return skillId;
end

---技能进入cd
---@public
---@param _skillId number 技能类型
---@param _changeCdTime number 改变cd
function BattleObjCom_Skill:ChangeSkillCoolDown(_skillId, _changeCdTime)
    if not self.skillCoolDowns[_skillId] and _changeCdTime < 0 then
        return;
    end
    local skillCoolDownTime = self.skillCoolDowns[_skillId] + _changeCdTime;
    if skillCoolDownTime < 0 then
        skillCoolDownTime = 0;
    end
    self:SkillEnterCd(_skillId,skillCoolDownTime,0);
end

---获得技能cd
---@public
---@param _skillId number 技能类型
function BattleObjCom_Skill:GetSkillCoolDownTime(_skillId)
    if not self.skillCoolDowns[_skillId] then
        return 0;
    end
    return self.skillCoolDowns[_skillId]
end

---获取技能等级
---@public
---@param _skillId number 技能id
---@return number 技能等级
function BattleObjCom_Skill:GetSkillLevel(_skillId)
    local talentSkill = self.talentSkills[_skillId];
    if talentSkill then
        return talentSkill.level;
    end
    local _skill = self.activeSkills[_skillId];
    if _skill then
        return _skill.level;
    end
    for i, v in pairs(self.playModeSkillChange) do
        if v.id == _skillId then
            return v.level;
        end
    end
    for i, v in pairs(self.buffSkillChange) do
        if v.id == _skillId then
            return v.level;
        end
    end
    return 1;
end

---获取技能等级
---@public
---@param _skillType number 技能类型
---@return number 技能等级
function BattleObjCom_Skill:GetOriginalSkillLevelByType(_skillType)
    if self.playModeSkillChange[_skillType] then
        return self.playModeSkillChange[_skillType].level;
    end
    if self.buffSkillChange[_skillType] then
        return self.buffSkillChange[_skillType].level;
    end
    for i, v in pairs(self.activeSkills) do
        ---@type Skill
        local targetConfig = self.battleRoom.inputDataSource:GetDict("Skill",i);
        if _skillType == targetConfig.skillType then
            return v.level;
        end
    end
    return 1;
end

---重新触发被动
---@param _talentSourceType number 被动类型
function BattleObjCom_Skill:ReTriggerTalentSkill(_talentSourceType)
    local tempTalentList = {};
    for i, v in pairs(self.talentSkills) do
        table.insert(tempTalentList,v);
    end
    for _, talentSkill in pairs(tempTalentList) do
        ---@type TalentSkill
        local talentSkillConfig = self.battleRoom.inputDataSource:GetTalentSkill(talentSkill.id, talentSkill.level);
        if talentSkillConfig and talentSkillConfig.sourceType == _talentSourceType then
            for i, v in pairs(talentSkill.skillResults) do
                ---@type SkillResult
                local skillResult = self.battleRoom.inputDataSource:GetDict("SkillResult",i);
                v:Trigger(self:GetObject(),0,talentSkillConfig,skillResult,talentSkill,true);
            end
        end
    end
end

---更新
---@private
---@param _deltaTime number 时间
function BattleObjCom_Skill:__OnUpdate(_deltaTime)
    self:UpdateSkillCoolDown(_deltaTime);
    self:CheckTalentSkill(_deltaTime);
end

---检测被动技能
---@param _deltaTime number
function BattleObjCom_Skill:CheckTalentSkill(_deltaTime,_talentSourceType)
    for talentId, talentSkill in pairs(self.talentSkills) do
        ---@type TalentSkill
        local talentSkillConfig = self.battleRoom.inputDataSource:GetTalentSkill(talentSkill.id, talentSkill.level);
        if talentSkillConfig then
            if talentSkill.triggerCd > 0 and not _talentSourceType then
                talentSkill.triggerCd = talentSkill.triggerCd - _deltaTime;
                if talentSkill.triggerCd < 0 then
                    talentSkill.triggerCd = 0;
                end
            else
                if talentSkillConfig.triggerNum == -1 or talentSkill.triggerCount < talentSkillConfig.triggerNum then
                    if self:CheckTalentSkillEffectiveType(talentSkillConfig.effectiveType) then
                        local triggerCount = self:CheckTalentSkillTrigger(talentSkill,talentSkillConfig);
                        if triggerCount > 0 then
                            if talentSkill.triggerCd <= 0 then
                                ---暂时还是清空
                                talentSkill.triggeredList = {};
                                for resultId, v in pairs(talentSkill.skillResults) do
                                    ---@type SkillResult
                                    local skillResult = self.battleRoom.inputDataSource:GetDict("SkillResult",resultId);
                                    local rand = self.battleRoom.randomUtil:RandomInt(1,10000);
                                    if rand <= skillResult.resultProbability then
                                        v:Trigger(self:GetObject(),triggerCount*talentSkill.count,talentSkillConfig,skillResult,talentSkill);
                                        talentSkill.triggerCount = talentSkill.triggerCount + triggerCount*talentSkill.count;
                                        talentSkill.triggerCd = talentSkillConfig.triggerCd;
                                    end
                                end
                            end
                        else
                            if talentSkillConfig.isTriggerCleaned == 1 then
                                for i, v in pairs(talentSkill.skillTriggers) do
                                    v:Reset();
                                end
                            end
                            if talentSkillConfig.isCleaned == 1 and talentSkill.triggerCount > 0 then
                                local targetList = talentSkill.triggeredList;
                                for i, v in pairs(talentSkill.skillResults) do
                                    ---@type SkillResult
                                    local skillResult = self.battleRoom.inputDataSource:GetDict("SkillResult",i);
                                    for objectId, targetCount in pairs(targetList) do
                                        v:Release(skillResult, objectId,targetCount,talentSkill);
                                    end
                                end
                                talentSkill.triggeredList = {};
                            end
                        end
                    end
                end
            end
        end
    end
end

---检测被动技能触发
---@param _triggerEffectType number 触发方式
function BattleObjCom_Skill:CheckTalentSkillEffectiveType(_triggerEffectType)
    if _triggerEffectType == BATTLE_TALENT_SKILL_EFFECTIVE_TYPE.onBoard then
        if self:GetObject():GetObjectId() ~= self:GetObject():GetParentUnit():GetCurrentHeroObjectId()  then
            return false;
        end
    end
    if _triggerEffectType == BATTLE_TALENT_SKILL_EFFECTIVE_TYPE.offBoard then
        if self:GetObject():GetObjectId() == self:GetObject():GetParentUnit():GetCurrentHeroObjectId()  then
            return false;
        end
    end
    return true;
end

---检测被动技能是否触发
---@param _talentSkill BattlePlayerTalentSkill 被动技能
---@param _talentSkillConfig TalentSkill 被动技能配置
function BattleObjCom_Skill:CheckTalentSkillTrigger(_talentSkill,_talentSkillConfig)
    local triggerCount = 0;
    for i, trigger in pairs(_talentSkill.skillTriggers) do
        local currentTriggerCount = 0;
        ---@type SkillTrigger
        local talentTrigger = self.battleRoom.inputDataSource:GetDict("SkillTrigger",i);
        if not talentTrigger.parm7 or talentTrigger.parm7 == 0 or talentTrigger.parm7 == BATTLE_TALENT_SKILL_TRIGGER_SOURCE.self then
            currentTriggerCount = trigger:Check(self:GetObject(),talentTrigger,_talentSkill);
        else
            if self:GetObject():GetParentUnit():GetAllObjectDic() == nil then
                _talentSkill.triggerTargetList = {};
                return 0;
            end
            local pram3Trigger = nil;
            if talentTrigger.parm7 == BATTLE_TALENT_SKILL_TRIGGER_SOURCE.teamOne then
                pram3Trigger = false;
            end
            local count = 0;
            for i, battleObjectBase in pairs(self:GetObject():GetParentUnit():GetAllObjectDic()) do
                local tempCount = trigger:Check(battleObjectBase,talentTrigger,_talentSkill);
                if tempCount > 0 and talentTrigger.parm7 == BATTLE_TALENT_SKILL_TRIGGER_SOURCE.teamOne then
                    pram3Trigger = true;
                end
                if tempCount <= 0 and talentTrigger.parm7 == BATTLE_TALENT_SKILL_TRIGGER_SOURCE.teamAll then
                    _talentSkill.triggerTargetList = {};
                    return 0;
                end
                if tempCount > count then
                    count = tempCount;
                end
            end
            if pram3Trigger ~= nil and pram3Trigger == false then
                _talentSkill.triggerTargetList = {};
                return 0;
            end
            if count and count > 0 and count > triggerCount then
                currentTriggerCount = count;
            end
        end
        if currentTriggerCount == 0 then
            _talentSkill.triggerTargetList = {};
            return 0;
        end
        if currentTriggerCount > triggerCount then
            triggerCount = currentTriggerCount;
        end
    end
    if triggerCount > 0 then
        _talentSkill:ResetTriggerCount(triggerCount);
    else
        _talentSkill.triggerTargetList = {};
    end
    return triggerCount;
end

---@type function
---@param _dt number tick时间
---@return void
function BattleObjCom_Skill:UpdateSkillCoolDown(_dt)
    self.hasSkillCdOver = false;

    local skillCoolDownInfo= {}

    for i, v in pairs(self.skillCoolDowns) do
        if v < _dt then
            local skillCastTime = 1;
            local skillCoolDownTime = 0;

            self.skillCoolDowns[i] = nil;
            if self.skillCastTimes[i] ~= nil then
                local count = self.skillCastTimes[i];
                if count <= 1 then
                    self.skillCastTimes[i] = 0;
                else
                    self.skillCastTimes[i] = count - 1;
                    local skillModel = self.battleRoom.inputDataSource:GetSkillModel(i);
                    if skillModel then
                        local finalCommonCoolDown = self.battleRoom.inputDataSource:GetSkillFinalParam(skillModel.commonCoolDown,skillModel.skillId,self:GetSkillLevel(skillModel.skillId));
                        ---@type Skill
                        local skillConfig = self.battleRoom.inputDataSource:GetDict("Skill",i);
                        if skillConfig then
                            ---@type BattleObjCom_Property
                            local com_prop = self:GetObject():GetComponent(BattleObjectComponentType.Property);
                            if skillConfig.skillType == SkillTypeEnum.ACTIVE:GetId() then
                                finalCommonCoolDown = finalCommonCoolDown -finalCommonCoolDown * com_prop:GetPropertyByName(BattlePropertyEnum.Skill_Active_CD_Reduce);
                            elseif skillConfig.skillType == SkillTypeEnum.JI_ZOU:GetId() then
                                finalCommonCoolDown = finalCommonCoolDown -finalCommonCoolDown * com_prop:GetPropertyByName(BattlePropertyEnum.Jizou_CD_Reduce);
                            end
                        end
                        self.skillCoolDowns[i] = finalCommonCoolDown;
                        skillCoolDownTime = finalCommonCoolDown;
                    end
                end
                skillCastTime = count - 1;
                self.hasSkillCdOver = true;
            end

            local skillCoolDown = {};
            skillCoolDown.skillId = i;
            skillCoolDown.coolDown = skillCoolDownTime;
            skillCoolDown.coolDownNum = skillCastTime;
            skillCoolDown.coolDownServerTime = math.floor(TimeUtils.battleNow(self:GetBattleId()) + skillCoolDownTime * 1000);
            table.insert(skillCoolDownInfo,skillCoolDown);
        else
            self.skillCoolDowns[i] = v - _dt;
        end
    end

    if #skillCoolDownInfo <= 0 then
        return;
    end

    local battleUnitSkillCoolDown = {};
    battleUnitSkillCoolDown.skillCoolDownInfo = skillCoolDownInfo;

    local battleUnitKeyData = {};
    battleUnitKeyData.netId = self:GetObject():GetParentUnit():GetNetId();
    battleUnitKeyData.objId = self:GetObject():GetObjectId();
    battleUnitKeyData.skillCoolDown = battleUnitSkillCoolDown;

    self.battleRoom.outputDataSource:AddBattleUnitKeyData(battleUnitKeyData);

end

---当前帧是否有cd结束
---@public
---@return boolean 当前帧是否有cd结束
function BattleObjCom_Skill:HasSkillCDOver()
    return self.hasSkillCdOver;
end

---改变技能
---@public
---@param _skillType number 技能类型
---@param _targetSkill number 改变的技能
---@param _level number 等级
---@param _isMode boolean 是否模式改变
function BattleObjCom_Skill:SetSkillChange(_skillType,_targetSkill,_level,_isMode);
    ---@type BattlePlayerActiveSkill[]
    local skillChange = self.buffSkillChange;
    if _isMode then
        skillChange = self.playModeSkillChange;
    end
    if _targetSkill then
        local activeSkill = BattlePlayerActiveSkill.New();
        activeSkill:SetId(_targetSkill);
        activeSkill:SetLevel(_level);
        activeSkill:SetType(_skillType);
        skillChange[_skillType] = activeSkill;
    else
        skillChange[_skillType] = nil;
    end
end

---获得最终技能
---@public
---@param _skillType number 技能类型
---@param _originalSkill number 原技能
---@return number 最终技能
function BattleObjCom_Skill:GetFinalSkill(_skillType,_originalSkill)
    local temp = self.playModeSkillChange[_skillType];
    if temp then
        return temp.id;
    end
    temp = self.buffSkillChange[_skillType];
    if temp then
        return temp.id;
    end
    return _originalSkill;
end

---获得buff最终技能
---@public
---@param _skillType number 技能类型
---@param _originalSkill number 原技能
---@return number 最终技能
function BattleObjCom_Skill:GetFinalBuffSkill(_skillType,_originalSkill)
    local temp = self.buffSkillChange[_skillType];
    if temp then
        return temp.id;
    end
    return _originalSkill;
end

---获得普攻技能
---@public
---@return number 最终技能
function BattleObjCom_Skill:GetNormalSKillId()
    for i, v in pairs(self.activeSkills) do
        ---@type Skill
        local skillConfig = self.battleRoom.inputDataSource:GetDict("Skill",v:GetId());
        if skillConfig and skillConfig.skillType == SkillTypeEnum.NORMAL:GetId() then
            return v:GetId();
        end
    end
    return nil;
end

---升级技能
---@public
---@param _skillType number 技能类型
---@param _level number 等级
function BattleObjCom_Skill:UpSkillLevelByType(_skillType,_level)
    for skillId, v in pairs(self.activeSkills) do
        ---@type Skill
        local SkillConfig = self.battleRoom.inputDataSource:GetDict("Skill",skillId);
        if SkillConfig and SkillConfig.skillType == _skillType then
            v.level = v.level + _level;
            if v.level <= 0 then
                v.level = 1;
            end
            if _skillType == SkillTypeEnum.JI_ZOU:GetId() then
                local skillModel = self.battleRoom.inputDataSource:GetSkillModel(v.id)
                if skillModel then
                    local superCast = self.battleRoom.inputDataSource:GetSkillFinalParam(skillModel.superCast, skillModel.skillId, v.level)
                    ---@type BattleObjCom_Property
                    local propComp = self:GetObject():GetComponent(BattleObjectComponentType.Property);
                    propComp:SetBaseValueByName(BattlePropertyEnum.Jizou_Max, superCast)
                end
            end

        end
    end
end

---服务器逻辑核生成用于发送给前端逻辑核的全量信息
---@public
function BattleObjCom_Skill:GetCreateSyncMessage_S2C()
    local skillCoolDownInfo = {};
    for i, v in pairs(self.skillCoolDowns) do
        local skillCoolDown = {};
        skillCoolDown.skillId = i;
        skillCoolDown.coolDown = v;
        skillCoolDown.coolDownNum = self.skillCastTimes[i];
        skillCoolDown.coolDownServerTime = math.floor(TimeUtils.battleNow(self:GetBattleId()) + v * 1000);
        table.insert(skillCoolDownInfo,skillCoolDown);
    end
    return skillCoolDownInfo;
end

---@public
---obj死亡处理
function BattleObjCom_Skill:OnDead()
    for i, talentSkill in pairs(self.talentSkills) do
        ---@type TalentSkill
        local talentSkillConfig = self.battleRoom.inputDataSource:GetTalentSkill(talentSkill.id, talentSkill.level);
        if talentSkillConfig then
            if talentSkillConfig.destroyType == BATTLE_TALENT_SKILL_DESTROY_TYPE.dead then
                for i, v in pairs(talentSkill.skillTriggers) do
                    v:Reset();
                end
                local targetList = talentSkill.triggeredList;
                for i, v in pairs(talentSkill.skillResults) do
                    ---@type SkillResult
                    local skillResult = self.battleRoom.inputDataSource:GetDict("SkillResult",i);
                    for objectId, targetCount in pairs(targetList) do
                        v:Release(skillResult, objectId,targetCount,talentSkill);
                    end
                end
                talentSkill.triggeredList = {};
            end
        end
    end
end

---前端逻辑核用服务器发来的全量信息刷新自身数据
---@public
function BattleObjCom_Skill:OnReceiveCreateSyncMessage_S2C(_message)

end

---前端逻辑核生成用于发送给表现的层全量信息
---@public
function BattleObjCom_Skill:GetCreateSyncMessage_L2V(_message)
    return _message.skillCoolDownInfo;
end

function BattleObjCom_Skill:OnPlayerGm(_command, _params)

    if _command == "CLEARALLCD" then --清空所有CD
        for i, v in pairs(self.skillCoolDowns) do
            self.skillCoolDowns[i] = 0
        end
    elseif _command == "ADDTALENT" then --添加被动
        if not _params[2] or not tonumber(_params[2]) then
            self:AddTalentSkill(tonumber(_params[1]), 1)
        else
            self:AddTalentSkill(tonumber(_params[1]), tonumber(_params[2]))
        end
    elseif _command == "REMOVETALENT" then  --移除被动
        self:RemoveTalentSkill(tonumber(_params[1]))
    elseif _command == "CLEARTALENT" then --清除全部被动
        for _, talentSkill in pairs(self.talentSkills) do
            ---@type TalentSkill
            local _talentSkillConfig = self.battleRoom.inputDataSource:GetTalentSkill(talentSkill.id, talentSkill.level)
            if _talentSkillConfig then
                local targetList = talentSkill.triggeredList;
                for i, v in pairs(talentSkill.skillResults) do
                    ---@type SkillResult
                    local skillResult = self.battleRoom.inputDataSource:GetDict("SkillResult",i)
                    for objectId, targetCount in pairs(targetList) do
                        v:Release(skillResult, objectId,targetCount,talentSkill);
                    end
                end
                talentSkill.triggeredList = {};
            end
        end
        self.talentSkills = {}
    end
end

return BattleObjCom_Skill;
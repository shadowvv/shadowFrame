---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/05/04 14:11
--- Describe: object属性组件
---

---@class BattleObjCom_Property : BattleObjectComponentBase
BattleObjCom_Property = class(BattleObjectComponentBase, "BattleObjCom_Property")

function BattleObjCom_Property:ctor()
	self:__ctor(BattleObjectComponentType.Property)
end


---@public
---@param _battleObject BattleObjectBase
---@param _createInfo BattleCreateUnitParam
---@param _leaderBattleInfo table msg.LeaderBattleInfo
function BattleObjCom_Property:Init(_battleObject, _param, _createInfo, _leaderBattleInfo)
	self:__Init(_battleObject)
	if CheckLogLevel(LogLevel.log) and LogTools.PropInitLog then
		LogTools.LogByLevel(LogLevel.log, "CheckProp", "===========》 初始化obj属性开始", "objectId", self:GetObject():GetObjectId(), "单位类型", LogTools.GetEnumTableDesc(BattleObjectType, self:GetObject():GetObjectType()))
	end
	---@private
	self.__param = _param
	---@private
	---@type number
	self.__level = 1
	---@private
	---@type number[]
	self.__eleWeakTypeList = {}
	
	-----------------------------------------面板类属性----------------------------------------
	---记录刚进战斗时的属性
	---@private
	self.__propBaseDic = {}
	---基值的数值加成
	---@private
	self.__propBaseValueAdd = {}
	---基值的百分比加成
	---@private
	self.__propBasePercentAdd = {}
	---终值的数值加成
	---@private
	self.__propAdditionValueAdd = {}
	---终值的百分比加成
	---@private
	self.__propAdditionPercentAdd = {}


	-----------------------------------------消耗类属性----------------------------------------
	---消耗类属性的当前值
	---@private
	self.__consumeProps = {}

	-----------------------------------------血量阶段相关----------------------------------------
	---总阶段数
	---@private
	self.__maxStage = 1
	---当前阶段
	---@private
	self.__curStage = 1
	---当前阶段剩余血量
	---@private
	self.__curStageLeftHp = 1
	---各阶段最大血量
	---@private
	self.__stageMaxHps = {1}
	---是否正在切换阶段
	---@private
	self.__changingStage = false

	self.__dirtyAdd = {{},{},{},{},{}}
	self:__InitBaseDic(_createInfo, _leaderBattleInfo)
	self:__InitPercentAddProps()
	self:__InitSensitivities()
	self:__InitSpecifyProps()
	self:__InitConsumeProps()
	self:__InitStages()

	---有属性数据变化
	---@private
	self.__dirty = true

	if CheckLogLevel(LogLevel.log) and LogTools.PropInitLog then
		for _propId, _ in pairs(self.__propBaseDic) do
			LogTools.LogByLevel(LogLevel.log, "CheckProp", "        ", "属性ID", _propId, "属性值", self:GetPropertyById(_propId), "属性枚举", ProtoEnumTool.GetPropertyKey(_propId))
		end
		LogTools.LogByLevel(LogLevel.log, "CheckProp", "元素弱点类型", dumpTableEx(self.__eleWeakTypeList))
		LogTools.LogByLevel(LogLevel.log, "CheckProp", "===========》 初始化obj属性结束")
		LogTools.LogByLevel(LogLevel.log, "CheckProp")
	end
end

---初始化属性初值
---@private
function BattleObjCom_Property:__InitBaseDic(_createInfo, _leaderBattleInfo)
	local _battleObject = self:GetObject()
	if _battleObject:CheckObjectType(BattleObjectType.LeaderHero) then
		self:__InitPlayerBasicProps(_leaderBattleInfo)
	elseif _battleObject:CheckObjectType(BattleObjectType.MonsterHero) then
		self:__InitMonsterBasicProps(_createInfo)
	elseif _battleObject:CheckObjectType(BattleObjectType.AreaTrigger) then
		self:__InitAreaTriggerBasicProps(_createInfo)
	elseif _battleObject:CheckObjectType(BattleObjectType.SummonedMons) then
		self:__InitSummonedMonsBasicProps(_createInfo)
	elseif _battleObject:CheckObjectType(BattleObjectType.Shield) then
		self:__InitShieldBasicProps(_createInfo)
	elseif _battleObject:CheckObjectType(BattleObjectType.SceneObj) then
		self:__InitSceneObjBasicProps(_createInfo)
	end
end

---手动初始化值的属性
---@private
function BattleObjCom_Property:__InitSpecifyProps()
	
	---@type BattleDefault
	local _BattleDefault = self:GetBattleRoom().inputDataSource:GetDict("BattleDefault", 10020)
	local _maxZuoyideId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Zuoyide_Max)
	local _needProp = self:__GetPanelProperty(_BattleDefault.value6[1])
	local _needRatio = _BattleDefault.value6[2]
	self.__propBaseDic[_maxZuoyideId] = self:GetBattleRoom().inputDataSource:FormatPropLimit(_maxZuoyideId, _needProp * _needRatio)
	
end

---一些百分比加成的属性
---这些属性原来是战斗内没有的，肉鸽玩法投放了需要单独实现一下
---@private
function BattleObjCom_Property:__InitPercentAddProps()
	
	local _propId
	local _curValue
	local _propBasePercentAddDic = self.__propBasePercentAdd
	
	---总血量百分比加成
	local _value = self:GetPropertyById(130)
	if _value and _value ~= 0 then
		_propId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Max)
		_curValue = _propBasePercentAddDic[_propId] or 0
		_propBasePercentAddDic[_propId] = _curValue + _value
	end
	
	---攻击百分比加成
	_value = self:GetPropertyById(131)
	if _value and _value ~= 0 then
		_propId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Atk)
		_curValue = _propBasePercentAddDic[_propId] or 0
		_propBasePercentAddDic[_propId] = _curValue + _value
	end
	
	---防御百分比加成
	_value = self:GetPropertyById(132)
	if _value and _value ~= 0 then
		_propId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Def)
		_curValue = _propBasePercentAddDic[_propId] or 0
		_propBasePercentAddDic[_propId] = _curValue + _value
	end
	
	---能量百分比加成
	_value = self:GetPropertyById(133)
	if _value and _value ~= 0 then
		_propId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.En)
		_curValue = _propBasePercentAddDic[_propId] or 0
		_propBasePercentAddDic[_propId] = _curValue + _value
	end
	
	---暴击百分比加成
	_value = self:GetPropertyById(134)
	if _value and _value ~= 0 then
		_propId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.CritValue)
		_curValue = _propBasePercentAddDic[_propId] or 0
		_propBasePercentAddDic[_propId] = _curValue + _value
	end
	
end

---初始化消耗类属性
---@private
function BattleObjCom_Property:__InitConsumeProps()
	local _tab = {}

	local _maxHpId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Max)
	local _maxHp = self:__GetPanelProperty(_maxHpId)
	local _curHpId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Cur)
	local _originalCurHp = self.__propBaseDic[_curHpId]
	if not _originalCurHp or 0 == _originalMaxHp then
		self.__propBaseDic[_curHpId] = _maxHp
	else
		local _originalMaxHp = self.__propBaseDic[_maxHpId]
		self.__propBaseDic[_curHpId] = _originalCurHp / _originalMaxHp * _maxHp
	end
	_tab[_curHpId] = self.__propBaseDic[_curHpId]

	local _curBulletEnId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.BulletEnergyCur)
	if not self.__propBaseDic[_curBulletEnId] then
		self.__propBaseDic[_curBulletEnId] = 0
	end
	_tab[_curBulletEnId] = self.__propBaseDic[_curBulletEnId]

	local _curJialifuBulletEnId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.BulletEnergyCurJialifu)
	if not self.__propBaseDic[_curJialifuBulletEnId] then
		self.__propBaseDic[_curJialifuBulletEnId] = 0
	end
	_tab[_curJialifuBulletEnId] = self.__propBaseDic[_curJialifuBulletEnId]

	local _curJizouEnId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Jizou_Cur)
	if not self.__propBaseDic[_curJizouEnId] then
		self.__propBaseDic[_curJizouEnId] = 0
	end
	_tab[_curJizouEnId] = self.__propBaseDic[_curJizouEnId]

	local _skillCacheEnId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.En_SkillCache)
	if not self.__propBaseDic[_skillCacheEnId] then
		self.__propBaseDic[_skillCacheEnId] = 0
	end
	_tab[_skillCacheEnId] = self.__propBaseDic[_skillCacheEnId]

	local _hpLostId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Lost)
	if not self.__propBaseDic[_hpLostId] then
		self.__propBaseDic[_hpLostId] = 0
	end
	_tab[_hpLostId] = self.__propBaseDic[_hpLostId]

	local _lastHpChangedId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_LastChanged)
	if not self.__propBaseDic[_lastHpChangedId] then
		self.__propBaseDic[_lastHpChangedId] = 0
	end
	_tab[_lastHpChangedId] = self.__propBaseDic[_lastHpChangedId]
	
	local _curZuoyideId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Zuoyide_Cur)
	if not self.__propBaseDic[_curZuoyideId] then
		self.__propBaseDic[_curZuoyideId] = 0
	end
	_tab[_curZuoyideId] = self.__propBaseDic[_curZuoyideId]

	local _inputDataSource = self:GetBattleRoom().inputDataSource
	for _id, _value in pairs(_tab) do
		self.__consumeProps[_id] = _inputDataSource:FormatPropLimit(_id, _value)
	end
end

---初始化玩家属性
---@private
---@param _leaderBattleInfo table msg.LeaderBattleInfo
function BattleObjCom_Property:__InitPlayerBasicProps(_leaderBattleInfo)
	---@type table msg.CalcPropModelInfo
	local _calcPropModelInfo = self.__param
	self:__CopyAttFromPropMap(_calcPropModelInfo.attributeMap)
	self:__CopyAttFromPropMap(_calcPropModelInfo.growMap)
	self.__level = _leaderBattleInfo.level
	--LogTools.LogByLevel(LogLevel.logErr, "CheckProp", "BattleObjCom_Property", "__InitPlayerBasicProps", "self.__level", self.__level)
end

---初始化怪物属性
---@private
---@param _createInfo BattleCreateUnitParam
function BattleObjCom_Property:__InitMonsterBasicProps(_createInfo)
	---@type MonsterInstance
	local _monsterInstanceXls = self.__param
	if LogTools.PropInitLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckProp", "BattleObjCom_Property", "__InitMonsterObject", "_monsterInstanceXls.type", _monsterInstanceXls.type, "_monsterInstanceXls.id", _monsterInstanceXls.id)
	end
	local _baseAttType = _monsterInstanceXls.type
	if 999 == _baseAttType then
		self:__InitBaseAttByAttId(_monsterInstanceXls.monsterbaseAttributeId)
		self:__InitSeniorAttByAttId(_monsterInstanceXls.monsterseniorAttributeId)
	else
		self:__InitBaseAttByStageXls(_baseAttType)
		self:__InitSeniorAttByStageXls(_baseAttType)
	end

	local _battleRoom = self:GetObject():GetBattleRoom()

	---战斗玩家数量影响怪物属性
	local _groupId = _battleRoom.battleLevelManager.levelConfigManager:GetLevelMemberGroupId()
	local _playerNum = _battleRoom.battleUnitManager:GetOriginalPlayerInfoManager():GetBattlePlayerNum()
	local _base = 99
	for i = 1, 5 do
		local _id = _base + i
		local _value = self.__propBaseDic[_id] or 0
		local _fix = _battleRoom.inputDataSource:GetLevelMemberFix(_groupId, _monsterInstanceXls.classify, _playerNum)
		self.__propBaseDic[_id] = _value * _fix[i]
		if LogTools.PropInitLog and CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckProp", "BattleObjCom_Property", "初始化levelMember表修正", "属性ID", _id, "属性初始值", _value, "levelMember表修正", _fix[i], "属性终值", self.__propBaseDic[_id])
		end
	end

	---小队战斗力影响怪物属性
	local _recommendPowerFixIds = _battleRoom.battleLevelManager.levelConfigManager:GetRecommendPowerFixIds()
	local _recommendPowerFixValues = _battleRoom.battleLevelManager.levelConfigManager:GetRecommendPowerFixValues()
	
	if LogTools.PropInitLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "propCheck", "BattleObjCom_Property", "初始化levelMember表修正", "_recommendPowerFixIds", dumpTableEx(_recommendPowerFixIds), "_recommendPowerFixValues", dumpTableEx(_recommendPowerFixValues))
	end
	
	local _recommendFixPropId
	local _recommendFixPropValue
	for i = 1, #_recommendPowerFixIds, 2 do
		_recommendFixPropId = _recommendPowerFixIds[i]
		_recommendFixPropValue = _recommendPowerFixValues[i] or 0
		if _recommendFixPropId and _recommendFixPropValue then
			local _value = self.__propBaseDic[_recommendFixPropId] or 0
			self.__propBaseDic[_recommendFixPropId] = _value + _recommendFixPropValue
			if LogTools.PropInitLog and CheckLogLevel(LogLevel.log) then
				LogTools.LogByLevel(LogLevel.log, "propCheck", "BattleObjCom_Property", "初始化BattlePowerSystem表修正", "属性ID", _recommendFixPropId, "属性初始值", _value, "表修正", _recommendFixPropValue, "属性终值", self.__propBaseDic[_recommendFixPropId])
			end
		end
	end
	
	self:__FixInitialPropByLevelHpFixParam(_createInfo)
	self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Cur)] = self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Max)]
	self.__level = self:GetBattleRoom().battleLevelManager.levelConfigManager:GetRecommendLevel()
	
	--LogTools.LogByLevel(LogLevel.log, "self.__level", self.__level)
end

---初始化区域属性
---跟召唤物保持一致，monsterType 和 attributeID 字段没用
---@private
---@param _createInfo BattleCreateUnitParam
function BattleObjCom_Property:__InitAreaTriggerBasicProps(_createInfo)
	---@type AreaColliderInstance
	local _instanceXLS = self.__param
	---@type AreaColliderTemplate
	local _templateXls = self.battleRoom.inputDataSource:GetDict("AreaColliderTemplate", _instanceXLS.templateId)

	if 1 == _templateXls.attributeType then  --基于施法者
        local _subordinateBaseProps = _createInfo.baseProps
		local _allPropertyDic = self.__propBaseDic
		local _cnt = 0
		for i = 100, 104 do
			_cnt = _cnt + 1
			_allPropertyDic[i] = _subordinateBaseProps[_cnt].propValue * (_templateXls.attributeValue[_cnt] or 1)
		end
	elseif 2 == _templateXls.attributeType then  --按照怪物类型和关卡难度确认
		local _baseAttType = math.floor(_templateXls.attributeValue[1])
		self:__InitBaseAttByStageXls(_baseAttType)
		self:__InitSeniorAttByStageXls(_baseAttType)
	else --固定基础属性和高级属性ID
		self:__InitBaseAttByAttId(math.floor(_templateXls.attributeValue[1]))
		self:__InitSeniorAttByAttId(math.floor(_templateXls.attributeValue[2]))
	end
	
	self.__level = _createInfo.subordinateLevel or self:GetBattleRoom().battleLevelManager.levelConfigManager:GetRecommendLevel()
end

---初始化召唤物属性
---@private
---@param _createInfo BattleCreateUnitParam
function BattleObjCom_Property:__InitSummonedMonsBasicProps(_createInfo)

	---@type SummonedMonster
	local _summonedMonsXls = self.__param
	if 1 == _summonedMonsXls.attributeType then  
		--基于施法者
		--基于施法者的时候先完全拷贝施法者的所有属性
		--然后100到104的属性再读表进行百分比修正
		local _allPropertyDic = self.__propBaseDic
		local _subordinateBaseProps = _createInfo.baseProps

		local _subordinateObj = self:GetBattleRoom().battleObjectManager:GetObject(_createInfo.subordinatedObjId)
		---@type BattleObjCom_Property
		local _subordinatePropCom = _subordinateObj:GetComponent(BattleObjectComponentType.Property)
		self:__CopyAttFromPropDic(_subordinatePropCom.__propBaseDic, _allPropertyDic)
		self:__CopyAttFromPropDic(_subordinatePropCom.__propBaseValueAdd, self.__propBaseValueAdd)
		self:__CopyAttFromPropDic(_subordinatePropCom.__propBasePercentAdd, self.__propBasePercentAdd)
		self:__CopyAttFromPropDic(_subordinatePropCom.__propAdditionValueAdd, self.__propAdditionValueAdd)
		self:__CopyAttFromPropDic(_subordinatePropCom.__propAdditionPercentAdd, self.__propAdditionPercentAdd)

		for _propId, _ in pairs(_allPropertyDic) do
			if self:CheckIsConsumeProp(_propId) then
				_allPropertyDic[_propId] = nil
			end
		end
		
		local _cnt = 0
		for i = 100, 104 do
			_cnt = _cnt + 1
			_allPropertyDic[i] = _subordinateBaseProps[_cnt].propValue * (_summonedMonsXls.attributeValue[_cnt] or 1)
		end
		
		local _weakList = _subordinatePropCom:GetEleWeakTypeList()
		TableUtil.Copy(_weakList, self.__eleWeakTypeList)

		if CheckLogLevel(LogLevel.log) and LogTools.PropInitLog then
			for _propId, _ in pairs(_allPropertyDic) do
				LogTools.LogByLevel(LogLevel.log, "CheckProp", "BattleObjCom_Property", "通过召唤者初始化属性", "_propId", _propId, "_propValue", self:GetPropertyById(_propId))
			end
			LogTools.LogByLevel(LogLevel.log, "CheckProp", "BattleObjCom_Property", "通过召唤者初始化属性", "元素弱点列表", dumpTableEx(self.__eleWeakTypeList))
		end
	elseif 2 == _summonedMonsXls.attributeType then  --按照怪物类型和关卡难度确认
		local _baseAttType = math.floor(_summonedMonsXls.attributeValue[1])
		self:__InitBaseAttByStageXls(_baseAttType)
		self:__InitSeniorAttByStageXls(_baseAttType)
	else --固定基础属性和高级属性ID
		self:__InitBaseAttByAttId(math.floor(_summonedMonsXls.attributeValue[1]))
		self:__InitSeniorAttByAttId(math.floor(_summonedMonsXls.attributeValue[2]))
	end

	self:__FixInitialPropByLevelHpFixParam(_createInfo)
	self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Cur)] = self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Max)]
	self.__level = _createInfo.subordinateLevel or self:GetBattleRoom().battleLevelManager.levelConfigManager:GetRecommendLevel()
end

---初始化护罩属性
---@private
---@param _createInfo BattleCreateUnitParam
function BattleObjCom_Property:__InitShieldBasicProps(_createInfo)
	---@type Shield
	local _shieldXls = self.__param
	if 1 == _shieldXls.attributeType then  --基于施法者
        local _subordinateBaseProps = _createInfo.baseProps
		local _allPropertyDic = self.__propBaseDic
		local _cnt = 0
		for i = 100, 104 do
			_cnt = _cnt + 1
			_allPropertyDic[i] = _subordinateBaseProps[_cnt].propValue * (_shieldXls.attributeValue[_cnt] or 1)
		end
		--self:__CopyAttFromPropMap(_propMap)
	elseif 2 == _shieldXls.attributeType then  --按照怪物类型和关卡难度确认
		local _baseAttType = math.floor(_shieldXls.attributeValue[1])
		self:__InitBaseAttByStageXls(_baseAttType)
		self:__InitSeniorAttByStageXls(_baseAttType)
	else --固定基础属性和高级属性ID
		self:__InitBaseAttByAttId(math.floor(_shieldXls.attributeValue[1]))
		self:__InitSeniorAttByAttId(math.floor(_shieldXls.attributeValue[2]))
	end
	
	self:__FixInitialPropByLevelHpFixParam(_createInfo)
	self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Cur)] = self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Max)]
	self.__level = _createInfo.subordinateLevel or self:GetBattleRoom().battleLevelManager.levelConfigManager:GetRecommendLevel()
end

---初始化场景物件属性
---默认给点血，不然就被判定死亡了
---@private
---@param _createInfo BattleCreateUnitParam
function BattleObjCom_Property:__InitSceneObjBasicProps(_createInfo)
	
	local _allPropertyDic = self.__propBaseDic
	local _cnt = 0
	for i = 100, 104 do
		_cnt = _cnt + 1
		_allPropertyDic[i] = 1
	end
	
	self.__level = self:GetBattleRoom().battleLevelManager.levelConfigManager:GetRecommendLevel()
end

---关卡传入的气血修正系数影响怪物血量
---@private
---@param _createInfo BattleCreateUnitParam
function BattleObjCom_Property:__FixInitialPropByLevelHpFixParam(_createInfo)
	
	if _createInfo.firstCamp ~= BattleUnitCampType.Monster then return end
	
	local _maxHP = self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Max)]
	self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Max)] = _maxHP * self.battleRoom.battleLevelManager.levelConfigManager:GetMonsHpFixParam()
	
end

---------------------------------------------------------属性读表的方式---------------------------------------------------

---通过基础属性ID读取基础属性
---@private
function BattleObjCom_Property:__InitBaseAttByAttId(_baseAttId)
	if LogTools.PropInitLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckProp", "BattleObjCom_Property", "通过指定ID初始化基础属性", "_baseAttId", _baseAttId)
	end
	local _allPropertyDic = self.__propBaseDic
	---@type MonsterBaseAttribute
	local _baseAttXls = self.battleRoom.inputDataSource:GetDict("MonsterBaseAttribute", _baseAttId)
	--self.__level = _baseAttXls.level
	--LogTools.LogByLevel(LogLevel.log, "CheckProp", "BattleObjCom_Property", "__initMonsAttByInstanceXls", _baseAttId, "_baseAttXls", dumpTableEx(_baseAttXls))
	--基础属性表里的内容策划表示先写死
	local _maxHpId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Max)
	_allPropertyDic[_maxHpId] = _baseAttXls.hp
	--LogTools.LogByLevel(LogLevel.log, "CheckProp", "BattleObjCom_Property", "__initMonsAttByInstanceXls", "_baseAttXls.hp", _baseAttXls.hp)
	local _curHpId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Cur)
	_allPropertyDic[_curHpId] = _baseAttXls.hp
	local _atkId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Atk)
	_allPropertyDic[_atkId] = _baseAttXls.atk
	local _defId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Def)
	_allPropertyDic[_defId] = _baseAttXls.def
	local _critId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.CritValue)
	_allPropertyDic[_critId] = _baseAttXls.crit
	local _enId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.En)
	_allPropertyDic[_enId] = _baseAttXls.en
end

---通过stageXls读取基础属性
---@private
function BattleObjCom_Property:__InitBaseAttByStageXls(_baseAttType)
	local _allPropertyDic = self.__propBaseDic

	---@type NewLevelStage
	local _newLevelStageXls = self.battleRoom.battleLevelManager.levelConfigManager:GetLevelStageXls()
	if LogTools.PropInitLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckProp", "BattleObjCom_Property", "通过newLevelStage初始化基础属性", "_newLevelStageXls", _newLevelStageXls.levelStage, "_baseAttType", _baseAttType, "_newLevelStageXls.typeLevelAttribute", dumpTableEx(_newLevelStageXls.typeLevelAttribute), "_newLevelStageXls.level", dumpTableEx(_newLevelStageXls.level))
	end
	local _typeAttId = _newLevelStageXls.typeLevelAttribute[_baseAttType]
	local _monsterLv = _newLevelStageXls.level[_baseAttType]
	local _monsterHpLv = _newLevelStageXls.hpLevel[_baseAttType]
	if LogTools.PropInitLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckProp", "BattleObjCom_Property", "通过newLevelStage初始化基础属性", "_monsterLv", _monsterLv, "_monsterHpLv", _monsterHpLv)
	end
	---@type TypeLevelAttribute
	local _baseAttXls = self.battleRoom.inputDataSource:GetDict("TypeLevelAttribute", _typeAttId)
	if LogTools.PropInitLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckProp", "BattleObjCom_Property", "通过newLevelStage初始化基础属性", "_typeAttId", _typeAttId, "_monsterLv", _monsterLv, "_baseAttXls", _baseAttXls)
	end

	--基础属性表里的内容策划表示先写死
	local _maxHpId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Max)
	_allPropertyDic[_maxHpId] = _baseAttXls.hp * _monsterHpLv
	--LogTools.LogByLevel(LogLevel.log, "CheckProp", "BattleObjCom_Property", "__initMonsAttByStageXls", "_baseAttXls.hp", _baseAttXls.hp, "_monsterLv", _monsterLv, "_allPropertyDic[_maxHpId]", _allPropertyDic[_maxHpId])
	local _curHpId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Cur)
	_allPropertyDic[_curHpId] = _baseAttXls.hp * _monsterHpLv
	local _atkId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Atk)
	_allPropertyDic[_atkId] = _baseAttXls.atk * _monsterLv
	local _defId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Def)
	_allPropertyDic[_defId] = _baseAttXls.def * _monsterLv
	local _critId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.CritValue)
	_allPropertyDic[_critId] = _baseAttXls.crit * _monsterLv
	local _enId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.En)
	_allPropertyDic[_enId] = _baseAttXls.en * _monsterLv
end

---通过高级属性ID读取高级属性
---@private
function BattleObjCom_Property:__InitSeniorAttByAttId(_seniorAttId)
	if LogTools.PropInitLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckProp", "BattleObjCom_Property", "通过指定ID初始化高级属性", "_seniorAttId", _seniorAttId)
	end
	if not _seniorAttId then return end
	local _allPropertyDic = self.__propBaseDic
	---@type MonsterSeniorAttribute
	local _seniorAttXls = self.battleRoom.inputDataSource:GetDict("MonsterSeniorAttribute", _seniorAttId)
	--高级属性表里的内容是按照key-value的形式配置的
	for _num, _attId in pairs(_seniorAttXls.valueType) do
		local _attValue = _seniorAttXls.value[_num]
		_allPropertyDic[_attId] = _attValue
	end
	
	TableUtil.Copy(_seniorAttXls.weaknessElementType, self.__eleWeakTypeList)
end

---通过stageXls读取高级属性
---@private
function BattleObjCom_Property:__InitSeniorAttByStageXls(_baseAttType)

	---@type NewLevelStage
	local _newLevelStageXls = self.battleRoom.battleLevelManager.levelConfigManager:GetLevelStageXls()
	if LogTools.PropInitLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckProp", "BattleObjCom_Property", "通过newLevelStage初始化高级属性", "_newLevelStageXls", _newLevelStageXls.levelStage, "_baseAttType", _baseAttType, "_newLevelStageXls.monsterSeniorAttributeId", dumpTableEx(_newLevelStageXls.monsterSeniorAttributeId))
	end
	local _typeAttId = _newLevelStageXls.monsterSeniorAttributeId[_baseAttType]
	---@type MonsterSeniorAttribute
	local _monsSeniorAttXls = self.battleRoom.inputDataSource:GetDict("MonsterSeniorAttribute", _typeAttId)
	if not _monsSeniorAttXls then
		return
	end
	
	local _allPropertyDic = self.__propBaseDic
	local _propId
	local _propValue
	for i = 1, #_monsSeniorAttXls.valueType do
		_propId = _monsSeniorAttXls.valueType[i]
		_propValue = _monsSeniorAttXls.value[i]
		
		if _propId and 0 ~= _propId then
			_allPropertyDic[_propId] = _propValue
		end
	end
	
	TableUtil.Copy(_monsSeniorAttXls.weaknessElementType, self.__eleWeakTypeList)
end

---从属性map中拷贝属性
---@private
function BattleObjCom_Property:__CopyAttFromPropMap(_propMap)
	if not _propMap then return end
	local _allPropertyDic = self.__propBaseDic
	for _, v in pairs(_propMap) do
		_allPropertyDic[v.key] = v.value
		--LogTools.LogByLevel(LogLevel.log, "v.key", v.key, "v.value", v.value)
	end
end

---从属性字典拷贝
---@private
---@param _srcDic number[] 来源属性字典
---@param _desDic number[] 目标属性字典
function BattleObjCom_Property:__CopyAttFromPropDic(_srcDic, _desDic)
	for _propId, _propValue in pairs(_srcDic) do
		_desDic[_propId] = _propValue
	end
end

--------------------------------------------------------血量阶段---------------------------------------------------------
---初始化血量阶段
---玩家默认只有一个阶段
function BattleObjCom_Property:__InitStages()
	self:__calculateStageHps()
	self.__curStage = 1
	--self.__curStageLeftHp = self.__stageMaxHps[1]
	self.__curStageLeftHp = self:GetPropertyById(ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Cur))
	--self.__curStageLeftHp = self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Cur)]
	--LogTools.LogByLevel(LogLevel.log, "CheckProp", "self.__curStageLeftHp", self.__curStageLeftHp)
end

---计算各阶段血量
---@private
function BattleObjCom_Property:__calculateStageHps()
	--LogTools.LogByLevel(LogLevel.log, "checkProp", "BattleObjCom_Property", "__calculateStageHps start")
	local _maxHp = self:GetPropertyById(ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Max))
	--local _maxHp = self:__GetPanelProperty(ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Max))
	--LogTools.LogByLevel(LogLevel.log, "checkProp", "BattleObjCom_Property", "__calculateStageHps start", "_maxHp", _maxHp)
	local _maxRateFix = 0.01

	local _maxStage = 1
	local _stageMaxHps = {}
	local _leftHp = _maxHp
	local _stageArr = self.__param.stageHpRate
	if _stageArr then --存在多阶段的情况
		_maxStage = #_stageArr
		for i = 1, _maxStage - 1 do
			local _rate = _stageArr[i]
			--LogTools.LogByLevel(LogLevel.log, "checkProp", "BattleObjCom_Property", "__calculateStageHps start", "_rate", _rate)
			local _stageHp = math.floor(_rate * _maxRateFix * _maxHp)
			--LogTools.LogByLevel(LogLevel.log, "checkProp", "BattleObjCom_Property", "__calculateStageHps start", "_stageHp", _stageHp)
			_leftHp = _leftHp - _stageHp
			table.insert(_stageMaxHps, _stageHp)
			--LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Property", "__InitStages", "stage", i, "stageRate", _rate, "stageHp", _stageHp)
		end
	end
	--LogTools.LogByLevel(LogLevel.log, "checkProp", "BattleObjCom_Property", "__calculateStageHps start", "_stageHp", _leftHp)
	table.insert(_stageMaxHps, _leftHp)
	--LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Property", "__InitStages", "lastStageHp", _leftHp)

	self.__maxStage = _maxStage
	self.__stageMaxHps = _stageMaxHps
end

---一些属性的基础值需要在具体的功能模块初始化完成之后反向设置回来
---@public
function BattleObjCom_Property:InitSpecificPropBasic(_name, _value)
	self.__propBaseDic[ProtoEnumTool.GetPropertyId(_name)] = _value
	self:SetDirty(true)
end

--------------------------------------------------面板类属性的修改，目前主要给Buff用----------------------------------------
---基值数值加成
---@public
function BattleObjCom_Property:AddBaseValueById(_id, _value)
	if self.__consumeProps[_id] then return end
	self:__AddBaseValueById(_id, _value)
end

---基值数值加成
---@public
function BattleObjCom_Property:AddBaseValueByName(_name, _value)
	self:AddBaseValueById(ProtoEnumTool.GetPropertyId(_name), _value)
end

---基值数值加成
---@private
function BattleObjCom_Property:__AddBaseValueById(_id, _value)
	if CheckLogLevel(LogLevel.log) and LogTools.PropInitLog then
		LogTools.LogByLevel(LogLevel.log, "checkProp", "SetOrAddProp", "objId", self:GetObject():GetObjectId(), "__AddBaseValueById", "_id", _id, "_value", _value)
	end
	if not self.__propBaseDic[_id] then
		self.__propBaseDic[_id] = 0
	end
	local _oldValue = self:GetPropertyById(_id)
	local _curValue = self.__propBaseValueAdd[_id] or 0
	_curValue = _curValue + _value
	self.__propBaseValueAdd[_id] = _curValue
	self:__OnConsumeRelativePropertyChange(_id, _oldValue)
	local _tab = self.__dirtyAdd[1]
	_tab[_id] = _curValue
	self:SetDirty(true)
end


---基值百分比加成
---@public
function BattleObjCom_Property:AddBasePercentById(_id, _value)
	if self.__consumeProps[_id] then return end
	self:__AddBasePercentById(_id, _value)
end

---基值百分比加成
---@public
function BattleObjCom_Property:AddBasePercentByName(_name, _value)
	self:AddBasePercentById(ProtoEnumTool.GetPropertyId(_name), _value)
end

---基值百分比加成
---@private
function BattleObjCom_Property:__AddBasePercentById(_id, _value)
	if CheckLogLevel(LogLevel.log) and LogTools.PropInitLog then
		LogTools.LogByLevel(LogLevel.log, "checkProp", "SetOrAddProp", "objId", self:GetObject():GetObjectId(), "__AddBasePercentById", "_id", _id, "_value", _value)
	end
	if not self.__propBaseDic[_id] then
		self.__propBaseDic[_id] = 0
	end
	local _oldValue = self:GetPropertyById(_id)
	local _curValue = self.__propBasePercentAdd[_id] or 0
	_curValue = _curValue + _value
	self.__propBasePercentAdd[_id] = _curValue
	self:__OnConsumeRelativePropertyChange(_id, _oldValue)
	local _tab = self.__dirtyAdd[2]
	_tab[_id] = _curValue
	self:SetDirty(true)
end

---终值数值加成
---@public
function BattleObjCom_Property:AddAdditionValueById(_id, _value)
	if self.__consumeProps[_id] then return end
	self:__AddAdditionValueById(_id, _value)
end

---终值数值加成
---@public
function BattleObjCom_Property:AddAdditionValueByName(_name, _value)
	self:AddAdditionValueById(ProtoEnumTool.GetPropertyId(_name), _value)
end

---终值数值加成
---@private
function BattleObjCom_Property:__AddAdditionValueById(_id, _value)
	if CheckLogLevel(LogLevel.log) and LogTools.PropInitLog then
		LogTools.LogByLevel(LogLevel.log, "checkProp", "SetOrAddProp", "objId", self:GetObject():GetObjectId(), "__AddAdditionValueById", "_id", _id, "_value", _value)
	end
	if not self.__propBaseDic[_id] then
		self.__propBaseDic[_id] = 0
	end
	local _oldValue = self:GetPropertyById(_id)
	local _curValue = self.__propAdditionValueAdd[_id] or 0
	--LogTools.LogByLevel(LogLevel.log, "checkProp", "__AddAdditionValueById", "_curValue", _curValue)
	_curValue = _curValue + _value
	--LogTools.LogByLevel(LogLevel.log, "checkProp", "__AddAdditionValueById", "_curValue", _curValue)
	self.__propAdditionValueAdd[_id] = _curValue
	self:__OnConsumeRelativePropertyChange(_id, _oldValue)
	local _tab = self.__dirtyAdd[3]
	_tab[_id] = _curValue
	self:SetDirty(true)
end

---终值百分比加成
---@public
function BattleObjCom_Property:AddAdditionPercentById(_id, _value)
	if self.__consumeProps[_id] then return end
	self:__AddAdditionPercentById(_id, _value)
end

---终值百分比加成
---@public
function BattleObjCom_Property:AddAdditionPercentByName(_name, _value)
	self:AddAdditionPercentById(ProtoEnumTool.GetPropertyId(_name), _value)
end

---终值百分比加成
---@private
function BattleObjCom_Property:__AddAdditionPercentById(_id, _value)
	if CheckLogLevel(LogLevel.log) and LogTools.PropInitLog then
		LogTools.LogByLevel(LogLevel.log, "checkProp", "SetOrAddProp", "objId", self:GetObject():GetObjectId(), "__AddAdditionPercentById", "_id", _id, "_value", _value)
	end
	if not self.__propBaseDic[_id] then
		self.__propBaseDic[_id] = 0
	end
	local _oldValue = self:GetPropertyById(_id)
	local _curValue = self.__propAdditionPercentAdd[_id] or 0
	_curValue = _curValue + _value
	self.__propAdditionPercentAdd[_id] = _curValue
	self:__OnConsumeRelativePropertyChange(_id, _oldValue)
	local _tab = self.__dirtyAdd[4]
	_tab[_id] = _curValue
	self:SetDirty(true)
end

---设置属性基质
---@public
function BattleObjCom_Property:SetBaseValueById(_id, _value)
	if self.__consumeProps[_id] then return end
	self:__SetBaseValueById(_id, _value)
end

---设置属性基质
---@public
function BattleObjCom_Property:SetBaseValueByName(_name, _value)
	self:SetBaseValueById(ProtoEnumTool.GetPropertyId(_name), _value)
end

---设置属性基质
---@private
function BattleObjCom_Property:__SetBaseValueById(_id, _value)
	if CheckLogLevel(LogLevel.log) and LogTools.PropInitLog then
		LogTools.LogByLevel(LogLevel.log, "checkProp", "SetOrAddProp", "objId", self:GetObject():GetObjectId(), "__SetBaseValueById", "_id", _id, "_value", _value)
	end
	if not self.__propBaseDic[_id] then
		self.__propBaseDic[_id] = 0
	end
	local _oldValue = self:GetPropertyById(_id)
	local _base = self.__propBaseDic[_id] or 0
	local _changeValue = _value - _base

	self.__propBaseValueAdd[_id] = _changeValue
	self.__propBasePercentAdd[_id] = 0
	self:__OnConsumeRelativePropertyChange(_id, _oldValue)
	self.__dirtyAdd[1][_id] = _changeValue
	self.__dirtyAdd[2][_id] = 0
	self:SetDirty(true)

end

---如果是消耗类属性依赖的面板属性发生变化，可能引起相应消耗属性的改变
---@private
---@param _id number
---@param _oldValue number
function BattleObjCom_Property:__OnConsumeRelativePropertyChange(_id, _oldValue)
	local _name = ProtoEnumTool.GetPropertyKey(_id)
	if _name == BattlePropertyEnum.Hp_Max then
		self:__OnMaxHpChange()
	elseif _name == BattlePropertyEnum.BulletEnergyMax then
		self:__OnMaxBulletEnergyChange(BattlePropertyEnum.BulletEnergyCur)
	elseif _name == BattlePropertyEnum.BulletEnergyMax then
		self:__OnMaxBulletEnergyChange(BattlePropertyEnum.BulletEnergyCurJialifu)
	elseif _name == BattlePropertyEnum.Jizou_Max then
		self:__OnMaxJizouEnergyChange()
	elseif _name == BattlePropertyEnum.En_SkillCacheMax then
		self:__OnMaxSkillCacheEnChange()
	elseif _name == BattlePropertyEnum.Zuoyide_Max then
		self:__OnMaxZuoyideChange()
	end

	if ProtoEnumTool.CheckPropChangeEvent(_id) then
		self:GetBattleRoom().battleLogicEventService:OnTriggerPropChangeEvent(_id, _oldValue, self:GetObject():GetParentUnit():GetNetId(), self:GetObject():GetObjectId())
	end
end

------------------------------------------------------------------------------------------------------------------------
---根据属性ID获取属性
---@public
function BattleObjCom_Property:GetPropertyById(_id)
	if _id == ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Lost) then
		return self:GetBattleRoom().inputDataSource:FormatPropLimit(_id, self:GetLostHp())
	elseif _id == ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Sensitivity_Rotate_X) then
		return self:GetBattleRoom().inputDataSource:FormatPropLimit(_id, self:__GetRotateSensitivityX())
	elseif _id == ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Sensitivity_Rotate_Y) then
		return self:GetBattleRoom().inputDataSource:FormatPropLimit(_id, self:__GetRotateSensitivityY())
	end
	if self.__consumeProps[_id] then
		return self:GetBattleRoom().inputDataSource:FormatPropLimit(_id, self:__GetConsumeProperty(_id))
	end
	return self:GetBattleRoom().inputDataSource:FormatPropLimit(_id, self:__GetPanelProperty(_id))
end

---根据属性枚举名获取属性
---@public
function BattleObjCom_Property:GetPropertyByName(_name)
	if not _name then return 0 end
	if _name == BattlePropertyEnum.Hp_Lost then
		return self:GetLostHp()
	elseif _name == BattlePropertyEnum.Sensitivity_Rotate_X then
		return self:GetBattleRoom().inputDataSource:FormatPropLimit(ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Sensitivity_Rotate_X), self:__GetRotateSensitivityX())
	elseif _name == BattlePropertyEnum.Sensitivity_Rotate_Y then
		return self:GetBattleRoom().inputDataSource:FormatPropLimit(ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Sensitivity_Rotate_Y), self:__GetRotateSensitivityY())
	end
	return self:GetPropertyById(ProtoEnumTool.GetPropertyId(_name))
end

---获取面板类属性
---@private
function BattleObjCom_Property:__GetPanelProperty(_id)
	local _baseValue = self.__propBaseDic[_id] or 0
	local _baseValueAdd = self.__propBaseValueAdd[_id] or 0
	local _basePercentAdd = self.__propBasePercentAdd[_id] or 0
	local _additionValueAdd = self.__propAdditionValueAdd[_id] or 0
	local _additionPercentAdd = self.__propAdditionPercentAdd[_id] or 0
	_baseValue = _baseValue * ( 1 + _basePercentAdd) + _baseValueAdd
	local _ret = _baseValue * ( 1 + _additionPercentAdd) + _additionValueAdd
	--LogTools.LogByLevel(LogLevel.log, "checkProp", "BattleObjCom_Property:__GetPanelProperty",
	--		"_id", _id,
	--		"_baseValue", _baseValue,
	--		"_baseValueAdd", _baseValueAdd,
	--		"_basePercentAdd", _basePercentAdd,
	--		"_additionValueAdd", _additionValueAdd,
	--		"_additionPercentAdd", _additionPercentAdd,
	--		"_ret", _ret
	--)
	return _ret
end

---获取属性基值
---@public
function BattleObjCom_Property:GetPropertyBasicById(_id)
	return self:GetBattleRoom().inputDataSource:FormatPropLimit(_id, self:__GetPanelPropertyBasic(_id))
end

---获取属性基值
---@public
function BattleObjCom_Property:GetPropertyBasicByName(_name)
	return self:GetPropertyBasicById(ProtoEnumTool.GetPropertyId(_name))
end

---获取面板类属性基值
---@private
function BattleObjCom_Property:__GetPanelPropertyBasic(_id)
	local _baseValue = self.__propBaseDic[_id] or 0
	local _baseValueAdd = self.__propBaseValueAdd[_id] or 0
	local _basePercentAdd = self.__propBasePercentAdd[_id] or 0
	return _baseValue * ( 1 + _basePercentAdd) + _baseValueAdd
end

---获取消耗类属性
---@private
function BattleObjCom_Property:__GetConsumeProperty(_id)
	return self.__consumeProps[_id]
end

---------------------------------------------------------机动参数--------------------------------------------------------
---初始化机动参数
---目前只有转向灵敏度放到这里了
---@private
function BattleObjCom_Property:__InitSensitivities()
	self:ResetRotateSensitivities()
end

---设置X转向灵敏度
---@public
function BattleObjCom_Property:SetRotateSensitivityX(_value)
	--LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Property:SetRotateSensitivityX", "_value", _value)
	self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Sensitivity_Rotate_X)] = _value
	self:SetDirty(true)
end

---设置Y转向灵敏度
---@public
function BattleObjCom_Property:SetRotateSensitivityY(_value)
	--LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Property:SetRotateSensitivityY", "_value", _value)
	self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Sensitivity_Rotate_Y)] = _value
	self:SetDirty(true)
end

---重置转向灵敏度
---@public
function BattleObjCom_Property:ResetRotateSensitivities()
	--LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Property:ResetRotateSensitivities")
	local _rotateSensitivityXId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Sensitivity_Rotate_X)
	local _rotateSensitivityYId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Sensitivity_Rotate_Y)

	if self:GetObject():CheckObjectType(BattleObjectType.MonsterHero) then
		self.__propBaseDic[_rotateSensitivityXId] = self.__param.yawSpeed
		self.__propBaseDic[_rotateSensitivityYId] = self.__param.pitchSpeed
	elseif self:GetObject():CheckObjectType(BattleObjectType.SummonedMons) then
		local _monsterInstanceXls = self:GetBattleRoom().inputDataSource:GetDict("MonsterInstance", self.__param.monsterInstanceid)
		self.__propBaseDic[_rotateSensitivityXId] = _monsterInstanceXls.yawSpeed
		self.__propBaseDic[_rotateSensitivityYId] = _monsterInstanceXls.pitchSpeed
	elseif not self:GetObject():CheckObjectType(BattleObjectType.LeaderHero) then
		local _globalConfig = self:GetBattleRoom().inputDataSource:GetDict("GlobalBattleParameter",2)
		self.__propBaseDic[_rotateSensitivityXId] = _globalConfig.cameraSensitivity[1]
		self.__propBaseDic[_rotateSensitivityYId] = _globalConfig.cameraSensitivity[2]
	else
		self.__propBaseDic[_rotateSensitivityXId] = nil
		self.__propBaseDic[_rotateSensitivityYId] = nil
	end
	self:SetDirty(true)
end
-----------------------------------------------消耗类属性，各个功能使用对应接口---------------------------------------------

---设置消耗类属性
---@public
---@param _value number 最终值
function BattleObjCom_Property:SetConsumeProp(_propId, _value)
	--LogTools.LogByLevel(LogLevel.log, "checkProp", "BattleObjCom_Propert", "SetConsumeProp start", "_propId", _propId, "_value", _value, "curHp", self:GetHp())
	local _propName = ProtoEnumTool.GetPropertyKey(_propId)
	if _propName == BattlePropertyEnum.Hp_Cur then
		local _hp = self:GetHp()
		local _changeValue = _value - _hp
		--LogTools.LogByLevel(LogLevel.log, "checkProp", "BattleObjCom_Property", "SetConsumeProp", "1", "_changeValue", _changeValue)
		self:ChangeHp(_changeValue)
	elseif _propName == BattlePropertyEnum.Jizou_Cur then
		local _jizou = self:GetJizouEn()
		local _changeValue = _value - _jizou
		self:ChangeJizouEn(_changeValue)
	elseif _propName == BattlePropertyEnum.BulletEnergyCur then
		local _bulletEn = self:GetBulletEn()
		local _changeValue = _value - _bulletEn
		self:ChangeBulletEn(_changeValue)
	elseif _propName == BattlePropertyEnum.BulletEnergyCurJialifu then
		local _bulletEn = self:GetBulletEn()
		local _changeValue = _value - _bulletEn
		self:ChangeBulletEn(_changeValue)
	elseif _propName == BattlePropertyEnum.En_SkillCache then
		local _skillCacheEn = self:GetSkillCacheEn()
		local _changeValue = _value - _skillCacheEn
		self:ChangeSkillCacheEn(_changeValue)
	elseif _propName == BattlePropertyEnum.Zuoyide_Cur then
		local _zuoyideEn = self:GetZuoyideEn()
		local _changeValue = _value - _zuoyideEn
		self:ChangeZuoyideEn(_changeValue)
	end
	--LogTools.LogByLevel(LogLevel.log, "checkProp", "BattleObjCom_Propert", "SetConsumeProp end", "curHp", self:GetHp())
end

---改变消耗类属性
---@public
---@param _propId number 属性id
---@param _changeValue number 改变量，带符号
function BattleObjCom_Property:ChangeConsumeProp(_propId, _changeValue)
	local _propName = ProtoEnumTool.GetPropertyKey(_propId)
	if _propName == BattlePropertyEnum.Hp_Cur then
		self:ChangeHp(_changeValue)
	elseif _propName == BattlePropertyEnum.Jizou_Cur then
		self:ChangeJizouEn(_changeValue)
	elseif _propName == BattlePropertyEnum.BulletEnergyCur then
		self:ChangeBulletEn(_changeValue)
	elseif _propName == BattlePropertyEnum.BulletEnergyCurJialifu then
		self:ChangeBulletEn(_changeValue)
	elseif _propName == BattlePropertyEnum.En_SkillCache then
		self:ChangeSkillCacheEn(_changeValue)
	elseif _propName == BattlePropertyEnum.Zuoyide_Cur then
		self:ChangeZuoyideEn(_changeValue)
	end
end
-------------------------------------------------------生命值------------------------------------------------------------
---最大血量发生变化
---需要同步修改各个阶段血量，并确保当前阶段的剩余血量不超过上限
---@private
function BattleObjCom_Property:__OnMaxHpChange()
	--LogTools.LogByLevel(LogLevel.log, "checkProp", "__OnMaxHpChange 1")
	self:__calculateStageHps()
	self:__ChangeCurStageLeftHp(0)
end

---当前血量变化
---@public
function BattleObjCom_Property:ChangeHp(_value)
	local _old = self:GetHp()
	self:__ChangeCurStageLeftHp(_value)
	local _new = self:GetHp()
	if _new == _old then return end
	self.battleRoom.battleLogicEventService:OnTriggerBattleObjectHpChangeEvent(self:GetObject():GetParentUnit():GetNetId(), self:GetObject():GetObjectId(), _old, _new)
	self:SetDirty(true)
end

---获取当前血量
---@public
function BattleObjCom_Property:GetHp()
	return self.__consumeProps[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Cur)]
end

---计算当前血量
---@private
function BattleObjCom_Property:__CalculateCurHp()
	--LogTools.LogByLevel(LogLevel.log, "checkProp", "BattleObjCom_Property", "__CalculateCurHp start")
	local _hp = self.__curStageLeftHp
	--LogTools.LogByLevel(LogLevel.log, "checkProp", "BattleObjCom_Property", "__CalculateCurHp 1", "_hp", _hp)
	for i = self.__curStage + 1, self.__maxStage do
		--LogTools.LogByLevel(LogLevel.log, "checkProp", "BattleObjCom_Property", "__CalculateCurHp 2", "self.__stageMaxHps[i]", self.__stageMaxHps[i])
		_hp = _hp + self.__stageMaxHps[i]
	end
	--LogTools.LogByLevel(LogLevel.log, "checkProp", "BattleObjCom_Property", "__CalculateCurHp end", "_hp", _hp)
	return _hp
end

---获取当前阶段的最大血量
---@public
function BattleObjCom_Property:GetCurStageMaxHp()
	return self.__stageMaxHps[self.__curStage]
end

---获取当前阶段剩余血量
---@public
function BattleObjCom_Property:GetCurStageLeftHp()
	return self.__curStageLeftHp
end

---修改当前阶段剩余血量
---@private
function BattleObjCom_Property:__ChangeCurStageLeftHp(_value)
	--LogTools.LogByLevel(LogLevel.log, "checkProp", "BattleObjCom_Property", "__ChangeCurStageLeftHp", "1", "_value", _value)
	local _maxHp = self:GetCurStageMaxHp()
	--LogTools.LogByLevel(LogLevel.log, "checkProp", "BattleObjCom_Property", "__ChangeCurStageLeftHp", "1", "_maxHp", _maxHp)
	local _curHp = self.__curStageLeftHp + _value
	_curHp = math.min(_curHp, _maxHp)
	_curHp = math.max(_curHp, 0)
	--LogTools.LogByLevel(LogLevel.log, "checkProp", "BattleObjCom_Property", "__ChangeCurStageLeftHp", "1", "_curHp", _curHp)
	--if self.__curStageLeftHp == _curHp then return end

	self.__curStageLeftHp = _curHp
	local _hp = self:__CalculateCurHp()
	local _id = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Cur)
	self.__consumeProps[_id] = _hp
	local _tab = self.__dirtyAdd[5]
	_tab[_id] = _hp
	--LogTools.LogByLevel(LogLevel.log, "checkProp", "BattleObjCom_Property", "__ChangeCurStageLeftHp", "1", "_hp", _hp)
end

---获取当前血量阶段
---@public
function BattleObjCom_Property:GetCurStage()
	return self.__curStage
end

---获取血量阶段数
---@public
function BattleObjCom_Property:GetMaxStage()
	return self.__maxStage
end

---检查当前是最后一个血量阶段
---@public
function BattleObjCom_Property:CheckIsLastStage()
	return self.__curStage == self.__maxStage
end

---切换至下一个血量阶段
---@public
function BattleObjCom_Property:GoToNextStage()
	if self:CheckIsLastStage() then return end
	
	--当前阶段剩余血量清空
	local _stageLeftHp = self.__curStageLeftHp
	if _stageLeftHp > 0 then
		self:ChangeHp(-_stageLeftHp)
	end
	
	self:OnStageNumChange(self.__curStage + 1)
end

---设置当前阶段值
---注意：这里只是设置阶段值，并不是逐步切换过去的逻辑
---走到这里的时候，默认切换阶段结束
---@public
function BattleObjCom_Property:OnStageNumChange(_stage)

	local _curStage = self.__curStage
	if _curStage >= _stage then return end
	
	self.__curStage = _stage
	self.__curStageLeftHp = self:GetCurStageMaxHp()
	self.__changingStage = false
	
	local _obj = self:GetObject()
	if IsServer() then
		local _UnitChangeStage_S2C = {}
		_UnitChangeStage_S2C.netId = _obj:GetParentUnit():GetNetId()
		_UnitChangeStage_S2C.objectId = _obj:GetObjectId()
		_UnitChangeStage_S2C.stageNum = _stage
		self:GetBattleRoom().outputDataSource:UnitChangeStageS2C(_UnitChangeStage_S2C)
	else
		local _UnitChangeStage_L2V = {}
		_UnitChangeStage_L2V.netId = _obj:GetParentUnit():GetNetId()
		_UnitChangeStage_L2V.objectId = _obj:GetObjectId()
		_UnitChangeStage_L2V.stageNum =_stage
		self:GetBattleRoom().outputDataSource:UnitChangeStageL2V(_UnitChangeStage_L2V)
	end
end

---开始切换阶段
---@public
function BattleObjCom_Property:StartChangingStage()
	--LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Property:StartChangingStage", "self.__changingStage", self.__changingStage)
	if self.__changingStage then return end
	self.__changingStage = true
	
	local _obj = self:GetObject()
	if IsServer() then
		local _UnitStartChangeStage_S2C = {}
		_UnitStartChangeStage_S2C.netId = _obj:GetParentUnit():GetNetId()
		_UnitStartChangeStage_S2C.objectId = _obj:GetObjectId()
		self:GetBattleRoom().outputDataSource:UnitStartChangeStage_S2C(_UnitStartChangeStage_S2C)
	else
		local _UnitStartChangeStage_L2V = {}
		_UnitStartChangeStage_L2V.netId = _obj:GetParentUnit():GetNetId()
		_UnitStartChangeStage_L2V.objectId = _obj:GetObjectId()
		self:GetBattleRoom().outputDataSource:UnitStartChangeStage_L2V(_UnitStartChangeStage_L2V)
	end
end

---检查当前是否处于切换阶段中
---@public
---@return boolean
function BattleObjCom_Property:CheckChangingStage()
	return self.__changingStage
end

-------------------------------------------------------子弹能量----------------------------------------------------------
---子弹能量上限发生变化
---@private
---@param _curBulletPropName string 当前子弹能量
function BattleObjCom_Property:__OnMaxBulletEnergyChange(_curBulletPropName)
	--2023-4-13 证号的新需求:子弹能量取消能量检查上限
	--if not _curBulletPropName then
	--	_curBulletPropName = BattlePropertyEnum.BulletEnergyCur
	--end
	--local _maxBulletEn = self:GetPropertyById(ProtoEnumTool.GetPropertyId(BattlePropertyEnum.BulletEnergyMax))
	--local _propId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.BulletEnergyCur)
	--if self.__consumeProps[_propId] < _maxBulletEn then return end
	--
	--self.__consumeProps[_propId] = _maxBulletEn
	--local _tab = self.__dirtyAdd[5]
	--_tab[_propId] = _maxBulletEn
end

---获取当前子弹能量
---@public
function BattleObjCom_Property:GetBulletEn()
	local _curBulletPropName = BattlePropertyEnum.BulletEnergyCur
	---@type BattleObjCom_Weapon
	local _weaponCom = self.__object:GetComponent(BattleObjectComponentType.Weapon)
	if _weaponCom and _weaponCom.curBulletPropName then
		_curBulletPropName = _weaponCom.curBulletPropName
	end
	return self:GetBulletEnByPropId(_curBulletPropName)
end

---获取当前子弹能量
---@public
---@param _curBulletPropName string 当前子弹能量
function BattleObjCom_Property:GetBulletEnByPropId(_curBulletPropName)
	if not _curBulletPropName then
		_curBulletPropName = BattlePropertyEnum.BulletEnergyCur
	end
	return self.__consumeProps[ProtoEnumTool.GetPropertyId(_curBulletPropName)]
end

---子弹能量改变
---@public
---@param _curBulletPropName string 当前子弹能量属性名字
---@param _maxBulletPropName string 最大子弹能量属性名字
---@param _value number 改变值
---@param _checkMaxBullet boolean 是否检测最大子弹量
function BattleObjCom_Property:ChangeBulletEn(_value, _curBulletPropName, _maxBulletPropName, _checkMaxBullet)
	---@type BattleObjCom_Weapon
	local _weaponCom = self.__object:GetComponent(BattleObjectComponentType.Weapon)
	if not _curBulletPropName then
		if _weaponCom then
			_curBulletPropName = _weaponCom.curBulletPropName
		else
			-- 武器组件也取不到，再用默认的（可能是武器组件初始化之前调用）
			_curBulletPropName = BattlePropertyEnum.BulletEnergyCur
		end
	end
	if not _maxBulletPropName then
		if _weaponCom then
			_maxBulletPropName = _weaponCom.maxBulletPropName
		else
			-- 武器组件也取不到，再用默认的（可能是武器组件初始化之前调用）
			_maxBulletPropName = BattlePropertyEnum.BulletEnergyMax
		end
	end
	self:ChangeBulletEnByPropId(_value, _curBulletPropName, _maxBulletPropName, _checkMaxBullet)
end

---子弹能量改变(根据具体属性id)
---@public
---@param _value number 改变值
---@param _curBulletPropName string 当前子弹能量id
---@param _maxBulletPropName string 最大子弹能量id
---@param _checkMaxBullet boolean 是否检测最大子弹量
function BattleObjCom_Property:ChangeBulletEnByPropId(_value, _curBulletPropName, _maxBulletPropName, _checkMaxBullet)
	if not _curBulletPropName then
		_curBulletPropName = BattlePropertyEnum.BulletEnergyCur
	end
	if not _maxBulletPropName then
		_maxBulletPropName = BattlePropertyEnum.BulletEnergyMax
	end
	local _propId = ProtoEnumTool.GetPropertyId(_curBulletPropName)
	local _bulletEn = self.__consumeProps[_propId] + _value
	_bulletEn = self:GetBattleRoom().inputDataSource:FormatPropLimit(_propId, _bulletEn)

	---@type BattleObjCom_Weapon
	local _comWeapon = self:GetObject():GetComponent(BattleObjectComponentType.Weapon)
	if _value > 0 then
		local _maxBulletEn = self:__GetPanelProperty(ProtoEnumTool.GetPropertyId(_maxBulletPropName))
		if _checkMaxBullet ~= nil and _checkMaxBullet then
			-- 最大子弹量上限检测
			_bulletEn = math.min(_bulletEn, _maxBulletEn)
		end

		-- 子彈能量回滿
		if _maxBulletEn <= _bulletEn then
			if _comWeapon and not _comWeapon:IsInReloadState() and _comWeapon:IsOverLoad() then
				-- 过载中，能量回满，过载取消
				_comWeapon:BroadcastExitOverLoad()
			end
		end
	else
		_bulletEn = math.max(_bulletEn, 0)

		-- 子弹能量扣到0
		if 0 == _bulletEn then
			if _comWeapon and not _comWeapon:IsOverLoad() then
				-- 子弹扣到0，进入过载
				_comWeapon:BroadcastEnterOverLoad()
			end
		end
	end

	self.__consumeProps[_propId] = _bulletEn
	local _tab = self.__dirtyAdd[5]
	_tab[_propId] = _bulletEn
	self:SetDirty(true)
end

-------------------------------------------------------极奏能量----------------------------------------------------------
---极奏能量上限发生变化
---@private
function BattleObjCom_Property:__OnMaxJizouEnergyChange()
	local _maxJizouEn = self:GetPropertyById(ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Jizou_Max))
	local _propId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Jizou_Cur)
	if self.__consumeProps[_propId] < _maxJizouEn then return end

	self.__consumeProps[_propId] = _maxJizouEn
	local _tab = self.__dirtyAdd[5]
	_tab[_propId] = _maxJizouEn
end

---获取当前极奏能量
---@public
function BattleObjCom_Property:GetJizouEn()
	return self.__consumeProps[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Jizou_Cur)]
end

---极奏能量改变
---@public
function BattleObjCom_Property:ChangeJizouEn(_value)
	local _propId =  ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Jizou_Cur)

	if _value > 0 then
		-- 极奏能量恢复加成
		local propRecover = self:GetPropertyByName(BattlePropertyEnum.Jizou_Recover)
		if propRecover == nil then
			propRecover = 0
		end
		_value = _value * (1 + propRecover)
	end

	local _jizouEn = self.__consumeProps[_propId] + _value
	_jizouEn = self:GetBattleRoom().inputDataSource:FormatPropLimit(_propId, _jizouEn)

	if _value > 0 then
		local _maxJizouEn = self:__GetPanelProperty(ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Jizou_Max))
		_jizouEn = math.min(_jizouEn, _maxJizouEn)
	else
		_jizouEn = math.max(_jizouEn, 0)
	end

	self.__consumeProps[_propId] = _jizouEn
	local _tab = self.__dirtyAdd[5]
	_tab[_propId] = _jizouEn
	self:SetDirty(true)
end

-------------------------------------------------------特殊技能积攒能量---------------------------------------------------

---特殊技能积攒能量上限发生变化
---@private
function BattleObjCom_Property:__OnMaxSkillCacheEnChange()
	local _maxSkillCacheEn = self:GetPropertyById(ProtoEnumTool.GetPropertyId(BattlePropertyEnum.En_SkillCacheMax))
	local _propId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.En_SkillCache)
	if self.__consumeProps[_propId] < _maxSkillCacheEn then return end

	self.__consumeProps[_propId] = _maxSkillCacheEn
	local _tab = self.__dirtyAdd[5]
	_tab[_propId] = _maxSkillCacheEn
end

---获取当前特殊技能积攒能量
---@public
function BattleObjCom_Property:GetSkillCacheEn()
	return self.__consumeProps[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.En_SkillCache)]
end

---特殊技能积攒能量改变
---@public
function BattleObjCom_Property:ChangeSkillCacheEn(_value)
	local _propId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.En_SkillCache)
	local _skillCacheEn = self.__consumeProps[_propId] + _value
	_skillCacheEn = self:GetBattleRoom().inputDataSource:FormatPropLimit(_propId, _skillCacheEn)
	
	if _value > 0 then
		local _maxValue = self:__GetPanelProperty(ProtoEnumTool.GetPropertyId(BattlePropertyEnum.En_SkillCacheMax))
		if _maxValue > 0 then
			_skillCacheEn = math.min(_skillCacheEn, _maxValue)
		end
	end

	self.__consumeProps[_propId] = _skillCacheEn
	local _tab = self.__dirtyAdd[5]
	_tab[_propId] = _skillCacheEn
	self:SetDirty(true)
end


-------------------------------------------------------佐伊德存储--------------------------------------------------------
---佐伊德存储上限发生变化
---@private
function BattleObjCom_Property:__OnMaxZuoyideChange()
	local _maxZuoyideEn = self:GetPropertyById(ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Zuoyide_Max))
	local _propId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Zuoyide_Cur)
	if self.__consumeProps[_propId] < _maxZuoyideEn then return end

	self.__consumeProps[_propId] = _maxZuoyideEn
	local _tab = self.__dirtyAdd[5]
	_tab[_propId] = _maxZuoyideEn
end

---获取当前佐伊德存储
---@public
function BattleObjCom_Property:GetZuoyideEn()
	return self.__consumeProps[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Zuoyide_Cur)]
end

---佐伊德存储改变
---@public
function BattleObjCom_Property:ChangeZuoyideEn(_value)
	local _propId =  ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Zuoyide_Cur)
	local _zuoyideEn = self.__consumeProps[_propId] + _value
	_zuoyideEn = self:GetBattleRoom().inputDataSource:FormatPropLimit(_propId, _zuoyideEn)
	
	if _value > 0 then
		local _maxZuoyideEn = self:__GetPanelProperty(ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Zuoyide_Max))
		_zuoyideEn = math.min(_zuoyideEn, _maxZuoyideEn)
	else
		_zuoyideEn = math.max(_zuoyideEn, 0)
	end

	self.__consumeProps[_propId] = _zuoyideEn
	local _tab = self.__dirtyAdd[5]
	_tab[_propId] = _zuoyideEn
	self:SetDirty(true)
end

-------------------------------------------------------一些杂七杂八的-----------------------------------------------------
---获取当前损血
---@public
function BattleObjCom_Property:GetLostHp()
	local _curHp = self:GetHp()
	if not _curHp then return 0 end
	return self:GetPropertyByName(BattlePropertyEnum.Hp_Max) - _curHp
end

---获取X转向灵敏度
---@private
function BattleObjCom_Property:__GetRotateSensitivityX()
	if self:GetObject():CheckObjectType(BattleObjectType.MonsterHero) or self:GetObject():CheckObjectType(BattleObjectType.SummonedMons) then
		--LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Property:__GetRotateSensitivityX", self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Sensitivity_Rotate_X)])
		return self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Sensitivity_Rotate_X)]
	elseif self:GetObject():CheckObjectType(BattleObjectType.LeaderHero) then
		if self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Sensitivity_Rotate_X)] then
			return self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Sensitivity_Rotate_X)]
		end
		
		local _globalConfig
        ---@type BattleObjCom_PlayMode
		local playMode = self:GetObject():GetComponent(BattleObjectComponentType.PlayMode)
		if playMode.aimMode == BATTLE_OBJECT_PLAY_MODE_TYPE.aim then
			_globalConfig = self:GetBattleRoom().inputDataSource:GetDict("GlobalBattleParameter", self:GetObject():GetDataInstanceXls().aminGlobalBattleParameter)
		else
			_globalConfig = self:GetBattleRoom().inputDataSource:GetDict("GlobalBattleParameter",1);
		end
        return _globalConfig.cameraSensitivity[1]
	else
		return self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Sensitivity_Rotate_X)]
	end
end

---获取Y转向灵敏度
---@private
function BattleObjCom_Property:__GetRotateSensitivityY()
	if self:GetObject():CheckObjectType(BattleObjectType.MonsterHero) or self:GetObject():CheckObjectType(BattleObjectType.SummonedMons) then
		--LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Property:__GetRotateSensitivityY", self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Sensitivity_Rotate_Y)])
		return self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Sensitivity_Rotate_Y)]
	elseif self:GetObject():CheckObjectType(BattleObjectType.LeaderHero) then

		if self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Sensitivity_Rotate_Y)] then
			return self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Sensitivity_Rotate_Y)]
		end
		
		local _globalConfig
        ---@type BattleObjCom_PlayMode
		local playMode = self:GetObject():GetComponent(BattleObjectComponentType.PlayMode)
		if playMode.aimMode == BATTLE_OBJECT_PLAY_MODE_TYPE.aim then
			_globalConfig = self:GetBattleRoom().inputDataSource:GetDict("GlobalBattleParameter", self:GetObject():GetDataInstanceXls().aminGlobalBattleParameter)
		else
			_globalConfig = self:GetBattleRoom().inputDataSource:GetDict("GlobalBattleParameter",1);
		end
        return _globalConfig.cameraSensitivity[2]
	else
		return self.__propBaseDic[ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Sensitivity_Rotate_Y)]
	end
end
------------------------------------------------------------------------------------------------------------------------
---获取等级
---@public
function BattleObjCom_Property:GetLevel()
	return self.__level
end

---获取元素弱点类型
---@public
---@return number[]
function BattleObjCom_Property:GetEleWeakTypeList()
	return self.__eleWeakTypeList
end

---获取属性百分比
---只有消耗属性有百分比，面板属性百分比始终为1
---返回0-1
---@public
function BattleObjCom_Property:GetPropertyPercentById(_propId)
	if not _propId then return 1 end
	if not self.__consumeProps[_propId]	then return 1 end
	return self:__GetPropertyPercentById(_propId)
end

---获取属性百分比
---只有消耗属性有百分比，面板属性百分比始终为1、
---返回0-1
---@public
function BattleObjCom_Property:GetPropertyPercentByName(_propName)
	return self:GetPropertyPercentById(ProtoEnumTool.GetPropertyId(_propName))
end

---@private
function BattleObjCom_Property:__GetPropertyPercentById(_propId)
	local _cur = self:__GetConsumeProperty(_propId)
	if not _cur then return 1 end
	
	local _name = ProtoEnumTool.GetPropertyKey(_propId)
	if _name == BattlePropertyEnum.Hp_Cur then
		return _cur / self:GetPropertyById(ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Hp_Max))
	elseif _name == BattlePropertyEnum.Jizou_Cur then
		return _cur / self:GetPropertyById(ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Jizou_Max))
	elseif _name == BattlePropertyEnum.BulletEnergyCur then
		return _cur / self:GetPropertyById(ProtoEnumTool.GetPropertyId(BattlePropertyEnum.BulletEnergyMax))
	elseif _name == BattlePropertyEnum.BulletEnergyCurJialifu then
		return _cur / self:GetPropertyById(ProtoEnumTool.GetPropertyId(BattlePropertyEnum.BulletEnergyMaxJialifu))
	elseif _name == BattlePropertyEnum.Zuoyide_Cur then
		return _cur / self:GetPropertyById(ProtoEnumTool.GetPropertyId(BattlePropertyEnum.Zuoyide_Max))
	end
	return 1
end

---检查是否是消耗类属性
---@public
function BattleObjCom_Property:CheckIsConsumeProp(_propId)
	return self.__consumeProps[_propId] ~= nil
end

---@public
function BattleObjCom_Property:OnUpdate(_deltaTime)
	self:__OnUpdate(_deltaTime)
	if not self:CheckDirty() then return end
    self:SnapChangeProperties()
end

---广播属性变化
---@public
function BattleObjCom_Property:SnapChangeProperties()
	local _propertyChangeInfo = {}

	_propertyChangeInfo.baseValueAdd = {}
	self:__collectDirtyProperties(self.__dirtyAdd[1], _propertyChangeInfo.baseValueAdd)
	_propertyChangeInfo.basePercentAdd = {}
	self:__collectDirtyProperties(self.__dirtyAdd[2], _propertyChangeInfo.basePercentAdd)
	_propertyChangeInfo.additionValueAdd = {}
	self:__collectDirtyProperties(self.__dirtyAdd[3], _propertyChangeInfo.additionValueAdd)
	_propertyChangeInfo.additionPercentAdd = {}
	self:__collectDirtyProperties(self.__dirtyAdd[4], _propertyChangeInfo.additionPercentAdd)
	_propertyChangeInfo.consumeProps = {}
	self:__collectDirtyProperties(self.__dirtyAdd[5], _propertyChangeInfo.consumeProps)

	if #_propertyChangeInfo.baseValueAdd > 0 or
	#_propertyChangeInfo.basePercentAdd > 0 or
	#_propertyChangeInfo.additionValueAdd > 0 or
	#_propertyChangeInfo.additionPercentAdd > 0 or
	#_propertyChangeInfo.consumeProps > 0 then

		local _outputData = {
		netId = self:GetObject():GetParentUnit():GetNetId(),
		objId = self:GetObject():GetObjectId(),
		changeProps = _propertyChangeInfo
		}


		if IsServer() then
			self.battleRoom.outputDataSource:AddBattleUnitChangeData(_outputData)
		else
			self:ClientReceiveOutputData(_propertyChangeInfo)
		end
	end
	
	self:SetDirty(false)
end

---@private
function BattleObjCom_Property:__collectDirtyProperties(_dirtyDic, _collector)
	for _id, _value in pairs(_dirtyDic) do
		if _value then
			local _propertyKeyValue = {
				propId = _id,
				propValue = _value
			}
			table.insert(_collector, _propertyKeyValue)
			_dirtyDic[_id] = nil
		end
	end
end

---@public
function BattleObjCom_Property:ClientReceiveOutputData(_changeProps)
	--LogTools.LogByLevel(LogLevel.log, "CheckProp", "BattleObjCom_Property:ClientReceiveOutputData", "_changeProps", dumpTableEx(_changeProps))
	local _changedIdDic = {}

	if _changeProps.baseValueAdd then
		for _, _propertyKeyValue in pairs(_changeProps.baseValueAdd) do
			_changedIdDic[_propertyKeyValue.propId] = 1
			self.__propBaseValueAdd[_propertyKeyValue.propId] = _propertyKeyValue.propValue
		end
	end

	if _changeProps.basePercentAdd then
		for _, _propertyKeyValue in pairs(_changeProps.basePercentAdd) do
			_changedIdDic[_propertyKeyValue.propId] = 1
			self.__propBasePercentAdd[_propertyKeyValue.propId] = _propertyKeyValue.propValue
		end
	end

	if _changeProps.additionValueAdd then
		for _, _propertyKeyValue in pairs(_changeProps.additionValueAdd) do
			_changedIdDic[_propertyKeyValue.propId] = 1
			self.__propAdditionValueAdd[_propertyKeyValue.propId] = _propertyKeyValue.propValue
		end
	end

	if _changeProps.additionPercentAdd then
		for _, _propertyKeyValue in pairs(_changeProps.additionPercentAdd) do
			_changedIdDic[_propertyKeyValue.propId] = 1
			self.__propAdditionPercentAdd[_propertyKeyValue.propId] = _propertyKeyValue.propValue
		end
	end

	if _changeProps.consumeProps then
		for _, _propertyKeyValue in pairs(_changeProps.consumeProps) do
			_changedIdDic[_propertyKeyValue.propId] = 1
			self.__consumeProps[_propertyKeyValue.propId] = _propertyKeyValue.propValue
		end
	end

	local _changedPropInfos = {}
	local _propInfoList = {}
	for _propId, _ in pairs(_changedIdDic) do
		local _propertyKeyValue = {
				propId = _propId,
				propValue = self:GetPropertyById(_propId)
			}
			table.insert(_propInfoList, _propertyKeyValue)
	end
	if 0 == #_propInfoList then return end
	_changedPropInfos.props = _propInfoList


	local _battleObject = self:GetObject()
	local _battleUnitPropChange_L2V = {
		netId = _battleObject:GetParentUnit():GetNetId(),
		objId = _battleObject:GetObjectId(),
		changeProps = _changedPropInfos
	}

	self:GetBattleRoom().outputDataSource:BattleUnitPropChangeL2V(_battleUnitPropChange_L2V)
	--LogTools.LogByLevel(LogLevel.log, "checkProp", "_battleUnitPropChange_L2V", dumpTableEx(_battleUnitPropChange_L2V))
end

-- 
function BattleObjCom_Property:GetProtoHash()
	local _protoHashInt2FloatList = {}
	for _key, _value in pairs(self.__propBaseDic) do
		local _protoHashInt2Float = {}
		_protoHashInt2Float.key = _key
		--LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Property", "GetProtoHash", "_key", _key, "_value", _value)
		_protoHashInt2Float.value = self:GetPropertyById(_key)
		table.insert(_protoHashInt2FloatList, _protoHashInt2Float)
	end
	return _protoHashInt2FloatList
end

-- 获取属性快照
function BattleObjCom_Property:GetPropSnapShot()
    local attributeMap = {}
    table.insert(attributeMap, self:__GetPropKvByName(BattlePropertyEnum.Hp_Cur))
    table.insert(attributeMap, self:__GetPropKvByName(BattlePropertyEnum.Jizou_Cur))
	return attributeMap
end

-- 获取属性百分比快照
function BattleObjCom_Property:GetConsumePropPercentSnapShot()
    local attributeMap = {}
    table.insert(attributeMap, self:__GetPropPercentKvByName(BattlePropertyEnum.Hp_Cur))
    table.insert(attributeMap, self:__GetPropPercentKvByName(BattlePropertyEnum.Jizou_Cur))
	return attributeMap
end

-- 获取属性快照
---@param _propName string 属性名
---@return table<number,number> 键值对
function BattleObjCom_Property:__GetPropPercentKvByName(_propName)
	---@type table<number,number>
	local _kv = {}
	_kv.key = ProtoEnumTool.GetPropertyId(_propName)
	_kv.value = Mathf.Round(self:GetPropertyPercentById(_kv.key) * 10000) / 100
	return _kv
end

-- 获取属性快照
---@param _propName string 属性名
---@return table<number,number> 键值对
function BattleObjCom_Property:__GetPropKvByName(_propName)
    ---@type table<number,number>
    local _kv = {}
    _kv.key = ProtoEnumTool.GetPropertyId(_propName)
    _kv.value = self:GetPropertyById(_kv.key)
    return _kv
end

---@public
function BattleObjCom_Property:Clear()
	self:__Clear()
	self.__param = nil
	self.__level = nil
	self.__propBaseDic = nil
	self.__propBaseValueAdd = nil
	self.__propBasePercentAdd = nil
	self.__propAdditionValueAdd = nil
	self.__propAdditionPercentAdd = nil
	self.__consumeProps = nil
	self.__maxStage = nil
	self.__curStage = nil
	self.__curStageLeftHp = nil
	self.__stageMaxHps = nil
	self.__dirtyAdd = nil
	self.__dirty = nil
end

------------------------------------------------------------------------------------------------------------------------

---@public
function BattleObjCom_Property:OnPlayerGm(_command, _params)
	if "HPCHANGEVALUE" == _command then
		self:ChangeHp(tonumber(_params[1]))
	elseif "HPCHANGEPERCENT" == _command then
		local _changeValue = self:GetHp() * tonumber(_params[1]) * 0.01
		self:ChangeHp(_changeValue)
	elseif "HPMAX" == _command then
		local _max = self:GetPropertyByName(BattlePropertyEnum.Hp_Max)
		local _cur = self:GetPropertyByName(BattlePropertyEnum.Hp_Cur)
		self:ChangeHp(_max - _cur)
	elseif "JZMAX" == _command then
		local _max = self:GetPropertyByName(BattlePropertyEnum.Jizou_Max)
		local _cur = self:GetPropertyByName(BattlePropertyEnum.Jizou_Cur)
		self:ChangeJizouEn(_max - _cur)
	end
end

------------------------------------------------------------------------------------------------------------------------
---服务器逻辑核生成用于发送给前端逻辑核的全量信息
---@public
function BattleObjCom_Property:GetCreateSyncMessage_S2C()
	
	local _battleObjectPropCreateSyncInfo = {}
	
	_battleObjectPropCreateSyncInfo.baseProps = {}
	for _id, _value in pairs(self.__propBaseDic) do
		local _propertyKeyValue = {}
		_propertyKeyValue.propId = _id
		_propertyKeyValue.propValue = _value
		table.insert(_battleObjectPropCreateSyncInfo.baseProps, _propertyKeyValue)
	end
	
	_battleObjectPropCreateSyncInfo.consumeProps = {}
	for _id, _value in pairs(self.__consumeProps) do
		local _propertyKeyValue = {}
		_propertyKeyValue.propId = _id
		_propertyKeyValue.propValue = _value
		table.insert(_battleObjectPropCreateSyncInfo.consumeProps, _propertyKeyValue)
	end

	_battleObjectPropCreateSyncInfo.propAddInfos = {}
	_battleObjectPropCreateSyncInfo.propAddInfos.baseValueAdd = {}
	self:__collectDirtyProperties(self.__propBaseValueAdd, _battleObjectPropCreateSyncInfo.propAddInfos.baseValueAdd)
	_battleObjectPropCreateSyncInfo.propAddInfos.basePercentAdd = {}
	self:__collectDirtyProperties(self.__propBasePercentAdd, _battleObjectPropCreateSyncInfo.propAddInfos.basePercentAdd)
	_battleObjectPropCreateSyncInfo.propAddInfos.additionValueAdd = {}
	self:__collectDirtyProperties(self.__propAdditionValueAdd, _battleObjectPropCreateSyncInfo.propAddInfos.additionValueAdd)
	_battleObjectPropCreateSyncInfo.propAddInfos.additionPercentAdd = {}
	self:__collectDirtyProperties(self.__propAdditionPercentAdd, _battleObjectPropCreateSyncInfo.propAddInfos.additionPercentAdd)
	_battleObjectPropCreateSyncInfo.propAddInfos.consumeProps = {}
	
	_battleObjectPropCreateSyncInfo.curHpStage = self.__curStage
	_battleObjectPropCreateSyncInfo.curStageLeftHp = self.__curStageLeftHp
	
	return _battleObjectPropCreateSyncInfo
end

---前端逻辑核用服务器发来的全量信息刷新自身数据
---@public
function BattleObjCom_Property:OnReceiveCreateSyncMessage_S2C(_battleObjectPropCreateSyncInfo)
	for _, _propertyKeyValue in pairs(_battleObjectPropCreateSyncInfo.baseProps) do
		self.__propBaseDic[_propertyKeyValue.propId] = _propertyKeyValue.propValue
	end
	for _, _propertyKeyValue in pairs(_battleObjectPropCreateSyncInfo.consumeProps) do
		self.__consumeProps[_propertyKeyValue.propId] = _propertyKeyValue.propValue
	end
	self.__propBaseValueAdd = {}
	for _, _propertyKeyValue in pairs(_battleObjectPropCreateSyncInfo.propAddInfos.baseValueAdd) do
		self.__propBaseValueAdd[_propertyKeyValue.propId] = _propertyKeyValue.propValue
	end
	self.__propBasePercentAdd = {}
	for _, _propertyKeyValue in pairs(_battleObjectPropCreateSyncInfo.propAddInfos.basePercentAdd) do
		self.__propBasePercentAdd[_propertyKeyValue.propId] = _propertyKeyValue.propValue
	end
	self.__propAdditionValueAdd = {}
	for _, _propertyKeyValue in pairs(_battleObjectPropCreateSyncInfo.propAddInfos.additionValueAdd) do
		self.__propAdditionValueAdd[_propertyKeyValue.propId] = _propertyKeyValue.propValue
	end
	self.__propAdditionPercentAdd = {}
	for _, _propertyKeyValue in pairs(_battleObjectPropCreateSyncInfo.propAddInfos.additionPercentAdd) do
		self.__propAdditionPercentAdd[_propertyKeyValue.propId] = _propertyKeyValue.propValue
	end
	self.__curStage = _battleObjectPropCreateSyncInfo.CurHpStage
	self.__curStageLeftHp = _battleObjectPropCreateSyncInfo.curStageLeftHp
	self:__calculateStageHps()
end

---@public
function BattleObjCom_Property:SetDirty(_bool)
	self.__dirty = _bool
end

---@public
function BattleObjCom_Property:CheckDirty()
	return self.__dirty
end

---前端逻辑核生成用于发送给表现的层全量信息
---@public
--function BattleObjCom_Property:GetCreateSyncMessage_L2V()
--    local _battleObjectPropCreateSyncInfo = {}
--	
--	_battleObjectPropCreateSyncInfo.curHpStage = self.__curStage
--	_battleObjectPropCreateSyncInfo.curStageLeftHp = self.__curStageLeftHp
--	_battleObjectPropCreateSyncInfo.finalProps = {}
--	for _propId, _ in pairs(self.__propBaseDic) do
--		local _propertyKeyValue = {
--				propId = _propId,
--				propValue = self:GetPropertyById(_propId)
--			}
--		table.insert(_battleObjectPropCreateSyncInfo.finalProps, _propertyKeyValue)
--	end
--	return _battleObjectPropCreateSyncInfo
--end

return BattleObjCom_Property
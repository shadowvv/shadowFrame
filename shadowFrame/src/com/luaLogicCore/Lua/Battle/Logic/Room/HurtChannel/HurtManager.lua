---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/03/16 11:46
--- Describe: 伤害模块管理
---

require "Battle/Logic/Room/HurtChannel/HurtStackData"
require "Battle/Logic/Room/HurtChannel/HurtChannel"
require "Battle/Logic/Room/HurtChannel/SnapShotDataManager"

---伤害距离衰减定义
---@class HurtDisReduceEnum : table
HurtDisReduceEnum = {
	AdvDis = 1,              ---优势距离
	attenuationDis= 2,       ---中衰减距离
	highAttenuationDis = 3,  ---高衰减距离
}

---伤害类型
---@class HurtChannelType : table
HurtChannelType = {
	Normal = 1,              --物理伤害
	Element = 2,             --元素伤害
	ReactionPhysic = 3,      --元素反应伤害(无元素类型)
	ReactionElement = 4,     --元素反应伤害(有元素类型)
	EleBreakExplode = 5,     --元素击破爆炸伤害
}

------------------------------------------------------------------------------------------------------------------------
---@class HurtManager : table
HurtManager = class(nil, "HurtManager")
function HurtManager:ctor(_battleId)
	self.battleId = _battleId
	self.battleRoom = GetBattleRoom(self.battleId)
end

---暴击参数
HurtManager.criticalHurtAddBase = 0  --基础暴击伤害加深
HurtManager.criticalParam1 = 0       --暴击参数1
HurtManager.criticalParam2 = 0       --暴击参数2
HurtManager.criticalParam3 = 0       --暴击参数3
HurtManager.criticalParam4 = 0       --暴击参数4
---减伤参数
HurtManager.hurtReduceParam1 = 0     --减伤参数1
HurtManager.hurtReduceParam2 = 0     --减伤参数2
HurtManager.hurtReduceParam3 = 0     --减伤参数3
---能量参数
HurtManager.enParam1 = 0             --能量参数1
HurtManager.enParam2 = 0             --能量参数2
HurtManager.enParamA = 0             --能量参数A
---攻击距离衰减系数
HurtManager.hurtReduceParam = {}

function HurtManager:Init()
	---@private
	---@type HurtChannel
    self.__hurtChannel = HurtChannel.New(self.battleId)
    self.__hurtChannel:Init()
	---@type SnapShotDataManager
	self.__snapShotDataManager = SnapShotDataManager.New()
	self.__snapShotDataManager:Init(self.battleId)
	---@private
	---@type Utils_BasePool
	self.__stackDataPool = Utils_BasePool.New()
	self.__stackDataPool:Init(HurtStackData, 20, 10)
	
	--self.__frameDeadNetId = {}
	self:__InitHurtParams()

	---记录本帧的所有伤害/治疗信息，最终合并成一个消息发送出去
	---@private
	---@type table msg.UnitHurtInfo_S2C
	self.__hurtInfoList = {}
end

---初始化各种全局参数
---@private
function HurtManager:__InitHurtParams()
	---暴击参数
	HurtManager.criticalHurtAddBase = self.battleRoom.inputDataSource:GetDict("BattleDefault", 10001).value3
	HurtManager.criticalParam1 = self.battleRoom.inputDataSource:GetDict("BattleDefault", 10005).value3
	HurtManager.criticalParam2 = self.battleRoom.inputDataSource:GetDict("BattleDefault", 10006).value3
	HurtManager.criticalParam3 = self.battleRoom.inputDataSource:GetDict("BattleDefault", 10007).value3
	HurtManager.criticalParam4 = self.battleRoom.inputDataSource:GetDict("BattleDefault", 10008).value3
	---减伤参数
	HurtManager.hurtReduceParam1 = self.battleRoom.inputDataSource:GetDict("BattleDefault", 10002).value3
	HurtManager.hurtReduceParam2 = self.battleRoom.inputDataSource:GetDict("BattleDefault", 10003).value3
	HurtManager.hurtReduceParam3 = self.battleRoom.inputDataSource:GetDict("BattleDefault", 10004).value3
	---能量参数	
	HurtManager.enParam1 = self.battleRoom.inputDataSource:GetDict("BattleDefault", 10009).value3
	HurtManager.enParam2 = self.battleRoom.inputDataSource:GetDict("BattleDefault", 10010).value3
	HurtManager.enParamA = self.battleRoom.inputDataSource:GetDict("BattleDefault", 10011).value3
	
	HurtManager.hurtReduceParam = self.battleRoom.inputDataSource:GetDict("BattleDefault", 200).value6
end

---判断所处的伤害距离衰减区间
---@public
---@param _dis number
---@param _weaponDisXls WeaponDistance
function HurtManager:GetHurtDisReduceSection(_fromNetId, _defNetId, _weaponType, _hurtReduceDisAdd)
	
	local _fromUnit = self.battleRoom.battleUnitManager:GetUnit(_fromNetId)
	if not _fromUnit then return 1 end
	local _fromPos= _fromUnit:GetActionManager():GetPosition()
	local _fromRadius = 0
	---@type BattleObjCom_Config
	local _fromConfigCom = _fromUnit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Config)
	if _fromConfigCom then
		_fromRadius = _fromConfigCom:GetLogicRadius()
	end

	local _defUnit = self.battleRoom.battleUnitManager:GetUnit(_defNetId)
	if not _defUnit then return 0 end
	local _defPos = _defUnit:GetActionManager():GetPosition()
	local _defRadius = 0
	---@type BattleObjCom_Config
	local _defConfigCom = _defUnit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Config)
	if _defConfigCom then
		_defRadius = _defConfigCom:GetLogicRadius()
	end
	
	---判断一个在另一个内部的情况
	local _dis = self.battleRoom.transUtil:GetDisBetweenUnits(_fromNetId, _defNetId, BattleUnitDisRecordType.LogicDis)
	if _dis < _fromRadius * _fromRadius or _dis < _defRadius * _defRadius then
		if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckHurt", "一个单位在另一个单位内部, 按照最近处理")
		end
		return HurtManager.hurtReduceParam[1], 1
	end
	
	local _vector3Pool = self.battleRoom.vector3Pool
	local _v3FromPos= _vector3Pool:Pop(_fromPos)
	local _v3DefPos = _vector3Pool:Pop(_defPos)
	local _v3Dir = _vector3Pool:Pop()
	local _v3Tmp = _vector3Pool:Pop()
	
	self.battleRoom.transUtil:GetDirBetweenUnits(_fromNetId, _defNetId, _v3Dir)
	Vector3.SetNormalize(_v3Dir)

	Vector3.MulNumber(_v3Dir, _fromRadius, _v3Tmp)
	Vector3.Add(_v3FromPos, _v3Tmp, _v3FromPos)

	Vector3.MulNumber(_v3Dir, _defRadius, _v3Tmp)
	Vector3.Sub(_v3DefPos, _v3Tmp, _v3DefPos)

	Vector3.Sub(_v3DefPos, _v3FromPos, _v3Tmp)
	_dis = Vector3.SqrMagnitude(_v3Tmp)
	
	_vector3Pool:Push(_v3FromPos)
	_vector3Pool:Push(_v3DefPos)
	_vector3Pool:Push(_v3Dir)
	_vector3Pool:Push(_v3Tmp)
	
	local _hurtDisReduceEnum = self.battleRoom.inputDataSource:GetHurtDisReduceParamCnt(_weaponType, _dis, _hurtReduceDisAdd)
	--LogTools.LogByLevel(LogLevel.log, "_defPos", _defPos, "_defRadius", _defRadius, "_fromPos", _fromPos, "_fromRadius", _fromRadius, "_dis", math.sqrt(_dis), "_weaponType", _weaponType, "_hurtReduceDisAdd", _hurtReduceDisAdd, "_hurtDisReduceEnum", _hurtDisReduceEnum)
	if -1 == _hurtDisReduceEnum then return HurtManager.hurtReduceParam[#HurtManager.hurtReduceParam], #HurtManager.hurtReduceParam end

	return HurtManager.hurtReduceParam[_hurtDisReduceEnum], _hurtDisReduceEnum
end

---@public
function HurtManager:OnUpdate(_deltaTime)
	if 0 == #self.__hurtInfoList then return end

	for _, _hurtInfo in pairs(self.__hurtInfoList) do
		_hurtInfo.num = math.ceil(_hurtInfo.num)
	end
	local _unitHurtS2C = {}
	_unitHurtS2C.infoList = self.__hurtInfoList
	COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_HURT_BROAD_CAST:GetId(),_unitHurtS2C, true)
	
	self.__hurtInfoList = {}
end
------------------------------------------------------------------------------------------------------------------------

---子弹造成伤害
---伤害接口，跟颜良确认过，子弹只会有造成伤害一种情况
---@public
---@param _sendPlayerId number 发送者的playerId
---@param _infoList table msg.BulletCollisionInputInfo[]
function HurtManager:OnBulletCollision(_sendPlayerId, _infoList)
	if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtManager", "OnBulletCollision", "_infoList", dumpTableEx(_infoList))
	end

	if self.battleRoom.battleLevelManager and self.battleRoom.battleLevelManager:CheckBattleRunStop() then return end

	for i = 1, #_infoList do
		self:__AnalysisBulletCollisionInput(_infoList[i])
	end

end

---@private
function HurtManager:__AnalysisBulletCollisionInput(_bulletCollisionInputInfo)

	local _ejectorManager = self.battleRoom.ejectorManager
	if not _ejectorManager:CheckBulletHurtRecord(_bulletCollisionInputInfo.bulletIndex, _bulletCollisionInputInfo.hurtNO) then return end
	_ejectorManager:SetBulletHurtRecord(_bulletCollisionInputInfo.bulletIndex, _bulletCollisionInputInfo.hurtNO)

	local _emitterData = _ejectorManager:GetEmitterData(_bulletCollisionInputInfo.emitterId)
	if (LogTools.HurtLog or LogTools.BarrageLog) and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtManager", "__AnalysisBulletCollisionInput", "_bulletCollisionInputInfo.emitterId", _bulletCollisionInputInfo.emitterId, "_emitterData", _emitterData)
	end
	if not _emitterData then return end

	local _objIdList = _bulletCollisionInputInfo.objIdList
	local _blockList = _bulletCollisionInputInfo.blockList or {}
	local _collisionList = _bulletCollisionInputInfo.collisionList or {}
	local _hitDirectList = _bulletCollisionInputInfo.direction or {}

	local _vector3Pool = self.battleRoom.vector3Pool
	local _hitDir = _vector3Pool:Pop()
	local _zeroV3 = Vector3.zero_global()
	for i = 1, #_objIdList do
		Vector3.Copy(_hitDir, _hitDirectList[i] or _zeroV3)
		self:__OnBulletHurt(_emitterData, _objIdList[i], _blockList[i] or 0, _collisionList[i] or "", _hitDir)
	end
	_vector3Pool:Push(_hitDir)
end

---@private
---@param _barrageEmitterData BarrageEmitterData
---@param _hitDirect Vector3 击退方向
function HurtManager:__OnBulletHurt(_barrageEmitterData, _defObjId, _defBlock, _hurtCollision, _hitDirect)
	--LogTools.LogByLevel(LogLevel.log, "HurtManager:__OnBulletHurt", "_defObjId", _defObjId)
	local _defObj = self.battleRoom.battleObjectManager:GetObject(_defObjId)
	--LogTools.LogByLevel(LogLevel.log, "HurtManager:__OnBulletHurt", "_defObj", _defObj, "_defObj:CheckDead()", _defObj:CheckDead(), "_defObj:CheckCalculateHurt()", _defObj:CheckCalculateHurt())
	if not _defObj or _defObj:CheckDead() then return end

	local _defUnit = _defObj:GetParentUnit()
	if not _defUnit or not _defUnit:CheckAlive() then return end

	local _snapShotData = _barrageEmitterData:GetSnapShotData()
	if _defUnit:CheckUnitType(BattleUnitType.SceneObj) then
		---@type BattleUnitCom_Behav
		local _behavCom = _defUnit:GetComponent(BattleUnitComponentType.Behav)
		--LogTools.LogByLevel(LogLevel.log, "HurtManager", "PostTaskListenEvent", "_behavCom:GetTreeIndex()", _behavCom:GetTreeIndex())
		self.battleRoom.behaviorManager:PostTaskListenEvent(_behavCom:GetTreeIndex(), LuaBehav_Define_TaskListenEnum.SceneObjHit, _snapShotData)
	end

	if not _defObj:CheckCalculateHurt() then return end

	local _defNetId = _defUnit:GetNetId()

	local _levelUnit = self.battleRoom.battleLevelManager.levelUnitManager:GetLevelUnit(_defUnit:GetLevelUnitId())
	--LogTools.LogByLevel(LogLevel.log, "self.battleRoom.tagManager:GetTagValue(TAG_ENUM.JIZOU_ADDBUFF_NUM)", self.battleRoom.tagManager:GetTagValue(TAG_ENUM.JIZOU_ADDBUFF_NUM))
	if _levelUnit and _levelUnit.target and self.battleRoom.tagManager:GetTagValue(TAG_ENUM.JIZOU_ADDBUFF_NUM) and self.battleRoom.tagManager:GetTagValue(TAG_ENUM.JIZOU_ADDBUFF_NUM) > 0 then
		return
	end

	---@type BattleUnitCom_Camp
	local _defCampCom = _defUnit:GetComponent(BattleUnitComponentType.Camp)
	if not _defCampCom then return end
	local _useEditorCampCheck, _editorCampCheckRet = _barrageEmitterData:CheckEditorCampConfig(_defCampCom, _defNetId, _defObjId)
	if _useEditorCampCheck and not _editorCampCheckRet then
		if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckHurt", "子弹使用编辑器阵营检查，且阵营检查不通过", "来源NetId", _snapShotData:GetNetId(), "来源ObjId", _snapShotData:GetObjId(), "目标NetId", _defNetId, "目标ObjId", _defObjId, "技能Id", _barrageEmitterData:GetHeroSkillId(), "技能等级", _barrageEmitterData:GetHeroSkillLevel(), "弹幕技能ID",_barrageEmitterData:GetBarrageSkillId())
		end
		return
	end

	local _disReduceParam, _hurtDisReduceEnum = self:GetHurtDisReduceSection(_snapShotData:GetNetId(), _defNetId, _snapShotData:GetWeaponType(), _snapShotData:GetHurtReduceDisAddValue())
	if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckHurt", "子弹造成伤害", "来源NetId", _snapShotData:GetNetId(), "来源ObjId", _snapShotData:GetObjId(), "目标NetId", _defNetId, "目标ObjId", _defObjId, "技能Id", _barrageEmitterData:GetHeroSkillId(), "技能等级", _barrageEmitterData:GetHeroSkillLevel(), "弹幕技能ID",_barrageEmitterData:GetBarrageSkillId())
	end

	local _hurtStackData = self:PopHurtStackData()
	_hurtStackData.defUnit = _defUnit
	_hurtStackData.defObj = _defObj
	_hurtStackData.defBlockId = _defBlock
	_hurtStackData.reactId = 0
	_hurtStackData.checkCamp = not _useEditorCampCheck
	_hurtStackData.stackNum = 1
	_hurtStackData.directHurtNum = nil
	_hurtStackData.disReduceParam = _disReduceParam
	_hurtStackData.disReduceEnum = _hurtDisReduceEnum
	_hurtStackData.trigEvent = _barrageEmitterData:CheckTrigEvent()
	_hurtStackData.isAccumulatedAtk = _barrageEmitterData:GetIsAccumulatedAttack()
	_hurtStackData.barrageSkillId = _barrageEmitterData:GetBarrageSkillId()
	_hurtStackData.hurtCollision = _hurtCollision

	if not _hurtStackData:FormatHurtChannel(_snapShotData) then
		self:PushStackData(_hurtStackData)
		return
	end
	
	self:__TrigBulletHitTarget(_snapShotData, _hurtStackData)
	self:__CountHurt(_snapShotData, _hurtStackData)
	self:__CountBuff(_snapShotData, _hurtStackData, _barrageEmitterData:GetAttachBuffTemplateList())
	self:__CountHitValue(_barrageEmitterData, _hurtStackData.defUnit, _hurtStackData.defObj, _hitDirect)

	-- 子弹碰撞
	_hurtStackData.defObj:OnBulletCollision(_barrageEmitterData)
	
	self:PushStackData(_hurtStackData)
end

---buff造成伤害
---@public
---@param _snapShotData SnapShotData
---@param _hurtStackData HurtStackData
function HurtManager:OnBuffHurt(_snapShotData, _hurtStackData)
	if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtManager", "OnBuffHurt start")
	end
	if self.battleRoom.battleLevelManager and self.battleRoom.battleLevelManager:CheckBattleRunStop() then return end
	if not _hurtStackData:FormatHurtChannel(_snapShotData) then return end
	if not _hurtStackData.defObj:CheckCalculateHurt() then return end

	local _levelUnit = self.battleRoom.battleLevelManager.levelUnitManager:GetLevelUnit(_hurtStackData.defUnit:GetLevelUnitId())
	--LogTools.LogByLevel("self.battleRoom.tagManager:GetTagValue(TAG_ENUM.JIZOU_ADDBUFF_NUM)", self.battleRoom.tagManager:GetTagValue(TAG_ENUM.JIZOU_ADDBUFF_NUM))
	if _levelUnit and _levelUnit.target and self.battleRoom.tagManager:GetTagValue(TAG_ENUM.JIZOU_ADDBUFF_NUM) and self.battleRoom.tagManager:GetTagValue(TAG_ENUM.JIZOU_ADDBUFF_NUM) > 0 then
		return
	end

	if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckHurt", "buff造成伤害", "来源NetId", _snapShotData:GetNetId(), "来源ObjId", _snapShotData:GetObjId(), "目标NetId", _hurtStackData.defNetId, "目标ObjId", _hurtStackData.defObjId, "buffGroupId", _snapShotData:GetSourceId())
	end

	local _disReduceParam, _hurtDisReduceEnum = self:GetHurtDisReduceSection(_snapShotData:GetNetId(), _hurtStackData.defNetId, _snapShotData:GetWeaponType(), _snapShotData:GetHurtReduceDisAddValue())
	_hurtStackData.disReduceParam = _disReduceParam
	_hurtStackData.disReduceEnum = _hurtDisReduceEnum
	
	self:__CountHurt(_snapShotData, _hurtStackData)
end

---buff造成治疗
---@public
---@param _snapShotData SnapShotData
---@param _defObj BattleObjectBase
---@param _stackNum number 堆叠倍率
function HurtManager:OnBuffCure(_snapShotData, _defObj, _stackNum)
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtManager", "OnBuffCure start", "_snapShotData", _snapShotData, "_defObj", _defObj)
	if self.battleRoom.battleLevelManager and self.battleRoom.battleLevelManager:CheckBattleRunStop() then return end

	if not _snapShotData then return end
	if not _defObj then return end

	local _defUnit = _defObj:GetParentUnit()
	if not _defUnit then return end

	self:__CountCure(_snapShotData, _defUnit, _defObj, _stackNum)
end

------------------------------------------------------------------------------------------------------------------------
---处理伤害
---@private
---@param _snapShotData SnapShotData
---@param _hurtStackData HurtStackData
function HurtManager:__CountHurt(_snapShotData, _hurtStackData)

	self.__hurtChannel:OnHurt(_hurtStackData)
	local _hurtNum = _hurtStackData.hurtNum
	if 0 == _hurtNum or _hurtStackData.damageMask then return end

	if _snapShotData:GetSourceType() == 2 then
		local _buffGroupId = _snapShotData:GetSourceId()
		local _defNetId = _hurtStackData.defNetId
		local _defObjId = _hurtStackData.defObjId
		local _fromNetId = _snapShotData:GetNetId()
		local _getSame = false
		for _, _preInfo in pairs(self.__hurtInfoList) do
			if _preInfo.netId == _defNetId and _preInfo.objectId == _defObjId and _preInfo.sourceId == _buffGroupId and _preInfo.fromNetId == _fromNetId then
				_preInfo.num = _preInfo.num + _hurtNum
				_preInfo.isCritical = _preInfo.isCritical or _hurtStackData.isCritical
				_getSame = true
				break
			end
		end
		if not _getSame then
			_hurtStackData:GetHurtInfo(self.__hurtInfoList)
		end
	else
		_hurtStackData:GetHurtInfo(self.__hurtInfoList)
	end

	local _defCurHp = _hurtStackData.defObjPropCom:GetHp()
	local _dead = (_defCurHp == 0)

	self.battleRoom.battleLogicEventService:OnTriggerBeDamageEvent(
			_snapShotData:GetNetId(),
			_snapShotData:GetObjId(),
			_hurtStackData.defNetId,
			_hurtStackData.defObjId,
			_snapShotData:GetFromUnitType(),
			_snapShotData:GetSourceId(),
			_snapShotData:GetSourceType(),
			_hurtNum,
			_snapShotData:GetElementId(),
			_hurtStackData.isCritical,
			_dead,
			_hurtStackData.hpBefore,
			_defCurHp,
			_snapShotData:GetElementId(),
			_hurtStackData.trigEvent,
			_hurtStackData.disReduceEnum,
			_hurtStackData.isWeakHurt,
			_hurtStackData.hurtElementType:GetId(),
			_hurtStackData.isAccumulatedAtk
	);

	--策划表示怪物的死亡要在行为树里自己控制
	if _dead and not _hurtStackData.defUnit:CheckUnitType(BattleUnitType.Monster) and not _hurtStackData.defUnit:CheckUnitType(BattleUnitType.SummonedMons) then
		self.battleRoom.battleUnitManager:OnBattleObjectDead(_hurtStackData.defNetId, _hurtStackData.defObjId, LuaBehav_Define_DeadType.DeadNormal)
	end

	if LogTools.CollectHurt and _snapShotData:GetFirstCamp() == BattleUnitCampType.Player then
		local _tab = _hurtStackData:GetHurtInfo({})
		for _, _hurtInfo in pairs(_tab) do
			self.battleRoom.hurtCollectorUtil:PushHurtMessage(_hurtStackData.hurtChannelType, _hurtInfo, _snapShotData:GetOriginalHeroSkillId())
		end
	end
end

---@private
---@param _snapShotData SnapShotData
---@param _hurtStackData HurtStackData
function HurtManager:__TrigBulletHitTarget(_snapShotData, _hurtStackData)

	self.battleRoom.battleLogicEventService:OnTriggerHitTargetEvent(
			_snapShotData:GetNetId(),
			_snapShotData:GetObjId(),
			_hurtStackData.defNetId,
			_hurtStackData.defObjId,
			_snapShotData:GetFromUnitType(),
			_snapShotData:GetSourceId(),
			_snapShotData:GetSourceType(),
			-1,
			_snapShotData:GetElementId(),
			false,
			false,
			-1,
			-1,
			_snapShotData:GetElementId(),
			_hurtStackData.trigEvent,
			_hurtStackData.disReduceEnum,
			_hurtStackData.isWeakHurt,
			_hurtStackData.hurtElementType:GetId(),
			_hurtStackData.isAccumulatedAtk,
			_hurtStackData.barrageSkillId,
			_snapShotData:GetOriginalHeroSkillId()
	)
end

---处理造成的添加buff
---@private
---@param _snapShotData SnapShotData
---@param _hurtStackData HurtStackData
---@param _buffTemplateList BattleBuffCastTemplate[] buffTemplate列表
function HurtManager:__CountBuff(_snapShotData, _hurtStackData, _buffTemplateList)
	--LogTools.LogByLevel(LogLevel.log, "HurtManager", "__CountBuff", "_defUnit", _defUnit:GetNetId(), "_buffTemplateList", #_buffTemplateList)
	
	
	--local _BattleBuffCastTemplate = BattleBuffService:GenerateCastBuffTemplate(50430400, self.battleRoom.battleObjectManager:GetObject(_snapShotData:GetObjId()))
	-----@type BattleObjCom_Buff
	--local _buffCom = _defObj:GetComponent(BattleObjectComponentType.Buff)
	--if not _buffCom then return end
	--
	--if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
	--	LogTools.LogByLevel(LogLevel.log, "CheckHurt", "子弹命中尝试添加buff", "buff添加类型为受击者自身obj", "来源NetId", _snapShotData:GetNetId(), "来源ObjId", _snapShotData:GetObjId(), "目标NetId", _defUnit:GetNetId(), "目标ObjId", _defObj:GetObjectId(), "60000006")
	--end
	--_buffCom:AddBattleBuff(_BattleBuffCastTemplate);
	
	
	if not _buffTemplateList or 0 == #_buffTemplateList then return end

	local _defUnit = _hurtStackData.defUnit
	local _defObj = _hurtStackData.defObj
	local _defBlock = _hurtStackData.defBlockId
	for i = 1, #_buffTemplateList do
		local _buffTemplate = _buffTemplateList[i]
		_buffTemplate.bodyPartId = _defBlock
		self:__HurtAddBuff(_defUnit, _defObj, _snapShotData, _buffTemplate)
	end
	--LogTools.LogByLevel(LogLevel.log, "HurtManager", "__CountBuff end")
end

---实际添加buff
---@private
---@param _defUnit BattleUnitBase
---@param _defObj BattleObjectBase
---@param _snapShotData SnapShotData
---@param _buffTemplate BattleBuffCastTemplate
function HurtManager:__HurtAddBuff(_defUnit, _defObj, _snapShotData, _buffTemplate)
	--LogTools.LogByLevel(LogLevel.log, "HurtManager", "__HurtAddBuff _buffTemplate.buffGroupId", _buffTemplate.buffGroupId)
	---@type BuffGroup
	local addBuffGroup = self.battleRoom.inputDataSource:GetDict("BuffGroup", _buffTemplate.buffGroupId)
	if not addBuffGroup then return end

	
	local _addType = _buffTemplate.buffAttachType
	if not _addType or _addType == BATTLE_BUFF_ATTACH_TYPE.BATTLE_BUFF_ATTACH_SELF then
		---@type BattleObjCom_Buff
		local _buffCom = _defObj:GetComponent(BattleObjectComponentType.Buff)
		if not _buffCom then return end

		if (LogTools.BuffLog or LogTools.HurtLog) and CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckHurt", "子弹命中尝试添加buff", "buff添加类型为受击者自身obj", "来源NetId", _snapShotData:GetNetId(), "来源ObjId", _snapShotData:GetObjId(), "目标NetId", _defUnit:GetNetId(), "目标ObjId", _defObj:GetObjectId(), "buffGroupId", _buffTemplate.buffGroupId)
		end
		_buffCom:AddBattleBuff(_buffTemplate);
	elseif _addType == BATTLE_BUFF_ATTACH_TYPE.BATTLE_BUFF_ATTACH_TEAM then
		local _heroObjList = _defUnit:GetAllObjectDic()
		for _, _obj in pairs(_heroObjList) do
			---@type BattleObjCom_Buff
			local _buffCom = _obj:GetComponent(BattleObjectComponentType.Buff)
			if _buffCom then
				if (LogTools.BuffLog or LogTools.HurtLog) and CheckLogLevel(LogLevel.log) then
					LogTools.LogByLevel(LogLevel.log, "CheckHurt", "子弹命中尝试添加buff", "buff添加类型为受击者阵上阵下", "来源NetId", _snapShotData:GetNetId(), "来源ObjId", _snapShotData:GetObjId(), "目标NetId", _defUnit:GetNetId(), "目标ObjId", _obj:GetObjectId(), "buffGroupId", _buffTemplate.buffGroupId)
				end
				_buffCom:AddBattleBuff(_buffTemplate);
			end
		end
	else
		---@type BattleUnitCom_Buff
		local _buffCom = _defUnit:GetComponent(BattleUnitComponentType.Buff)
		if _buffCom then
			if (LogTools.BuffLog or LogTools.HurtLog) and CheckLogLevel(LogLevel.log) then
				LogTools.LogByLevel(LogLevel.log, "CheckHurt", "子弹命中尝试添加buff", "buff添加类型为受击者unit", "来源NetId", _snapShotData:GetNetId(), "来源ObjId", _snapShotData:GetObjId(), "目标NetId", _defUnit:GetNetId(), "buffGroupId", _buffTemplate.buffGroupId)
			end
			_buffCom:AddBattleBuff(_buffTemplate)
		end
	end
end

---处理造成的状态变化
---@private
---@param _emitterData BarrageEmitterData
---@param _defUnit BattleUnitBase
---@param _defObj BattleObjectBase
---@param _hitDirect Vector3
function HurtManager:__CountHitValue(_emitterData, _defUnit,_defObj, _hitDirect)
	local _repelId = _emitterData:GetRepelId()
	
	---@type RepelShoot
	local repelShoot = self.battleRoom.inputDataSource:GetDict("RepelShoot", _repelId)
	if repelShoot then
		_defUnit:GetActionManager():EnterRepel(_repelId, _hitDirect);
	end

	---@type BattleObjCom_HitValue
	local hitValueComp = _defObj:GetComponent(BattleObjectComponentType.HitValue);
	if hitValueComp then
		hitValueComp:CountHitValue(_emitterData:GetHitValue(), _emitterData:GetBarrageSkillId())
	end

end

---计算治疗
---@private
function HurtManager:__CountCure(_snapShotData, _defUnit, _defObj, _stackNum)
	local _unitHurtInfoS2C = self.__hurtChannel:OnCure(_snapShotData, _defUnit, _defObj, _stackNum)
	if not _unitHurtInfoS2C then return end
	
	local _buffGroupId = _unitHurtInfoS2C.sourceId
	local _defNetId = _unitHurtInfoS2C.netId
	local _defObjId = _unitHurtInfoS2C.objectId
	local _fromNetId = _unitHurtInfoS2C.fromNetId
	for _, _preInfo in pairs(self.__hurtInfoList) do
		if _preInfo.netId == _defNetId and _preInfo.objectId == _defObjId and _preInfo.sourceId == _buffGroupId and _preInfo.fromNetId == _fromNetId then
			_preInfo.num = _preInfo.num + _unitHurtInfoS2C.num
			_preInfo.isCritical = _preInfo.isCritical or _unitHurtInfoS2C.isCritical
			return
		end
	end
	
	table.insert(self.__hurtInfoList, _unitHurtInfoS2C)
end
---------------------------------------------------快照操作接口-----------------------------------------------------------

---创建属性快照
---@public
---@return SnapShotData
function HurtManager:CreateSnapShot(_objId, _sourceType, _sourceId, _elementId, _addElementId, _addElementRand, _addElementNum, _hurtParam, _hatredParam)
	return self.__snapShotDataManager:CreateSnapShot(_objId, _sourceType, _sourceId, _elementId, _addElementId, _addElementRand, _addElementNum, _hurtParam, _hatredParam)
end

---返还属性快照
---@public
---@param _snapShotData SnapShotData
function HurtManager:PushSnapShot(_snapShotData)
	self.__snapShotDataManager:PushSnapShot(_snapShotData)
end

---通过快照Index返还属性快照
---@public
---@param _snapShotDataIndex number 属性快照唯一ID
function HurtManager:PushSnapShotByIndex(_snapShotDataIndex)
	self.__snapShotDataManager:PushSnapShotById(_snapShotDataIndex)
end

---获取指定index的属性快照
---@public
---@return SnapShotData
function HurtManager:GetSnapShotData(_snapShotDataIndex)
	return self.__snapShotDataManager:GetSnapShot(_snapShotDataIndex)
end


---@public
---@return HurtStackData
function HurtManager:PopHurtStackData()
	return self.__stackDataPool:Pop()
end

---@public
---@param _hurtStackData HurtStackData
function HurtManager:PushStackData(_hurtStackData)
	self.__stackDataPool:Push(_hurtStackData)
end

------------------------------------------------------------------------------------------------------------------------ 
function HurtManager:Clear()
	self.__hurtChannel = nil
	--self.__frameDeadNetId = nil
	self.__snapShotDataManager:Clear()
	self.__snapShotDataManager = nil
	HurtManager.criticalHurtAddBase = nil
	HurtManager.criticalParam1 = nil
	HurtManager.criticalParam2 = nil
	HurtManager.criticalParam3 = nil
	HurtManager.criticalParam4 = nil
	HurtManager.hurtReduceParam1 = nil
	HurtManager.hurtReduceParam2 = nil
	HurtManager.hurtReduceParam3 = nil
	HurtManager.enParam1 = nil
	HurtManager.enParam2 = nil
	HurtManager.enParamA = nil
	HurtManager.hurtReduceParam = nil
end

return HurtManager
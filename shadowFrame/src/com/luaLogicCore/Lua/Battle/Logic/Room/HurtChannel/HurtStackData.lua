---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2023/05/30 15:54
--- Describe:
---

---@class Enum_HurtBelongType : table
Enum_HurtBelongType = {
	SelfHero = 0,                            --自己
	SubordinateHero = 1,                     --召唤英雄
	SubordinateCurHero = 2,                  --召唤者当前英雄
	SelfHeroAndSubordinateHero = 3,          --自己以及召唤英雄
	SelfHeroAndSubordinateCurHero = 4,       --自己以及召唤者当前英雄
}

---@class HurtStackData : Utils_BasePoolData
---@field defUnit BattleUnitBase
---@field defObj BattleObjectBase
---@field defBlockId number
---@field reactId number
---@field eleBreakId number
---@field checkCamp boolean
---@field stackNum number
---@field directHurtNum number
---@field disReduceParam number
---@field disReduceEnum HurtDisReduceEnum
---@field defUnitPropCom BattleUnitCom_UnitProp
---@field defObjPropCom BattleObjCom_Property
---@field hpBefore number
---@field defConfigCom BattleObjCom_Config
---@field defCampCom BattleUnitCom_Camp
---@field defBlockCom BattleObjCom_Block
---@field defObjBuffCom BattleObjCom_Buff
---@field defUnitBuffCom BattleUnitCom_Buff
---@field defHatredCom BattleUnitCom_Hatred
---@field defElementCom BattleObjCom_Element_V2
---@field snapShotData SnapShotData
---@field hurtNum number
---@field hurtChannelType HurtChannelType
---@field hurtElementType BattleElementType
---@field isReaction boolean
---@field isCritical boolean
---@field damageMask boolean
---@field trigEvent boolean
---@field isAccumulatedAtk boolean
---@field barrageSkillId number
---@field hurtCollision string
---@field elementSourceType ElementSource
---@field elementSourceId number
HurtStackData = class(Utils_BasePoolData, "HurtStackData")

---回收处理
---@public
function HurtStackData:OnPush()
	self.defUnit = nil
	self.defObj = nil
	self.defBlockId = nil
	self.reactId = nil
	self.eleBreakId = nil
	self.checkCamp = nil
	self.stackNum = nil
	self.directHurtNum = nil
	self.disReduceParam = nil
	self.disReduceEnum = nil
	self.defUnitPropCom = nil
	self.defObjPropCom = nil
	self.hpBefore = nil
	self.defConfigCom = nil
	self.defCampCom = nil
	self.defBlockCom = nil
	self.defObjBuffCom = nil
	self.defUnitBuffCom = nil
	self.defHatredCom = nil
	self.defElementCom = nil
	self.snapShotData = nil
	self.hurtNum = nil
	self.hurtChannelType = nil
	self.hurtElementType = nil
	self.isReaction = nil
	self.isCritical = nil
	self.damageMask = nil
	self.trigEvent = nil
	self.isAccumulatedAtk = nil
	self.barrageSkillId = nil
	self.hurtCollision = nil
	self.elementSourceType = nil
	self.elementSourceId = nil
end

---@public
function HurtStackData:Clear()
	self:OnPush()
end
------------------------------------------------------------------------------------------------------------------------

---@public
---@param _snapShotData SnapShotData
---@return boolean
function HurtStackData:FormatHurtChannel(_snapShotData)
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtStackData", "FormatHurtChannel start", "_snapShotData", _snapShotData)

	local _unit = self.defUnit
	local _obj = self.defObj

	self.defNetId = _unit:GetNetId()
	self.defObjId = _obj:GetObjectId()

	---@type BattleObjCom_Property
	local _defObjPropCom = _obj:GetComponent(BattleObjectComponentType.Property)
	if not _defObjPropCom then
		if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtStackData", "FormatHurtChannel", "DefPropCom为空，无法造成伤害，伤害通道提前结束!!!")
		end
		return false
	end
	self.defObjPropCom = _defObjPropCom

	if _defObjPropCom:CheckChangingStage() then
		if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtStackData", "FormatHurtChannel", "目标正在切换阶段，无法造成伤害，伤害通道提前结束!!!")
		end
		return false
	end

	self.hpBefore = _defObjPropCom:GetHp()
	if 0 == self.hpBefore then
		if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtStackData", "FormatHurtChannel", "HpBefore为0，无法造成伤害，伤害通道提前结束!!!")
		end
		return false
	end

	---@type BattleObjCom_Config
	self.defConfigCom = _obj:GetComponent(BattleObjectComponentType.Config)
	if not self.defConfigCom then
		if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtStackData", "FormatHurtChannel", "DefConfigCom为空，无法造成伤害，伤害通道提前结束!!!")
		end
		return false
	end

	---@type BattleUnitCom_Camp
	local _defCampCom = _unit:GetComponent(BattleUnitComponentType.Camp)
	if not _defCampCom then
		if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtStackData", "FormatHurtChannel", "DefCampCom为空，无法造成伤害，伤害通道提前结束!!!")
		end
		return false
	end

	if not self.directHurtNum and self.checkCamp then
		if not BattleUnitCom_Camp.CheckCampHurtable(_snapShotData:GetFirstCamp(), _defCampCom:GetFirstCamp()) then
			if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
				LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtStackData", "FormatHurtChannel", "阵营检查不通过，不允许造成伤害，伤害通道提前结束!!!")
			end
			return false
		end
	end
	self.defCampCom = _defCampCom

	---@type BattleObjCom_Block
	local _defBlockCom = _obj:GetComponent(BattleObjectComponentType.Block)
	if _defBlockCom then
		if _defBlockCom:CheckBlockHided(self.defBlockId) then
			if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
				LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtStackData", "FormatHurtChannel", "分块被隐藏，无法造成伤害，伤害通道提前结束!!!")
			end
			return false
		end
		self.isWeakHurt = _defBlockCom:CheckBlockState(self.defBlockId, BattleObjectBlockStateType.OpenedWeakness)
	else
		self.isWeakHurt = false
	end

	if _defObjPropCom:GetCurStageLeftHp() == 0 and (not _defBlockCom or not _defBlockCom:CheckBlockState(self.defBlockId, BattleObjectBlockStateType.OpenedWeakness)) then
		if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtStackData", "FormatHurtChannel", "DefPropCom当前阶段剩余血量为0，无法造成伤害，伤害通道提前结束!!!")
		end
		return false
	end
	
	self.defBlockCom = _defBlockCom

	---@type BattleUnitCom_Buff
	local _unitBuffCom = _unit:GetComponent(BattleUnitComponentType.Buff)
	---@type BattleObjCom_Buff
	local _objBuffCom = _obj:GetComponent(BattleObjectComponentType.Buff)
	if not self:__CheckBuff(_snapShotData, _unitBuffCom, _objBuffCom) then return false end

	self.defUnitBuffCom = _unitBuffCom
	self.defObjBuffCom = _objBuffCom
	---@type BattleUnitCom_UnitProp
	self.defUnitPropCom = _unit:GetComponent(BattleUnitComponentType.UnitProp)
	---@type BattleUnitCom_Hatred
	self.defHatredCom = _unit:GetComponent(BattleUnitComponentType.Hatred)
	---@type BattleObjCom_Element_V2
	self.defElementCom = _obj:GetComponent(BattleObjectComponentType.Element)

	self.snapShotData = _snapShotData
	self.hurtNum = 0
	self.extraHurtNum = 0
	self.hurtChannelType = HurtChannelType.Normal
	self.hurtElementType = BattleElementTypeEnum.PHYSIC
	self.isReaction = (self.reactId and self.reactId ~= 0)
	self.isCritical = false
	self.damageMask = false
	self:__FormatHurtChannel()
	self:__FormatRelatedHurtTarget()
	self:__formatElementSource()

	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtStackData", "FormatHurtChannel end", "self.snapShotData", self.snapShotData)
	return true
end

---@private
function HurtStackData:__FormatRelatedHurtTarget()

	if self.defUnit:CheckUnitType(BattleUnitType.SummonedMons) then
		---@type SummonedMonster
		local _summonedXls = self.defConfigCom:GetInstanceXls()
		local _hurtBelongType = _summonedXls.hurtBelongType
		local _hurtBelongParam = _summonedXls.hurtBelongParam
		---@type BattleUnitCom_Subordination
		local _subordinateCom = self.defUnit:GetComponent(BattleUnitComponentType.Subordination)
		if _hurtBelongType == Enum_HurtBelongType.SubordinateHero then
			self.mainDefUnit = nil
			self.mainDefObj = nil
			self.mainDefUnitPropCom = nil
			self.mainDefObjPropCom = nil
			self.extraDefUnit = _subordinateCom:GetSubordinatedUnit()
			self.extraDefObj = _subordinateCom:GetSubordinatedObject()
			self.extraDefUnitPropCom = self.extraDefUnit:GetComponent(BattleUnitComponentType.UnitProp)
			self.extraDefObjPropCom = self.extraDefObj:GetComponent(BattleObjectComponentType.Property)
			self.extraDefTagCom = self.extraDefUnit:GetComponent(BattleUnitComponentType.TagSelector)
			self.extraHurtParam = _hurtBelongParam
		elseif _hurtBelongType == Enum_HurtBelongType.SubordinateCurHero then
			self.mainDefUnit = nil
			self.mainDefObj = nil
			self.mainDefUnitPropCom = nil
			self.mainDefObjPropCom = nil
			self.extraDefUnit = _subordinateCom:GetSubordinatedUnit()
			self.extraDefObj = self.extraDefUnit:GetCurrentHeroObject()
			self.extraDefUnitPropCom = self.extraDefUnit:GetComponent(BattleUnitComponentType.UnitProp)
			self.extraDefObjPropCom = self.extraDefObj:GetComponent(BattleObjectComponentType.Property)
			self.extraDefTagCom = self.extraDefUnit:GetComponent(BattleUnitComponentType.TagSelector)
			self.extraHurtParam = _hurtBelongParam
		elseif _hurtBelongType == Enum_HurtBelongType.SelfHeroAndSubordinateHero then
			self.mainDefUnit = self.defUnit
			self.mainDefObj = self.defObj
			self.mainDefUnitPropCom = self.defUnitPropCom
			self.mainDefObjPropCom = self.defObjPropCom
			self.extraDefUnit = _subordinateCom:GetSubordinatedUnit()
			self.extraDefObj = _subordinateCom:GetSubordinatedObject()
			self.extraDefUnitPropCom = self.extraDefUnit:GetComponent(BattleUnitComponentType.UnitProp)
			self.extraDefObjPropCom = self.extraDefObj:GetComponent(BattleObjectComponentType.Property)
			self.extraDefTagCom = self.extraDefUnit:GetComponent(BattleUnitComponentType.TagSelector)
			self.extraHurtParam = _hurtBelongParam
		elseif _hurtBelongType == Enum_HurtBelongType.SelfHeroAndSubordinateCurHero then
			self.mainDefUnit = self.defUnit
			self.mainDefObj = self.defObj
			self.mainDefUnitPropCom = self.defUnitPropCom
			self.mainDefObjPropCom = self.defObjPropCom
			self.extraDefUnit = _subordinateCom:GetSubordinatedUnit()
			self.extraDefObj = self.extraDefUnit:GetCurrentHeroObject()
			self.extraDefUnitPropCom = self.extraDefUnit:GetComponent(BattleUnitComponentType.UnitProp)
			self.extraDefObjPropCom = self.extraDefObj:GetComponent(BattleObjectComponentType.Property)
			self.extraDefTagCom = self.extraDefUnit:GetComponent(BattleUnitComponentType.TagSelector)
			self.extraHurtParam = _hurtBelongParam
		else
			self.mainDefUnit = self.defUnit
			self.mainDefObj = self.defObj
			self.mainDefUnitPropCom = self.defUnitPropCom
			self.mainDefObjPropCom = self.defObjPropCom
			self.extraDefUnit = nil
			self.extraDefObj = nil
			self.extraDefUnitPropCom = nil
			self.extraDefObjPropCom = nil
			self.extraDefTagCom = nil
			self.extraHurtParam = nil
		end
	else
		self.mainDefUnit = self.defUnit
		self.mainDefObj = self.defObj
		self.mainDefUnitPropCom = self.defUnitPropCom
		self.mainDefObjPropCom = self.defObjPropCom
		self.extraDefUnit = nil
		self.extraDefObj = nil
		self.extraDefUnitPropCom = nil
		self.extraDefObjPropCom = nil
		self.extraDefTagCom = nil
		self.extraHurtParam = nil
	end
	
end

---@private
---@param _snapShotData SnapShotData
---@param _defUnitBuffCom BattleUnitCom_Buff
---@param _defObjBuffCom BattleObjCom_Buff
---@return boolean
function HurtStackData:__CheckBuff(_snapShotData, _defUnitBuffCom, _defObjBuffCom)
	--buff检查
	local _atkElementTypeId = _snapShotData:GetElementId()
	---@type BattleObjCom_Buff
	local _atkObjBuffCom = _snapShotData:GetObjBuffCom()
	---@type BattleUnitCom_Buff
	local _atkUnitBuffCom = _snapShotData:GetUnitBuffCom()

	local _specialBuffRet = false
	local _checkSpecialBuff = false
	if _defUnitBuffCom or _defObjBuffCom then
		local _check = false
		local _checkBuffList
		if _defUnitBuffCom then
			_check, _checkBuffList = _defUnitBuffCom:SpecialBuffDoDamageIds()
			if _check then
				_checkSpecialBuff = true
				for _, _buffId in pairs(_checkBuffList) do
					if _atkUnitBuffCom:CheckBuffExist(_buffId, nil) or _atkObjBuffCom:CheckBuffExist(_buffId, nil) then
						_specialBuffRet = true
						break
					end
				end
			end
		end

		if not _specialBuffRet then
			if _defObjBuffCom then
				_check, _checkBuffList = _defObjBuffCom:SpecialBuffDoDamageIds()
				if _check then
					_checkSpecialBuff = true
					for _, _buffId in pairs(_checkBuffList) do
						if _atkUnitBuffCom:CheckBuffExist(_buffId, nil) or _atkObjBuffCom:CheckBuffExist(_buffId, nil) then
							_specialBuffRet = true
							break
						end
					end
				end
			end
		end
	end
	if _checkSpecialBuff and not _specialBuffRet then
		if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtStackData", "FormatHurtChannel", "指定ID伤害BUFF检查不通过，不允许造成伤害，伤害通道提前结束!!!")
		end
		return false
	end

	if _defUnitBuffCom then
		if _defUnitBuffCom:IsInvincible() then
			if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
				LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtStackData", "FormatHurtChannel", "无敌buff（unit层），无法造成伤害。伤害通道提前结束!!!")
			end
			return false
		end

		for _, _elementId in pairs(_defUnitBuffCom:IsElementInvincible()) do
			if _elementId == 0 then
				if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
					LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtStackData", "FormatHurtChannel", "元素无敌buff（unit层）,类型0，无法造成伤害。伤害通道提前结束!!!")
				end
				return false
			end
			if _atkElementTypeId == _elementId then
				if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
					LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtStackData", "FormatHurtChannel", "元素无敌buff（unit层），类型",_elementId,"无法造成伤害。伤害通道提前结束!!!")
				end
				return false
			end
		end
	end

	if _defObjBuffCom then
		if _defObjBuffCom:IsInvincible() then
			if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
				LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtStackData", "FormatHurtChannel", "无敌buff（obj层），无法造成伤害。伤害通道提前结束!!!")
			end
			return false
		end

		for _, _elementId in pairs(_defObjBuffCom:IsElementInvincible()) do
			if _elementId == 0 then
				if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
					LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtStackData", "FormatHurtChannel", "元素无敌buff,类型0，无法造成伤害。伤害通道提前结束!!!")
				end
				return false
			end
			if _atkElementTypeId == _elementId then
				if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
					LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtStackData", "FormatHurtChannel", "元素无敌buff，类型",_elementId,"无法造成伤害。伤害通道提前结束!!!")
				end
				return false
			end
		end
	end
	
	return true
end

---@private
function HurtStackData:__FormatHurtChannel()
	local _elementType = self.snapShotData:GetElementType()
	if _elementType == BattleElementTypeEnum.NONE then
		_elementType = BattleElementTypeEnum.PHYSIC
	end
	
	self.hurtElementType = _elementType
	if self.eleBreakId and self.eleBreakId > 0 then
		self.hurtChannelType = HurtChannelType.EleBreakExplode
	elseif self.isReaction then
		self.hurtChannelType = (_elementType == BattleElementTypeEnum.PHYSIC) and HurtChannelType.ReactionPhysic or HurtChannelType.ReactionElement
	elseif _elementType == BattleElementTypeEnum.PHYSIC then
		self.hurtChannelType = HurtChannelType.Normal	
	else
		self.hurtChannelType = HurtChannelType.Element
	end
end

---@private
function HurtStackData:__formatElementSource()
	local _sourceType = self.snapShotData:GetSourceType()
	if _sourceType == 2 then
		self.elementSourceType = ElementSourceType.Buff
	else
		self.elementSourceType = ElementSourceType.ActiveSkill
	end
	
	self.elementSourceId = self.snapShotData:GetSourceId()
end

---@public
---@return table
function HurtStackData:GetHurtInfo(_list)
	
	local _snapShotData = self.snapShotData

	if self.mainDefUnit then
		local _unitHurtInfoS2C_main = {}
		_unitHurtInfoS2C_main.type = 1
		_unitHurtInfoS2C_main.netId = self.mainDefUnit:GetNetId()
		_unitHurtInfoS2C_main.objectId = self.mainDefObj:GetObjectId()
		_unitHurtInfoS2C_main.fromNetId = _snapShotData:GetNetId()
		_unitHurtInfoS2C_main.fromObjId = _snapShotData:GetObjId()
		_unitHurtInfoS2C_main.sourceType = _snapShotData:GetSourceType()
		_unitHurtInfoS2C_main.sourceId = _snapShotData:GetSourceId()
		_unitHurtInfoS2C_main.originalSkillId = _snapShotData:GetOriginalHeroSkillId()
		_unitHurtInfoS2C_main.isWeaknessHurt = self.isWeakHurt
		_unitHurtInfoS2C_main.num = self.hurtNum
		_unitHurtInfoS2C_main.hurtEleType = self.hurtElementType:GetId()
		_unitHurtInfoS2C_main.isEleReaction = self.isReaction
		_unitHurtInfoS2C_main.reactionType = self.reactId or -1
		_unitHurtInfoS2C_main.collision = self.hurtCollision
		_unitHurtInfoS2C_main.isCritical = self.isCritical or false
		_unitHurtInfoS2C_main.curStageLeftHp = self.mainDefObjPropCom:GetCurStageLeftHp()
		table.insert(_list, _unitHurtInfoS2C_main)
	end
	
	if self.extraDefUnit then
		local _unitHurtInfoS2C_extra = {}
		_unitHurtInfoS2C_extra.type = 1
		_unitHurtInfoS2C_extra.netId = self.extraDefUnit:GetNetId()
		_unitHurtInfoS2C_extra.objectId = self.extraDefObj:GetObjectId()
		_unitHurtInfoS2C_extra.fromNetId = _snapShotData:GetNetId()
		_unitHurtInfoS2C_extra.fromObjId = _snapShotData:GetObjId()
		_unitHurtInfoS2C_extra.sourceType = _snapShotData:GetSourceType()
		_unitHurtInfoS2C_extra.sourceId = _snapShotData:GetSourceId()
		_unitHurtInfoS2C_extra.originalSkillId = _snapShotData:GetOriginalHeroSkillId()
		_unitHurtInfoS2C_extra.isWeaknessHurt = self.isWeakHurt
		_unitHurtInfoS2C_extra.num = self.extraHurtNum
		_unitHurtInfoS2C_extra.hurtEleType = self.hurtElementType:GetId()
		_unitHurtInfoS2C_extra.isEleReaction = self.isReaction
		_unitHurtInfoS2C_extra.reactionType = self.reactId or -1
		_unitHurtInfoS2C_extra.collision = self.hurtCollision
		_unitHurtInfoS2C_extra.isCritical = self.isCritical or false
		_unitHurtInfoS2C_extra.curStageLeftHp = self.extraDefObjPropCom:GetCurStageLeftHp()
		table.insert(_list, _unitHurtInfoS2C_extra)
	end
	
	return _list
end

---@public
function HurtStackData:Log()
	
	LogTools.LogByLevel(LogLevel.log, 
			"攻方NetId", self.snapShotData:GetNetId(), 
			"攻方ObjId", self.snapShotData:GetObjId(),
			"守方NetId", self.defNetId,
			"守方ObjId", self.defObjId,
			"部位ID", self.defBlockId,
			"直接伤害数值", self.directHurtNum,
			"元素击破ID", self.eleBreakId,
			"伤害通道类型", LogTools.GetEnumTableDesc(HurtChannelType, self.hurtChannelType),
			"元素类型", self.hurtElementType:GetName(),
			"堆叠层数", self.stackNum
	)
end

return HurtStackData
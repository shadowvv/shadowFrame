---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/01/26 16:27
--- Describe: unit层管理器
---

require "Battle/Logic/Room/BattleObject/Unit/UnitComponents/BattleUnitComponentManager"
require "Battle/Logic/Room/BattleObject/Unit/BattleUnitBase"
require "Battle/Logic/Room/BattleObject/Unit/BattleUnit_Player"
require "Battle/Logic/Room/BattleObject/Unit/BattleUnit_Monster"
require "Battle/Logic/Room/BattleObject/Unit/BattleUnit_AreaTrigger"
require "Battle/Logic/Room/BattleObject/Unit/BattleUnit_SummonedMons"
require "Battle/Logic/Room/BattleObject/Unit/BattleUnit_SceneObj"
require "Battle/Logic/Room/BattleObject/Unit/BattleUnit_TargetPoint"
require "Battle/Logic/Room/BattleObject/Unit/BattleUnit_Shield"
require "Battle/Logic/Room/BattleObject/Unit/BattleCreateUnitParam"
require "Battle/Logic/Room/BattleObject/Unit/BattleUnitCreator"
require "Battle/Logic/Room/BattleObject/Unit/BattlePlayerOrignalManager"
require "Battle/Logic/Room/BattleObject/Unit/BattleUnitTokenManager"

if IsClient() then
	require "Battle/Logic/Room/Component/PlayerGMInterface"
end

------------------------------------------------------------------------------------------------------------------------
---战斗unit类型
---@class BattleUnitType : table
BattleUnitType = {
	Player = 1,          --真实玩家
	Monster = 2,         --怪物玩家
	AreaTrigger = 3,     --区域触发
	SummonedMons = 4,    --召唤物
	SceneObj = 5,        --场景物件
	TargetPoint = 6,     --目标点
	Shield = 7,          --护罩
}

---战斗单位阵营
---@class BattleUnitCampType : table
BattleUnitCampType = {
	None = 0 ,          --无阵营（张超额外提的）
	Player = 1,         --玩家方
	Monster = 2,        --怪物方
	Independent = 3,    --独立方
}

---创建区域的来源类型
---@class CreateAreatriggerSourceType : table
CreateAreatriggerSourceType = {
	Skill = 1,          --通过技能创建
	Buff = 2,           --通过Buff创建
	BarrageEvent = 3,   --通过弹幕事件创建
}

---延迟创建数据
---@class BattleUnitDelayCreateData : table
BattleUnitDelayCreateData = class(nil, "BattleUnitDelayCreateData")
function BattleUnitDelayCreateData:ctor(_generateInfo)
	self.timeStamp = _generateInfo.timeStamp
	self.timeTotal = _generateInfo.delayTime or 0
	self.timeTotal = self.timeTotal * 1000
	self.info = _generateInfo
	self.type = _generateInfo.unitType
	--LogTools.LogByLevel(LogLevel.log, "checkMulty", "BattleUnitDelayCreateData self.timeStamp", self.timeStamp, "self.timeTotal", self.timeTotal, "self.type", LogTools.GetEnumTableDesc(BattleUnitType, self.type))
end

------------------------------------------------------------------------------------------------------------------------
---@class BattleUnitManager : table
BattleUnitManager = class(nil, "BattleUnitManager")
require "Battle/Logic/Room/Component/BattleUnitInterface"
function BattleUnitManager:ctor(_battleId)
	self.__battleId = _battleId
	self.__battleRoom = GetBattleRoom(_battleId)
end

---@public
---@param _battleRoom BattleRoom
function BattleUnitManager:Init(_battleRoom)
	---@private
    ---@type BattlePlayerOrignalManager
	self.__originalPlayerInfoManager = BattlePlayerOrignalManager.New()
	self.__originalPlayerInfoManager:Init()
	---@private
	---@type BattleUnitComponentManager
	self.__unitComponentManager = BattleUnitComponentManager.New()
	self.__unitComponentManager:Init()
	---@private
	---@type BattleUnitCreator
	self.__creator = BattleUnitCreator.New()
	self.__creator:Init(self)
	---@private
	---@type BattleUnitTokenManager
	self.__monsSKillTokenManager = BattleUnitTokenManager.New()
	self.__monsSKillTokenManager:Init(self)
	---@private
	---@type BattleUnitBase[]
	self.__allUnitList = {}
	---@private
	---@type BattleUnitBase[]
	self.__allUnitDic = {}
	---@private
	---@type BattleUnitBase[]
	self.__allUnitSlot = {}
	---@private
	---@type BattleUnitBase[]
	self.__campUnitSlot = {}
	---@private
	---@type number[]
	self.__removedUnitList = {}
	---@private
	---@type number[]
	self.__removedUnitDic = {}
	---@private
	---@type BattleUnitDelayCreateData[]
	self.__delayCreateUnitList = {}
	---@private
	---@type table[]
	self.__readyCreateDic = {}

	for _, _unitType in pairs(BattleUnitType) do
		self.__allUnitSlot[_unitType] = {}
		self.__readyCreateDic[_unitType] = {}
	end

	if _battleRoom.indieGame then
		---@private
		---@type PlayerGMInterface
		self.__gmInterface = PlayerGMInterface.New()
		self.__gmInterface:Init(_battleRoom)
	end
end

---@public
function BattleUnitManager:GetBattleId()
	return self.__battleId
end

---@public
---@return BattleRoom
function BattleUnitManager:GetBattleRoom()
	return self.__battleRoom
end

--战斗开始时只是传的数据，这里先存一下，等实际创建的时候取
---@public
---@param _battlePlayerInfoList table msg.BattlePlayerInfo[]
function BattleUnitManager:InitOriginalPlayerInfo(_battlePlayerInfoList)
	self.__originalPlayerInfoManager:InitOrignalPlayerInfo(_battlePlayerInfoList)
end

---@public
---@return BattlePlayerOrignalManager
function BattleUnitManager:GetOriginalPlayerInfoManager()
	return self.__originalPlayerInfoManager
end

---@public
---@param _includeDead boolean 是否包含已经死亡的
---@return BattleUnitBase
function BattleUnitManager:GetUnitByPlayerId(_playerId, _includeDead)
	if not _playerId then return nil end
	local _playerOriginalData = self.__originalPlayerInfoManager:GetPlayer(_playerId)
	if not _playerOriginalData then return nil end
	return self:GetUnit(_playerOriginalData:GetNetId(), _includeDead)
end

---@public
---@return BattleUnitComponentManager
function BattleUnitManager:GetUnitComponentManager()
	return self.__unitComponentManager
end

---@public
---@return BattleUnitCreator
function BattleUnitManager:GetCreator()
	return self.__creator
end

---@public
---@return BattleUnitTokenManager
function BattleUnitManager:GetSkillTokenManager()
	return self.__monsSKillTokenManager
end
------------------------------------------------------------------------------------------------------------------------
---@public
---@param _unitType BattleUnitType
---@param _param BattleCreateUnitParam
function BattleUnitManager:CreateUnit(_unitType, _param)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "CreateUnit", "_unitType", LogTools.GetEnumTableDesc(BattleUnitType, _unitType))
	local _unit = self.__creator:CreateUnit(_unitType, _param)
	if not _unit then return end
	
	-- 关卡单位创建事件
	self:GetBattleRoom().battleLevelManager.levelUnitManager:OnLevelUnitCreate(_unit)
	-- 关卡单位管理创建
	self:GetBattleRoom().battleLogicEventService:OnTriggerLevelUnitCreateEvent(_unit)
	-- 关卡单位管理创建
	self:GetBattleRoom().battleLogicEventService:OnTriggerBattleUnitCreateEvent(_unit:GetNetId())

	self:__AddUnit(_unitType, _unit)
	return _unit
end

---@private
---@param _unitType BattleUnitType
---@param _unit BattleUnitBase
function BattleUnitManager:__AddUnit(_unitType, _unit)
	--LogTools.LogByLevel( LogLevel.log, "CheckArea", "BattleUnitManager", "__AddUnit", "_unitType", LogTools.GetEnumTableDesc(BattleUnitType, _unitType))
	local _typeUnitList = self.__allUnitSlot[_unitType]
	if not _typeUnitList then
		_typeUnitList = {}
		self.__allUnitSlot[_unitType] = _typeUnitList
	end
	
	---@type BattleUnitCom_Camp
	local _campCom = _unit:GetComponent(BattleUnitComponentType.Camp)
	local _camp = _campCom:GetFirstCamp()
	local _campUnitList = self.__campUnitSlot[_camp]
	if not _campUnitList then
		_campUnitList = {}
		self.__campUnitSlot[_camp] = _campUnitList
	end
	
	table.insert(_typeUnitList, _unit)
	table.insert(_campUnitList, _unit)
	table.insert(self.__allUnitList, _unit)
	self.__allUnitDic[_unit:GetNetId()] = _unit
end

---@public
---@param _unit BattleUnitBase
function BattleUnitManager:RemoveUnit(_unit)
	self:RemoveUnitByNeteId(_unit:GetNetId())
end

---@public
function BattleUnitManager:RemoveUnitByNeteId(_netId)
	self.__allUnitDic[_netId] = nil
	self.__removedUnitDic[_netId] = 1
	table.insert(self.__removedUnitList, _netId)
end

---@public
---@param _includeDead boolean 包括可以获取到已经死亡的单位
---@return BattleUnitBase
function BattleUnitManager:GetUnit(_netId, _includeDead)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager:GetUnit", "_netId", _netId, "_includeDead", _includeDead)
	if not _netId then return nil end
	if self.__removedUnitDic[_netId] then return nil end
	local _unit = self.__allUnitDic[_netId]
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager:GetUnit", "_netId", _netId, "_includeDead", _includeDead, "_unit", _unit)
	if _includeDead then return _unit end
	if _unit and _unit:CheckAlive() then return _unit end
	return nil
end

--通过unit类型获取列表
--注意：这里返回的是一个新的列表
---@public
---@param _unitType BattleUnitType
---@param _includeDead boolean 包括可以获取到已经死亡的单位
---@return BattleUnitBase[]
function BattleUnitManager:GetUnitListByUnitType(_unitType, _includeDead)
	local _tab = {}
	local _typeList = self.__allUnitSlot[_unitType]
	if not _typeList then return _tab end

	local _removedDic = self.__removedUnitDic
	for i = 1, #_typeList do
		local _unit = _typeList[i]
		if not _removedDic[_unit:GetNetId()] then
			if _includeDead then
				table.insert(_tab, _unit)
			elseif _unit:CheckAlive() then
				table.insert(_tab, _unit)
			end
		end
	end
	return _tab
end

---通过unit类型获取列表
---注意：这里拿到的是原始列表，使用时务必注意数据安全
---原始列表包括所有对象，死亡的也在其中
---@public
---@param _unitType BattleUnitType
---@return BattleUnitBase[]
function BattleUnitManager:GetUnitListByUnitTypeUnsafe(_unitType)
	return self.__allUnitSlot[_unitType]
end

--通过unit阵营获取列表
--注意：这里返回的是一个新的列表
---@public
---@param _unitType BattleUnitType
---@param _includeDead boolean 包括可以获取到已经死亡的单位
---@return BattleUnitBase[]
function BattleUnitManager:GetUnitListByCampType(_camp, _includeDead)
	local _tab = {}
	local _typeList = self.__campUnitSlot[_camp]
	if not _typeList then return _tab end

	local _removedDic = self.__removedUnitDic
	for i = 1, #_typeList do
		local _unit = _typeList[i]
		if not _removedDic[_unit:GetNetId()] then
			if _includeDead then
				table.insert(_tab, _unit)
			elseif _unit:CheckAlive() then
				table.insert(_tab, _unit)
			end
		end
	end
	return _tab
end

---@public
---注意：这里拿到的是原始列表，使用时务必注意数据安全
---原始列表包括所有对象，死亡的也在其中
---@param _campId BattleUnitCampType
---@return BattleUnitBase[]
function BattleUnitManager:GetUnitListByCampTypeUnsafe(_campId)
	return self.__campUnitSlot[_campId] or {}
end

--获取全部的unit列表
--注意：这里返回的是一个新的列表
---@public
---@param _includeDead boolean 包括可以获取到已经死亡的单位
---@return BattleUnitBase[]
function BattleUnitManager:GetAllUnitList(_includeDead)
	local _tab = {}
	local _allUnitList = self.__allUnitList
	local _removedDic = self.__removedUnitDic
	for i = 1, #_allUnitList do
		local _unit = _allUnitList[i]
		if not _removedDic[_unit:GetNetId()] then
			if _includeDead then
				table.insert(_tab, _unit)
			elseif _unit:CheckAlive() then
				table.insert(_tab, _unit)
			end
		end
	end
	
	return _tab
end

---检查当前存活的指定类型Unit数量
---@public
---@param _includeDead boolean 包括可以获取到已经死亡的单位
function BattleUnitManager:GetAliveUnitNumberByType(_unitType, _includeDead)
	local _list = self.__allUnitSlot[_unitType]
	if not _list then return 0 end
	local _number = #_list
	if 0 == _number then return 0 end
	for _, _unitBase in pairs(_list) do
		if _includeDead and not _unitBase:CheckAlive() then
			_number = _number - 1
		end
	end
	return _number
end

---检查当前存活的指定类型Unit数量
---@public
---@param _includeDead boolean 包括可以获取到已经死亡的单位
function BattleUnitManager:GetAliveUnitNumber(_includeDead)
	if not self.__allUnitSlot or #self.__allUnitSlot == 0 then
		return 0
	end
	local _allNumber = 0
	for _, _list in pairs(self.__allUnitSlot) do
		local _number = #_list
		for _, _unitBase in pairs(_list) do
			if _includeDead and not _unitBase:CheckAlive() then
				_number = _number - 1
			end
		end
		_allNumber = _allNumber + _number
	end

	return _allNumber
end

--- 打log用
---@public
---@param _unitType number|BattleUnitType
function BattleUnitManager:GetBattleUnitTypeName(_unitType)
	if _unitType == BattleUnitType.Player then
		return "玩家"
	elseif _unitType == BattleUnitType.Monster then
		return "怪物"
	elseif _unitType == BattleUnitType.AreaTrigger then
		return "区域触发器"
	elseif _unitType == BattleUnitType.SummonedMons then
		return "召唤物"
	elseif _unitType == BattleUnitType.SceneObj then
		return "场景物件"
	elseif _unitType == BattleUnitType.Shield then
		return "护罩"
	elseif _unitType == BattleUnitType.TargetPoint then
		return "目标点"
	else
		return "未定义类型[" .. _unitType .. "]"
	end
end

---通过创建者的netID和区域的表ID查找区域
---特殊技能用，不会频繁调用
---@public
---@param _includeDead boolean 包括可以获取到已经死亡的单位
---@return BattleUnit_AreaTrigger
function BattleUnitManager:GetAreaByFromNetIdAndDicId(_fromNetId, _dicId, _includeDead)
	--LogTools.LogByLevel( LogLevel.log, "CheckArea", "BattleUnitManager", "GetAreaByFromNetIdAndDicId", "_fromNetId", _fromNetId, "_dicId", _dicId)
	local _removedDic = self.__removedUnitDic
	---@type BattleUnit_AreaTrigger[]
	local _typeList = self.__allUnitSlot[BattleUnitType.AreaTrigger]
	--LogTools.LogByLevel( LogLevel.log, "CheckArea", "BattleUnitManager", "GetAreaByFromNetIdAndDicId", "_typeList", _typeList)
	if not _typeList then return nil end

	for _, _unit in pairs(_typeList) do
		if not _removedDic[_unit:GetNetId()] and _unit:CheckFromNetIdAndDicId(_fromNetId, _dicId) then
			--LogTools.LogByLevel( LogLevel.log, "CheckArea", "BattleUnitManager", "GetAreaByFromNetIdAndDicId", "find ret", _unit)
			if _includeDead then return _unit end
			if _unit:CheckAlive() then return _unit end
		end
	end
	--LogTools.LogByLevel( LogLevel.log, "CheckArea", "BattleUnitManager", "GetAreaByFromNetIdAndDicId", "not find")
	return nil
end

---@public
function BattleUnitManager:OnUpdate(_deltaTime)
	self:__UnitDoAction(_deltaTime)
	if self:GetBattleRoom().behaviorProcessor:CheckLevelAIHost() then
		self:CheckDelayCreateUnits(_deltaTime)
	end
end

---@private
function BattleUnitManager:__UnitDoAction(_deltaTime)
	---@type number
	local _startUpdateTime
	-- 服务器时间统计
	if SERVER_LIB and SERVER_LIB.performanceService:executeTimeCheck(PerformanceType.ACTION_ALL) then
		_startUpdateTime = TimeUtils.nowExact()
	end

	for i = 1, #self.__allUnitList do
		if self.__allUnitList[i]:CheckAlive() then
			self.__allUnitList[i]:DoAction(_deltaTime)
		end
	end

	-- 服务器时间统计
	if SERVER_LIB and SERVER_LIB.performanceService:executeTimeCheck(PerformanceType.ACTION_ALL) then
		local _allUnitCount = self:GetAliveUnitNumber(false)
		SERVER_LIB.performanceService:checkCommonExecuteTime(PerformanceType.ACTION_ALL, "All [" .. tostring(_allUnitCount) .. "] Alive Unit Do Action", 0, self:GetBattleId(), _startUpdateTime, TimeUtils.nowExact())
	end
end

---@public
function BattleUnitManager:CheckDelayCreateUnits(_deltaTime)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "__CheckDelayCreateUnits", "#self.__delayCreateUnitList", #self.__delayCreateUnitList)
	local _list = self.__delayCreateUnitList
	local _dic = self.__readyCreateDic
	
	for _, _readyList in pairs(_dic) do
		for _key, _ in pairs(_readyList) do
			_readyList[_key] = nil
		end
	end
	
	local _timeNow = TimeUtils.battleNow(self:GetBattleId())
	---@type BattleUnitDelayCreateData
	local _tab
	for i = #_list, 1, -1 do
		_tab = _list[i]

		if 0 == _tab.timeTotal or _timeNow - _tab.timeStamp > _tab.timeTotal then
			_tab.info.timeStamp = math.floor(_tab.timeStamp + _tab.timeTotal)
			table.insert(_dic[_tab.type], _tab.info)
			table.remove(_list, i)
		end
	end

	for _unitType, _readyList in pairs(_dic) do
		--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "__CheckDelayCreateUnits", "#_readyList", #_readyList, "IsServer()", IsServer())
		self:DealDelayCreateReadyList(_unitType, _readyList)
	end
end

---@public
function BattleUnitManager:DealDelayCreateReadyList(_unitType, _readyList)
	if 0 == #_readyList then return end
	
	local _createdUnitList = self.__creator:OnUnitReadyCreate(_unitType, _readyList)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "__CheckDelayCreateUnits", "#_createdUnitList", #_createdUnitList)
	if IsServer() then
		self.__creator:SendCreateUnitToLocalCore(_createdUnitList)
	else
		self.__creator:SendCreateUnitToView(_unitType, _createdUnitList)
	end
end

---@private
function BattleUnitManager:__ClearRemovedUnits()
	if #self.__removedUnitList == 0 then return end
	local _removedDic = self.__removedUnitDic
	
	local _allUnitList = self.__allUnitList
	local _allUnitDic = self.__allUnitDic
	local _unitSlot = {}
	self.__allUnitSlot = _unitSlot
	local _campSlot = {}
	self.__campUnitSlot = _campSlot
	
	for i = #_allUnitList, 1, -1 do
		local _checkUnit = _allUnitList[i]
		local _netId = _checkUnit:GetNetId()
		local _unitType = _checkUnit:GetUnitType()
		---@type BattleUnitCom_Camp
		local _campCom = _checkUnit:GetComponent(BattleUnitComponentType.Camp)
		local _camp = _campCom:GetFirstCamp()
		
		if _removedDic[_netId] then
			table.remove(_allUnitList, i)
			_allUnitDic[_netId] = nil
			_checkUnit:Clear()
		else
			local _typeUnitList = _unitSlot[_unitType]
			if not _typeUnitList then
				_typeUnitList = {}
				_unitSlot[_unitType] = _typeUnitList
			end
			table.insert(_typeUnitList, 1, _checkUnit)
			
			local _campUnitList = _campSlot[_camp]
			if not _campUnitList then
				_campUnitList = {}
				_campSlot[_camp] = _campUnitList
			end
			table.insert(_campUnitList, 1, _checkUnit)
		end
	end
	
	self.__removedUnitList = {}
	self.__removedUnitDic = {}
end

------------------------------------------------------------------------------------------------------------------------
---@public
function BattleUnitManager:Clear()
	self.__battleRoom = nil
	self.__creator = nil
	self.__allUnitList = nil
	self.__allUnitDic = nil
	self.__allUnitSlot = nil
	self.__removedUnitList = nil
	self.__removedUnitDic = nil
	self.__unitComponentManager:Clear()
	self.__unitComponentManager = nil
	self.__delayCreateUnitList = nil
	self.__monsSKillTokenManager:Clear()
	self.__monsSKillTokenManager = nil
end

------------------------------------------------------------------------------------------------------------------------
---服务器逻辑核生成用于发送给前端逻辑核的全量信息
---@public
function BattleUnitManager:GetCreateSyncMessage_S2C()
	--LogTools.LogByLevel(LogLevel.log, "CheckCreateUnit", "BattleUnitManager:GetCreateSyncMessage_S2C start", "#self.__allUnitList", #self.__allUnitList)
	local _tab = {}
	for i = 1, #self.__allUnitList do
		local _unitSyncMsg = self.__allUnitList[i]:GetCreateSyncMessage_S2C()
		if _unitSyncMsg then
			--LogTools.LogByLevel(LogLevel.log, "CheckCreateUnit BattleUnitManager GetCreateSyncMessage_S2C", "_unitSyncMsg.originalGenerateInfo", _unitSyncMsg.originalGenerateInfo)
			table.insert(_tab, _unitSyncMsg)
		end
	end
	--LogTools.LogByLevel(LogLevel.log, "CheckCreateUnit", "BattleUnitManager:GetCreateSyncMessage_S2C end", "_tab", dumpTableEx(_tab))
    return _tab
end

---前端逻辑核用服务器发来的全量信息刷新自身数据
---@public
---@return BattleUnitBase[]
function BattleUnitManager:OnReceiveCreateSyncMessage_S2C(_BattleUnitCreateSyncInfoList)
	--LogTools.LogByLevel(LogLevel.log, "CheckCreateUnit", "BattleUnitManager:OnReceiveCreateSyncMessage_S2C start", "_BattleUnitCreateSyncInfoList", dumpTableEx(_BattleUnitCreateSyncInfoList))
	local _allUnitDic = self.__allUnitDic
	local _BattleUnitCreateSyncInfo
	local _unitList = {}
	for i = 1, #_BattleUnitCreateSyncInfoList do
		_BattleUnitCreateSyncInfo = _BattleUnitCreateSyncInfoList[i]
		--LogTools.LogByLevel(LogLevel.log, "CheckCreateUnit", "_BattleUnitCreateSyncInfo.netId", _BattleUnitCreateSyncInfo.netId, "_BattleUnitCreateSyncInfo.originalGenerateInfo", _BattleUnitCreateSyncInfo.originalGenerateInfo)
		local _unit = _allUnitDic[_BattleUnitCreateSyncInfo.netId]
		if not _unit then
			local _tmpList = self.__creator:OnUnitReadyCreate(_BattleUnitCreateSyncInfo.unitType, {_BattleUnitCreateSyncInfo.originalGenerateInfo})
			table.insert(_unitList, _tmpList[1])
		end
		_unit:OnReceiveCreateSyncMessage_S2C(_BattleUnitCreateSyncInfo)
	end

	--LogTools.LogByLevel(LogLevel.log, "CheckCreateUnit", "BattleUnitManager:OnReceiveCreateSyncMessage_S2C end", "_unitList", #_unitList)
	return _unitList
end

---前端逻辑核生成用于发送给表现的层全量信息
---@public
function BattleUnitManager:GetCreateSyncMessage_L2V(_BattleUnitCreateSyncInfoList)
	--LogTools.LogByLevel(LogLevel.log, "CheckCreateUnit", "BattleUnitManager:GetCreateSyncMessage_L2V start")
    local _tab = {}
	---@type BattleUnitBase
	local _unit
	for i = 1, #self.__allUnitList do
		_unit = self.__allUnitList[i]
		local _unitSyncMsg = _unit:GetCreateSyncMessage_L2V(self:__ChoseUnitSyncInfo(_unit:GetNetId(), _BattleUnitCreateSyncInfoList))
		if _unitSyncMsg then
			table.insert(_tab, _unitSyncMsg)
		end
	end
	--LogTools.LogByLevel(LogLevel.log, "CheckCreateUnit", "BattleUnitManager:GetCreateSyncMessage_L2V end", "_tab", dumpTableEx(_tab))
    return _tab
end

---@private
---@param _BattleUnitCreateSyncInfoList table msg.BattleUnitCreateSyncInfo[]
---@return table msg.BattleUnitCreateSyncInfo
function BattleUnitManager:__ChoseUnitSyncInfo(_netId, _BattleUnitCreateSyncInfoList)
	for _, _BattleUnitCreateSyncInfo in pairs(_BattleUnitCreateSyncInfoList) do
		if _BattleUnitCreateSyncInfo.netId == _netId then
			return _BattleUnitCreateSyncInfo
		end
	end
	return {}
end
return BattleUnitManager
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hejincheng
--- DateTime: 2022/03/07 14:36
--- Describe: 用于掉落物的组件
---

require "Battle/Logic/Room/Fall/FallObjectUnit"

---@class BattleObjCom_Drop : BattleObjectComponentBase
BattleObjCom_Drop = class(BattleObjectComponentBase, "BattleObjCom_Drop")

function BattleObjCom_Drop:ctor()
    self:__ctor(BattleObjectComponentType.Drop)
end

---@public
---@param _battleObject BattleObjectBase
---@param _fallDictDataArr table<number,FallDictData[]>
function BattleObjCom_Drop:Init(_battleObject, _fallDictDataArr)
    self:__Init(_battleObject)
    ---@type table<number,FallDictData[]> 掉落数据
    self.fallDictDataArr = _fallDictDataArr

    --LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Drop", "Init", dumpTableEx(_fallDictDataArr))

    ---@type table<number,number> 激活cd结束时间
    self.fallCdEndTimeDic = {}
    ---@type table<number,number> 掉落激活次数
    self.fallActiveCountDic = {}
end

-- 检测掉落生效
---@public
---@param _fallDictData FallDictData 掉落数据
---@param _elementType number 元素类型
---@param attackerNetId number 攻击者netId
function BattleObjCom_Drop:CheckDropAndEffect(_fallDictData, _elementType, attackerNetId)
    --LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Drop", "__CheckDropAndEffect", "_fallDictData", dumpTableEx(_fallDictData), "_elementType", _elementType, "attackerNetId", attackerNetId)
    -- 次数判断
    local curActiveCount = self.fallActiveCountDic[tostring(_fallDictData.index)]
    if _fallDictData.activeTime > 0 then
        if not curActiveCount then
            curActiveCount = 0
        end
        if curActiveCount >= _fallDictData.activeTime then
            -- LogTools.LogByLevel(LogLevel.logErr, "BattleObjCom_Drop", "__CheckDropAndEffect", "curActiveCount >= _fallDictData.activeTime", "curActiveCount", curActiveCount, "_fallDictData.activeTime", _fallDictData.activeTime)
            return
        end
    end
    -- CD判断
    local curCdEndTime = self.fallCdEndTimeDic[tostring(_fallDictData.index)]
    if _fallDictData.cdLimitTime > 0 then
        if not curCdEndTime then
            curCdEndTime = 0
        end
        if curCdEndTime > 0 and TimeUtils.battleNow(self:GetBattleId()) < curCdEndTime then
            -- LogTools.LogByLevel(LogLevel.logErr, "BattleObjCom_Drop", "__CheckDropAndEffect", "curCdEndTime > 0 and TimeUtils.battleNow(self.battleId) < curCdEndTime", "curCdEndTime", curCdEndTime)
            return
        end
    end

    -- 记录
    if _fallDictData.activeTime > 0 then
        self.fallActiveCountDic[tostring(_fallDictData.index)] = curActiveCount + 1
    end
    if _fallDictData.cdLimitTime > 0 then
        self.fallCdEndTimeDic[tostring(_fallDictData.index)] = TimeUtils.battleNow(self:GetBattleId()) + _fallDictData.cdLimitTime * 1000
    end

    local fallObjectId = _fallDictData.fallObjectId
    if _fallDictData.adaptElement then
        -- 按元素类型替换掉落物
        local replaceElementFallObject = self.battleRoom.inputDataSource:getFallObjectByIdAndElement(_fallDictData.fallObjectId, _elementType)
        if replaceElementFallObject then
            ---@type FallObject
            local fallObject = replaceElementFallObject
            if fallObject then
                fallObjectId = fallObject.id
            end
        end
    end

    -- 开始掉落
    self.battleRoom.fallObjectManager:DropFallObjectByUnit(fallObjectId, _fallDictData.fallCount, attackerNetId, nil, self:GetObject():GetParentUnit():GetNetId(), true)
end

------------------------------------------------------------------------------------------------------------------------
-- 客户端收到服务端的掉落物
---@public
---@param _fallObjectChange table 掉落物数据
function BattleObjCom_Drop:ClientReceiveOutputData(_fallObjectChange)
    --LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Drop", "ClientReceiveOutputData", dumpTableEx(_fallObjectChange))

    if _fallObjectChange.dropFallObjects then
        -- 掉落物体
        for _, _dropFallObject in pairs(_fallObjectChange.dropFallObjects) do
            ---@type number
            local fallObjUnitId = _dropFallObject.fallObjUnitId
            ---@type number
            local fallObjectId = _dropFallObject.fallObjId
            ---@type number
            local ownerNetId = _dropFallObject.ownerNetId
            ---@type number
            local ownerObjId = _dropFallObject.ownerObjId
            ---@type number
            local parentUnitId = _dropFallObject.parentUnitId
            local _unit = self.battleRoom.battleUnitManager:GetUnit(parentUnitId, true)
            ---@type number
            local disappearTime = self.battleRoom.fallObjectManager:GetFallObjectDisappearTimeFromNow(fallObjectId)

            -- 创建掉落物实体
            self.battleRoom.fallObjectManager:CreateFallObjectUnit(fallObjUnitId, fallObjectId, _unit, ownerNetId, ownerObjId, disappearTime, nil, nil)

            -- 通知显示层掉落
            local msg = {
                netId = parentUnitId,
                dropFallObject = _dropFallObject
            }
            self.battleRoom.outputDataSource:DropFallObject_L2S(msg)
        end
    end

    if _fallObjectChange.pickUpFallObjects then
        for _, _pickUpFallObject in pairs(_fallObjectChange.pickUpFallObjects) do
            -- 拾取掉落物
            ---@type number
            local _ownerNetId = _pickUpFallObject.ownerNetId
            ---@type number
            local _ownerObjId = _pickUpFallObject.ownerObjId
            ---@type number
            local _fallObjUnitId = _pickUpFallObject.fallObjUnitId

            self.battleRoom.fallObjectManager:RemoveFallObjectUnit(_fallObjUnitId)
            -- 通知显示层拾取
            local msg = {
                pickUpFallObject = {
                    ownerNetId = _ownerNetId,
                    ownerObjId = _ownerObjId,
                    fallObjUnitId = _fallObjUnitId
                }
            }

            -- --LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Drop", "ClientReceiveOutputData", "_pickUpFallObject", dumpTableEx(_pickUpFallObject))
            self.battleRoom.outputDataSource:PickUpFallObject_L2S(msg)
        end
    end
end

function BattleObjCom_Drop:OnUpdate(_deltaTime)
    self:__OnUpdate(_deltaTime)
end

---@public
---@param _fallCondition FallCondition
function BattleObjCom_Drop:GetFallDictDatas(_fallCondition)
    if not self.fallDictDataArr then
        return nil
    end
    return self.fallDictDataArr[tostring(_fallCondition:GetId())]
end

---@public
function BattleObjCom_Drop:Clear()
    self:__Clear()
    self.fallCdEndTimeDic = {}
    self.fallActiveCountDic = {}
end

return BattleObjCom_Drop
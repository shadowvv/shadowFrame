---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/03/30 11:30
--- Describe: 伤害属性快照
---

---@class SnapShotData : table
SnapShotData = class(nil, "SnapShotData")
function SnapShotData:ctor(_data) end

---@public
function SnapShotData:Init(_battleId, _index, _objId, _sourceType, _sourceId, _elementId, _addElementId, _addElementRand, _addElementNum, _hurtParam, _hatredParam)
	--if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
	--	LogTools.LogByLevel(LogLevel.log, "CheckHurt", "SnapShotData", "Init", "_index", _index, "_elementId", _elementId)
	--end
	self.__alive = false
	---@private
	self.__battleId = _battleId
	---快照唯一id
	---@private
	self.__index = _index
	---攻击方此时的英雄ObjectId
	self.__objId = _objId
	---攻击方netID
	---@private
	self.__netId = nil
	---攻击方的unit类型
	---@private
	self.__fromUnitType = BattleUnitType.Monster
	---来源类型 1:技能  2：buff
	---@private
	self.__sourceType = _sourceType
	---来源Id 技能ID或BUFF Id
	---@private
	self.__sourceId = _sourceId
	---是否允许产生元素反应
	---@private
	self.__canTriggerElementReact = true
	---元素类型(用于计算元素伤害)
	---@private
	self.__elementId = _elementId or 0
	---元素类型(用于计算添加元素量)
	---@private
	self.__addElementId = _addElementId or 0
	---添加元素量的概率
	---@private
	self.__addElementRand = _addElementRand or 0
	---元素量(用于计算添加元素量)
	---@private
	self.__addElementNum = _addElementNum or 0
	---伤害系数
	---@private
	self.__hurtParam = _hurtParam or 1
	---仇恨系数
	---@private
	self.__hatredParam = _hatredParam or 1
	---治疗值（只有治疗buff会用到）
	---@private
	self.__cureValue = 0
	---施法者等级
	---@private
	self.__objLevel = 1
	---基础属性字典(施法者的基础属性需要记录下来，很多触发出来的内容需要基于施法者的基础属性进行处理)
	---@private
	self.__baseAttDic = {}
	---武器类型，用于计算伤害距离衰减
	---@private
	self.__weaponType = 998
	---伤害距离衰减加成
	---@private
	self.__hurtReduceDisAddValue = 0
	----初始的玩家技能ID
	---@private
	self.__originalHeroSkillId = nil
	---伤害最终倍率修正
	---@private
	self.__hurtFinalRatioFix = 1
	---初始伤害
	---@private
	self.__originalHurtNum = 0

	---@type BattleObjectBase
	local _currentHeroObj = self:GetBattleRoom().battleObjectManager:GetObject(_objId)
	if not _currentHeroObj then return end
	---@type BattleUnitBase
	local _fromUnit = _currentHeroObj:GetParentUnit()
	if not _fromUnit then return end
	self.__netId = _fromUnit:GetNetId()
	self.__fromUnitType = _fromUnit:GetUnitType()
	---@type BattleObjCom_Property
	local _propertyCom = _currentHeroObj:GetComponent(BattleObjectComponentType.Property)
	---@type BattleObjCom_Property
	self.__propCom = _propertyCom
	self.__objLevel = _propertyCom:GetLevel()
	---@type BattleUnitCom_Camp
	local _campCom = _fromUnit:GetComponent(BattleUnitComponentType.Camp)
	self.__firstCamp = _campCom:GetFirstCamp()
	self.__secCamp = _campCom:GetSecCamp()
	---攻方ATK(伤害通道计算时实际使用的占用atk位置的属性值)
	---@private
	self.__calcUseAtk = _propertyCom:GetPropertyByName(BattlePropertyEnum.Atk)
	for i = 100, 104 do
		self.__baseAttDic[i] = _propertyCom:GetPropertyById(i)
	end
	---攻方元素击破
	---@private
	self.__eleWeakBreak = _propertyCom:GetPropertyByName(BattlePropertyEnum.ElementWeaknessBreak)
	self.__hurtReduceDisAddValue = _propertyCom:GetPropertyByName(BattlePropertyEnum.HurtReduce_Add_Value)
	---总伤害加深
	---@private
	self.__hurtAdd = 0
	---总伤害减免
	---@private
	self.__antiHurtReduce = 0

	local _elementType = GetBattleElementTypeById(self.__elementId) or BattleElementTypeEnum.PHYSIC
	--if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
	--	LogTools.LogByLevel(LogLevel.log, "CheckHurt", "SnapShotData", "Init", "_elementType", _elementType:GetName())
	--end
	if _elementType == BattleElementTypeEnum.PHYSIC or _elementType == BattleElementTypeEnum.NONE then
		self.__hurtAdd = _propertyCom:GetPropertyByName(BattlePropertyEnum.HurtAdd_Normal)
		self.__antiHurtReduce = _propertyCom:GetPropertyByName(BattlePropertyEnum.AntiHurtReduce_Normal)
	else
		--if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
		--	LogTools.LogByLevel(LogLevel.log, "CheckHurt", "SnapShotData", "Init", "_propertyCom:GetPropertyByName(BattlePropertyEnum.HurtAdd_Element_Common)", _propertyCom:GetPropertyByName(BattlePropertyEnum.HurtAdd_Element_Common), "_propertyCom:GetPropertyByName(_elementType:GetElementHurtAddName())", _propertyCom:GetPropertyByName(_elementType:GetElementHurtAddName()))
		--end
		self.__hurtAdd = _propertyCom:GetPropertyByName(BattlePropertyEnum.HurtAdd_Element_Common) + _propertyCom:GetPropertyByName(_elementType:GetElementHurtAddName())
		self.__antiHurtReduce = _propertyCom:GetPropertyByName(BattlePropertyEnum.AntiHurtReduce_Element_Common) + _propertyCom:GetPropertyByName(_elementType:GetAntiElementHurtReduceName())
	end
	---元素枚举类
	---@private
	self.__elementType = _elementType
	---添加的元素枚举类
	---@private
	self.__addElementType = GetBattleElementTypeById(self.__addElementId) or BattleElementTypeEnum.PHYSIC
	---暴击率
	---@private
	self.__critRate = SnapShotData.__CountCriticalRate(_propertyCom)
	---能量系数
	---@private
	self.__enParam = SnapShotData.__CountEnergyParam(_propertyCom)
	---爆伤加成
	---@private
	self.__critHurtAdd = SnapShotData.__CountCriticalHurtAdd(_propertyCom)
	---来源技能类型
	---@private
	self.__hurtSkillType = SkillTypeEnum.NORMAL:GetId()
	---技能类型伤害加成
	---@private
	self.__skillHurtAdd = 0
	---技能类型治疗加成
	---@private
	self.__skillCureAdd = 0
	---是否来源与元素击破
	---@private
	---@type boolean
	self.__isEleBreakTrig = false
	--self.__hurtSkillType, self.__skillHurtAdd = SnapShotData.__CountSkillTypeHurtAdd(self:GetBattleRoom(), _propertyCom, _sourceType, _sourceId)
	---治疗值（只有治疗buff会用到）
	---@private
	self.__cureValue = 0
	---施法者治疗加成
	---@private
	self.__curePercentAdd = _propertyCom:GetPropertyByName(BattlePropertyEnum.Cure_PercentAdd_Curer)
	---弱点伤害加成
	---@private
	self.__weakHurtAdd = _propertyCom:GetPropertyByName(BattlePropertyEnum.HurtAdd_WeakPoint)
	---元素击破伤害加成
	---@private
	self.__eleBreakHurtAdd = _propertyCom:GetPropertyByName(BattlePropertyEnum.HurtAdd_EleBreak)
	---指定元素的弱点击破伤害加成(字典)
	---@private
	self.__eleTypeBreakHurtAdd = SnapShotData.__CountEleTypeBreakHurt(self.__eleTypeBreakHurtAdd, _propertyCom)
	---指定元素的弱点通用伤害加成(字典)
	---@private
	self.__eleTypeWeakHurtAdd = SnapShotData.__CountEleTypeWeakHurt(self.__eleTypeWeakHurtAdd, _propertyCom)

	if _fromUnit:CheckUnitType(BattleUnitType.Player) then
		---@type BattleObjCom_Weapon
		local _weaponCom = _currentHeroObj:GetComponent(BattleObjectComponentType.Weapon)
		self.__weaponType = _weaponCom.weapon_xls.type
	else
		self.__weaponType = 999
	end
end

---@public
function SnapShotData:SetCanTriggerElementReact(_canTriggerElementReact)
	self.__canTriggerElementReact = _canTriggerElementReact
end

---@public
function SnapShotData:InitBuffParams(_propertyCom, _elementId, _addElementId, _addElementRand, _addElementNum, _hurtParam, _hatredParam, _reactFix)
	_elementId = _elementId and math.floor(_elementId)  or BattleElementTypeEnum.PHYSIC:GetId()
	
	---元素类型(用于计算元素伤害)
	---@private
	self.__elementId = _elementId
	---元素类型(用于计算添加元素量)
	---@private
	self.__addElementId = _addElementId
	---@private
	self.__addElementRand = _addElementRand
	---元素量(用于计算添加元素量)
	---@private
	self.__addElementNum = _addElementNum
	local _elementType = GetBattleElementTypeById(_elementId)
	if not _elementType or _elementType == BattleElementTypeEnum.NONE then
		_elementType = BattleElementTypeEnum.PHYSIC
	end

	if self.__propCom then
		_propertyCom = self.__propCom
	end
	
	if _elementType == BattleElementTypeEnum.PHYSIC then
		self.__hurtAdd = _propertyCom:GetPropertyByName(BattlePropertyEnum.HurtAdd_Normal)
		self.__antiHurtReduce = _propertyCom:GetPropertyByName(BattlePropertyEnum.AntiHurtReduce_Normal)
	else
		self.__hurtAdd = _propertyCom:GetPropertyByName(BattlePropertyEnum.HurtAdd_Element_Common) + _propertyCom:GetPropertyByName(_elementType:GetElementHurtAddName())
		self.__antiHurtReduce = _propertyCom:GetPropertyByName(BattlePropertyEnum.AntiHurtReduce_Element_Common) + _propertyCom:GetPropertyByName(_elementType:GetAntiElementHurtReduceName())
	end
	---元素枚举类
	---@private
	self.__elementType = _elementType
	---添加的元素枚举类
	---@private
	self.__addElementType = GetBattleElementTypeById(_addElementId) or BattleElementTypeEnum.PHYSIC
	---伤害系数
	---@private
	self.__hurtParam = _hurtParam
	---仇恨系数
	---@private
	self.__hatredParam = _hatredParam
	---元素反应类伤害特有的能量系数修正
	---@private
	self.__reactFix = _reactFix
end

------------------------------------------------------------------------------------------------------------------------
---计算暴击率
---暴击率 = 暴击值属性*（暴击参数1 - 攻方等级 * 暴击参数2）/ 暴击参数4 + 暴击率属性
---（暴击参数1 - 攻方等级 * 暴击参数2）≥ 暴击参数3
---@private
---@param _propertyCom BattleObjCom_Property 攻击方属性组件
function SnapShotData.__CountCriticalRate(_propertyCom)
	local _level = _propertyCom:GetLevel()
	local _cirticalTmp = HurtManager.criticalParam1 - _level * HurtManager.criticalParam2
	_cirticalTmp = Mathf.Clamp(_cirticalTmp, HurtManager.criticalParam3, 100)
	local _critValue = _propertyCom:GetPropertyByName(BattlePropertyEnum.CritValue)
	local _critAdd = _propertyCom:GetPropertyByName(BattlePropertyEnum.Crit_RateAdd)
	return _critValue * _cirticalTmp / HurtManager.criticalParam4 + _critAdd
end

---计算能量系数
---能量系数 = 能量/(能量参数1 * 能量 + 能量参数2)
---@private
---@param _propertyCom BattleObjCom_Property 攻击方属性组件
function SnapShotData.__CountEnergyParam(_propertyCom)
	local _en = _propertyCom:GetPropertyByName(BattlePropertyEnum.En)
	return _en/(HurtManager.enParam1 * _en + HurtManager.enParam2)
end

---计算爆伤加成
---爆伤加成 = 基础爆伤加成 + 爆伤加成属性
---@private
---@param _propertyCom BattleObjCom_Property 攻击方属性组件
function SnapShotData.__CountCriticalHurtAdd(_propertyCom)
	return HurtManager.criticalHurtAddBase + _propertyCom:GetPropertyByName(BattlePropertyEnum.Crit_HurtAdd)
end

---计算不同类型的技能伤害加成
---@param _battleRoom BattleRoom
---@param _propertyCom BattleObjCom_Property
function SnapShotData.__CountSkillTypeHurtAdd(_battleRoom, _propertyCom, _sourceType, _sourceId)
	
	if not _sourceType or not _sourceId or _sourceType == 2 then 
		return nil, 0
	end
	
	---@type Skill
    local skillConfig = _battleRoom.inputDataSource:GetDict("Skill", _sourceId)
	if not skillConfig then
		return nil, 0
	end

	local _propId
	if skillConfig.skillType == SkillTypeEnum.NORMAL:GetId() then
		_propId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.HurtAdd_NormalAtk)
	elseif skillConfig.skillType == SkillTypeEnum.ACTIVE:GetId() then
		_propId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.HurtAdd_ActiveSkill)
	elseif skillConfig.skillType == SkillTypeEnum.JI_ZOU:GetId() then
		_propId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.HurtAdd_JizouSkill)
	elseif skillConfig.skillType == SkillTypeEnum.PASSIVE:GetId() then
		--被动暂时没有额外伤害加成
		return skillConfig.skillType, 0
	else
		return skillConfig.skillType, 0
	end
	
	return skillConfig.skillType, _propertyCom:GetPropertyById(_propId)
end

---计算不同类型的技能伤害和治疗加成
---@param _battleRoom BattleRoom
---@param _propertyCom BattleObjCom_Property
---@param  _originalSkillId number 原始技能ID
function SnapShotData.__CountSkillTypeHurtAndCureAdd(_battleRoom, _propertyCom, _originalSkillId)
	---@type Skill
    local skillConfig = _battleRoom.inputDataSource:GetDict("Skill", _originalSkillId)
	if not skillConfig then
		return SkillTypeEnum.NORMAL:GetId(), 0, 0
	end
	
	local _hurtAddId, _cureAddId
	if skillConfig.skillType == SkillTypeEnum.NORMAL:GetId() then
		_hurtAddId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.HurtAdd_NormalAtk)
		_cureAddId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.CureAdd_NormalAtk)
	elseif skillConfig.skillType == SkillTypeEnum.ACTIVE:GetId() then
		_hurtAddId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.HurtAdd_ActiveSkill)
		_cureAddId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.CureAdd_ActiveSkill)
	elseif skillConfig.skillType == SkillTypeEnum.JI_ZOU:GetId() then
		_hurtAddId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.HurtAdd_JizouSkill)
		_cureAddId = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.CureAdd_JizouSkill)
	elseif skillConfig.skillType == SkillTypeEnum.PASSIVE:GetId() then
		--被动暂时没有额外伤害和治疗加成
		return skillConfig.skillType, 0, 0
	else
		return skillConfig.skillType, 0, 0
	end
	
	return skillConfig.skillType, _propertyCom:GetPropertyById(_hurtAddId), _propertyCom:GetPropertyById(_cureAddId)
	
end

---不同元素类型弱点击破伤害加成
---@param _propertyCom BattleObjCom_Property
function SnapShotData.__CountEleTypeBreakHurt(_dic, _propertyCom)

	if not _dic then _dic = {} end

	local _id = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.HurtAdd_EleBreak_Fire)
	_dic[BattleElementTypeEnum.FIRE:GetId()] = _propertyCom:GetPropertyById(_id)
	_id = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.HurtAdd_EleBreak_Thunder)
	_dic[BattleElementTypeEnum.THUNDER:GetId()] = _propertyCom:GetPropertyById(_id)
	_id = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.HurtAdd_EleBreak_Ice)
	_dic[BattleElementTypeEnum.ICE:GetId()] = _propertyCom:GetPropertyById(_id)
	_id = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.HurtAdd_EleBreak_Wind)
	_dic[BattleElementTypeEnum.STORM:GetId()] = _propertyCom:GetPropertyById(_id)

	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtChannel", "	SnapShotData.__CountEleTypeBreakHurt", "_dic", dumpTableEx(_dic))
	return _dic
end

---不同元素类型弱点通用伤害加成
---@param _propertyCom BattleObjCom_Property
function SnapShotData.__CountEleTypeWeakHurt(_dic, _propertyCom)

	if not _dic then _dic = {} end

	local _id = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.HurtAdd_EleWeak_Fire)
	_dic[BattleElementTypeEnum.FIRE:GetId()] = _propertyCom:GetPropertyById(_id)
	_id = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.HurtAdd_EleWeak_Thunder)
	_dic[BattleElementTypeEnum.THUNDER:GetId()] = _propertyCom:GetPropertyById(_id)
	_id = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.HurtAdd_EleWeak_Ice)
	_dic[BattleElementTypeEnum.ICE:GetId()] = _propertyCom:GetPropertyById(_id)
	_id = ProtoEnumTool.GetPropertyId(BattlePropertyEnum.HurtAdd_EleWeak_Wind)
	_dic[BattleElementTypeEnum.STORM:GetId()] = _propertyCom:GetPropertyById(_id)
	
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtChannel", "	SnapShotData.__CountEleTypeWeakHurt", "_dic", dumpTableEx(_dic))
	return _dic
end
------------------------------------------------------------------------------------------------------------------------
---获取唯一ID
---@public
function SnapShotData:GetIndex()
	return self.__index
end

---@public
function SnapShotData:GetBattleId()
	return self.__battleId
end

---获取battleRoom
---@public
---@return BattleRoom
function SnapShotData:GetBattleRoom()
	return GetBattleRoom(self.__battleId)
end

---获取netId
---@public
function SnapShotData:GetNetId()
	return self.__netId
end

---获取heroObjectId
---@public
function SnapShotData:GetObjId()
	return self.__objId
end

---设置初始玩家技能ID
---@public
function SnapShotData:SetOriginalHeroSkillId(_value, _generateStackInfo)
	self.__originalHeroSkillId = _value
	self.__hurtSkillType, self.__skillHurtAdd, self.__skillCureAdd = SnapShotData.__CountSkillTypeHurtAndCureAdd(self:GetBattleRoom(), self.__propCom, _value)
	self.__isEleBreakTrig = (_generateStackInfo and _generateStackInfo.isEleBreakTrig) and true or false
end

---获取初始玩家技能ID
---@public
function SnapShotData:GetOriginalHeroSkillId()
	return self.__originalHeroSkillId
end

---获取等级
---@public
function SnapShotData:GetLevel()
	return self.__objLevel
end

---获取来源unit的类型
---@public
function SnapShotData:GetFromUnitType()
	return self.__fromUnitType
end

---获取来源类型
---@public
function SnapShotData:GetSourceType()
	return self.__sourceType
end

---设置来源ID
---@public
function SnapShotData:SetSourceId(_sourceId)
	self.__sourceId = _sourceId
	--self.__hurtSkillType, self.__skillHurtAdd = SnapShotData.__CountSkillTypeHurtAdd(self:GetBattleRoom(), self.__propCom, self.__sourceType, _sourceId)
end

---获取来源ID
---@public
function SnapShotData:GetSourceId()
	return self.__sourceId
end

---是否允许产生元素反应
---@public
function SnapShotData:GetCanTriggerElementReact()
	return self.__canTriggerElementReact
end

---获取元素ID
---@public
function SnapShotData:GetElementId()
	return self.__elementId
end

---获取元素类型枚举
---@public
---@return BattleElementType
function SnapShotData:GetElementType()
	return self.__elementType
end

---获取用于添加的元素类型枚举
---@public
function SnapShotData:GetAddElementType()
	return self.__addElementType
end

---获取用于添加的元素量
---@public
function SnapShotData:GetAddElementRand()
	return self.__addElementRand
end

---获取用于添加的元素量
---@public
function SnapShotData:GetAddElementNum()
	return self.__addElementNum
end

---获取用于添加的元素量
---@public
function SnapShotData:GetAddRandedElementNum()
	local _rand = 0
	local _ret = 0
	if self.__addElementRand > 0 then
		_rand = self:GetBattleRoom().randomUtil:RandomFloat(0, 1)
		_ret = _rand < self.__addElementRand and self.__addElementNum or 0
	end
	if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckHurt", "获取元素附加随机量", "_rand", _rand, "self.__addElementRand", self.__addElementRand, "_ret", _ret)
	end
	return _ret
end

---@public
function SnapShotData:SetOriginalHurtNum(_value)
	self.__originalHurtNum = _value
end

---@public
function SnapShotData:GetOriginalHurtNum()
	return self.__originalHurtNum
end

---@public
function SnapShotData:SetHurtParam(_value)
	self.__hurtParam = _value
end

---获取伤害系数
---@public
function SnapShotData:GetHurtParam()
	return self.__hurtParam or 1
end

---@public
function SnapShotData:SetHatredParam(_value)
	self.__hatredParam = _value
end

---获取仇恨系数
---@public
function SnapShotData:GetHatredParam()
	return self.__hatredParam or 0
end

---获取一级阵营
---@public
function SnapShotData:GetFirstCamp()
	return self.__firstCamp
end

---获取二级阵营
---@public
function SnapShotData:GetSecCamp()
	return self.__secCamp
end

---获取伤害通道计算时实际使用的占用atk位置的属性值
---@public
function SnapShotData:GetCalcUseAtk()
	return self.__calcUseAtk
end

---设置
---@public
function SnapShotData:SetCalcUseAtk(_value)
	self.__calcUseAtk = _value
end

---获取元素击破
---@public
function SnapShotData:GetElementWeakBreak()
	return self.__eleWeakBreak
end

---获取总伤害加深
---@public
function SnapShotData:GetHurtAdd()
	return self.__hurtAdd
end

---获取总伤害减免抵抗
---@public
function SnapShotData:GetAntiHurtReduce()
	return self.__antiHurtReduce
end

---获取总爆伤加成
---@public
function SnapShotData:GetCritHurtAdd()
	return self.__critHurtAdd
end

---获取能量系数
---@public
function SnapShotData:GetEnparam()
	return self.__enParam
end

---获取暴击率
---@public
function SnapShotData:GetCritRate()
	return self.__critRate
end

---设置治疗值
---@public
function SnapShotData:SetCureValue(_value)
	self.__cureValue = _value
end

---获取治疗值
---@public
function SnapShotData:GetCureValue()
	return self.__cureValue or 0
end

---获取施法者治疗加成
---@public
function SnapShotData:GetCurePercentAdd()
	return self.__curePercentAdd or 0
end

---获取施法者弱点伤害加成
---@public
function SnapShotData:GetWeakHurtAdd()
	return self.__weakHurtAdd or 0
end

---获取施法者元素击破伤害加成
---@public
function SnapShotData:GetEleBreakHurtAdd()
	return self.__eleBreakHurtAdd or 0
end

---获取施法者基础属性
---@public
function SnapShotData:GetBasePropById(_id)
	return self.__baseAttDic[_id] or 0
end

---获取是否是来源于元素击破
function SnapShotData:GetIsEleBreakTrig()
	return self.__isEleBreakTrig
end

---获取武器类型
---@public
function SnapShotData:GetWeaponType()
	return self.__weaponType
end

---获取伤害距离衰减数值加成
---@public
function SnapShotData:GetHurtReduceDisAddValue()
	return self.__hurtReduceDisAddValue
end

---获取元素反应类伤害对能量系数的修正值
---@public
function SnapShotData:GetReactEnFix()
	return self.__reactFix or 1
end

---设置传导带来的伤害倍率修正
---@public
function SnapShotData:SetEleSpreadHurtFix(_spreadCount, _spreadHurtFix)
	self.__eleSpreadCount = _spreadCount
	self.__hurtFinalRatioFix = _spreadHurtFix
end

---获取伤害最终倍率修正
---用于闪电链传递伤害比例衰减之类的
---@public
function SnapShotData:GetEleSpreadHurtFix()
	local _ret_1 = self.__eleSpreadCount or 0
	local _ret_2 = self.__hurtFinalRatioFix or 1
	return _ret_1, _ret_2
end

---@public
function SnapShotData:GetHurtSkillType()
	return self.__hurtSkillType
end

---@public
function SnapShotData:GetSkillTypeHurtAdd()
	return self.__skillHurtAdd or 0
end

---@public
function SnapShotData:GetSkillTypeCureAdd()
	return self.__skillCureAdd or 0
end

---获取unit
---@public
---@return BattleUnitBase
function SnapShotData:GetUnit()
	if not self.__unit then
		self.__unit = self:GetBattleRoom().battleUnitManager:GetUnit(self.__netId, true)
	end
	return self.__unit
end

---获取obj
---@public
---@return BattleObjectBase
function SnapShotData:GetObj()
	if not self.__obj then
		self.__obj = self:GetBattleRoom().battleObjectManager:GetObject(self.__objId)
	end
	return self.__obj
end

---获取阵营组件
---@public
---@return BattleUnitCom_Camp
function SnapShotData:GetCampCom()
	if self.__campCom then return self.__campCom end
	self.__campCom = self:GetUnit():GetComponent(BattleUnitComponentType.Camp)
	return self.__campCom
end

---获取unit层BUFF组件
---@public
---@return BattleUnitCom_Buff
function SnapShotData:GetUnitBuffCom()
	if self.__unitBuffCom then return self.__unitBuffCom end
	self.__unitBuffCom = self:GetUnit():GetComponent(BattleUnitComponentType.Buff)
	return self.__unitBuffCom
end

---获取obj层BUFF组件
---@public
---@return BattleObjCom_Buff
function SnapShotData:GetObjBuffCom()
	if self.__objBuffCom then return self.__objBuffCom end
	self.__objBuffCom = self:GetObj():GetComponent(BattleObjectComponentType.Buff)
	return self.__objBuffCom
end

---获取元素弱点对应的击破伤害加成
---@public
---@param _elementId number
function SnapShotData:GetEleTypeBreakHurtAdd(_elementId)
	return self.__eleTypeBreakHurtAdd[_elementId] or 0
end

---获取元素弱点对应的通用伤害加成
---@public
---@param _elementId number
function SnapShotData:GetEleTypeWeakHurtAdd(_elementId)
	return self.__eleTypeWeakHurtAdd[_elementId] or 0
end

------------------------------------------------------------------------------------------------------------------------
---@public
function SnapShotData:SetAlive(_bool)
	self.__alive = _bool
end

---@public
function SnapShotData:CheckAlive()
	return self.__alive
end

---@public
---@param _src SnapShotData
function SnapShotData:Copy(_src)
	self.__netId = _src:GetNetId()
	self.__objId = _src:GetObjId()
	self.__objLevel = _src:GetLevel()
	self.__fromUnitType = _src:GetFromUnitType()
	self.__sourceType = _src:GetSourceType()
	self.__sourceId = _src:GetSourceId()
	self.__elementId = _src:GetElementId()
	self.__elementType = _src:GetElementType()
	self.__addElementType = _src:GetAddElementType()
	self.__addElementRand = _src:GetAddElementRand()
	self.__addElementNum = _src:GetAddElementNum()
	self.__hurtParam = _src:GetHurtParam()
	self.__hatredParam = _src:GetHatredParam()
	self.__firstCamp = _src:GetFirstCamp()
	self.__secCamp = _src:GetSecCamp()
	self.__calcUseAtk = _src:GetCalcUseAtk()
	self.__eleWeakBreak = _src:GetElementWeakBreak()
	self.__hurtAdd = _src:GetHurtAdd()
	self.__antiHurtReduce = _src:GetAntiHurtReduce()
	self.__critHurtAdd = _src:GetCritHurtAdd()
	self.__enParam = _src:GetEnparam()
	self.__critRate = _src:GetCritRate()
	self.__cureValue = _src:GetCureValue()
	self.__curePercentAdd = _src:GetCurePercentAdd()
	self.__weakHurtAdd = _src:GetWeakHurtAdd()
	self.__eleBreakHurtAdd = _src:GetEleBreakHurtAdd()
	self.__originalHurtNum = _src:GetOriginalHurtNum()
	self.__hurtSkillType = _src:GetHurtSkillType()
	self.__skillHurtAdd = _src:GetSkillTypeHurtAdd()
	self.__skillCureAdd = _src:GetSkillTypeCureAdd()
	self.__isEleBreakTrig = _src:GetIsEleBreakTrig()
	self.__eleTypeBreakHurtAdd = {}
	for _key, _value in pairs(_src.__eleTypeBreakHurtAdd) do
		self.__eleTypeBreakHurtAdd[_key] = _value
	end
	self.__eleTypeWeakHurtAdd = {}
	for _key, _value in pairs(_src.__eleTypeWeakHurtAdd) do
		self.__eleTypeWeakHurtAdd[_key] = _value
	end
	self.__baseAttDic = {}
	for _key, _value in pairs(_src.__baseAttDic) do
		self.__baseAttDic[_key] = _value
	end
	self.__weaponType = _src:GetWeaponType()
	self.__hurtReduceDisAddValue = _src:GetHurtReduceDisAddValue()
	self.__reactFix = _src:GetReactEnFix()
	self.__originalHeroSkillId = _src:GetOriginalHeroSkillId()
	self.__eleSpreadCount, self.__hurtFinalRatioFix = _src:GetEleSpreadHurtFix()
end

------------------------------------------------------------------------------------------------------------------------
function SnapShotData:Clear()
	self.__alive = nil
	self.__index = nil
	self.__netId = nil
	self.__elementId = nil
	self.__elementNum = nil
	self.__hurtParam = nil
	self.__hatredParam = nil
	self.__objId = nil
	self.__firstCamp = nil
	self.__secCamp = nil
	self.__calcUseAtk = nil
	self.__eleWeakBreak = nil
	self.__hurtAdd = nil
	self.__antiHurtReduce = nil
	self.__elementType = nil
	self.__critRate = nil
	self.__enParam = nil
	self.__critHurtAdd = nil
	self.__cureValue = nil
	self.__curePercentAdd = nil
	self.__originalHeroSkillId = nil
	self.__weakHurtAdd = nil
	self.__eleBreakHurtAdd = nil
	self.__eleSpreadCount = nil
	self.__hurtFinalRatioFix = nil
	self.__originalHurtNum = nil
	self.__hurtSkillType = nil
	self.__skillHurtAdd = nil
	self.__skillCureAdd = nil
	self.__eleTypeBreakHurtAdd = nil
	self.__eleTypeWeakHurtAdd = nil
	self.__isEleBreakTrig = nil
end

return SnapShotData
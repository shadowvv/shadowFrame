---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/01/26 14:21
--- Describe: object层数据基类
---

---@class BattleObjectBase : table
BattleObjectBase = class(nil, "BattleObjectBase")
function BattleObjectBase:ctor(_objType, _objLevelEnum) 
	---@protected
	self.__objectType = _objType            --object类型
	---@protected
	self.__objectLevelEnum = _objLevelEnum  --object级别
end

------------------------------------------------------------------------------------------------------------------------
---@protected
---@param _battleId number
---@param _objectType BattleObjectType
---@param _parentUnit BattleUnitBase
---@param _objectId number
---@param _dicId number
function BattleObjectBase:__Init(_battleId, _parentUnit, _objectId, _dicId)
	---@type number
	self.__battleId = _battleId
	---@type BattleRoom
	self.__battleRoom = GetBattleRoom(_battleId)
	---@type boolean
	self.__isDead = false
	---@type LuaBehav_Define_DeadType
	self.__deadType = nil
	-----@protected
	--self.__objectType = _objectType  --object类型
	---@protected
	self.__parentUnit = _parentUnit --所属的unit
	---@protected
	---@type number
	self.__objectId = _objectId      -- object唯一ID
	---@protected
	self.__dicId = _dicId  -- 表id，不同类型可能对应的表不一样，策划把表改的乱的一批，还不知道怎么读
	---@protected
	---@type BattleObjectComponentBase[]
	self.__componentDic = {} --组件字典
	---最后一次对当前Obj造成伤害的来源netID, 暂时先放在这，回头再改
	---@private
	--已经挪到Tag里了，通过BattleUnitTagEnum.LastHurtFromNetID获取
	--self.__lastHurtNetId = nil
end

---@protected
function BattleObjectBase:__OnUpdate(_deltaTime)
	if self.__isDead then return end
	
	---@type BattleObjCom_Property
	local _comProp
	for _, _component in pairs(self.__componentDic) do
		if _component:GetComponentType() == BattleObjectComponentType.Property then
			_comProp = _component
		else
			_component:OnUpdate(_deltaTime)
		end
	end

	-- 属性放最后，保证所有属性修改能在这一帧统一发出去
	if _comProp then
		_comProp:OnUpdate(_deltaTime)
	end
end

---@protected
function BattleObjectBase:__GetParentUnit()
	return self.__parentUnit
end

---@protected
function BattleObjectBase:__GetObjectId()
	return self.__objectId
end

---@protected
function BattleObjectBase:__GetObjectType()
	return self.__objectType
end

---@protected
function BattleObjectBase:__CheckObjectType(_objectType)
	return self.__objectType == _objectType
end

---@protected
function BattleObjectBase:__GetDicId()
	return self.__dicId
end

---@protected
function BattleObjectBase:__GetStateParamId()
	---@type BattleObjCom_Config
	local _cfgCom = self:GetComponent(BattleObjectComponentType.Config)
	if not _cfgCom then return 1 end

	local _instance = _cfgCom:GetInstanceXls()
	if not _instance then return 1 end

	return _instance.stateParameterId or 1
end

---@protected
function BattleObjectBase:__SetDead(_deadType)
	self.__isDead = true
	self.__deadType = _deadType
end

---@protected
---@param _objectComponent BattleObjectComponentBase
function BattleObjectBase:__AddComponent(_objectComponent)
	self.__componentDic[_objectComponent:GetComponentType()] = _objectComponent
end

---@protected
function BattleObjectBase:__RemoveComponent(_componentType)
	self.__componentDic[_componentType] = nil
end

--@protected
function BattleObjectBase:__GetComponent(_componentType)
	return self.__componentDic[_componentType]
end

------------------------------------------------------------------------------------------------------------------------
---@protected
function BattleObjectBase:__CollectBlockDataList()
	---@type BattleObjCom_Block
	local _blockCom = self:GetComponent(BattleObjectComponentType.Block)
	if not _blockCom then return {} end
	return _blockCom:CollectBlockDatas()
end

------------------------------------------------------------------------------------------------------------------------
---@protected
function BattleObjectBase:__Clear()
	self.__parentUnit = nil
	self.__objectId = nil
	self.__objectType = nil
	self.__dicId = nil
	self.__componentDic = nil
	self.__deadType = nil
end
------------------------------------------------------------------------------------------------------------------------
---@public
---@param _objectType BattleObjectType
---@param _parentUnit BattleUnitBase
---@param _objectId number
---@param _dicId number
function BattleObjectBase:Init(_battleId, _objectType, _parentUnit, _objectId, _dicId)
	self:__Init(_battleId, _objectType, _parentUnit, _objectId, _dicId)
end

---@public
function BattleObjectBase:OnUpdate(_deltaTime)
	self:__OnUpdate(_deltaTime)
end

-- 受到子弹碰撞
---@public
---@param _emitterData BarrageEmitterData
function BattleObjectBase:OnBulletCollision(_emitterData)
	
	---@type Skill
	local _skill = self:GetBattleRoom().inputDataSource:GetDict("Skill", _emitterData:GetHeroSkillId())

	if _skill and _skill.fallObjectId then
		-- 掉落物
		local _unit = self.__battleRoom.battleUnitManager:GetUnit(_emitterData:GetCastNetId(), true)
		if _unit then
			---@type BattleUnitCom_Camp
			local campCom = _unit:GetComponent(BattleUnitComponentType.Camp)
			---@type BattleUnitCom_Camp
			local castCampCom = self:GetParentUnit():GetComponent(BattleUnitComponentType.Camp)

			if campCom.CheckCampHurtable(campCom:GetFirstCamp(), castCampCom:GetFirstCamp()) then
				-- 敌方阵营碰撞掉落
				for i = 1, #_skill.fallObjectId do
					---@type number
					local _fallObjId = _skill.fallObjectId[i]
					---@type number
					local _fallObjCount = _skill.fallObjectCount[i]
					-- 掉落
					self.__battleRoom.fallObjectManager:DropFallObjectByUnit(_fallObjId, _fallObjCount, _emitterData:GetCastNetId(), _emitterData:GetCastObjId(), self:GetParentUnit():GetNetId(), false)
				end
			end
		end
	end
end

-- 获取当前所属的unit
---@public
---@return BattleUnitBase
function BattleObjectBase:GetParentUnit()
	return self:__GetParentUnit()
end

---@public
-- 获取object唯一ID
function BattleObjectBase:GetObjectId()
	return self:__GetObjectId()
end

---@public
---@return BattleObjectType
function BattleObjectBase:GetObjectType()
	return self:__GetObjectType()
end

---@public
---@param _objectType BattleObjectType
function BattleObjectBase:CheckObjectType(_objectType)
	return self:__CheckObjectType(_objectType)
end

---获取obj级别
---@public
function BattleObjectBase:GetObjectLevelEnum()
	return self.__objectLevelEnum
end

---@public
---@param _objLevelEnum BattleObjectLevelEnum
function BattleObjectBase:CheckObjectLevelEnum(_objLevelEnum)
	return self.__objectLevelEnum == _objLevelEnum
end

---@public
-- 获取表ID
function BattleObjectBase:GetDicId()
	return self:__GetDicId()
end

---@public
---@param _objectComponent BattleObjectComponentBase
-- 添加组件
function BattleObjectBase:AddComponent(_objectComponent)
	self:__AddComponent(_objectComponent)
end

---@public
---@param _componentType BattleObjectComponentType
-- 删除组件
function BattleObjectBase:RemoveComponent(_componentType)
	self:__RemoveComponent(_componentType)
end

---@public
---@return BattleObjectComponentBase
-- 获取组件
function BattleObjectBase:GetComponent(_componentType)
	return self:__GetComponent(_componentType)
end

---(没有特定需要尽量不要用)
---@public
function BattleObjectBase:GetInstanceXls()
	---@type BattleObjCom_Config
    local _configCom = self:GetComponent(BattleObjectComponentType.Config)
	return _configCom and _configCom:GetInstanceXls()
end

---(没有特定需要尽量不要用)
---@public
function BattleObjectBase:GetTemplateXls()
	---@type BattleObjCom_Config
    local _configCom = self:GetComponent(BattleObjectComponentType.Config)
	return _configCom and _configCom:GetTemplateXls()
end

---@public
function BattleObjectBase:GetDataInstanceXls()
	---@type BattleObjCom_Config
    local _configCom = self:GetComponent(BattleObjectComponentType.Config)
	return _configCom and _configCom:GetDataInstanceXls()
end

---@public
function BattleObjectBase:GetDataTemplateXls()
	---@type BattleObjCom_Config
    local _configCom = self:GetComponent(BattleObjectComponentType.Config)
	return _configCom and _configCom:GetDataTemplateXls()
end

-- 是否上阵
---@public
---@return boolean 是否上阵
function BattleObjectBase:IsCurrentHero()
	return self:GetParentUnit():GetCurrentHeroObjectId() == self:GetObjectId()
end

---@public
--function BattleObjectBase:SetLastHurtNetId(_netId)
--	self.__lastHurtNetId = _netId
--end

---@public
--function BattleObjectBase:GetLastHurtNetId()
--	return self.__lastHurtNetId
--end

---@public
function BattleObjectBase:GetStateParamId()
	return self:__GetStateParamId()
end

---@public
---检查是否可以被击中
function BattleObjectBase:CheckCanBeHitted()
	---@type BattleObjCom_Config
	local _cfgCom = self:GetComponent(BattleObjectComponentType.Config)
	if not _cfgCom then return false end
	local _templateXls = _cfgCom:GetTemplateXls()
	return _templateXls and 1 == _templateXls.isHit
end

---@public
---检查是否走伤害公式（命中是否受伤）
function BattleObjectBase:CheckCalculateHurt()
    ---@type BattleObjCom_Config
   local _cfgCom = self:GetComponent(BattleObjectComponentType.Config)
	if not _cfgCom then return false end
	local _templateXls = _cfgCom:GetTemplateXls()
	return _templateXls and 1 == _templateXls.isCalculated
end

---@public
---检查是否可以被瞄准
function BattleObjectBase:CheckCanBeAimed()
    ---@type BattleObjCom_Config
   local _cfgCom = self:GetComponent(BattleObjectComponentType.Config)
	if not _cfgCom then return false end
	local _templateXls = _cfgCom:GetTemplateXls()
	return _templateXls and 1 == _templateXls.isAimed
end

---@public
---检查是否可以被牵引
function BattleObjectBase:CheckCanBeDraged()
	---@type BattleObjCom_Config
   local _cfgCom = self:GetComponent(BattleObjectComponentType.Config) 
	if not _cfgCom then return false end
	local _templateXls = _cfgCom:GetTemplateXls()
	return _templateXls and 1 == _templateXls.isDraged
end

-- 
function BattleObjectBase:SetDead(_deadType)
	self:__SetDead(_deadType)
end

--
function BattleObjectBase:CheckDead()
	return self.__isDead
end

---获取单位的元素类型
---@public
---@return number
function BattleObjectBase:GetElementType()
	return BattleElementTypeEnum.NONE:GetId()
end

---@public
---是否是元素体质单位
function BattleObjectBase:IsElementConstitution()
	local _elementType = self:GetElementType()
	if _elementType ~= BattleElementTypeEnum.NONE:GetId() and _elementType ~= BattleElementTypeEnum.PHYSIC:GetId() then
		-- 自身元素类型不是无也不是物理，就是元素体质单位
		return true
	end
	return false
end

-- 
function BattleObjectBase:GetCreateTime()
	---@type BattleObjCom_LifeCtrl
	local _lifeCom = self:GetComponent(BattleObjectComponentType.LifeCtrl)
	return _lifeCom:GetCreateTime()
end

--
---@return number battleId
function BattleObjectBase:GetBattleId()
	return self.__battleId
end

---@return BattleRoom
function BattleObjectBase:GetBattleRoom()
	return self.__battleRoom
end

---@public
function BattleObjectBase:Clear()
	self:__Clear()
	self.__isDead = nil
end

------------------------------------------------------------------------------------------------------------------------
---服务器逻辑核生成用于发送给前端逻辑核的全量信息
---@public
---@return table  msg.BattleObjectCreateSyncInfo
function BattleObjectBase:GetCreateSyncMessage_S2C()
    return self:__GetCreateSyncMessage_S2C()
end
---@protected
function BattleObjectBase:__GetCreateSyncMessage_S2C()
	local _battleObjectCreateSyncInfo = {}
	_battleObjectCreateSyncInfo.objId = self.__objectId
	_battleObjectCreateSyncInfo.isDead = self.__isDead
	local _propCom = self.__componentDic[BattleObjectComponentType.Property]
	_battleObjectCreateSyncInfo.objectProps = _propCom and _propCom:GetCreateSyncMessage_S2C()
	local _lifeCom = self.__componentDic[BattleObjectComponentType.LifeCtrl]
	_battleObjectCreateSyncInfo.createTime = _lifeCom and _lifeCom:GetCreateSyncMessage_S2C()
	local _boundaryTriggerCom = self.__componentDic[BattleObjectComponentType.BoundaryTrigger]
	_battleObjectCreateSyncInfo.boundaryTriggerInfo = _boundaryTriggerCom and _boundaryTriggerCom:GetCreateSyncMessage_S2C()
	local _blockCom = self.__componentDic[BattleObjectComponentType.Block]
	_battleObjectCreateSyncInfo.objBlockStateInfo = _blockCom and _blockCom:GetCreateSyncMessage_S2C()
	local _buffCom = self.__componentDic[BattleObjectComponentType.Buff]
	_battleObjectCreateSyncInfo.objectBuffs = _buffCom and _buffCom:GetCreateSyncMessage_S2C()
	local _skillCom = self.__componentDic[BattleObjectComponentType.Skill];
	_battleObjectCreateSyncInfo.skillCoolDownInfo = _skillCom and _skillCom:GetCreateSyncMessage_S2C()
	local _playModeCom = self.__componentDic[BattleObjectComponentType.PlayMode];
	_battleObjectCreateSyncInfo.playModeInfo = _playModeCom and _playModeCom:GetCreateSyncMessage_S2C()
	local _elementCom = self.__componentDic[BattleObjectComponentType.Element];
	_battleObjectCreateSyncInfo.elementSyncInfo = _elementCom and _elementCom:GetCreateSyncMessage_S2C()
	return _battleObjectCreateSyncInfo
end

---前端逻辑核用服务器发来的全量信息刷新自身数据
---@public
---@param _battleObjectCreateSyncInfo table  msg.BattleObjectCreateSyncInfo
function BattleObjectBase:OnReceiveCreateSyncMessage_S2C(_battleObjectCreateSyncInfo)
    local _propCom = self.__componentDic[BattleObjectComponentType.Property]
	if _propCom then
		_propCom:OnReceiveCreateSyncMessage_S2C(_battleObjectCreateSyncInfo.objectProps)
	end
	local _lifeCom = self.__componentDic[BattleObjectComponentType.LifeCtrl]
	if _lifeCom then
		_lifeCom:OnReceiveCreateSyncMessage_S2C(_battleObjectCreateSyncInfo.createTime)
	end
	local _boundaryTriggerCom = self.__componentDic[BattleObjectComponentType.BoundaryTrigger]
	if _boundaryTriggerCom then
		_boundaryTriggerCom:OnReceiveCreateSyncMessage_S2C(_battleObjectCreateSyncInfo.boundaryTriggerInfo)
	end
	local _blockCom = self.__componentDic[BattleObjectComponentType.Block]
	if _blockCom then
		_blockCom:OnReceiveCreateSyncMessage_S2C(_battleObjectCreateSyncInfo.objBlockStateInfo)
	end
end

---前端逻辑核生成用于发送给表现的层全量信息
---@public
---@param _BattleObjectCreateSyncInfo table msg.BattleObjectCreateSyncInfo
function BattleObjectBase:GetCreateSyncMessage_L2V(_BattleObjectCreateSyncInfo)
    local _BattleObjectCreateSyncInfo_L2V = {}
	_BattleObjectCreateSyncInfo_L2V.objId = self.__objectId
	_BattleObjectCreateSyncInfo_L2V.objectType = self.__objectType
	local _buffCom = self.__componentDic[BattleObjectComponentType.Buff]
	_BattleObjectCreateSyncInfo_L2V.objectBuffs = _buffCom and _buffCom:GetCreateSyncMessage_L2V(_BattleObjectCreateSyncInfo)
	local _skillCom = self.__componentDic[BattleObjectComponentType.Skill];
	_BattleObjectCreateSyncInfo_L2V.skillCoolDownInfo = _skillCom and _skillCom:GetCreateSyncMessage_L2V(_BattleObjectCreateSyncInfo)
	local _playModeCom = self.__componentDic[BattleObjectComponentType.PlayMode];
	_BattleObjectCreateSyncInfo_L2V.playModeInfo = _playModeCom and _playModeCom:GetCreateSyncMessage_L2V(_BattleObjectCreateSyncInfo)
	local _elementCom = self.__componentDic[BattleObjectComponentType.Element];
	_BattleObjectCreateSyncInfo_L2V.elementSyncInfo = _elementCom and _elementCom:GetCreateSyncMessage_L2V(_BattleObjectCreateSyncInfo)
	local _boundaryTriggerCom = self.__componentDic[BattleObjectComponentType.BoundaryTrigger]
	_BattleObjectCreateSyncInfo_L2V.boundaryTriggerInfo = _boundaryTriggerCom and _boundaryTriggerCom:GetCreateSyncMessage_L2V(_BattleObjectCreateSyncInfo)
	return _BattleObjectCreateSyncInfo_L2V
end
return BattleObjectBase
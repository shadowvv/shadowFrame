---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/01/27 14:44
--- Describe:
---

---@class BattleUnitCreator : table
BattleUnitCreator = class(nil, "BattleUnitCreator")
function BattleUnitCreator:ctor(_data) end

---@public
---@param _unitManager BattleUnitManager
function BattleUnitCreator:Init(_unitManager)
	---@private
	self.__unitManager = _unitManager
end

---@public
---@return BattleUnitManager
function BattleUnitCreator:GetUnitManager()
	return self.__unitManager
end

---@private
function BattleUnitCreator:GetBattleId()
	return self.__unitManager:GetBattleId()
end

---@public
---@return BattleRoom
function BattleUnitCreator:GetBattleRoom()
	return self.__unitManager:GetBattleRoom()
end

---@public
function BattleUnitCreator:Clear()
	self.__unitManager = nil
end

------------------------------------------------------------------------------------------------------------------------

---@public
---@param _unitType BattleUnitType
---@param _readyList table Msg.BattleUnitGenerateInfo[]
---@return BattleUnitBase
function BattleUnitCreator:OnUnitReadyCreate(_unitType, _readyList)
	--LogTools.LogByLevel(LogLevel.log, "CheckCreateUnit", "BattleUnitCreator", "CreateUnit", "_unitType", LogTools.GetEnumTableDesc(BattleUnitType, _unitType))
	
	if _unitType == BattleUnitType.Player then
		return self:__OnUnitReadyCreate_Player(_readyList)
	elseif _unitType == BattleUnitType.Monster then
		return self:__OnUnitReadyCreate_Monster(_readyList)
	elseif _unitType == BattleUnitType.AreaTrigger then
		return self:__OnUnitReadyCreate_Area(_readyList)
	elseif _unitType == BattleUnitType.SummonedMons then
		return self:__OnUnitReadyCreate_Summond(_readyList)
	elseif _unitType == BattleUnitType.SceneObj then
		return self:__OnUnitReadyCreate_SceneObj(_readyList)
	elseif _unitType == BattleUnitType.TargetPoint then
		return self:__OnUnitReadyCreate_TargetPoint(_readyList)
	elseif _unitType == BattleUnitType.Shield then
		return self:__OnUnitReadyCreate_Shield(_readyList)
	else
		return {}
	end
end

--- 服务器通知创建玩家
---@param  _BattleUnitGenerateInfoList table msg.BattleUnitGenerateInfo
---@return BattleUnitBase[]
function BattleUnitCreator:__OnUnitReadyCreate_Player(_BattleUnitGenerateInfoList)
	--LogTools.LogByLevel(LogLevel.log, "CheckCreateUnit", "BattleUnitCreator", "CreatePlayerUnit start", "_BattleUnitGenerateInfoList", dumpTableEx(_BattleUnitGenerateInfoList))

	local _createdUnitList = {}
    for i = 1, #_BattleUnitGenerateInfoList do
        local _BattleUnitGenerateInfo = _BattleUnitGenerateInfoList[i]
        local _playerOriginalData = self.__unitManager:GetOriginalPlayerInfoManager():GetPlayer(_BattleUnitGenerateInfo.playerId)
        ---@type BattleCreateUnitParam
        local _battleCreateUnitParam = BattleCreateUnitParam.New(self:GetBattleRoom())
        _battleCreateUnitParam:InitPlayer(_playerOriginalData:GetPlayerInfo(), _BattleUnitGenerateInfo)
        local _createdUnit = self.__unitManager:CreateUnit(BattleUnitType.Player, _battleCreateUnitParam)
		_playerOriginalData:SetNetId(_createdUnit:GetNetId())
		--玩家现在是不进出生状态的, 放到这里触发
		_createdUnit:AddLevelInitBuffAndTalent()
		_createdUnit:AddUnitDefaultBuff()
		table.insert(_createdUnitList, _createdUnit)
		if _playerOriginalData:CheckOnlineState(BattleUnitOnlineState.OnLine) then
			self:GetBattleRoom().outputDataSource:PlayerEnterL2V({ netId = _createdUnit:GetNetId() })
        end
	end
	
	return _createdUnitList
end

---@private
---@param _BattleUnitGenerateInfoList table msg.BattleUnitGenerateInfo[]
---@return BattleUnitBase[]
function BattleUnitCreator:__OnUnitReadyCreate_Monster(_BattleUnitGenerateInfoList)
	--LogTools.LogByLevel(LogLevel.log, "CheckCreateUnit", "BattleUnitCreator", "__OnUnitReadyCreate_Monster start", "_BattleUnitGenerateInfoList", #_BattleUnitGenerateInfoList)

	local _createdUnitList = {}
	for i = 1, #_BattleUnitGenerateInfoList do
		---@type BattleCreateUnitParam
		local _battleCreateUnitParam = BattleCreateUnitParam.New(self:GetBattleRoom())
		_battleCreateUnitParam:InitMonster(_BattleUnitGenerateInfoList[i])
		local _createdUnit = self.__unitManager:CreateUnit(BattleUnitType.Monster, _battleCreateUnitParam)
		if _createdUnit then
			table.insert(_createdUnitList, _createdUnit)
			--_createdUnit:AddLevelInitBuffAndTalent()
			--_createdUnit:AddUnitDefaultBuff()
			--LogTools.LogByLevel(LogLevel.log, "BattleUnitCreator", "__OnUnitReadyCreate_Monster", "LEVEL_UNIT_CREATE", "levelUnitId", _monsterUnit:GetLevelUnitId(), "netId", _monsterUnit:GetNetId())
		end
	end
	
	return _createdUnitList

	--self:GetBattleRoom().outputDataSource:CreateMonsterUnit(_createMonsterUnitL2S)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCreator", "__OnUnitReadyCreate_Monster end")
end

--- 服务器通知创建区域
---@param _BattleUnitGenerateInfoList table msg.BattleUnitGenerateInfo[]
---@return BattleUnitBase[]
function BattleUnitCreator:__OnUnitReadyCreate_Area(_BattleUnitGenerateInfoList)
	--LogTools.LogByLevel(LogLevel.log, "CheckCreateUnit", "BattleUnitCreator", "__OnUnitReadyCreate_Area start", "_BattleUnitGenerateInfoList", #_BattleUnitGenerateInfoList)
	--local _createAreaTriggerUnitL2V = {}
    --local _unitInfoList = {}
	--_createAreaTriggerUnitL2V.unitInfoList = _unitInfoList

	local _createdUnitList = {}
	for i = 1, #_BattleUnitGenerateInfoList do
		---@type BattleCreateUnitParam
		local _battleCreateUnitParam = BattleCreateUnitParam.New(self:GetBattleRoom())
		_battleCreateUnitParam:InitAreaTrigger(_BattleUnitGenerateInfoList[i])
		---@type BattleUnit_AreaTrigger
		local _createdUnit = self.__unitManager:CreateUnit(BattleUnitType.AreaTrigger, _battleCreateUnitParam)
		if _createdUnit then
			table.insert(_createdUnitList, _createdUnit)
		end
	end

	return _createdUnitList
	--LogTools.LogByLevel(LogLevel.log, "CheckArea", "BattleUnitCreator", "__OnUnitReadyCreate_Area end")
	--self:GetBattleRoom().outputDataSource:CreateAreaTriggerUnit(_createAreaTriggerUnitL2V)
	--LogTools.LogByLevel(LogLevel.log, "CheckArea", "BattleUnitCreator", "__OnUnitReadyCreate_Area end")
end

--- 服务器通知创建召唤物
---@param _BattleUnitGenerateInfoList table msg.BattleUnitGenerateInfo[]
---@return BattleUnitBase[]
function BattleUnitCreator:__OnUnitReadyCreate_Summond(_BattleUnitGenerateInfoList)
	--LogTools.LogByLevel(LogLevel.log, "CheckCreateUnit", "BattleUnitCreator", "__OnUnitReadyCreate_Summond start", "_BattleUnitGenerateInfoList", #_BattleUnitGenerateInfoList)

	local _createdUnitList = {}
	for i = 1, #_BattleUnitGenerateInfoList do
		---@type BattleCreateUnitParam
		local _battleCreateUnitParam = BattleCreateUnitParam.New(self:GetBattleRoom())
		_battleCreateUnitParam:InitSummonedMons(_BattleUnitGenerateInfoList[i])
		---@type BattleUnitBase
		local _createdUnit = self.__unitManager:CreateUnit(BattleUnitType.SummonedMons, _battleCreateUnitParam)
		if _createdUnit then
			--_createdUnit:AddLevelInitBuffAndTalent()
			table.insert(_createdUnitList, _createdUnit)
		end
	end
	return _createdUnitList

	--self:GetBattleRoom().outputDataSource:CreateSummonedMonsUnit(_createSummonedMonsUnitL2V)
	--LogTools.LogByLevel(LogLevel.log, "CheckSummonedMons", "BattleUnitCreator", "__OnUnitReadyCreate_Summond end")
end


--- 服务器通知创建场景物件
---@param _BattleUnitGenerateInfoList table msg.BattleUnitGenerateInfo[]
---@return BattleUnitBase[]
function BattleUnitCreator:__OnUnitReadyCreate_SceneObj(_BattleUnitGenerateInfoList)
	--LogTools.LogByLevel(LogLevel.log, "CheckCreateUnit", "CheckSceneObj", "BattleUnitCreator", "__OnUnitReadyCreate_SceneObj start", "_BattleUnitGenerateInfoList", #_BattleUnitGenerateInfoList)

	local _createdUnitList = {}
	for i = 1, #_BattleUnitGenerateInfoList do
		---@type BattleCreateUnitParam
		local _battleCreateUnitParam = BattleCreateUnitParam.New(self:GetBattleRoom())
		_battleCreateUnitParam:InitSceneObj(_BattleUnitGenerateInfoList[i])
		---@type BattleUnitBase
		local _createdUnit = self.__unitManager:CreateUnit(BattleUnitType.SceneObj, _battleCreateUnitParam)
		if _createdUnit then
			table.insert(_createdUnitList, _createdUnit)
			--table.insert(_unitInfoList, _unit:GetL2SMessageData())
		end
	end
	return _createdUnitList

	--LogTools.LogByLevel(LogLevel.log, "checkMulty", "CheckSceneObj", "BattleUnitCreator", "_createSceneObjUnitL2V", dumpTableEx(_createSceneObjUnitL2V))
	--self:GetBattleRoom().outputDataSource:CreateSceneObjL2V(_createSceneObjUnitL2V)
	--LogTools.LogByLevel(LogLevel.log, "checkMulty", "CheckSceneObj", "BattleUnitCreator", "__OnUnitReadyCreate_SceneObj end")
end

--- 服务器通知创建目标点
---@param _BattleUnitGenerateInfoList table msg.BattleUnitGenerateInfo[]
---@return BattleUnitBase[]
function BattleUnitCreator:__OnUnitReadyCreate_TargetPoint(_BattleUnitGenerateInfoList)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCreator", "__OnUnitReadyCreate_TargetPoint start", "_BattleUnitGenerateInfoList", #_BattleUnitGenerateInfoList)

	local _createdUnitList = {}
	for i = 1, #_BattleUnitGenerateInfoList do
		---@type BattleCreateUnitParam
		local _battleCreateUnitParam = BattleCreateUnitParam.New(self:GetBattleRoom())
		_battleCreateUnitParam:InitTargetPoint(_BattleUnitGenerateInfoList[i])
		local _createdUnit = self.__unitManager:CreateUnit(BattleUnitType.TargetPoint, _battleCreateUnitParam)
		if _createdUnit then
			table.insert(_createdUnitList, _createdUnit)
			--LogTools.LogByLevel(LogLevel.log, "BattleUnitCreator", "__OnUnitReadyCreate_TargetPoint", "LEVEL_UNIT_CREATE", "levelUnitId", _unit:GetLevelUnitId(), "netId", _unit:GetNetId())
		end
	end
	return _createdUnitList

	--self:GetBattleRoom().outputDataSource:CreateTargetPointUnit(_createTargetPointL2V)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCreator", "__OnUnitReadyCreate_TargetPoint end")
end

--- 服务器通知创建护罩
---@return BattleUnitBase[]
---@param _BattleUnitGenerateInfoList table msg.BattleUnitGenerateInfo[]
function BattleUnitCreator:__OnUnitReadyCreate_Shield(_BattleUnitGenerateInfoList)
	--LogTools.LogByLevel(LogLevel.log, "CheckCreateUnit", "BattleUnitCreator", "__OnUnitReadyCreate_Shield start", "_BattleUnitGenerateInfoList", #_BattleUnitGenerateInfoList)

	local _createdUnitList = {}
	for i = 1, #_BattleUnitGenerateInfoList do
		---@type BattleCreateUnitParam
		local _battleCreateUnitParam = BattleCreateUnitParam.New(self:GetBattleRoom())
		_battleCreateUnitParam:InitShield(_BattleUnitGenerateInfoList[i])
		local _createdUnit = self.__unitManager:CreateUnit(BattleUnitType.Shield, _battleCreateUnitParam)
		if _createdUnit then
			--_createdUnit:AddUnitDefaultBuff()
			table.insert(_createdUnitList, _createdUnit)
			--LogTools.LogByLevel(LogLevel.log, "BattleUnitCreator", "__OnUnitReadyCreate_Shield", "LEVEL_UNIT_CREATE", "levelUnitId", _unit:GetLevelUnitId(), "netId", _unit:GetNetId())
		end
	end
	return _createdUnitList
	
	--self:GetBattleRoom().outputDataSource:CreateShieldUnit(_createShieldL2V)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCreator", "__OnUnitReadyCreate_Shield end")
end
------------------------------------------------------------------------------------------------------------------------

---单位创建信息，推给本地逻辑核
---@public
---@param _createdUnitList BattleUnitBase[]
function BattleUnitCreator:SendCreateUnitToLocalCore(_createdUnitList)
	--LogTools.LogByLevel(LogLevel.log, "CheckCreateUnit", "BattleUnitCreator:SendCreateUnitToLocalCore", "_createdUnitList", #_createdUnitList)
	local _battleFieldData = {}
	_battleFieldData.unitInfo = {}
	local _creatInfo = {}
	_battleFieldData.unitInfo.createInfo = _creatInfo
	
	---@type BattleUnitBase
	local _unit
	for i = 1, #_createdUnitList do
		_unit = _createdUnitList[i]
		table.insert(_creatInfo, _unit:GetOriginalGenerateInfo())
	end
	
	self:GetBattleRoom().outputDataSource:AddBattleFieldData(_battleFieldData)
end


---单位创建信息，推给表现层
---@public
---@param _createdUnitList BattleUnitBase[]
function BattleUnitCreator:SendCreateUnitToView(_unitType, _createdUnitList)
	--LogTools.LogByLevel(LogLevel.log, "CheckCreateUnit", "BattleUnitCreator:SendCreateUnitToView", "_unitType", LogTools.GetEnumTableDesc(BattleUnitType, _unitType), "_createdUnitList", #_createdUnitList)
	if 0 == #_createdUnitList then return end
	
	local _createInfoL2V = {}
	_createInfoL2V.unitInfoList = {}
	_createInfoL2V.infoList = {}
	local _outputDataSource = self:GetBattleRoom().outputDataSource
	local _outputFunc
	local _infoTable
	
	if _unitType == BattleUnitType.Player then
		_infoTable = _createInfoL2V.unitInfoList
		_outputFunc = _outputDataSource.CreatePlayerUnit
	elseif _unitType == BattleUnitType.Monster then
		_infoTable = _createInfoL2V.unitInfoList
		_outputFunc = _outputDataSource.CreateMonsterUnit
	elseif _unitType == BattleUnitType.AreaTrigger then
		_infoTable = _createInfoL2V.unitInfoList
		_outputFunc = _outputDataSource.CreateAreaTriggerUnit
	elseif _unitType == BattleUnitType.SummonedMons then
		_infoTable = _createInfoL2V.unitInfoList
		_outputFunc = _outputDataSource.CreateSummonedMonsUnit
	elseif _unitType == BattleUnitType.SceneObj then
		_infoTable = _createInfoL2V.infoList
		_outputFunc = _outputDataSource.CreateSceneObjL2V
	elseif _unitType == BattleUnitType.TargetPoint then
		_infoTable = _createInfoL2V.infoList
		_outputFunc = _outputDataSource.CreateTargetPointUnit
	elseif _unitType == BattleUnitType.Shield then
		_infoTable = _createInfoL2V.infoList
		_outputFunc = _outputDataSource.CreateShieldUnit
	end
	
	---@type BattleUnitBase
	local _createdUnit
	for i = 1, #_createdUnitList do
		_createdUnit = _createdUnitList[i]
		table.insert(_infoTable, _createdUnit:GetL2SMessageData())
	end
	_outputFunc(_outputDataSource, _createInfoL2V)
end

------------------------------------------------------------------------------------------------------------------------

---@public
---@param _param BattleCreateUnitParam
---@return BattleUnitBase
function BattleUnitCreator:CreateUnit(_unitType, _param)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCreator", "CreateUnit", "_unitType", LogTools.GetEnumTableDesc(BattleUnitType, _unitType))
	if _unitType == BattleUnitType.Player then
		return self:__CreatePlayerUnit(_param)
	elseif _unitType == BattleUnitType.Monster then
		return self:__CreateMonsterUnit(_param)
	elseif _unitType == BattleUnitType.AreaTrigger then
		return self:__CreateAreaTrigger(_param)
	elseif _unitType == BattleUnitType.SummonedMons then
		return self:__CreateSummonedMons(_param)
	elseif _unitType == BattleUnitType.SceneObj then
		return self:__CreateSceneObj(_param)
	elseif _unitType == BattleUnitType.TargetPoint then
		return self:__CreateTargetPoint(_param)
	elseif _unitType == BattleUnitType.Shield then
		return self:__CreateShield(_param)
	else
		return nil
	end
end

---创建leader单位
---@private
---@param _battleCreateUnitParam BattleCreateUnitParam
---@return BattleUnit_Player
function BattleUnitCreator:__CreatePlayerUnit(_battleCreateUnitParam)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitCreator", "__CreatePlayerUnit")
	local _objectManager = self:GetUnitManager():GetBattleRoom().battleObjectManager
	
	---@type BattleUnit_Player
	local _unit = BattleUnit_Player.New()
	
	local _objectDic = {}
	local _currentObjectId = -1
	local _currentDicId = _battleCreateUnitParam.battlePlayerInfo.curLeaderId
	local _leaderBattleInfoList = _battleCreateUnitParam.battlePlayerInfo.leaders
	for i = 1, #_leaderBattleInfoList do
		local _leaderBattleInfo = _leaderBattleInfoList[i]
		local _objectId = _battleCreateUnitParam.objIdList[i]
		local _object = _objectManager:CreateObject(BattleObjectType.LeaderHero, _unit, _battleCreateUnitParam, _objectId, i)
		_objectDic[_objectId] = _object

		if _currentDicId == _object:GetDicId() then
			_currentObjectId = _objectId
		end
	end
	
	_unit:Init(_battleCreateUnitParam, _objectDic, _currentObjectId)
	
	return _unit
end

---创建monster单位
---@private
---@param _battleCreateUnitParam BattleCreateUnitParam
---@return BattleUnit_Monster
function BattleUnitCreator:__CreateMonsterUnit(_battleCreateUnitParam)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitCreator", "__CreateMonsterUnit")
	local _objectManager = self:GetBattleRoom().battleObjectManager
	
	---@type BattleUnit_Monster
	local _unit = BattleUnit_Monster.New()

	local _objectDic = {}
	local _objectId = _battleCreateUnitParam.objIdList[1]
	local _object = _objectManager:CreateObject(BattleObjectType.MonsterHero, _unit, _battleCreateUnitParam, _objectId, 1)
	_objectDic[_objectId] = _object
	
	_unit:Init(_battleCreateUnitParam, _objectDic, _objectId)
	
	return _unit
end

---创建区域单位
---@private
---@param _battleCreateUnitParam BattleCreateUnitParam
---@return BattleUnit_AreaTrigger
function BattleUnitCreator:__CreateAreaTrigger(_battleCreateUnitParam)
	local _objectManager = self:GetBattleRoom().battleObjectManager
	
	---@type BattleUnit_AreaTrigger
	local _unit = BattleUnit_AreaTrigger.New()

	local _objectDic = {}
	local _objectId = _battleCreateUnitParam.objIdList[1]
	local _object = _objectManager:CreateObject(BattleObjectType.AreaTrigger, _unit, _battleCreateUnitParam, _objectId)
	_objectDic[_objectId] = _object
	
	_unit:Init(_battleCreateUnitParam, _objectDic, _objectId)
	if CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "BattleUnitCreator", "__CreateAreaTrigger end", "_unit", _unit,"battleId",_unit.battleId ,"_battleCreateUnitParam",dumpTableEx(_battleCreateUnitParam))
	end
	return _unit
end

---创建召唤物单位
---@private
---@param _battleCreateUnitParam BattleCreateUnitParam
---@return BattleUnit_SummonedMons
function BattleUnitCreator:__CreateSummonedMons(_battleCreateUnitParam)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitCreator", "__CreateSummonedMons")
	local _objectManager = self:GetBattleRoom().battleObjectManager
	
	---@type BattleUnit_SummonedMons
	local _unit = BattleUnit_SummonedMons.New()

	local _objectDic = {}
	local _objectId = _battleCreateUnitParam.objIdList[1]
	local _object = _objectManager:CreateObject(BattleObjectType.SummonedMons, _unit, _battleCreateUnitParam, _objectId)
	_objectDic[_objectId] = _object
	
	_unit:Init(_battleCreateUnitParam, _objectDic, _objectId)
	
	return _unit
end

---创建场景物件单位
---@private
---@param _battleCreateUnitParam BattleCreateUnitParam
---@return BattleUnit_SceneObj
function BattleUnitCreator:__CreateSceneObj(_battleCreateUnitParam)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitCreator", "__CreateSceneObj")
	local _objectManager = self:GetBattleRoom().battleObjectManager
	
	---@type BattleUnit_SceneObj
	local _unit = BattleUnit_SceneObj.New()

	local _objectDic = {}
	local _objectId = _battleCreateUnitParam.objIdList[1]
	local _object = _objectManager:CreateObject(BattleObjectType.SceneObj, _unit, _battleCreateUnitParam, _objectId)
	_objectDic[_objectId] = _object
	
	_unit:Init(_battleCreateUnitParam, _objectDic, _objectId)
	
	return _unit
end

---创建目标点单位
---@private
---@param _battleCreateUnitParam BattleCreateUnitParam
---@return BattleUnit_SceneObj
function BattleUnitCreator:__CreateTargetPoint(_battleCreateUnitParam)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitCreator", "__CreateTargetPoint")
	local _objectManager = self:GetBattleRoom().battleObjectManager
	
	---@type BattleUnit_TargetPoint
	local _unit = BattleUnit_TargetPoint.New()

	local _objectDic = {}
	local _objectId = _battleCreateUnitParam.objIdList[1]
	local _object = _objectManager:CreateObject(BattleObjectType.TargetPoint, _unit, _battleCreateUnitParam, _objectId)
	_objectDic[_objectId] = _object

	_unit:Init(_battleCreateUnitParam, _objectDic, _objectId)

	return _unit
end

---创建护罩单位
---@private
---@param _battleCreateUnitParam BattleCreateUnitParam
---@return BattleUnit_SceneObj
function BattleUnitCreator:__CreateShield(_battleCreateUnitParam)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCreator", "__CreateShield")
	local _objectManager = self:GetBattleRoom().battleObjectManager
	
	---@type BattleUnit_Shield
	local _unit = BattleUnit_Shield.New()

	local _objectDic = {}
	local _objectId = _battleCreateUnitParam.objIdList[1]
	local _object = _objectManager:CreateObject(BattleObjectType.Shield, _unit, _battleCreateUnitParam, _objectId)
	_objectDic[_objectId] = _object

	_unit:Init(_battleCreateUnitParam, _objectDic, _objectId)
	
	return _unit
end


-------------------------------------------------------------------------------------------------------------------------

-- 生成武器
---@param _weaponInfo table
---@return BattlePlayerWeapon
function BattleUnitCreator:CreateWeapon(_weaponInfo)
	---@type BattlePlayerWeapon
	local weapon = BattlePlayerWeapon.New()
    weapon:SetId(_weaponInfo.id)
    weapon:SetLeaderId(_weaponInfo.leaderId)
    weapon:SetExp(_weaponInfo.exp)
    weapon:SetLevel(_weaponInfo.level)
    weapon:SetBreachLevel(_weaponInfo.breachLevel)
    weapon:SetOnlyId(_weaponInfo.onlyId)
    weapon:SetGetTime(_weaponInfo.getTime)
    weapon:SetDefLeaderId(_weaponInfo.defLeaderId)
    weapon:SetSkinId(_weaponInfo.skinId)
    weapon:SetLockState(_weaponInfo.lockState)
    weapon:SetRefineLevel(_weaponInfo.refineLevel)

    --local prop = BattleObjectProp:New();
    --for index, value in ipairs(_weaponInfo.calcPropModelInfo.attributeMap) do
    --    prop:AddNormalProp(value.key, value.value);
    --end
    --for index, value in ipairs(_weaponInfo.calcPropModelInfo.growMap) do
    --    prop:AddGrowProp(value.key, value.value);
    --end
    --prop:SetCapability(_weaponInfo.calcPropModelInfo.capability);
    --weapon:SetProp(prop);

	return weapon
end

-- 生成被动技能
---@param _talentSkillInfo table
---@return BattlePlayerTalentSkill
function BattleUnitCreator:CreateTalentSkill(_talentSkillInfo)
	---@type BattlePlayerTalentSkill
	local talentSkill = BattlePlayerTalentSkill.New()
	talentSkill:SetId(_talentSkillInfo.id)
	talentSkill:SetLevel(_talentSkillInfo.level)
	talentSkill:SetState(_talentSkillInfo.state)
	return talentSkill
end

-- 生成主动技能
---@param _activeSkillInfo table
---@return BattlePlayerActiveSkill
function BattleUnitCreator:CreateActiveSkill(_activeSkillInfo)
	---@type BattlePlayerActiveSkill
	local activeSkill = BattlePlayerActiveSkill.New()
    activeSkill:SetId(_activeSkillInfo.id)
    activeSkill:SetLevel(_activeSkillInfo.level)
    activeSkill:SetType(_activeSkillInfo.type)
    return activeSkill
end

-- 生成启示
---@param _revelationInfo table
---@return BattlePlayerRevelation
function BattleUnitCreator:CreateRevelation(_revelationInfo)
	---@type BattlePlayerRevelation
	local revelation = BattlePlayerRevelation.New()
    revelation:SetId(_revelationInfo.id)
    revelation:SetLeaderId(_revelationInfo.leaderId)
    revelation:SetExp(_revelationInfo.exp)
    revelation:SetLevel(_revelationInfo.level)
    revelation:SetBreachLevel(_revelationInfo.breachLevel)
    revelation:SetOnlyId(_revelationInfo.onlyId)
    revelation:SetLockStatus(_revelationInfo.lockStatus)
    revelation:SetGetTime(_revelationInfo.getTime)

    --local prop = BattleObjectProp:New();
    --for index, value in ipairs(_revelationInfo.calcPropModelInfo.attributeMap) do
    --    prop:AddNormalProp(value.key, value.value);
    --end
    --for index, value in ipairs(_revelationInfo.calcPropModelInfo.growMap) do
    --    prop:AddGrowProp(value.key, value.value);
    --end
    --prop:SetCapability(_revelationInfo.calcPropModelInfo.capability);
	--
    --for index, value in ipairs(_revelationInfo.SecondaryPropInfo.secondaryKeyList) do
    --    local targetValue = _revelationInfo.SecondaryPropInfo.secondaryValueList[value];
    --    prop:AddSecondaryProp(value, targetValue);
    --end
    --revelation:SetProp(prop);

    return revelation
end

return BattleUnitCreator

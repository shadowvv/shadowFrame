---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/11/11 16:30
--- Describe: 用于做一些transform信息相关的辅助计算
---

---@class BattleUnitDisRecordType : table
BattleUnitDisRecordType = {
	LogicDis = 1,       --逻辑距离
	CollisionDis = 2,   --碰撞距离
}

---按照圆锥计算的方位角
---不在任一圆锥范围内的时候视为NONE
---@class BattleUnitDotDirType : table
BattleUnitDotDirType = {
	None = 0,
	Forward = 1,
	Back = 2,
	Left = 3,
	Right = 4,
	Up = 5,
	Down = 6,
}

---@class BattleUnitTransUtil : table
BattleUnitTransUtil = class(nil, "BattleUnitTransUtil")
function BattleUnitTransUtil:ctor(_data) end

---@public
---@param _battleRoom BattleRoom
function BattleUnitTransUtil:Init(_battleRoom)
	---@private
	self.__battleRoom = _battleRoom
	---@private
	self.__battleUnitManager = _battleRoom.battleUnitManager
	
	---检查AI级别的间隔时长ms
	---@private
	self.__checkAiLevelStep = 1000
	---上次检查AI级别的时间ms
	---@private
	self.__lastAiLevelCheckTime = TimeUtils.battleNow(_battleRoom:GetBattleId())

	---单位间的向量记录
	---@private
	---@type Vector3[]
	self.__unitDirDic = {}
	---单位间的向量记录(local空间)
	---@private
	---@type Vector3[]
	self.__unitLocalDirDic = {}
	---圆锥方位角判断
	---@type BattleUnitDotDirType[]
	self.__unitDotDirDic = {}
	---单位间的距离记录(逻辑距离)
	---@private
	---@type number[]
	self.__unitDisDic = {}
	---单位间的距离记录（碰撞距离）
	---@private
	---@type number[]
	self.__unitCollisionDisDic = {}
	---单位朝向向量记录
	---@private
	---@type Vector3[]
	self.__unitForwardDic = {}
	-----dot值记录(x,y,z)
	-----private
	-----@type number[]
	--self.__unitDotDic = {}
	---角度值记录(x,y,z)
	---private
	---@type number[]
	self.__unitAngleDic = {}
	---角度值记录(x,y,z)
	---转化到90范围内
	---private
	---@type number[]
	self.__unitFormatedAngleDic = {}
end

------------------------------------------------------------------------------------------------------------------------
---重新计算Mons阵营的AI级别
---@private
function BattleUnitTransUtil:__ReCalcMonsCampAiLevel()
	---@type BattleUnitCom_Behav
	local _behavCom
	local _playerUnitList = self.__battleUnitManager:GetUnitListByUnitType(BattleUnitType.Player)
	local _monsCampUnitList = self.__battleUnitManager:GetUnitListByCampType(BattleUnitCampType.Monster)
	for _, _monsCampUnit in pairs(_monsCampUnitList) do
		_behavCom = _monsCampUnit:GetComponent(BattleUnitComponentType.Behav)
		if _behavCom and self:__CheckInAnyUnitFOV(_playerUnitList, _monsCampUnit) then
			--LogTools.LogByLevel(LogLevel.log, "BattleUnitTransUtil", "netId", _monsCampUnit:GetNetId(), "aiLevel", "BattleUnitAiLevel.Normal")
			_behavCom:SetAiLevel(BattleUnitAiLevel.Normal)
		elseif _behavCom then
			--LogTools.LogByLevel(LogLevel.log, "BattleUnitTransUtil", "netId", _monsCampUnit:GetNetId(), "aiLevel", "BattleUnitAiLevel.NoAtk")
			_behavCom:SetAiLevel(BattleUnitAiLevel.NoAtk)
		end
	end
end

---检查某个单位在指定单位列表的FOV中
---暂时FOV设定为180°
---@private
---@param _fovUnitList BattleUnitBase[] 提供视野的单位列表
---@param _targetUnit BattleUnitBase 被检查的单位
function BattleUnitTransUtil:__CheckInAnyUnitFOV(_fovUnitList, _targetUnit)

	local _v3FovUnitForward = self.__battleRoom.vector3Pool:Pop()
	local _v3FovToTargetDir = self.__battleRoom.vector3Pool:Pop()
	
	local _bRet = false
	for _, _fovUnit in pairs(_fovUnitList) do
		self:GetUnitForwardDir(_fovUnit:GetNetId(), _v3FovUnitForward)
		self:GetDirBetweenUnits(_fovUnit:GetNetId(), _targetUnit:GetNetId(), _v3FovToTargetDir)
		Vector3.Normalize(_v3FovUnitForward)
		Vector3.Normalize(_v3FovToTargetDir)
		if Vector3.Angle(_v3FovUnitForward, _v3FovToTargetDir) < 60 then
			_bRet = true
			break
		end
	end
	
	self.__battleRoom.vector3Pool:Push(_v3FovUnitForward)
	self.__battleRoom.vector3Pool:Push(_v3FovToTargetDir)
	
	return _bRet
end

------------------------------------------------------------------------------------------------------------------------
---获取两个单位间的向量
---@public
---@param _fromUnitNetId number 向量出发点的单位的netId
---@param _targetUnitNetId number 向量指向点的单位的netId
---@param _v3Receiver Vector3 用于接收结果的Vector3
---@return boolean 是否成功获得（单位不存在或单位没有ActionManager等特殊情况会失败）
function BattleUnitTransUtil:GetDirBetweenUnits(_fromUnitNetId, _targetUnitNetId, _v3Receiver)
	if not _fromUnitNetId or not _targetUnitNetId then return false end
	
	local _sKeyFT = _fromUnitNetId .."_" .._targetUnitNetId
	local _veRet = self.__unitDirDic[_sKeyFT]
	if not _veRet then
		if not self:__ReCalcUnitTransInfo(_fromUnitNetId, _targetUnitNetId) then
			return false
		end
		_veRet = self.__unitDirDic[_sKeyFT]
	end
	Vector3.Copy(_v3Receiver, _veRet)
	return true
end

---获取两个单位间的向量(local空间)
---@public
---@param _fromUnitNetId number 向量出发点的单位的netId
---@param _targetUnitNetId number 向量指向点的单位的netId
---@param _v3Receiver Vector3 用于接收结果的Vector3
---@return boolean 是否成功获得（单位不存在或单位没有ActionManager等特殊情况会失败）
function BattleUnitTransUtil:GetLocalDirBetweenUnits(_fromUnitNetId, _targetUnitNetId, _v3Receiver)
	local _sKeyFT = _fromUnitNetId .."_" .._targetUnitNetId
	local _veRet = self.__unitLocalDirDic[_sKeyFT]
	if not _veRet then
		if not self:__ReCalcUnitTransInfo(_fromUnitNetId, _targetUnitNetId) then
			return false
		end
		_veRet = self.__unitLocalDirDic[_sKeyFT]
	end
	Vector3.Copy(_v3Receiver, _veRet)
	return true
end

---获取两个单位间的距离（平方值）
---@public
---@param _fromUnitNetId number 向量出发点的单位的netId
---@param _targetUnitNetId number 向量指向点的单位的netId
---@param _disRecordType BattleUnitDisRecordType 采用哪种距离记录
---@return number 距离
function BattleUnitTransUtil:GetDisBetweenUnits(_fromUnitNetId, _targetUnitNetId, _disRecordType)
	if not _fromUnitNetId or not _targetUnitNetId then return nil end
	
	local _sKeyFT = _fromUnitNetId .."_" .._targetUnitNetId
	local _unitRecordDic = _disRecordType == BattleUnitDisRecordType.LogicDis and self.__unitDisDic or self.__unitCollisionDisDic
	
	local _fRet = _unitRecordDic[_sKeyFT]
	if not _fRet then
		if not self:__ReCalcUnitTransInfo(_fromUnitNetId, _targetUnitNetId) then
			return nil
		end
		_fRet = _unitRecordDic[_sKeyFT]
	end
	return _fRet
end

---获取两个单位间的（x,y）dot值
---@public
---@param _fromUnitNetId number 向量出发点的单位的netId
---@param _targetUnitNetId number 向量指向点的单位的netId
---@return number[] dot值记录
--function BattleUnitTransUtil:GetDotBetweenUnits(_fromUnitNetId, _targetUnitNetId)
--	local _sKeyFT = _fromUnitNetId .."_" .._targetUnitNetId
--	
--	local _fRet = self.__unitDotDic[_sKeyFT]
--	if not _fRet then
--		if not self:__ReCalcUnitTransInfo(_fromUnitNetId, _targetUnitNetId) then
--			return nil
--		end
--		_fRet = self.__unitDotDic[_sKeyFT]
--	end
--	return _fRet
--end

---获取两个单位间的（x,y）角度值
---@public
---@param _fromUnitNetId number 向量出发点的单位的netId
---@param _targetUnitNetId number 向量指向点的单位的netId
---@param _format boolean 是否将角度转化到90°范围内
---@return number[] dot值记录
function BattleUnitTransUtil:GetAngleBetweenUnits(_fromUnitNetId, _targetUnitNetId, _format)
	local _sKeyFT = _fromUnitNetId .."_" .._targetUnitNetId
	
	local _angleRecordDic = _format and self.__unitFormatedAngleDic or self.__unitAngleDic
	
	local _fRet = _angleRecordDic[_sKeyFT]
	if not _fRet then
		if not self:__ReCalcUnitTransInfo(_fromUnitNetId, _targetUnitNetId) then
			return nil
		end
		_fRet = _angleRecordDic[_sKeyFT]
	end
	return _fRet
end

---@private
function BattleUnitTransUtil:__ReCalcUnitTransInfo(_fromUnitNetId, _targetUnitNetId)
	local _sKeyFT = _fromUnitNetId .."_" .._targetUnitNetId
	local _sKeyTF = _targetUnitNetId .."_" .._fromUnitNetId
	
	local _fromUnit = self.__battleUnitManager:GetUnit(_fromUnitNetId, true)
	local _targetUnit = self.__battleUnitManager:GetUnit(_targetUnitNetId, true)
	if not _fromUnit or not _targetUnit then return false end
	
	local _fromActionManager = _fromUnit:GetActionManager()
	local _targetActionManager = _targetUnit:GetActionManager()
	if not _fromActionManager or not _targetActionManager then return false end
	
	local _v3FromPos = _fromActionManager:GetPosition()
	local _v3TargetPos = _targetActionManager:GetPosition()
	local _v3DirFT = self.__battleRoom.vector3Pool:Pop()
	local _v3DirTF = self.__battleRoom.vector3Pool:Pop()
	Vector3.Sub(_v3TargetPos, _v3FromPos, _v3DirFT)
	Vector3.Sub(_v3FromPos, _v3TargetPos, _v3DirTF)
	
	---方向记录
	self.__unitDirDic[_sKeyFT] = _v3DirFT
	self.__unitDirDic[_sKeyTF] = _v3DirTF
	
	local _v3LocalDirFT = self.__battleRoom.vector3Pool:Pop()
	local _v3LocalDirTF = self.__battleRoom.vector3Pool:Pop()
	local _inversQuan = self.__battleRoom.quaternionPool:Pop()
	Quaternion.Inverse(_fromActionManager:GetRotation(), _inversQuan)
	Vector3.MulQuat(_v3DirFT, _inversQuan, _v3LocalDirFT)
	Quaternion.Inverse(_targetActionManager:GetRotation(), _inversQuan)
	Vector3.MulQuat(_v3DirTF, _inversQuan, _v3LocalDirTF)
	self.__battleRoom.quaternionPool:Push(_inversQuan)
	
	---方向记录（local空间）
	self.__unitLocalDirDic[_sKeyFT] = _v3LocalDirFT
	self.__unitLocalDirDic[_sKeyTF] = _v3LocalDirTF
	
	---dot值记录
	local _xozFT = self.__battleRoom.vector3Pool:Pop()
	local _xozTF = self.__battleRoom.vector3Pool:Pop()
	local _yozFT = self.__battleRoom.vector3Pool:Pop()
	local _yozTF = self.__battleRoom.vector3Pool:Pop()
	Vector3.ProjectOnPlane(_v3LocalDirFT, Vector3.up_global(), _xozFT)
	Vector3.SetNormalize(_xozFT)
	Vector3.ProjectOnPlane(_v3LocalDirFT, Vector3.right_global(), _yozFT)
	Vector3.SetNormalize(_yozFT)
	Vector3.ProjectOnPlane(_v3LocalDirTF, Vector3.up_global(), _xozTF)
	Vector3.SetNormalize(_xozTF)
	Vector3.ProjectOnPlane(_v3LocalDirTF, Vector3.right_global(), _yozTF)
	Vector3.SetNormalize(_yozTF)

	self.__unitAngleDic[_sKeyFT] = self.__battleRoom.tableUtil:Pop()
	self.__unitAngleDic[_sKeyTF] = self.__battleRoom.tableUtil:Pop()
	self.__unitFormatedAngleDic[_sKeyFT] = self.__battleRoom.tableUtil:Pop()
	self.__unitFormatedAngleDic[_sKeyTF] = self.__battleRoom.tableUtil:Pop()
	local _angle = Vector3.Angle(Vector3.forward_global(), _xozFT)
	local _formatedAngle = _angle > 90 and 180 - _angle or _angle
	table.insert(self.__unitAngleDic[_sKeyFT], _angle)
	table.insert(self.__unitFormatedAngleDic[_sKeyFT], _formatedAngle)
	_angle = Vector3.Angle(Vector3.forward_global(), _xozTF)
	_formatedAngle = _angle > 90 and 180 - _angle or _angle
	table.insert(self.__unitAngleDic[_sKeyTF], _angle)
	table.insert(self.__unitFormatedAngleDic[_sKeyTF], _formatedAngle)
	_angle = Vector3.Angle(Vector3.forward_global(), _yozFT)
	_formatedAngle = _angle > 90 and 180 - _angle or _angle
	table.insert(self.__unitAngleDic[_sKeyFT], _angle)
	table.insert(self.__unitFormatedAngleDic[_sKeyFT], _formatedAngle)
	_angle = Vector3.Angle(Vector3.forward_global(), _yozTF)
	_formatedAngle = _angle > 90 and 180 - _angle or _angle
	table.insert(self.__unitAngleDic[_sKeyTF], _angle)
	table.insert(self.__unitFormatedAngleDic[_sKeyTF], _formatedAngle)
	
	self.__battleRoom.vector3Pool:Push(_xozFT)
	self.__battleRoom.vector3Pool:Push(_yozFT)
	self.__battleRoom.vector3Pool:Push(_xozTF)
	self.__battleRoom.vector3Pool:Push(_yozTF)
	
	---逻辑距离记录
	local _fSqrDis = Vector3.SqrMagnitude(_v3DirFT)
	self.__unitDisDic[_sKeyFT] = _fSqrDis
	self.__unitDisDic[_sKeyTF] = _fSqrDis
	
	---碰撞距离记录
	local _fromRadius = _fromUnit:GetCollisionRadius()
	local _targetRadius = _targetUnit:GetCollisionRadius()
	local _v3FromEdge = self.__battleRoom.vector3Pool:Pop()
	local _v3RadiusDir = self.__battleRoom.vector3Pool:Pop(_v3DirFT)
	Vector3.SetNormalize(_v3RadiusDir)
	Vector3.MulNumber(_v3RadiusDir, _fromRadius, _v3RadiusDir)
	Vector3.Add(_v3FromPos, _v3RadiusDir, _v3FromEdge)
	local _v3TargetEdge = self.__battleRoom.vector3Pool:Pop()
	Vector3.Copy(_v3RadiusDir, _v3DirTF)
	Vector3.SetNormalize(_v3RadiusDir)
	Vector3.MulNumber(_v3RadiusDir, _targetRadius, _v3RadiusDir)
	Vector3.Add(_v3TargetPos, _v3RadiusDir, _v3TargetEdge)
	Vector3.Sub(_v3TargetEdge, _v3FromEdge, _v3RadiusDir)
	local _collisionDis = Vector3.SqrMagnitude(_v3RadiusDir)
	self.__battleRoom.vector3Pool:Push(_v3FromEdge)
	self.__battleRoom.vector3Pool:Push(_v3TargetEdge)
	self.__battleRoom.vector3Pool:Push(_v3RadiusDir)
	self.__unitCollisionDisDic[_sKeyFT] = _collisionDis
	self.__unitCollisionDisDic[_sKeyTF] = _collisionDis
	
	return true
end

---@private
function BattleUnitTransUtil:__ResetUnitTransInfos()
	TableUtil.ClearTable(self.__unitDisDic)
	TableUtil.ClearTable(self.__unitCollisionDisDic)
	for _key, _v3Dir in pairs(self.__unitDirDic) do
		self.__battleRoom.vector3Pool:Push(_v3Dir)
		self.__unitDirDic[_key] = nil
	end
	for _key, _v3Dir in pairs(self.__unitLocalDirDic) do
		self.__battleRoom.vector3Pool:Push(_v3Dir)
		self.__unitLocalDirDic[_key] = nil
	end
	--for _key, _table in pairs(self.__unitDotDic) do
	--	self.__battleRoom.tableUtil:Push(_table)
	--	self.__unitDotDic[_key] = nil
	--end
	for _key, _table in pairs(self.__unitAngleDic) do
		self.__battleRoom.tableUtil:Push(_table)
		self.__unitAngleDic[_key] = nil
	end
	
	for _key, _table in pairs(self.__unitFormatedAngleDic) do
		self.__battleRoom.tableUtil:Push(_table)
		self.__unitFormatedAngleDic[_key] = nil
	end
end

------------------------------------------------------------------------------------------------------------------------
---获取单位朝向的世界空间表示
---@public
---@param _netId number
---@param _v3Receiver Vector3 用于接收结果的Vector3
---@return boolean
function BattleUnitTransUtil:GetUnitForwardDir(_netId, _v3Receiver)
	if not _netId then return false end
	
	local _v3Ret = self.__unitForwardDic[_netId]
	if not _v3Ret then
		if not self:__ReCalcUnitForward(_netId) then
			return false
		end
		_v3Ret = self.__unitForwardDic[_netId]
	end
	Vector3.Copy(_v3Receiver, _v3Ret)
	return true
end

---@private
function BattleUnitTransUtil:__ReCalcUnitForward(_netId)
	local _unit = self.__battleUnitManager:GetUnit(_netId, true)
	if not _unit then return false end
	local _actionManager = _unit:GetActionManager()
	if not _actionManager then return false end
	local _v3Ret = self.__battleRoom.vector3Pool:Pop()
	Vector3.MulQuat(Vector3.forward_global(), _actionManager:GetRotation(), _v3Ret)
	self.__unitForwardDic[_netId] = _v3Ret
	return true
end

---@private
function BattleUnitTransUtil:__ResetUnitForwards()
	for _netId, _v3Forward in pairs(self.__unitForwardDic) do
		self.__battleRoom.vector3Pool:Push(_v3Forward)
		self.__unitForwardDic[_netId] = nil
	end
end

------------------------------------------------------------------------------------------------------------------------
---@public
function BattleUnitTransUtil:OnUpdate(_deltaTime)
	--local _timeNow = TimeUtils.battleNow(self.__battleRoom:GetBattleId())
	--if _timeNow - self.__lastAiLevelCheckTime > self.__checkAiLevelStep then
	--	self:__ReCalcMonsCampAiLevel()
	--	self.__lastAiLevelCheckTime = _timeNow
	--end
	self:__ResetUnitTransInfos()
	self:__ResetUnitForwards()
end

------------------------------------------------------------------------------------------------------------------------

---检查点在obb内部
---@public
---@param _checkPos Vector3 要检查的点的世界坐标
---@param _obbPos Vector3 OBB中心点世界坐标
---@param _obbEuler Vector3 OBB欧拉
---@param _obbSize Vector3 OBB长宽高全长
function BattleUnitTransUtil:CheckPosInEulerObb(_checkPos, _obbPos, _obbEuler, _obbSize)
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtChannel", "BattleUnitTransUtil:CheckPosInEulerObb", "_checkPos", _checkPos, "_obbPos", dumpTableEx(_obbPos), "_obbEuler", dumpTableEx(_obbEuler), "_obbSize", dumpTableEx(_obbSize))
	local _qRot = self.__battleRoom.quaternionPool:Pop()
	Quaternion.FromEuler(_obbEuler, _qRot)
	
	local _v3PosInLocal = self.__battleRoom.vector3Pool:Pop()
	Vector3.Sub(_checkPos, _obbPos, _v3PosInLocal)
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtChannel", "BattleUnitTransUtil:CheckPosInEulerObb 1", "_v3PosInLocal", _v3PosInLocal)
	Vector3.MulQuat(_v3PosInLocal, _qRot, _v3PosInLocal)
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtChannel", "BattleUnitTransUtil:CheckPosInEulerObb 2", "_v3PosInLocal", _v3PosInLocal)
	
	local _v3HalfSize = self.__battleRoom.vector3Pool:Pop()
	Vector3.MulNumber(_obbSize, 0.5, _v3HalfSize)
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtChannel", "BattleUnitTransUtil:CheckPosInEulerObb 3", "_v3HalfSize", _v3HalfSize)
	
	local _out = _v3PosInLocal.x < -_v3HalfSize.x or _v3PosInLocal.x > _v3HalfSize.x or
				 _v3PosInLocal.y < -_v3HalfSize.y or _v3PosInLocal.y > _v3HalfSize.y or
				 _v3PosInLocal.z < -_v3HalfSize.z or _v3PosInLocal.z > _v3HalfSize.z
	
	self.__battleRoom.quaternionPool:Push(_qRot)
	self.__battleRoom.vector3Pool:Push(_v3PosInLocal)
	self.__battleRoom.vector3Pool:Push(_v3HalfSize)

	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "HurtChannel", "BattleUnitTransUtil:CheckPosInEulerObb 3", "_out", _out)
	return not _out
end

---检查圆锥方位角
---先做完  回头压测分支合了再优化吧
---@public
---@param _fromUnitNetId number
---@param _targetUnitNetId number
---@param _dotDirType BattleUnitDotDirType
---@return boolean
function BattleUnitTransUtil:CheckDotDir(_fromUnitNetId, _targetUnitNetId, _dotDirType)
	local _localDir = self.__battleRoom.vector3Pool:Pop()
	self:GetLocalDirBetweenUnits(_fromUnitNetId, _targetUnitNetId, _localDir)
	local _angle = self:GetAngleBetweenUnits(_fromUnitNetId, _targetUnitNetId, true)


	local _ret = false
	if _dotDirType == BattleUnitDotDirType.Forward then
		_ret = _localDir.z > 0 and _angle[1] <= 45 and _angle[2] <= 45
	elseif _dotDirType == BattleUnitDotDirType.Back then
		_ret = _localDir.z < 0 and _angle[1] <= 45 and _angle[2] <= 45
	elseif _dotDirType == BattleUnitDotDirType.Right then
		_ret = _localDir.x > 0 and _angle[1] >= 45 and _angle[2] <= 45
	elseif _dotDirType == BattleUnitDotDirType.Left then
		_ret = _localDir.x < 0 and _angle[1] >= 45 and _angle[2] <= 45
	elseif _dotDirType == BattleUnitDotDirType.Up then
		_ret = _localDir.y > 0 and _angle[1] <= 45 and _angle[2] >= 45
	elseif _dotDirType == BattleUnitDotDirType.Down then
		_ret = _localDir.y < 0 and _angle[1] <= 45 and _angle[2] >= 45
	end
	--LogTools.LogByLevel(LogLevel.logErr, "BattleUnitTransUtil:CheckDotDir", "_fromUnitNetId", _fromUnitNetId, "_targetUnitNetId", _targetUnitNetId, "_dotDirType", LogTools.GetEnumTableDesc(BattleUnitDotDirType, _dotDirType), "_localDir", _localDir, "_angle[1]", _angle[1], "_angle[2]", _angle[2], "_ret", _ret)
	self.__battleRoom.vector3Pool:Push(_localDir)

	return _ret
end


return BattleUnitTransUtil
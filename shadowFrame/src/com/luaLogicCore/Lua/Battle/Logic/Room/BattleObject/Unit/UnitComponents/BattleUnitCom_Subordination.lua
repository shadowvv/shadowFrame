---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/08/09 14:37
--- Describe: 从属关系管理
---


---@class BattleSubordinationDeadTrigType : table
BattleSubordinationDeadTrigType = {
	ChangeLeader = 0,
	UnitDead = 1
}

---@class BattleUnitCom_Subordination : BattleUnitComponentBase
BattleUnitCom_Subordination = class(BattleUnitComponentBase, "BattleUnitCom_Subordination")

---@public
function BattleUnitCom_Subordination:ctor()
	self:__ctor(BattleUnitComponentType.Subordination)
end

---@public
---@param _battleUnit BattleUnitBase
---@param _battleCreateUnitParam BattleCreateUnitParam
function BattleUnitCom_Subordination:Init(_battleUnit, _battleCreateUnitParam)
	self:__Init(_battleUnit)
	---自身所属的unit的netId
	---@private
	self.__subordinatedNetId = _battleCreateUnitParam.subordinatedNetId or -1
	---自身所属的obejct的objId
	---@private
	self.__subordinatedObjId = _battleCreateUnitParam.subordinatedObjId or -1
	-----所属unit的属性快照
	-----@private
	-----@type SnapShotData
	--self.__subordinatedSnapShotData = _battleCreateUnitParam.snapShotData
	---从属于自身的object的objID的字典
	---@private
	---@type number[][]
	self.__managedObjIdDic = {}
	---自身所管理的obj的类型计数
	---@private
	---@type number[]
	self.__managedObjTypeCnt = {}
end

------------------------------------------------------------------------------------------------------------------------
---@public
function BattleUnitCom_Subordination:GetSubordinatedNetId()
	return self.__subordinatedNetId
end

---@public
function BattleUnitCom_Subordination:GetSubordinatedObjId()
	return self.__subordinatedObjId
end

---@public
---@return BattleUnitBase
function BattleUnitCom_Subordination:GetSubordinatedUnit()
	if -1 == self.__subordinatedNetId then return nil end
	return self:GetBattleRoom().battleUnitManager:GetUnit(self.__subordinatedNetId)
end

---@public
---@return BattleObjectBase
function BattleUnitCom_Subordination:GetSubordinatedObject()
	if -1 == self.__subordinatedObjId then return nil end
	return self:GetBattleRoom().battleObjectManager:GetObject(self.__subordinatedObjId)
end

---@public
---@return SnapShotData
--function BattleUnitCom_Subordination:GetSubordinatedSnapShotData()
--	return self.__subordinatedSnapShotData
--end

---@public
---@return BattleUnitComponentBase
function BattleUnitCom_Subordination:GetSubordinatedUnitComponent(_battleUnitComponentType)
	local _unit = self:GetSubordinatedUnit()
	return _unit and _unit:GetComponent(_battleUnitComponentType)
end

---@public
---@return BattleObjectComponentBase
function BattleUnitCom_Subordination:GetSubordinatedObjComponent(_battleObjectComponentType)
	local _obj = self:GetSubordinatedObject()
	return _obj and _obj:GetComponent(_battleObjectComponentType)
end

---@public
---@return ActionStateManage
function BattleUnitCom_Subordination:GetSubordinatedActionManager()
	local _unit = self:GetSubordinatedUnit()
	return _unit and _unit:GetActionManager()
end
------------------------------------------------------------------------------------------------------------------------

---@public
function BattleUnitCom_Subordination:AddManagedObj(_dicId, _objId, _objType)
	local _key = _objType .."_" .._dicId
	local _list = self.__managedObjIdDic[_key] or {}
	table.insert(_list, _objId)
	self.__managedObjIdDic[_key] = _list
	local _cnt = self.__managedObjTypeCnt[_objType] or 0
	self.__managedObjTypeCnt[_objType] = _cnt + 1

	if _objType == BattleObjectType.Shield then
		---@type BattleUnitCom_Behav
		local _beahvCom = self:GetUnit():GetComponent(BattleUnitComponentType.Behav)
		if _beahvCom then
			local _param = {}
			_param.id = _dicId
			_param.isOpen = true
			self:GetBattleRoom().behaviorManager:PostTaskListenEvent(_beahvCom:GetTreeIndex(), LuaBehav_Define_TaskListenEnum.HasShield, _param)
		end
	end
end

---@public
function BattleUnitCom_Subordination:RemoveManagedObjByObjId(_dicId, _objId, _objType)
	--LogTools.LogByLevel(LogLevel.logErr, "BattleUnitCom_Subordination:RemoveManagedObjByObjId", "_dicId", _dicId, "_objId", _objId, "_objType", LogTools.GetEnumTableDesc(BattleObjectType,_objType))
	local _cnt = self.__managedObjTypeCnt[_objType]
	if not _cnt or 0 == _cnt then return end
	
	local _key = _objType .."_" .._dicId
	local _list = self.__managedObjIdDic[_key]
	if not _list then return end
	for i = 1, #_list do
		if _list[i] == _objId then
			table.remove(_list, i)
			self.__managedObjTypeCnt[_objType] = _cnt - 1
			break
		end
	end
	
	if _objType == BattleObjectType.Shield then
		---@type BattleUnitCom_Behav
		local _beahvCom = self:GetUnit():GetComponent(BattleUnitComponentType.Behav)
		if _beahvCom then
			local _param = {}
			_param.id = _dicId
			_param.isOpen = false
			self:GetBattleRoom().behaviorManager:PostTaskListenEvent(_beahvCom:GetTreeIndex(), LuaBehav_Define_TaskListenEnum.HasShield, _param)
		end
	end
end

---获取下属的指定类型且指定表ID的objIdList
---注意：这里返回的是objId的列表
---@public
function BattleUnitCom_Subordination:GetManagedObjList(_dicId, _objType)
	local _key = _objType .."_" .._dicId
	return self.__managedObjIdDic[_key] or {}
end

---获取下属的指定类型的objIdList
---注意：这里返回的是obj的列表
---@public
---@return BattleObjectBase[]
function BattleUnitCom_Subordination:GetManagedObjListByObjType(_objType)
	if self.__managedObjTypeCnt[_objType] == 0 then return {} end
	local _list = {}
	
	---@type BattleObjectBase
	local _obj
	for _, _objIdList in pairs(self.__managedObjIdDic) do
		for i = 1, #_objIdList do
			_obj = self:GetBattleRoom().battleObjectManager:GetObject(_objIdList[i])
			if _obj and _obj:CheckObjectType(_objType) then
				table.insert(_list, _obj)
			end
		end
	end
	
	return _list
end

---获取下属的某一个表ID的obj的数量
---@public
function BattleUnitCom_Subordination:GetManagedObjNum(_dicId, _objType)
	local _key = _objType .."_" .._dicId
	local _list = self.__managedObjIdDic[_key]
	if not _list then return 0 end
	return #_list
end

---获取下属的某一个指定类型的obj的数量
---@public
---@param _objType BattleObjectType 可以为空，表示不分类型
function BattleUnitCom_Subordination:GetManagedTypeObjNum(_objType)
	if _objType then
		return self.__managedObjTypeCnt[_objType] or 0
	else
		local _cnt = 0
		for _, _num in pairs(self.__managedObjTypeCnt) do
			_cnt = _cnt + _num
		end
		return _cnt
	end
end

---检查下属的某一个指定类型的obj存在
---@public
---@param _dicIdList number[]
---@param _objType BattleObjectType
---@param _checkType LuaBehav_Define_ConditionGroupCheckType
---@param _isExist boolean true表示检查存在，false表示检查不存在
---@return number
function BattleUnitCom_Subordination:CheckManagedObjExist(_dicIdList, _objType, _checkType, _isExist)
	if _checkType == LuaBehav_Define_ConditionGroupCheckType.Any then
		if _isExist then
			for _, _dicId in pairs(_dicIdList) do
				if self:GetManagedObjNum(_dicId, _objType) > 0 then
					return true
				end
			end
			return false
		else
			for _, _dicId in pairs(_dicIdList) do
				if self:GetManagedObjNum(_dicId, _objType) == 0 then
					return true
				end
			end
			return false
		end
	else
		if _isExist then
			for _, _dicId in pairs(_dicIdList) do
				if self:GetManagedObjNum(_dicId, _objType) == 0 then
					return false
				end
			end
			return true
		else
			for _, _dicId in pairs(_dicIdList) do
				if self:GetManagedObjNum(_dicId, _objType) > 0 then
					return false
				end
			end
			return true
		end
	end
end

---@public
---@param _trigType BattleSubordinationDeadTrigType
function BattleUnitCom_Subordination:SetAllManagedDead(_trigType, _deadType)
	local _list = {}
	local _objCnt = 0
	---@type BattleObjectBase
	local _obj
	---@type SummonedMonster
	local _summondXls
	local _checkType
	for _key, _objIdList in pairs(self.__managedObjIdDic) do
		_objCnt = #_objIdList
		for i = 1, _objCnt do
			_list[i] = _objIdList[i]
		end
		for i = _objCnt + 1, #_list do
			_list[i] = nil
		end
		--LogTools.LogByLevel(LogLevel.logErr, "_objCnt", _objCnt, "_list", dumpTableEx(_list))
		if _objCnt > 0 then
			_obj = self:GetBattleRoom().battleObjectManager:GetObject(_list[1])
			if _obj:CheckObjectType(BattleObjectType.SummonedMons) then  --召唤物需要读表检查要不要移除
				_summondXls = self:GetBattleRoom().inputDataSource:GetDict("SummonedMonster", _obj:GetDicId())
				_checkType = _summondXls.deathType --什么情况下会移除召唤物
				if _checkType == 2 or _checkType == _trigType then
					self:__SetManagedObjDead(_list, _key, _deadType, _objCnt)
				end
			elseif _trigType == BattleSubordinationDeadTrigType.UnitDead then  --其他类型的从属暂定都是死亡才移除
				self:__SetManagedObjDead(_list, _key, _deadType, _objCnt)
			end
		end
	end
end

---@private
function BattleUnitCom_Subordination:__SetManagedObjDead(_list, _key, _deadType, _objCnt)
	--LogTools.LogByLevel(LogLevel.logErr, "BattleUnitCom_Subordination:__SetManagedObjDead", "start", "_list", dumpTableEx(_list), "_key", _key, "_deadType", _deadType, "_objCnt", _objCnt)
	local _objType
	local _battleObjectManager = self:GetBattleRoom().battleObjectManager
	local _battleUnitManager = self:GetBattleRoom().battleUnitManager
	---@type BattleObjectBase
	local _obj
	---@type BattleObjCom_LifeCtrl
	local _lifeCom
	for _, _objId in pairs(_list) do
		if _objId then
			_obj = _battleObjectManager:GetObject(_objId)
			if not _objType then _objType = _obj:GetObjectType() end
			_lifeCom = _obj:GetComponent(BattleObjectComponentType.LifeCtrl)
			if _lifeCom then
				--LogTools.LogByLevel(LogLevel.logErr, "BattleUnitCom_Subordination:__SetManagedObjDead", "1")
				_lifeCom:SetUnloaded(true)
			else
				--LogTools.LogByLevel(LogLevel.logErr, "BattleUnitCom_Subordination:__SetManagedObjDead", "2")
				_battleUnitManager:OnBattleObjectDead(_obj:GetParentUnit():GetNetId(), _obj:GetObjectId(), _deadType or LuaBehav_Define_DeadType.DeadSilence)
			end
		end
	end
	
	self.__managedObjIdDic[_key] = nil
	--LogTools.LogByLevel(LogLevel.logErr, "BattleUnitCom_Subordination:__SetManagedObjDead", "_objType", _objType, "_objCnt", _objCnt, "self.__managedObjTypeCnt", dumpTableEx(self.__managedObjTypeCnt))
	if _objType then
		self.__managedObjTypeCnt[_objType] = self.__managedObjTypeCnt[_objType] - _objCnt
	end
end
------------------------------------------------------------------------------------------------------------------------

---@public
function BattleUnitCom_Subordination:OnDead(_deadType)
	---这里只是通知自己下属的单位死亡，清掉了下属的记录，但还保留着向上的索引
	self:SetAllManagedDead(BattleSubordinationDeadTrigType.UnitDead, _deadType)
end

---@public
function BattleUnitCom_Subordination:Clear()
	self.__subordinatedNetId = nil
	self.__subordinatedObjId = nil
	--self.__subordinatedSnapShotData = nil
	self.__managedObjIdDic = nil
	self:__Clear()
end
return BattleUnitCom_Subordination
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hejincheng
--- DateTime: 2022/03/02 14:36
--- Describe: 用于元素的组件
---
---2023-5-25 新版本：https://accessgames.feishu.cn/wiki/LqecwwoqmiI1KLk3RElcxAObnjg?sheet=DeK3x9&range=RDM
---新版本去掉元素反应，改为元素积累，积累满触发一个元素效果

require "Battle/Logic/Constants/BattleElementConst"
require "Battle/Logic/Room/BattleObject/BattleElement/BattleObjCom_Element_StageManager"
require "Battle/Logic/Room/BattleObject/BattleElement/ElementStage_Define"

---@class BattleObjCom_Element_V2 : BattleObjectComponentBase
BattleObjCom_Element_V2 = class(BattleObjectComponentBase, "BattleObjCom_Element_V2")

function BattleObjCom_Element_V2:ctor()
    self:__ctor(BattleObjectComponentType.Element)
end

---@public
---@param _battleObject BattleObjectBase
function BattleObjCom_Element_V2:Init(_battleObject)
    self:__Init(_battleObject)

    self.battleRoom = _battleObject:GetBattleRoom()
    ---@type boolean 是否驱动元素
    self.driveElement = false
    if IsServer() or self.battleRoom.indieGame then
        self.driveElement = true
    end

    ---@type number 触发元素效果id，其他元素不能进行任何操作
    self.effectingElementId = 0
    ---@type number 修改元素击破时间计时
    self.updateEffectingTimeCounter = 0

    ---@type table<number,number> 元素id当前值table
    self.elementIdValueDic = {}
    ---@type table<number,ElementStackEffect> 元素id，表数据
    self.elementIdEffectTableDic = {}
    ---@type table<number,ElementalInfo> 元素id，表数据
    self.elementIdInfoTableDic = {}
    ---@type table<number,BattleObjCom_Element_StageManager> 元素阶段管理 dict <元素id，阶段管理器>
    self.elementIdStageManagerDic = {}
    ---@type table<number,number> 最大属性值id, 元素id
    self.maxValuePropIdElementIdDic = {}
    self.__behavEleBreakParam = {}

    ---@type BattleDefault
    local battleDefaultElementMax = self.battleRoom.inputDataSource:GetDict("BattleDefault", BATTLE_ELEMENT_CONST.ELEMENT_MAX_ID)
    self.initElementMax = 0
    if battleDefaultElementMax then
        self.initElementMax = battleDefaultElementMax.value
    end

    ---@type BattleObjCom_Property
    self.propCom = _battleObject:GetComponent(BattleObjectComponentType.Property)

    for _, _battleElementType in pairs(GetBattleElementTypes()) do
        local _elementId = _battleElementType:GetId()
        -- 每个元素的表数据缓存
        local _elementStackEffect = self.battleRoom.inputDataSource:GetDict("ElementStackEffect", _elementId)
        if _elementStackEffect then
            -- 仅配置了表的元素支持元素积累
            self.elementIdEffectTableDic[_elementId] = _elementStackEffect
            -- 初始当前元素量
            self:__UpdateElementIdCurrentValue(_elementId, 0)
            -- 每个元素的表数据缓存
            self.elementIdInfoTableDic[_elementId] = self.battleRoom.inputDataSource:GetDict("ElementalInfo", _elementId)
            -- 每个元素量单独一个阶段管理器
            ---@type BattleObjCom_Element_StageManager
            local elementStageManager = BattleObjCom_Element_StageManager.New()
            elementStageManager:Init(self, _battleObject, _battleElementType)
            self.elementIdStageManagerDic[_elementId] = elementStageManager
            -- 最大属性id对应的元素id
            local maxValuePropId = ProtoEnumTool.GetPropertyId(_battleElementType:GetMaxValueReduceName())
            self.maxValuePropIdElementIdDic[maxValuePropId] = _elementId
        end
    end
    -- 重置元素击破
    self:__ResetEffectingElement()
end

-- 锁定元素id，其他元素不能进行任何操作
---@protected
---@param _elementId number
function BattleObjCom_Element_V2:__SetElementEffecting(_elementId)
    self.effectingElementId = _elementId
end

-- 解除锁定元素id
---@protected
function BattleObjCom_Element_V2:__ResetEffectingElement()
    self.effectingElementId = 0
    self.updateEffectingTimeCounter = 0
end

-- 元素是否可用
---@protected
---@param _elementId number
function BattleObjCom_Element_V2:__IsElementEnabled(_elementId)
    if not self.effectingElementId or self.effectingElementId == 0 then
        return true
    end
    return _elementId == self.effectingElementId
end

-- 获取元素阶段管理器
---@protected
---@param _elementId number
function BattleObjCom_Element_V2:__GetStageManager(_elementId)
    return self.elementIdStageManagerDic[_elementId]
end

-- 检测元素效果是否可以触发
---@protected
---@param _elementId number 元素id
---@return boolean 检测元素效果是否可以触发
function BattleObjCom_Element_V2:__CheckElementEffect(_elementId)
    return true
end

-- 元素效果
---@protected
---@param _elementId number 元素id
---@param _hurtParam any 伤害参数
---@param _originalHurt number 原始伤害
---@param _castUnit BattleUnitBase 攻击者
---@param _castObject BattleObjectBase 攻击者
---@param _bodyPartId number 部位
---@param _originCastSkillId number 初始来源技能ID
function BattleObjCom_Element_V2:__ElementEffect(_elementId, _hurtParam, _originalHurt, _castUnit, _castObject, _bodyPartId, _originCastSkillId)
    local _elementStackEffect = self:GetElementStackEffectTable(_elementId)
    if not _elementStackEffect then
        return
    end
    -- 元素效果触发加buff
    ---@type BattleObjCom_Buff
    local targetComBuff = self:GetObject():GetComponent(BattleObjectComponentType.Buff)
    if targetComBuff then
        -- 1.主buff效果
        ---@type number[]
        local _mainEffectBuff = _elementStackEffect.mainEffectBuff
        if _mainEffectBuff and #_mainEffectBuff > 0 then
            self:__AddEffectBuffs(_elementId, targetComBuff, _castObject, _mainEffectBuff, _originCastSkillId, _hurtParam, _originalHurt, _bodyPartId)
        end
        -- 2.次buff效果
        ---@type number[]
        local _minorEffectBuff = _elementStackEffect.minorEffectBuff
        if _minorEffectBuff and #_minorEffectBuff > 0 then
            self:__AddEffectBuffs(_elementId, targetComBuff, _castObject, _minorEffectBuff, _originCastSkillId, _hurtParam, _originalHurt, _bodyPartId)
        end
        -- 3.弱点buff效果
        ---@type BattleUnit_Monster
        local targetUnit = self:GetObject():GetParentUnit()
        if targetUnit:CheckUnitType(BattleUnitType.Monster, false) then
            ---元素弱点BUFF
            ---@type BattleObjCom_Property
            local _propCom = targetUnit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Property)
            local _weaknessElementType = _propCom:GetEleWeakTypeList()
            if _weaknessElementType and #_weaknessElementType > 0 then
                for _, _weakElementId in pairs(_weaknessElementType) do
                    if _weakElementId == _elementId then
                        self:__AddEffectBuffs(_elementId, targetComBuff, _castObject, _elementStackEffect.weaknessEffectBuff, _originCastSkillId, _hurtParam, _originalHurt, _bodyPartId)
                        break
                    end
                end
            end
        end
    end
    -- 给释放者加buff
    ---@type number[]
    local _casterEffectBuff = _elementStackEffect.casterEffectBuff
    if _casterEffectBuff and #_casterEffectBuff > 0 then
        for _, _object in pairs(_castUnit:GetAllObjectDic()) do
            ---@type BattleObjCom_Buff
            local sourceComBuff = _object:GetComponent(BattleObjectComponentType.Buff)
            if sourceComBuff then
                -- 释放者buff
                self:__AddEffectBuffs(_elementId, sourceComBuff, _castObject, _casterEffectBuff, _originCastSkillId, _hurtParam, _originalHurt, _bodyPartId)
            end
        end
    end
    self:__OnElementEffect(_castUnit:GetNetId(), _castObject:GetObjectId(), _elementId)

    if LogTools.ElementLog and CheckLogLevel(LogLevel.log) then
        local _castObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(_castObject:GetParentUnit():GetUnitType()) .. "][" .. _castObject:GetParentUnit():GetNetId() .. "][" .. tostring(_castObject:GetDicId()) .. "]"
        local _targetObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(self:GetObject():GetParentUnit():GetUnitType()) .. "][" .. self:GetObject():GetParentUnit():GetNetId() .. "][" .. tostring(self:GetObject():GetDicId()) .. "]"

        local _mainBuffInstanceTable = {}
        for _, _buffGroupId in pairs(_elementStackEffect.mainEffectBuff) do
            ---@type BuffGroup
            local _buffGroup = self.battleRoom.inputDataSource:GetDict("BuffGroup", _buffGroupId)
            table.insert(_mainBuffInstanceTable, _buffGroup.buffInstanceId)
        end
        local _minorBuffInstanceTable = {}
        for _, _buffGroupId in pairs(_elementStackEffect.minorEffectBuff) do
            ---@type BuffGroup
            local _buffGroup = self.battleRoom.inputDataSource:GetDict("BuffGroup", _buffGroupId)
            table.insert(_minorBuffInstanceTable, _buffGroup.buffInstanceId)
        end
        local _weaknessBuffInstanceTable = {}
        for _, _buffGroupId in pairs(_elementStackEffect.weaknessEffectBuff) do
            ---@type BuffGroup
            local _buffGroup = self.battleRoom.inputDataSource:GetDict("BuffGroup", _buffGroupId)
            table.insert(_weaknessBuffInstanceTable, _buffGroup.buffInstanceId)
        end
        local _casterBuffInstanceTable = {}
        for _, _buffGroupId in pairs(_elementStackEffect.casterEffectBuff) do
            ---@type BuffGroup
            local _buffGroup = self.battleRoom.inputDataSource:GetDict("BuffGroup", _buffGroupId)
            table.insert(_casterBuffInstanceTable, _buffGroup.buffInstanceId)
        end
        LogTools.LogByLevel(LogLevel.log, "元素", "元素效果[" .. GetBattleElementNameById(_elementId) .. "]", "释放者" .. _castObjectLog .. "触发目标" .. _targetObjectLog .. "元素效果",
                "主Buff", dumpTableEx(_elementStackEffect.mainEffectBuff), "主Buff实例", dumpTableEx(_mainBuffInstanceTable),
                "次Buff", dumpTableEx(_elementStackEffect.minorEffectBuff), "次Buff实例", dumpTableEx(_minorBuffInstanceTable),
                "弱点Buff", dumpTableEx(_elementStackEffect.weaknessEffectBuff), "弱点Buff实例", dumpTableEx(_weaknessBuffInstanceTable),
                "自身Buff", dumpTableEx(_elementStackEffect.casterEffectBuff), "自身Buff实例", dumpTableEx(_casterBuffInstanceTable)
        )
    end
end

-- 获取当前元素量
---@public
---@param _elementId number 元素id
---@param _comBuff BattleObjCom_Buff buff组件
---@param _castObject BattleObjectBase buff释放者
---@param _effectBuffs number[] 效果buff
---@param _originCastSkillId number 释放技能id
---@param _hurtParam any 伤害参数
---@param _originalHurt number 原始伤害
---@param _bodyPartId number 部位
function BattleObjCom_Element_V2:__AddEffectBuffs(_elementId, _comBuff, _castObject, _effectBuffs, _originCastSkillId, _hurtParam, _originalHurt, _bodyPartId)
    if not _comBuff then
        return
    end
    if not _effectBuffs or #_effectBuffs == 0 then
        return
    end

    local _generateStackInfo = { hurtParamFix = _hurtParam, specifiedEleBreakId = _elementId, originalHurt = _originalHurt, elementBallCount = 0, eleBallSpreadHurtFix = 1, isEleBreakTrig = true }
    for _, _buffGroupId in pairs(_effectBuffs) do
        local battleBuff = BattleBuffService:GenerateCastBuffTemplate(_buffGroupId, _castObject, _originCastSkillId, nil)
        battleBuff.bodyPartId = _bodyPartId
        battleBuff.generateStackInfo = _generateStackInfo
        _comBuff:AddBattleBuff(battleBuff)
    end
end

-- 更改当前元素量
---@protected
---@param _elementId number 元素id
---@param _elementValue number 元素值
function BattleObjCom_Element_V2:__UpdateElementIdCurrentValue(_elementId, _elementValue)
    if not _elementId then
        return
    end
    self.elementIdValueDic[_elementId] = _elementValue or 0
end

-- 清空元素值
---@protected
---@param _elementId number 元素id
---@param _changeType string 改变原因
function BattleObjCom_Element_V2:__ClearElementValue(_elementId, _changeType)
    local curElementValue = self:GetElementCurrentValue(_elementId)
    if not curElementValue then
        curElementValue = 0
    end

    local oldValue = curElementValue
    local maxValue = self:GetElementMaxValue(_elementId)
    self:__OnElementChange(_elementId, 0, oldValue, maxValue, _changeType)
    self:__OnElementRemove(_elementId, ELEMENT_CHANGE_TYPE.Clear)
    self:__UpdateElementIdCurrentValue(0, 0)
end

-- 元素添加
---@protected
---@param _element BattleElementType 元素类型
---@param _elementValue number 元素值
---@param _castUnit BattleUnitBase 攻击者
---@param _castObject BattleObjectBase 攻击者
---@param _elementSource ElementSource 元素附着来源类型
---@param _elementSourceId number 元素附着来源id
function BattleObjCom_Element_V2:__AddElement(_element, _elementValue, _castUnit, _castObject, _elementSource, _elementSourceId)
    ---@type number
    local _elementId = _element:GetId()
    local _originChangeValue = _elementValue

    -- 元素衰减计算
    local _stageManager = self:__GetElementStageManager(_elementId)
    if not _stageManager then
        return
    end
    local curElementStage = _stageManager.curStage
    curElementStage:ElementReduction()

    -- 改变值
    local _changeRatio = 1
    if curElementStage then
        _changeRatio = curElementStage:GetAddElementRatio() or 1
        -- 元素积累压缩系数
        _elementValue = _elementValue * _changeRatio
    end

    ---@type BattleObjCom_Property
    local _castPropCom = _castObject:GetComponent(BattleObjectComponentType.Property)
    -- 元素积累加成
    local _addAccValue = 0
    -- 元素积累效率
    _addAccValue = _addAccValue + _castPropCom:GetPropertyByName(_element:GetAccElementAdd())
    -- 全元素积累效率
    _addAccValue = _addAccValue + _castPropCom:GetPropertyByName(BattlePropertyEnum.ElementAccSpdAdd_All)
    _elementValue = _elementValue * (1 + _addAccValue)
    -- 元素来源积累加成
    if _elementSource then
        _elementValue = _elementSource:AddElementAccValue(_castObject, self.__object, _elementId, _elementValue, _elementSourceId) or 0
    end

    local _changeType = ELEMENT_CHANGE_TYPE.Add

    -- 元素添加Log
    if LogTools.ElementLog and CheckLogLevel(LogLevel.log) then
        if not _castUnit then
            _castUnit = self:GetObject():GetParentUnit()
        end
        local _castObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(_castUnit:GetUnitType()) .. "][" .. _castUnit:GetNetId() .. "][" .. tostring(_castUnit:GetCurrentHeroObject():GetDicId()) .. "]"
        local _targetObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(self:GetObject():GetParentUnit():GetUnitType()) .. "][" .. self:GetObject():GetParentUnit():GetNetId() .. "][" .. tostring(self:GetObject():GetDicId()) .. "]"

        -- 改变值
        LogTools.LogByLevel(LogLevel.log, "元素", _changeType, "释放者" .. _castObjectLog .. "添加目标" .. _targetObjectLog, GetBattleElementNameById(_elementId) .. ":" .. tostring(_elementValue),
                "原始积累值", _originChangeValue, "元素积累压缩系数", _changeRatio, "元素积累属性加成", _addAccValue, "当前时间[" .. tostring(TimeUtils.battleNow(self.battleId)) .. "]")
    end

    -- 更改元素量
    local result = self:ChangeElementValue(_elementId, _elementValue, true, true, _changeType)
    -- 元素添加
    self:__OnElementAdd(_elementId, _elementValue, _castUnit:GetNetId(), _castObject:GetObjectId())
    return result
end

-- 获取最大元素量
---@public
---@param _elementId number 元素id
---@param _maxPropValue number 最大属性值
---@return number 最大元素值
function BattleObjCom_Element_V2:__GetElementMaxValueByMaxProp(_elementId, _maxPropValue)
    local _maxValueReduce = _maxPropValue or 0
    return self.initElementMax * (1 + _maxValueReduce)
end

------------------------------------------------------------------------------------------------------------------------
-- 元素效果
---@protected
---@param _attackerNetId number 攻击者netId
---@param _attackerObjectId number 攻击者objectId
---@param  _elementId number 元素反应id
function BattleObjCom_Element_V2:__OnElementEffect(_attackerNetId, _attackerObjectId, _elementId)
    -- 锁定元素id
    self:__SetElementEffecting(_elementId)
    
    ---@type BattleUnitCom_Behav
    local _behavCom = self:GetObject():GetParentUnit():GetComponent(BattleUnitComponentType.Behav)
    if _behavCom then
        local _behavIndex = _behavCom:GetTreeIndex()
        if _behavIndex then
            self.__behavEleBreakParam.levelUnitId = self:GetObject():GetParentUnit():GetLevelUnitId()
            self.__behavEleBreakParam.elementId = _elementId
            self.__behavEleBreakParam.isEnter = true
            self.battleRoom.behaviorManager:PostTaskListenEvent(_behavIndex, LuaBehav_Define_TaskListenEnum.EleBreak, self.__behavEleBreakParam)
        end
    end
    
    -- 其他元素归零
    for _elementId, _ in pairs(self.elementIdValueDic) do
        if _elementId ~= _elementId then
            -- 发生元素积累效果,立即清空其他元素
            self:__ClearElementValue(_elementId, ELEMENT_CHANGE_TYPE.Effect)
        end
    end
    -- 元素阶段事件
    self:__GetElementStageManager(_elementId):OnElementEffect()

    ---@type BattleUnitBase
    local _unit = self:GetObject():GetParentUnit()
    -- 元素反应事件
    self.battleRoom.battleLogicEventService:OnTriggerElementEffectEvent(_attackerNetId, _attackerObjectId, _unit:GetNetId(), self:GetObject():GetObjectId(), _elementId);

    local changeData = {
        elementEffect = {
            elementId = _elementId
        }
    }
    -- 输出数据
    local outputData = {
        netId = _unit:GetNetId(),
        objId = self:GetObject():GetObjectId(),
        elementChange = changeData
    }
    self.battleRoom.outputDataSource:AddBattleUnitKeyData(outputData)
end

-- 元素移除
---@protected
---@param _elementId number 元素id
---@param _changeType string 原因
function BattleObjCom_Element_V2:__OnElementRemove(_elementId, _changeType)
    if LogTools.ElementLog and CheckLogLevel(LogLevel.log) then
        local _targetObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(self:GetObject():GetParentUnit():GetUnitType()) .. "][" .. self:GetObject():GetParentUnit():GetNetId() .. "][" .. tostring(self:GetObject():GetDicId()) .. "]"
        LogTools.LogByLevel(LogLevel.log, "元素", "元素移除[" .. _changeType .. "]", "目标[" .. _targetObjectLog, GetBattleElementNameById(_elementId) .. ":0", "当前时间[" .. tostring(TimeUtils.battleNow(self.battleId)) .. "]")
    end
    if self:CheckElementEffecting(_elementId) then
        -- 锁定元素被移除，解锁元素锁定
        self:__ResetEffectingElement()
        
        ---@type BattleUnitCom_Behav
        local _behavCom = self:GetObject():GetParentUnit():GetComponent(BattleUnitComponentType.Behav)
        if _behavCom then
            local _behavIndex = _behavCom:GetTreeIndex()
            if _behavIndex then
                self.__behavEleBreakParam.levelUnitId = self:GetObject():GetParentUnit():GetLevelUnitId()
                self.__behavEleBreakParam.elementId = _elementId
                self.__behavEleBreakParam.isEnter = false
                self.battleRoom.behaviorManager:PostTaskListenEvent(_behavIndex, LuaBehav_Define_TaskListenEnum.EleBreak, self.__behavEleBreakParam)
            end
        end
        
        -- 移除自身主buff效果
        local _elementStackEffect = self:GetElementStackEffectTable(_elementId)
        ---@type BattleObjCom_Buff
        local _comBuff = self:GetObject():GetComponent(BattleObjectComponentType.Buff)
        if _comBuff and _elementStackEffect then
            for _, _buffGroupId in pairs(_elementStackEffect.mainEffectBuff) do
                _comBuff:RemoveBuffByGroupId(_buffGroupId)
            end
        end
    end
    -- 元素阶段事件
    self:__GetElementStageManager(_elementId):OnElementRemove()

    -- 元素移除事件
    self.battleRoom.battleLogicEventService:OnTriggerElementRemoveEvent(self:GetObject():GetParentUnit():GetNetId(), self:GetObject():GetObjectId(), _elementId);

    --local _unit = self:GetObject():GetParentUnit()
    --local changeData = {
    --    elementRemove = {
    --        elementId = _elementId
    --    }
    --}
    ---- 输出数据
    --local outputData = {
    --    netId = _unit:GetNetId(),
    --    objId = self:GetObject():GetObjectId(),
    --    elementChange = changeData
    --}
    --self.battleRoom.outputDataSource:AddBattleUnitKeyData(outputData)
end

-- 元素添加
---@protected
---@param _elementId number 元素id
---@param _changeValue number 元素值
---@param _attackerNetId number 攻击者netId
---@param _attackerObjectId number 攻击者objectId
function BattleObjCom_Element_V2:__OnElementAdd(_elementId, _changeValue, _attackerNetId, _attackerObjectId)
    -- 元素阶段附着事件
    self:__GetElementStageManager(_elementId):OnElementAdd(_attackerNetId, _attackerObjectId)
    -- 元素附着事件
    self.battleRoom.battleLogicEventService:OnTriggerElementAddEvent(_attackerNetId, _attackerObjectId, self:GetObject():GetParentUnit():GetNetId(), self:GetObject():GetObjectId(), _elementId, _changeValue);

    --if oldElementValue == 0 then
    --    local _unit = self:GetObject():GetParentUnit()
    --    local changeData = {
    --        elementAttach = {
    --            elementId = _elementId,
    --            curElementValue = _elementValue
    --        }
    --    }
    --    -- 输出数据
    --    local outputData = {
    --        netId = _unit:GetNetId(),
    --        objId = self:GetObject():GetObjectId(),
    --        elementChange = changeData
    --    }
    --    self.battleRoom.outputDataSource:AddBattleUnitKeyData(outputData)
    --end
end

-- 元素改变
---@protected
---@param _elementId number 元素id
---@param _newValue number 新值
---@param _oldValue number 旧值
---@param _maxValue number 最大值
---@param _changeType string 修改类型
function BattleObjCom_Element_V2:__OnElementChange(_elementId, _newValue, _oldValue, _maxValue, _changeType)
    if CheckLogLevel(LogLevel.log) and LogTools.ElementLog then
        if _changeType ~= ELEMENT_CHANGE_TYPE.Reduction or LogTools.ElementReductionLog then
            local _targetObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(self:GetObject():GetParentUnit():GetUnitType()) .. "][" .. self:GetObject():GetParentUnit():GetNetId() .. "][" .. tostring(self:GetObject():GetDicId()) .. "]"
            LogTools.LogByLevel(LogLevel.log, "元素", "元素值改变[" .. _changeType .. "]", "目标" .. _targetObjectLog, "帧时间(s)", self.battleRoom.dt, "变更值:" .. tostring(_newValue - _oldValue), GetBattleElementNameById(_elementId) .. ":" .. tostring(_oldValue) .. "->" .. tostring(_newValue) .. "(最大值" .. tostring(_maxValue) .. ")", "当前时间[" .. tostring(TimeUtils.battleNow(self.battleId)) .. "]")
        end
    end

    local showClientValue = Mathf.Min(_newValue, _maxValue)

    local _elementEffecting = self:CheckElementEffecting(_elementId)
    if not self.driveElement then
        -- 非驱动模式直接通知显示层元素值改变
        self:__ClientSendElementValueChangeToView(_elementId, showClientValue, _elementEffecting)
        return
    end

    -- 元素阶段事件
    self:__GetElementStageManager(_elementId):OnElementChange(_newValue, _oldValue)

    local _unit = self:GetObject():GetParentUnit()
    local changeData = {
        elementValueChange = {
            elementId = _elementId,
            elementValue = showClientValue,
            effecting = _elementEffecting
        }
    }
    -- 输出数据
    local outputData = {
        netId = _unit:GetNetId(),
        objId = self:GetObject():GetObjectId(),
        elementChange = changeData
    }
    self.battleRoom.outputDataSource:AddBattleUnitKeyData(outputData)
end

-- 获取元素阶段管理器
---@param _elementId number
---@return BattleObjCom_Element_StageManager
function BattleObjCom_Element_V2:__GetElementStageManager(_elementId)
    return self.elementIdStageManagerDic[_elementId]
end

------------------------------------------------------------------------------------------------------------------------

---@public
---@param _deltaTime number
function BattleObjCom_Element_V2:OnUpdate(_deltaTime)
    -- 元素阶段管理
    for _elementId, _elementStageManager in pairs(self.elementIdStageManagerDic) do
        if self:__IsElementEnabled(_elementId) then
            _elementStageManager:OnUpdate(_deltaTime)
        end
    end
end

-- 增加元素强度
---@public
---@param _elementStrengthId number 元素强度id
---@param _attackerNetId number 攻击者netId
---@param _attackerObjectId number 攻击者objectId
---@param _bodyPartId number 攻击部位
---@param _canTriggerEffect boolean 是否可触发元素效果
---@param _originalSkillId number 初始来源技能ID
---@param _elementSource ElementSource 元素附着来源类型
---@param _elementSourceId number 元素附着来源id
function BattleObjCom_Element_V2:AddElementStrength(_elementStrengthId, _attackerNetId, _attackerObjectId, _bodyPartId, _canTriggerEffect, _originalSkillId, _elementSource, _elementSourceId)
    ---@type ElementStrength
    local _elementStrength = self.battleRoom.inputDataSource:GetDict("ElementStrength", _elementStrengthId)
    if not _elementStrength then
        return
    end
    local _elementType = GetBattleElementTypeById(_elementStrength.elementId)
    if not _elementType then
        return
    end

    local _elementId = _elementType:GetId()
    if not self:__IsElementEnabled(_elementId) then
        --  元素不可用（可能被锁定）
        return
    end

    -- 概率判断
    if _elementStrength.chance and _elementStrength.chance > 0 then
        if not self.battleRoom.randomUtil:Shake(_elementStrength.chance) then
            -- 运气不好，没随机到
            if CheckLogLevel(LogLevel.log) and LogTools.ElementLog then
                LogTools.LogByLevel(LogLevel.log, "元素", _elementStrength.elementId, "元素强度", _elementStrengthId, "累积概率随机失败", "概率", _elementStrength.chance)
            end
            return
        end
    end

    self:AddElement(_elementType, _elementStrength.addNum, nil, 0, _attackerNetId, _attackerObjectId, _bodyPartId, _canTriggerEffect, _originalSkillId, _elementSource, _elementSourceId)
end

-- 增加元素
---@public
---@param _element BattleElementType 元素类型
---@param _elementValue number 元素值
---@param _hurtParam any 伤害参数
---@param _originalHurt number 原始伤害
---@param _attackerNetId number 攻击者netId
---@param _attackerObjectId number 攻击者objectId
---@param _bodyPartId number 部位
---@param _canTriggerEffect boolean 是否可触发元素效果
---@param _originCastSkillId number 初始来源技能ID
---@param _elementSource ElementSource 元素附着来源类型
---@param _elementSourceId number 元素附着来源id
---@return ElementStackEffect 元素效果表数据（返回表代表触发了元素效果，返回nil代表无事发生）
function BattleObjCom_Element_V2:AddElement(_element, _elementValue, _hurtParam, _originalHurt, _attackerNetId, _attackerObjectId, _bodyPartId, _canTriggerEffect, _originCastSkillId, _elementSource, _elementSourceId)
    if not _element or not _elementValue or _elementValue <= 0 then
        return
    end

    local _elementId = _element:GetId()
    if not self:__IsElementEnabled(_elementId) then
        --  元素不可用（可能被锁定）
        return
    end

    if not self:__GetElementStageManager(_elementId) then
        -- 元素不可积累
        return
    end

    ---@type BattleObjCom_Buff
    local comBuff = self:GetObject():GetComponent(BattleObjectComponentType.Buff)
    if comBuff then
        local invincibleElementIds = comBuff:IsElementInvincible()
        if invincibleElementIds then
            for _, _invincibleElementId in pairs(invincibleElementIds) do
                if _invincibleElementId == BattleElementTypeEnum.NONE:GetId() or _elementId == _invincibleElementId then
                    -- 全部元素无敌 or 指定元素无敌
                    return
                end
            end
        end
    end

    ---@type ElementalInfo
    local elementInfo = self:GetElementalInfoTable(_elementId)
    if elementInfo and elementInfo.isAttached == 0 then
        -- 元素不可附着
        return
    end

    if LogTools.ElementLog and CheckLogLevel(LogLevel.log) then
        local _targetObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(self:GetObject():GetParentUnit():GetUnitType()) .. "][" .. self:GetObject():GetParentUnit():GetNetId() .. "][" .. tostring(self:GetObject():GetDicId()) .. "]"
        LogTools.LogByLevel(LogLevel.log, "元素", _targetObjectLog, "<color=#FF00FF>元素添加开始", self.battleRoom.frameId, "当前时间[" .. tostring(TimeUtils.battleNow(self.battleId)) .. "]", "=======================================================================================</color>")
    end

    -- 不传默认自己为释放者
    local _castObject = self:GetObject()
    local _castUnit = self:GetObject():GetParentUnit();
    if _attackerNetId then
        local _attackerUnit = self.battleRoom.battleUnitManager:GetUnit(_attackerNetId)
        if _attackerUnit then
            _castUnit = _attackerUnit
            if _attackerObjectId then
                _castObject = _attackerUnit:GetHeroObject(_attackerObjectId)
            end
            if _castObject == nil then
                -- 不传objectId默认取当前object
                _castObject = _attackerUnit:GetCurrentHeroObject()
            end
        end
    end

    -- 添加元素
    local _triggerEffect = self:__AddElement(_element, _elementValue, _castUnit, _castObject, _elementSource, _elementSourceId)
    local _elementStackEffect
    if _triggerEffect and _canTriggerEffect then
        -- 触发元素效果
        self:__ElementEffect(_elementId, _hurtParam, _originalHurt, _castUnit, _castObject, _bodyPartId, _originCastSkillId)
        _elementStackEffect = self:GetElementStackEffectTable(_elementId)
    end

    if LogTools.ElementLog and CheckLogLevel(LogLevel.log) then
        local _targetObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(self:GetObject():GetParentUnit():GetUnitType()) .. "][" .. self:GetObject():GetParentUnit():GetNetId() .. "][" .. tostring(self:GetObject():GetDicId()) .. "]"
        LogTools.LogByLevel(LogLevel.log, "元素", _targetObjectLog, "<color=#FF00FF>元素添加结束", self.battleRoom.frameId, "当前时间[" .. tostring(TimeUtils.battleNow(self.battleId)) .. "]", "=======================================================================================</color>")
    end
    return _elementStackEffect
end

-- 获取元素效果击破修改次数
---@public
---@return number 元素效果击破修改次数
function BattleObjCom_Element_V2:GetElementEffectTimeUpdateCounter()
    return self.updateEffectingTimeCounter
end

-- 修改元素效果时间
---@public
---@param _changeTime number 延长时间(s)
---@param _castNetId number netId
---@param _castObjId number objId
---@return boolean 是否修改成功
function BattleObjCom_Element_V2:ChangeElementEffectTime(_changeTime, _castNetId, _castObjId)
    local _elementId = self.effectingElementId
    if not _elementId or _elementId == 0 then
        -- 没有元素在触发效果
        return false
    end
    local _stageManager = self:__GetElementStageManager(_elementId)
    if not _stageManager then
        -- 元素不可积累
        return
    end
    -- 元素击破效果修改次数计数
    self.updateEffectingTimeCounter = self.updateEffectingTimeCounter + 1

    local _addValue = _stageManager:CalculateAddValueByTime(Mathf.Abs(_changeTime))
    if _addValue <= 0 then
        return false
    end
    _addValue = _addValue * (_changeTime / Mathf.Abs(_changeTime))

    if LogTools.ElementLog then
        local _targetObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(self:GetObject():GetParentUnit():GetUnitType()) .. "][" .. self:GetObject():GetParentUnit():GetNetId() .. "][" .. tostring(self:GetObject():GetDicId()) .. "]"
        LogTools.LogByLevel(LogLevel.log, "元素", "修改元素效果时间[" .. GetBattleElementNameById(_elementId) .. "]", "目标" .. _targetObjectLog .. "修改时间", _changeTime, "时间转换元素值", _addValue, "当前时间", TimeUtils.battleNow(self.__battleId))
    end
    self:ChangeElementValue(_elementId, _addValue, true, false, ELEMENT_CHANGE_TYPE.ChangeEffectTime)
    local targetNetId = self:GetObject():GetParentUnit():GetNetId()
    local targetObjId = self:GetObject():GetObjectId()
    self.battleRoom.battleLogicEventService:OnTriggerChangeElementEffectingTimeEvent(_castNetId, _castObjId, targetNetId, targetObjId, _elementId, _changeTime)
    return true
end

-- 改变元素值
---@public
---@param _elementId number 元素id
---@param _updateReduction boolean 计算衰减(服务器被动计算时使用)
---@param _changeValue number 改变元素值
---@param _checkMaxValue boolean 是否检测上限值
---@param _changeType string ElementChangeType 改变原因
---@return boolean 是否触发元素效果
function BattleObjCom_Element_V2:ChangeElementValue(_elementId, _changeValue, _updateReduction, _checkMaxValue, _changeType)
    local curElementValue = self:GetElementCurrentValue(_elementId)
    if not curElementValue then
        curElementValue = 0
    end
    if not _changeValue or _changeValue == 0 then
        return false
    end

    if _updateReduction then
        -- 元素衰减计算
        local _stageManager = self:__GetElementStageManager(_elementId)
        local curElementStage = _stageManager.curStage
        curElementStage:ElementReduction()
    end

    -- 修改当前值
    local oldValue = curElementValue
    curElementValue = curElementValue + _changeValue

    local maxValue = self:GetElementMaxValue(_elementId)
    -- 边界处理
    local removed = false
    if _changeValue < 0 then
        -- 减少不能减到0以下
        curElementValue = Mathf.Max(curElementValue, 0)
        if curElementValue == 0 then
            removed = true
        end
    elseif _checkMaxValue then
        -- 增加不能加到最大值以上
        curElementValue = Mathf.Min(curElementValue, maxValue)
    end
    if oldValue == curElementValue then
        -- 元素值没有发生改变
        return false
    end

    self:__UpdateElementIdCurrentValue(_elementId, curElementValue)
    self:__OnElementChange(_elementId, curElementValue, oldValue, maxValue, _changeType)

    if not self.driveElement then
        -- 后续逻辑仅驱动模式执行
        return
    end

    -- 是否触发元素效果
    local triggerEffect = false
    if curElementValue == maxValue and not self:CheckElementEffecting(_elementId) and self:__CheckElementEffect(_elementId) then
        -- 触发元素效果
        triggerEffect = true
    end
    if removed then
        self:__OnElementRemove(_elementId, _changeType)
    end
    return triggerEffect
end

---@public
---@param _propId number
---@param _oldMaxValue number
function BattleObjCom_Element_V2:OnPropValueChange(_propId, _oldMaxValue)
    if not _propId then
        return
    end
    local _elementId = self.maxValuePropIdElementIdDic[_propId]
    if _elementId then
        --元素最大值属性
        local _oldValue = self:GetElementCurrentValue(_elementId)
        if _oldValue <= 0 then
            return
        end
        -- 元素衰减
        local _stageManager = self:__GetElementStageManager(_elementId)
        local _curStage = _stageManager.curStage
        if _curStage then
            -- 元素计算衰减
            _curStage:ElementReduction()
        end
        -- 元素积累值按比例转换
        -- 读取旧值
        local _oldMaxPropValue = self:__GetElementMaxValueByMaxProp(_elementId, _oldMaxValue)
        -- 计算当前比例值
        _oldValue = self:GetElementCurrentValue(_elementId)
        local _valueRatio = 0
        if _oldMaxPropValue > 0 then
            _valueRatio = _oldValue / _oldMaxPropValue
        end
        -- 读取新值
        ---@type number
        local _curMaxPropValue = self.propCom:GetPropertyById(_propId)
        local _curMaxValue = self:__GetElementMaxValueByMaxProp(_elementId, _curMaxPropValue)
        --计算新值
        local _curValue = _curMaxValue * _valueRatio

        local _changeValue = _curValue - _oldValue
        self:ChangeElementValue(_elementId, _changeValue, false, false, ELEMENT_CHANGE_TYPE.OnMaxChange)
    end
end

-- 元素是否正在触发效果
---@public
---@param _elementId number
function BattleObjCom_Element_V2:CheckElementEffecting(_elementId)
    return self.effectingElementId and self.effectingElementId > 0 and self.effectingElementId == _elementId
end

-- 获取最大元素量
---@public
---@param _elementId number 元素id
---@return number 最大元素值
function BattleObjCom_Element_V2:GetElementMaxValue(_elementId)
    local _elementType = GetBattleElementTypeById(_elementId)
    local _maxValueReduce = 0
    if self.propCom then
        _maxValueReduce = self.propCom:GetPropertyByName(_elementType:GetMaxValueReduceName())
        _maxValueReduce = _maxValueReduce or 0
    end
    return self:__GetElementMaxValueByMaxProp(_elementId, _maxValueReduce)
end

-- 获取当前元素量
---@public
---@param _elementId number 元素id
---@return number 当前元素值
function BattleObjCom_Element_V2:GetElementCurrentValue(_elementId)
    return self.elementIdValueDic[_elementId] or 0
end

-- 获取元素积累表数据
---@param _elementId number
---@return ElementStackEffect
function BattleObjCom_Element_V2:GetElementStackEffectTable(_elementId)
    return self.elementIdEffectTableDic[_elementId]
end

-- 获取元素基础表数据
---@param _elementId number
---@return ElementalInfo
function BattleObjCom_Element_V2:GetElementalInfoTable(_elementId)
    return self.elementIdInfoTableDic[_elementId]
end

---------------------------------------------------------------------------------------------------------------------------------------------------------

-- 客户端发送到显示层
---@private
---@param _elementId number
function BattleObjCom_Element_V2:__ClientSendElementAttachToView(_elementId)
    local msg = {
        netId = self.__object:GetParentUnit():GetNetId(),
        objectId = self:GetObject():GetObjectId(),
        elementId = _elementId
    }
    self.battleRoom.outputDataSource:ElementAttach_L2S(msg)
end

-- 客户端发送到显示层
---@private
---@param _elementId number
function BattleObjCom_Element_V2:__ClientSendElementValueChangeToView(_elementId, _elementValue, _effecting)
    local msg = {
        netId = self.__object:GetParentUnit():GetNetId(),
        objectId = self:GetObject():GetObjectId(),
        elementId = _elementId,
        elementValue = _elementValue,
        effecting = _effecting
    }
    self.battleRoom.outputDataSource:ElementValueChange_L2V(msg)
end

-- 客户端发送到显示层
---@private
---@param _elementId number
function BattleObjCom_Element_V2:__ClientSendElementRemoveToView(_elementId)
    local msg = {
        netId = self.__object:GetParentUnit():GetNetId(),
        objectId = self:GetObject():GetObjectId(),
        elementId = _elementId
    }
    self.battleRoom.outputDataSource:ElementRemove_L2S(msg)
end

---------------------------------------------------------------------------------------------------------------------------------------------------------

-- 客户端接收输出数据
---@public
---@param _elementChange table
function BattleObjCom_Element_V2:ClientReceiveOutputData(_elementChange)
    --if _elementChange.elementAttach then
    --    -- 元素附着，通知显示层
    --    self:__ClientSendElementAttachToView(_elementChange.elementAttach.elementId)
    --    if not self.driveElement then
    --        -- 不驱动元素组件，收到消息更正元素量
    --        self:__UpdateElementIdCurrentValue(_elementChange.elementAttach.elementId, _elementChange.elementAttach.curElementValue)
    --    end
    --end
    --if _elementChange.elementRemove then
    --    -- 元素移除，通知显示层
    --    self:__ClientSendElementRemoveToView(_elementChange.elementRemove.elementId)
    --    if not self.driveElement then
    --        -- 不驱动元素组件，收到消息更正元素量
    --        self:__UpdateElementIdCurrentValue(_elementChange.elementRemove.elementId, 0)
    --    end
    --end
    if _elementChange.elementStage then
        ---@type number
        local _elementId = _elementChange.elementStage.elementId
        ---@type number
        local _stage = _elementChange.elementStage.stage
        local _stageManager = self:__GetElementStageManager(_elementId)
        -- 服务器通知进阶段（强制进，听服务器的）
        _stageManager:GoToStage(_stage, true)
    end
    if _elementChange.elementValueChange then
        -- 元素更新，通知显示层
        ---@type number
        local _elementId = _elementChange.elementValueChange.elementId
        ---@type number
        local _elementValue = _elementChange.elementValueChange.elementValue
        ---@type number
        local _effecting = _elementChange.elementValueChange.effecting

        self:__ClientSendElementValueChangeToView(_elementId, _elementValue, _effecting)
        if not self.driveElement then
            -- 不驱动元素组件，收到消息更正元素量
            if _effecting then
                self:__SetElementEffecting(_elementId)
            end
            self:__UpdateElementIdCurrentValue(_elementId, _elementValue)
        end
    end
end

---服务器逻辑核生成用于发送给前端逻辑核的全量信息
---@public
function BattleObjCom_Element_V2:GetCreateSyncMessage_S2C()
    local _elementSyncInfos = {}
    for _elementId, _elementValue in pairs(self.elementIdValueDic) do
        local _elementSyncInfo = {}
        _elementSyncInfo.elementId = _elementId
        _elementSyncInfo.elementValue = _elementValue
        table.insert(_elementSyncInfo)
    end
    return _elementSyncInfos
end

---前端逻辑核生成用于发送给表现的层全量信息
---@public
function BattleObjCom_Element_V2:GetCreateSyncMessage_L2V(_message)
    local _elementSyncInfos = {}
    for _elementId, _elementValue in pairs(self.elementIdValueDic) do
        local _elementSyncInfo = {}
        _elementSyncInfo.elementId = _elementId
        _elementSyncInfo.elementValue = _elementValue
        table.insert(_elementSyncInfo)
    end
    return _elementSyncInfos
end

---@public
function BattleObjCom_Element_V2:Clear()
    self:__Clear()
end

return BattleObjCom_Element_V2

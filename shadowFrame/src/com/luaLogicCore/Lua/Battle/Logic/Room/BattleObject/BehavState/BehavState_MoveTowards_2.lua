---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/08/17 15:19
--- Describe: 平移
---

---@class BehavState_MoveTowards_2 : BattleUnit_PathFindCaller
BehavState_MoveTowards_2 = class(BattleUnit_PathFindCaller, "BehavState_MoveTowards_2")

---@public
---@param _behavCom BattleUnitCom_Behav
function BehavState_MoveTowards_2:Init(_behavCom)
	---@private
	---@type BattleUnitCom_Behav
	self.__behavCom = _behavCom
	self:__Init(_behavCom:GetUnit(), 500, 15)
	self:__InitStateUseInfos()
	self.__running = false
end

---初始化一些当前behavState需要使用的专属信息
---@private
function BehavState_MoveTowards_2:__InitStateUseInfos()
	---@type BattleObjCom_Config
	local _configCom = self.__unitSelf:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Config)
	---@type MonsterInstance
	local _monsterInstance = _configCom:GetDataInstanceXls()
	---@private
	---@type number
	self.__moveSpd = _monsterInstance.moveSpd or 0
	---@private
	---@type boolean
	self.__bFaceTarget = false
	---@private
	---@type number
	self.__netIdSelf = self.__unitSelf:GetNetId()
	---@private
	---@type number
	self.__netIdTarget = nil
	---@private
	---@type Vector3
	self.__velocityCache = Vector3.zero_local()
	---@private
	---@type Vector3
	self.__velocityCache2 = Vector3.zero_local()
end
------------------------------------------------------------------------------------------------------------------------
---开启行为
---@public
function BehavState_MoveTowards_2:Start(_posShift, _faceTarget, _targetNetId)
	--LogTools.LogByLevel(LogLevel.log, "behavState", "BehavState_MoveTowards_2:Start", "Start", "netId", self.__unitSelf:GetNetId())
	if self.__running then return end
	self.__running = true
	
	---按照怪物的配置速度，计算能够移动到的实际偏移值
	Vector3.Normalize(_posShift, self.__v3TargetShiftPos)
	Vector3.MulNumber(self.__v3TargetShiftPos, self.__moveSpd)
	self.__bFaceTarget = _faceTarget
	self.__netIdTarget = _targetNetId
	self.__comPosSet:Open(true)
	self:CallPathFind()
end

---结束行为
---@public
function BehavState_MoveTowards_2:Stop()
	--LogTools.LogByLevel(LogLevel.log, "behavState", "BehavState_MoveTowards_2:Stop", "Start", "netId", self.__unitSelf:GetNetId())
	self:ReleaseHitBlockParams()
	if not self.__running then return end
	self.__running = false
	
	self.__comPosSet:Open(false)
	self.__comPosSet:StopPosSet()
	if self.__bFaceTarget then
		self.__actionManagerSelf:Exit(self.__actionManagerSelf.currentStates[TurnActionState:GetId()], false)
		self.__comRotate:Stop()
	end
	
	---结束时给表现层清一下当前速度
	local battleUnitMoveOutput = {}
	battleUnitMoveOutput.v = Vector3.zero_global()
	battleUnitMoveOutput.position = self.__actionManagerSelf:GetPosition()
	battleUnitMoveOutput.rotation = self.__actionManagerSelf:GetRotation()
	battleUnitMoveOutput.accelerate = Vector3.zero_global()
	battleUnitMoveOutput.moveParam = Vector3.zero_global()
	battleUnitMoveOutput.cameraParam = Vector3.zero_global()
	battleUnitMoveOutput.type = 1

	local battleUnitMoveData = {}
	battleUnitMoveData.netId = self.__netIdSelf
	battleUnitMoveData.objId = self.__unitSelf:GetCurrentHeroObjectId()
	battleUnitMoveData.moveInfo = battleUnitMoveOutput
	
	--if self.__netIdSelf == 2 then
	--	LogTools.LogByLevel(LogLevel.logErr, "BehavState_MoveTowards_2 stop")
	--end

	self:GetBattleRoom().outputDataSource:AddBattleUnitMoveData(battleUnitMoveData)
end

------------------------------------------------------------------------------------------------------------------------
function BehavState_MoveTowards_2:CallPathFind()
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BehavState_MoveTowards_2", "CallPathFind")
	self:__ResetReFindTimeCount()
	self.__comPosSet:StartPosSet(self)
	if self.__bFaceTarget then
		self.__comRotate:Start(self, true)
	end
end

---@public
function BehavState_MoveTowards_2:DirectMove(_deltaTime)

	if not self:CheckHitBlockType(BattleUnitAiHitBlockType.None) then
		--LogTools.LogByLevel(LogLevel.logErr, "BehavState_MoveTowards_2:DirectMove", "force End")
		self:__postFixHeightEnd()
		return
	end

	local _actionManager = self.__actionManagerSelf
	if _actionManager.currentStates[TrappedActionState:GetId()] or self:CheckHitBlockType(BattleUnitAiHitBlockType.Edge) then
		
		_actionManager:SetVelocity(Vector3.zero_global())
		
		local battleUnitMoveOutput = {}
		battleUnitMoveOutput.v = _actionManager:GetVelocity()
		battleUnitMoveOutput.position = _actionManager:GetPosition()
		battleUnitMoveOutput.rotation = _actionManager:GetRotation()
		battleUnitMoveOutput.accelerate = Vector3.zero_global()
		battleUnitMoveOutput.moveParam = Vector3.zero_global()
		battleUnitMoveOutput.cameraParam = Vector3.zero_global()
		battleUnitMoveOutput.type = 99
	
		local battleUnitMoveData = {}
		battleUnitMoveData.netId = self.__netIdSelf
		battleUnitMoveData.objId = self.__unitSelf:GetCurrentHeroObjectId()
		battleUnitMoveData.moveInfo = battleUnitMoveOutput
	
		--if self.__netIdSelf == 2 then
		--	LogTools.LogByLevel(LogLevel.logErr, "frame", LOOPER.GetFrameId(), "BehavState_MoveTowards_2 DirectMove zero v", "_actionManager:TryEnter(MoveActionState:GetId())", _actionManager:TryEnter(MoveActionState:GetId()), "self:CheckHitBlockType(BattleUnitAiHitBlockType.Edge)", self:CheckHitBlockType(BattleUnitAiHitBlockType.Edge))
		--end
		
		self:GetBattleRoom().outputDataSource:AddBattleUnitMoveData(battleUnitMoveData)
		self:ReleaseHitBlockParams()
	elseif self:CheckHitBlockType(BattleUnitAiHitBlockType.None) then
		local _v3Receiver = self:GetBattleRoom().vector3Pool:Pop()
		Vector3.MulQuat(self.__v3TargetShiftPos, _actionManager:GetRotation(), self.__velocityCache)
		_actionManager:SetVelocity(self.__velocityCache)
		Vector3.MulNumber(self.__velocityCache, _deltaTime, _v3Receiver)
		Vector3.Add(_v3Receiver, _actionManager:GetPosition(), _v3Receiver)
		_actionManager:SetPosition(_v3Receiver)
		self:GetBattleRoom().vector3Pool:Push(_v3Receiver)

		local battleUnitMoveOutput = {}
		battleUnitMoveOutput.v = self.__velocityCache
		battleUnitMoveOutput.position = _actionManager:GetPosition()
		battleUnitMoveOutput.rotation = _actionManager:GetRotation()
		battleUnitMoveOutput.accelerate = Vector3.zero_global()
		battleUnitMoveOutput.moveParam = Vector3.zero_global()
		battleUnitMoveOutput.cameraParam = Vector3.zero_global()
		battleUnitMoveOutput.type = 99

		local battleUnitMoveData = {}
		battleUnitMoveData.netId = self.__netIdSelf
		battleUnitMoveData.objId = self.__unitSelf:GetCurrentHeroObjectId()
		battleUnitMoveData.moveInfo = battleUnitMoveOutput

		--if self.__netIdSelf == 2 then
		--	LogTools.LogByLevel(LogLevel.log, "frame", LOOPER.GetFrameId(), "BehavState_MoveTowards_2 DirectMove normal", "battleUnitMoveOutput", dumpTableEx(battleUnitMoveOutput))
		--end
		self:GetBattleRoom().outputDataSource:AddBattleUnitMoveData(battleUnitMoveData)
	else
		local _v3Receiver = self:GetBattleRoom().vector3Pool:Pop()
		local _useVelocity = self:GetBattleRoom().vector3Pool:Pop(self.__hitFixDir)
		Vector3.MulNumber(_useVelocity, self.__moveSpd)
		Vector3.Copy(self.__velocityCache2, _useVelocity)
		_actionManager:SetVelocity(_useVelocity)
		Vector3.MulNumber(_useVelocity, _deltaTime, _v3Receiver)
		Vector3.Add(_v3Receiver, _actionManager:GetPosition(), _v3Receiver)
		_actionManager:SetPosition(_v3Receiver)
		self:GetBattleRoom().vector3Pool:Push(_v3Receiver)
		self:GetBattleRoom().vector3Pool:Push(_useVelocity)
		local battleUnitMoveOutput = {}
		battleUnitMoveOutput.v = self.__velocityCache2
		battleUnitMoveOutput.position = _actionManager:GetPosition()
		battleUnitMoveOutput.rotation = _actionManager:GetRotation()
		battleUnitMoveOutput.accelerate = Vector3.zero_global()
		battleUnitMoveOutput.moveParam = Vector3.zero_global()
		battleUnitMoveOutput.cameraParam = Vector3.zero_global()
		battleUnitMoveOutput.type = 99

		local battleUnitMoveData = {}
		battleUnitMoveData.netId = self.__netIdSelf
		battleUnitMoveData.objId = self.__unitSelf:GetCurrentHeroObjectId()
		battleUnitMoveData.moveInfo = battleUnitMoveOutput

		--if self.__netIdSelf == 2 then
		--	LogTools.LogByLevel(LogLevel.logErr, "frame", LOOPER.GetFrameId(), "BehavState_MoveTowards_2 DirectMove hitStone", "battleUnitMoveData", dumpTableEx(battleUnitMoveData))
		--end
		self:GetBattleRoom().outputDataSource:AddBattleUnitMoveData(battleUnitMoveData)
		self:ReleaseHitBlockParams()
	end
end

---获取目标朝向
---@public
---@param _v3Receiver Vector3 用于接收结果的vec3
---@return boolean 是否成功获取到目标点
function BehavState_MoveTowards_2:GetTargetDir(_v3Receiver, _deltaTime)
	if not self.__netIdTarget or -1 == self.__netIdTarget then return false end
	return self.__behavCom:GetBattleRoom().transUtil:GetDirBetweenUnits(self.__netIdSelf, self.__netIdTarget, _v3Receiver)
end

---平移顶住目标不检查攻击角度
---@public
function BehavState_MoveTowards_2:RotateSkipAngleCheck()
	return true
end

---@private
function BehavState_MoveTowards_2:__postFixHeightEnd()
	if not self.__behavCom:GetBattleRoom().behaviorProcessor:CheckMonsAIHost() then return end
	self.__behavCom:GetBattleRoom().behaviorManager:PostTaskListenEvent(self.__behavCom:GetTreeIndex(), LuaBehav_Define_TaskListenEnum.MoveTowardsTwoEnd)
end
------------------------------------------------------------------------------------------------------------------------
---@public
function BehavState_MoveTowards_2:CheckRunning()
	return self.__running
end

---@public
function BehavState_MoveTowards_2:Clear()
	self:Stop()
	self.__behavCom = nil
	self.__running = nil
	self.__moveSpd = nil
	self.__bFaceTarget = nil
	self.__netIdSelf = nil
	self.__netIdTarget = nil
	self.__velocityCache = nil
	self:__Clear()
end
return BehavState_MoveTowards_2
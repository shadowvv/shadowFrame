---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/08/12 11:47
--- Describe: 范围触发
---

require "Battle/Logic/Room/BattleObject/BoundaryTrigger/TriggerLife/BoundaryTriggerLifeConditionCtrlBase"
require "Battle/Logic/Room/BattleObject/BoundaryTrigger/TriggerTemplate/BoundaryTriggerTemplateCtrlBase"
require "Battle/Logic/Room/BattleObject/BoundaryTrigger/TriggerCondition/BoundaryTriggerConditonCtrlBase"
require "Battle/Logic/Room/BattleObject/BoundaryTrigger/TriggerAction/BoundaryTriggerActionCtrlBase"

require "Battle/Logic/Room/BattleObject/BoundaryTrigger/TriggerLife/AreaTrigger/AreaTriggerLifeConditionCtrl"
require "Battle/Logic/Room/BattleObject/BoundaryTrigger/TriggerTemplate/AreaTrigger/AreaTriggerTemplateCtrl"
require "Battle/Logic/Room/BattleObject/BoundaryTrigger/TriggerCondition/AreaTrigger/AreaTriggerConditionCtrl"
require "Battle/Logic/Room/BattleObject/BoundaryTrigger/TriggerAction/AreaTrigger/AreaTriggerActionCtrl"

require "Battle/Logic/Room/BattleObject/BoundaryTrigger/TriggerLife/SceneObjTrigger/SceneObjTriggerLifeConditionCtrl"
require "Battle/Logic/Room/BattleObject/BoundaryTrigger/TriggerTemplate/SceneObjTrigger/SceneObjTriggerTemplateCtrl"
require "Battle/Logic/Room/BattleObject/BoundaryTrigger/TriggerCondition/SceneObjTrigger/SceneObjTriggerConditionCtrl"
require "Battle/Logic/Room/BattleObject/BoundaryTrigger/TriggerAction/SceneObjTrigger/SceneObjTriggerActionCtrl"

---生命周期状态
---@class BoundaryTriggerLifeState : table
BoundaryTriggerLifeState = {
	Created = 1,   --创建未开启
	Opened = 2,    --开启未关闭
	Closed = 3,    --已关闭
	WaitDestroy = 4, --等待销毁
}

---@class BattleObjCom_BoundaryTrigger : BattleObjectComponentBase
BattleObjCom_BoundaryTrigger = class(BattleObjectComponentBase, "BattleObjCom_BoundaryTrigger")
function BattleObjCom_BoundaryTrigger:ctor(_data)
	self:__ctor(BattleObjectComponentType.BoundaryTrigger)
end

---@public
---@param _battleObject BattleObjectBase
---@param _battleCreateUnitParam BattleCreateUnitParam
function BattleObjCom_BoundaryTrigger:Init(_battleObject, _battleCreateUnitParam)
	self:__Init(_battleObject)
	
	---@private
	self.__trigTimes = 0
	self.__innerUnitIdDic = {}
	self.__innerUnitIdList = {}
	
	self.__lifeCtrl = nil
	self.__templateCtrl = nil
	self.__conditionCtrl = nil
	self.__actionCtrl = nil

	if _battleObject:CheckObjectType(BattleObjectType.AreaTrigger) then
		self:__InitAreaTrigger(_battleCreateUnitParam)
	elseif _battleObject:CheckObjectType(BattleObjectType.SceneObj) then
		self:__InitSceneObj(_battleCreateUnitParam)
	end
end

---战场区域触发
---@private
---@param _battleCreateUnitParam BattleCreateUnitParam
function BattleObjCom_BoundaryTrigger:__InitAreaTrigger(_battleCreateUnitParam)
	---@type BattleObjCom_Config
	local _configCom = self:GetObject():GetComponent(BattleObjectComponentType.Config)
	---@type AreaColliderInstance
	local _areaColliderInstanceXls = _configCom:GetInstanceXls()
	
	---@type AreaTriggerLifeConditionCtrl
	self.__lifeCtrl = AreaTriggerLifeConditionCtrl.New()
	self.__lifeCtrl:Init(self, _areaColliderInstanceXls.lifeCtrlId)
	---@type AreaTriggerTemplateCtrl
	self.__templateCtrl = AreaTriggerTemplateCtrl.New()
	self.__templateCtrl:Init(self, _areaColliderInstanceXls.templateId, _battleCreateUnitParam)
	---@type AreaTriggerConditionCtrl
	self.__conditionCtrl = AreaTriggerConditionCtrl.New()
	self.__conditionCtrl:Init(self, _areaColliderInstanceXls)
	---@type AreaTriggerActionCtrl
	self.__actionCtrl = AreaTriggerActionCtrl.New()
	self.__actionCtrl:Init(self, _areaColliderInstanceXls)
end

---场景物件触发
---@private
function BattleObjCom_BoundaryTrigger:__InitSceneObj()
	---@type BattleObjCom_Config
	local _configCom = self:GetObject():GetComponent(BattleObjectComponentType.Config)
	---@type Gadget
	local _gadgetXls = _configCom:GetDataInstanceXls()
	
	---@type SceneObjTriggerLifeConditionCtrl
	self.__lifeCtrl = SceneObjTriggerLifeConditionCtrl.New()
	self.__lifeCtrl:Init(self, _gadgetXls)
	---@type SceneObjTriggerTemplateCtrl
	self.__templateCtrl = SceneObjTriggerTemplateCtrl.New()
	self.__templateCtrl:Init(self, _gadgetXls)
	---@type SceneObjTriggerConditionCtrl
	self.__conditionCtrl = SceneObjTriggerConditionCtrl.New()
	self.__conditionCtrl:Init(self, _gadgetXls)
	---@type SceneObjTriggerActionCtrl
	self.__actionCtrl = SceneObjTriggerActionCtrl.New()
	self.__actionCtrl:Init(self, _gadgetXls)
	
end
------------------------------------------------------------------------------------------------------------------------
---有单位进入触发区域
---从表现层发来的消息，理论上比update先执行
---@public
function BattleObjCom_BoundaryTrigger:OnUnitEnter(_netIdList)
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "BattleObjCom_BoundaryTrigger OnUnitEnter start", "_netIdList", dumpTableEx(_netIdList))
	end
	local _list = {}
	local _idDic = self.__innerUnitIdDic
	local _idList = self.__innerUnitIdList
	for _, _netId in pairs(_netIdList) do
		if not _idDic[_netId] then
			_idDic[_netId] = TimeUtils.battleNow(self:GetBattleId())
			table.insert(_idList, _netId)
			table.insert(_list, _netId)
		end
	end

	local _checkList_1 = self.__conditionCtrl:CheckEnter_1(_list)
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "BattleObjCom_BoundaryTrigger OnUnitEnter start", "_checkList_1", dumpTableEx(_checkList_1))
	end
	if 0 == #_checkList_1 then return end
	self.__actionCtrl:TrigEnter_1(_checkList_1, 0)
	
	local _checkList_2 = self.__conditionCtrl:CheckEnter_1(_list)
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "BattleObjCom_BoundaryTrigger OnUnitEnter start", "_checkList_2", dumpTableEx(_checkList_2))
	end
	if 0 == #_checkList_2 then return end
	self.__actionCtrl:TrigEnter_2(_checkList_2, 0)
	
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "BattleObjCom_BoundaryTrigger OnUnitEnter end")
	end
end

---有单位离开触发区域
---从表现层发来的消息，理论上比update先执行
---@public
function BattleObjCom_BoundaryTrigger:OnUnitLeave(_netIdList)
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "BattleObjCom_BoundaryTrigger OnUnitLeave start", "_netIdList", dumpTableEx(_netIdList))
	end
	local _list = {}
	local _idDic = self.__innerUnitIdDic
	for _, _netId in pairs(_netIdList) do
		if _idDic[_netId] then
			_idDic[_netId] = nil
			table.insert(_list, _netId)
		end
	end
	local _idList = {}
	for _netId, _ in pairs(_idDic) do
		table.insert(_idList, _netId)
	end
	self.__innerUnitIdList = _idList
	
	local _checkList_1 = self.__conditionCtrl:CheckLeave_1(_list)
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "BattleObjCom_BoundaryTrigger OnUnitLeave start", "_checkList_1", dumpTableEx(_checkList_1))
	end
	if 0 == #_checkList_1 then return end
	self.__actionCtrl:TrigLeave_1(_checkList_1, 0)
	
	local _checkList_2 = self.__conditionCtrl:CheckLeave_1(_list)
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "BattleObjCom_BoundaryTrigger OnUnitLeave start", "_checkList_2", dumpTableEx(_checkList_2))
	end
	if 0 == #_checkList_2 then return end
	self.__actionCtrl:TrigLeave_2(_checkList_2, 0)
	
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "BattleObjCom_BoundaryTrigger OnUnitLeave end")
	end
end

---单位持续存在
---update自己驱动执行
---@public
function BattleObjCom_BoundaryTrigger:OnUnitStay(_netIdList, _deltaTime)
	local _list = self.__conditionCtrl:CheckStay(_netIdList)
	if 0 == #_list then return end
	self.__actionCtrl:TrigStay(_list, _deltaTime)
end

---@public
function BattleObjCom_BoundaryTrigger:OnUpdate(_deltaTime)
	self:__OnUpdate(_deltaTime)
	self.__lifeCtrl:OnUpdate(_deltaTime)
	self.__conditionCtrl:OnUpdate(_deltaTime)
	self.__templateCtrl:OnUpdate(_deltaTime)
	
	if #self.__innerUnitIdList > 0 and self.__lifeCtrl:CheckState(BoundaryTriggerLifeState.Opened) then
		self:OnUnitStay(self.__innerUnitIdList, _deltaTime)
	end
end
------------------------------------------------------------------------------------------------------------------------

---@public
function BattleObjCom_BoundaryTrigger:OnOpen()
	self.__actionCtrl:OnOpen()
	self.__conditionCtrl:OnOpen()
	self.__templateCtrl:OnOpen()
	self.__lifeCtrl:OnOpen()
end

---@public
function BattleObjCom_BoundaryTrigger:OnClose()
	if CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "区域牵引", "BattleObjCom_BoundaryTrigger", "OnClose start")
	end
	if #self.__innerUnitIdList > 0 then
		local _list = {}
		for _, _netId in pairs(self.__innerUnitIdList) do
			table.insert(_list, _netId)
		end
		self:OnUnitLeave(_list)
	end
	
	self.__actionCtrl:OnClose()
	self.__conditionCtrl:OnClose()
	self.__templateCtrl:OnClose()
	self.__lifeCtrl:OnClose()
	if CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "区域牵引", "BattleObjCom_BoundaryTrigger", "OnClose end")
	end
end

---@public
function BattleObjCom_BoundaryTrigger:OnDestroy()
	if self.__lifeCtrl:CheckState(BoundaryTriggerLifeState.Opened) then
		self:OnClose()
	end
	
	self.__actionCtrl:OnDestroy()
	self.__conditionCtrl:OnDestroy()
	self.__templateCtrl:OnDestroy()
	self.__lifeCtrl:OnDestroy()
end

------------------------------------------------------------------------------------------------------------------------
---检查当前生命周期
---@public
function BattleObjCom_BoundaryTrigger:CheckLifeState(_state)
	return self.__lifeCtrl:CheckState(_state)
end

---获取当前已经触发的次数
---@public
function BattleObjCom_BoundaryTrigger:GetTrigTimes()
	return self.__trigTimes
end

---获取创建时间戳
---@public
function BattleObjCom_BoundaryTrigger:GetTimeStamp()
	return self.__timeStamp
end

---修改关闭时间总长
---@public
function BattleObjCom_BoundaryTrigger:ChangeCloseTimeTotal(_changeValue)
	if not self.__lifeCtrl then return end
	self.__lifeCtrl:ChangeCloseConditionTimeTotal(_changeValue)
end

---修改当前持续时间
---@public
function BattleObjCom_BoundaryTrigger:ChangeCloseTimeAcc(_changeValue)
	if not self.__lifeCtrl then return end
	self.__lifeCtrl:ChangeCloseConditionTimeAcc(_changeValue)
end
------------------------------------------------------------------------------------------------------------------------
---服务器逻辑核生成用于发送给前端逻辑核的全量信息
---@public
---@return table msg.BoundaryTriggerInfo
function BattleObjCom_BoundaryTrigger:GetCreateSyncMessage_S2C()
    local _BoundaryTriggerInfo = {}
	_BoundaryTriggerInfo.state = self.__lifeCtrl:GetState()
	_BoundaryTriggerInfo.stateStartTime = self.__lifeCtrl:GetTimeStamp()
	_BoundaryTriggerInfo.trigTimes = self.__trigTimes
	return _BoundaryTriggerInfo
end

---前端逻辑核用服务器发来的全量信息刷新自身数据
---@public
---@param _BoundaryTriggerInfo table msg.BoundaryTriggerInfo
function BattleObjCom_BoundaryTrigger:OnReceiveCreateSyncMessage_S2C(_BoundaryTriggerInfo)
    self.__lifeCtrl:SetState(_BoundaryTriggerInfo.state)
	self.__lifeCtrl:SetTimeStamp(_BoundaryTriggerInfo.stateStartTime)
	self.__trigTimes = _BoundaryTriggerInfo.trigTimes
end

---前端逻辑核生成用于发送给表现的层全量信息
---@public
---@return table msg.BoundaryTriggerInfo
function BattleObjCom_BoundaryTrigger:GetCreateSyncMessage_L2V(_BattleObjectCreateSyncInfo)
    local _BoundaryTriggerInfo = {}
	_BoundaryTriggerInfo.state = self.__lifeCtrl:GetState()
	_BoundaryTriggerInfo.stateStartTime = self.__lifeCtrl:GetTimeStamp()
	_BoundaryTriggerInfo.trigTimes = self.__trigTimes
	return _BoundaryTriggerInfo
end

return BattleObjCom_BoundaryTrigger
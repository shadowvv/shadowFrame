---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hejincheng.
--- DateTime: 2022/2/23 15:28

require "Lib/class"
require "Battle/Logic/Constants/BattleWeaponConst"

-- 武器衰减距离类型
---@class WeaponDistanceEnum : table
WeaponDistanceEnum = {
    -- 优势距离
    ADV_DIS = 1,
    -- 中衰减距离
    ATTENUATION_DIS = 2,
    -- 高衰减距离
    HIGH_ATTENUATION_DIS = 3,
    -- 无效距离
    USELESS_DIS = 4,
}

---@class BattleObjCom_Weapon : BattleObjectComponentBase
BattleObjCom_Weapon = class(BattleObjectComponentBase, 'BattleObjCom_Weapon');

function BattleObjCom_Weapon:ctor()
    self:__ctor(BattleObjectComponentType.Weapon)
end

---@public
---@param _battleObject BattleObject_LeaderObject
---@param _weaponData BattlePlayerWeapon
function BattleObjCom_Weapon:Init(_battleObject, _weaponData)
    self:__Init(_battleObject)

    ---@type BattlePlayerWeapon[]
    self.weapons = {}
    ---@type BattlePlayerWeapon
    self.currentWeapon = {}

    ---@type BattleObjCom_Property
    self._componentProperty = _battleObject:GetComponent(BattleObjectComponentType.Property)

    if _weaponData then
        -- 目前角色就一个武器
        local _weapon = BattleObjectManager.CreateWeapon(_weaponData)
        self:AddWeapon(_weapon)
        self.currentWeapon = _weapon
    end

    ---@type boolean 过载状态
    self.overLoad = false
    ---@type number 进入能量恢复状态时间戳
    self.enterRecoverEnergyTime = 0

    -- 初始表
    self:__InitDataTable()
    -- 初始属性
    self:__InitProps(_battleObject)
end

---@private
---@param _battleObject BattleObjectBase
function BattleObjCom_Weapon:__InitProps(_battleObject)
    ---@type BattleObjCom_Config
    local _comConfig = _battleObject:GetComponent(BattleObjectComponentType.Config)
    ---@type Leader
    local _leader = _comConfig:GetInstanceXls()

    ---@type string 当前子弹能量属性id
    self.curBulletPropName = BattlePropertyEnum.BulletEnergyCur
    if _leader.bulletProps and #_leader.bulletProps == 3 then
        -- 配置了子弹能量相关值
        self.curBulletPropName = ProtoEnumTool.GetPropertyKey(_leader.bulletProps[1])
    end

    ---@type string 最大子弹能量属性id
    self.maxBulletPropName = BattlePropertyEnum.BulletEnergyMax
    if _leader.bulletProps and #_leader.bulletProps == 3 then
        -- 配置了子弹能量相关值
        self.maxBulletPropName = ProtoEnumTool.GetPropertyKey(_leader.bulletProps[2])
    end

    ---@type number 最大子弹能量数值
    self.maxBulletValue = self._componentProperty:GetPropertyByName(self.maxBulletPropName)

    if not self.maxBulletValue or self.maxBulletValue == 0 then
        -- 外部没有传入属性，设置读表子弹能量最大值
        if _leader.bulletProps and #_leader.bulletProps == 3 then
            self.maxBulletValue = _leader.bulletProps[3]
        else
            self.maxBulletValue = self.weaponHighValue_xls.limit
        end
        self._componentProperty:InitSpecificPropBasic(self.maxBulletPropName, self.maxBulletValue)
    end

    -- 设置当前子弹数
    self._componentProperty:ChangeBulletEn(self.maxBulletValue, self.curBulletPropName, self.maxBulletPropName)

    -- 设置最大极奏能量
    if self:GetObject():GetObjectType() == BattleObjectType.LeaderHero then
        ---@type BattleObjCom_Skill
        local skillComp = self.__object:GetComponent(BattleObjectComponentType.Skill)
        if not skillComp then
            return;
        end
        ---@type Leader
        local leader = self:GetObject():GetDataInstanceXls()

        local skillModel = self.battleRoom.inputDataSource:GetSkillModel(leader.jizouSkillGroup)
        if skillModel then
            local superCast = self.battleRoom.inputDataSource:GetSkillFinalParam(skillModel.superCast, skillModel.skillId, skillComp:GetSkillLevel(skillModel.skillId))
            self._componentProperty:InitSpecificPropBasic(BattlePropertyEnum.Jizou_Max, superCast)
        end
    end
end

---@private
function BattleObjCom_Weapon:__InitDataTable()
    ---@type Weapon
    self.weapon_xls = self.battleRoom.inputDataSource:GetDict("Weapon", self.currentWeapon:GetId())
    ---@type WeaponWaste
    self.weaponWaste_xls = self.battleRoom.inputDataSource:GetDict("WeaponWaste", self.weapon_xls.type)
    ---@type WeaponDistance
    self.weaponDistance_xls = self.battleRoom.inputDataSource:GetDict("WeaponDistance", self.weapon_xls.type)
    ---@type WeaponHighValue
    self.weaponHighValue_xls = self.battleRoom.inputDataSource:GetDict("WeaponHighValue", self.currentWeapon:GetId())

    ---@type BattleDefault
    local energyRepairRatiosTable = self.battleRoom.inputDataSource:GetDict("BattleDefault", BATTLE_WEAPON_CONST.ENERGY_REPAIR_RATIO)
    ---@type number[]
    local energyRepairRatios = energyRepairRatiosTable.value6

    ---@type number 阵上修正参数
    self.inFormationEnRatio = energyRepairRatios[1]
    ---@type number 阵下修正参数
    self.outFormationEnRatio = energyRepairRatios[2]
end

--- 进入过载状态
--- 服务器广播所有客户端包括服务器自己
---@public
function BattleObjCom_Weapon:BroadcastEnterOverLoad()
    -- 通知客户端过载了
    local msg = {
        netId = self:GetObject():GetParentUnit():GetNetId(),
        objectId = self:GetObject():GetObjectId()
    }
    self.battleRoom.outputDataSource:WeaponEnterOverLoad_S2C(msg)
end

--- 进入过载状态
---@public
function BattleObjCom_Weapon:EnterOverLoad()
    if self:IsOverLoad() then
        return
    end
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Weapon", "__EnterOverLoad", "objectId", self:GetObject():GetObjectId())
    end
    self.overLoad = true
    local msg = {
        netId = self:GetObject():GetParentUnit():GetNetId(),
        objectId = self:GetObject():GetObjectId()
    }
    self.battleRoom.outputDataSource:WeaponEnterOverLoad_L2V(msg)
end

--- 退出过载状态
--- 服务器广播所有客户端包括服务器自己
---@public
function BattleObjCom_Weapon:BroadcastExitOverLoad()
    -- 通知客户端退出过载了
    local msg = {
        netId = self:GetObject():GetParentUnit():GetNetId(),
        objectId = self:GetObject():GetObjectId()
    }
    self.battleRoom.outputDataSource:WeaponExitOverLoad_S2C(msg)
end

--- 退出过载状态
---@public
function BattleObjCom_Weapon:ExitOverLoad()
    if not self:IsOverLoad() then
        return
    end
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Weapon", "__ExitOverLoad", "objectId", self:GetObject():GetObjectId())
    end
    self.overLoad = false

    local msg = {
        netId = self:GetObject():GetParentUnit():GetNetId(),
        objectId = self:GetObject():GetObjectId()
    }
    self.battleRoom.outputDataSource:WeaponExitOverLoad_L2V(msg)
end

---过载状态
---@public
function BattleObjCom_Weapon:IsOverLoad()
    return self.overLoad
end

-- 进入能量恢复状态
---@private
function BattleObjCom_Weapon:__BroadcastEnterRecoverEnergyState()
    self:EnterRecoverEnergyState()
    local msg = {
        netId = self:GetObject():GetParentUnit():GetNetId(),
        objectId = self:GetObject():GetObjectId()
    }
    self.battleRoom.outputDataSource:WeaponEnterRecoverEnergyState_S2C(msg)
end

-- 记录进入能量回复状态时间
function BattleObjCom_Weapon:EnterRecoverEnergyState()
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Weapon", "__EnterRecoverEnergyState", "netId", self:GetObject():GetParentUnit():GetNetId(), "objectId", self:GetObject():GetObjectId())
    end
    self.enterRecoverEnergyTime = TimeUtils.battleNow(self:GetBattleId())
end

-- 退出能量恢复状态
---@private
function BattleObjCom_Weapon:__BroadcastExitRecoverEnergyState()
    self:ExitRecoverEnergyState()
    local msg = {
        netId = self:GetObject():GetParentUnit():GetNetId(),
        objectId = self:GetObject():GetObjectId()
    }
    self.battleRoom.outputDataSource:WeaponExitRecoverEnergyState_S2C(msg)
end

-- 重置进入能量回复状态时间
function BattleObjCom_Weapon:ExitRecoverEnergyState()
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Weapon", "__ExitRecoverEnergyState", "netId", self:GetObject():GetParentUnit():GetNetId(), "objectId", self:GetObject():GetObjectId())
    end
    self.enterRecoverEnergyTime = 0
end

-- 是否处于能量恢复状态
---@private
function BattleObjCom_Weapon:__IsRecoverEnergyState()
    return self.enterRecoverEnergyTime > 0
end

-- 获取最大子弹能量
---@return number
function BattleObjCom_Weapon:__GetEnergyMax()
    local _maxEn = self._componentProperty:GetPropertyByName(self.maxBulletPropName)
    if not _maxEn then
        return 0
    end
    return _maxEn
end

---进入换弹状态
---@public
---@param _reloadTime number 换弹时间
---@param _isAuto boolean 是否自动换弹
function BattleObjCom_Weapon:EnterReloadState(_reloadTime, _isAuto)
    self:EnterRecoverEnergyState()

    local msg = {}
    msg.netId = self:GetObject():GetParentUnit():GetNetId()
    msg.objectId = self:GetObject():GetObjectId()
    msg.reloadStateTime = _reloadTime
    msg.isAuto = _isAuto
    self.battleRoom.outputDataSource:ReloadBulletStart_S2C(msg)
end

---退出换弹状态
---@public
function BattleObjCom_Weapon:ExitReloadState()
    self:ExitRecoverEnergyState()

    local msg = {}
    msg.netId = self:GetObject():GetParentUnit():GetNetId()
    msg.objectId = self:GetObject():GetObjectId()
    self.battleRoom.outputDataSource:ReloadBulletEnd_S2C(msg)
end

---是否处于换弹状态
---@public
---@return boolean
function BattleObjCom_Weapon:IsInReloadState()
    return self:__IsRecoverEnergyState()
end

---换弹
---@public
function BattleObjCom_Weapon:Reload()
    -- 换弹结束，调整当前子弹能量
    local _maxEn = self:__GetEnergyMax()
    -- 设置当前子弹数
    self._componentProperty:ChangeBulletEn(_maxEn, self.curBulletPropName, self.maxBulletPropName, true)
    -- 清除过载状态等
    self:BroadcastExitOverLoad()
end

---是否满弹
---@public
---@return boolean
function BattleObjCom_Weapon:IsBulletFull()
    return self._componentProperty:GetBulletEn() >= self:__GetEnergyMax()
end

---是否空弹
---@public
---@return boolean
function BattleObjCom_Weapon:IsBulletNil()
    return self._componentProperty:GetBulletEn() <= 0
end

------------------------------------------------------------------------------------------------------------------------

-- 添加武器
---@param _weapon BattlePlayerWeapon
function BattleObjCom_Weapon:AddWeapon(_weapon)
    if not _weapon then
        return
    end
    self.weapons[_weapon:GetId()] = _weapon
end

-- 武器伤害加成
---@public
---@param _distance number 双方距离
---@param _damage number 伤害值
---@return number 加成后的伤害值
function BattleObjCom_Weapon:DamageIncrease(_distance, _damage)
    if not _damage or _damage == 0 then
        return 0
    end
    local ratio = self.battleRoom.inputDataSource:getDistanceRatioByRangeIndex(self.weaponDistance_xls.type, _distance)
    return _damage * ratio
end

-- 能量消耗修正
function BattleObjCom_Weapon:__GetEnergyCostRepair(_cost)
    if _cost == 0 or _cost == nil then
        -- 不消耗
        return 0
    end
    _cost = Mathf.Abs(_cost)
    -- 能量消耗率
    local _consumeRepair = self._componentProperty:GetPropertyByName(BattlePropertyEnum.BulletEnergyConsume)
    if _consumeRepair and _consumeRepair > 0 then
        _cost = _cost * (1 - _consumeRepair)
    end
    -- 蓄力能量消耗加成
    local _holdingAtkConsumeAdd = self._componentProperty:GetPropertyByName(BattlePropertyEnum.HoldingAtkConsumeAdd)
    if _holdingAtkConsumeAdd and _holdingAtkConsumeAdd > 0 then
        _cost = _cost * (1 + _holdingAtkConsumeAdd)
    end
    -- 能量消耗
    return _cost
end

-- 检测武器是否能放子弹
---@public
---@param _cost number 消耗数量
---@return boolean
function BattleObjCom_Weapon:CheckUseSkill(_cost)
    if _cost == 0 then
        -- 不消耗能量不检测
        return true
    end

    -- 计算这期间恢复的能量(仅服务器计算，客户端每帧计算)
    --if self:__IsRecoverEnergyState() and IsServer() then
    --    self:__DoRecoverEnergy((TimeUtils.battleNow(self:GetBattleId()) - self.enterRecoverEnergyTime) / 1000)
    --end

    if self:IsOverLoad() then
        return false
    end

    --问下子弹消耗是你负责吗，问个问题 ；   0<当前能量<子弹能量消耗，可不可以释放出技能（子弹）
    --
    --我看看代码
    --目前是不能
    --
    --之前颜良是不是提过
    --
    --提过啥？
    --
    --0<当前能量<子弹能量消耗    可以打出这次子弹
    --
    --不知道啊。。
    --问问呗，可以打就改过来
    --
    --改一下吧
    --新消息
    --当前能量＜消耗能量时，可以把子弹打出来
    --能量扣到0
    --return self._componentProperty:GetBulletEn() >=  self:__GetEnergyCostRepair(_cost)
    return self._componentProperty:GetBulletEn() >  0
end

-- 武器放子弹消耗
---@public
---@param _skillId number 技能id
---@param _cost number 消耗数量
---@return boolean
function BattleObjCom_Weapon:CostUseSkill(_skillId, _cost)
    --LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Weapon", "CostUseSkill", "_cost", _cost)
    if not self:CheckUseSkill(_cost) then
        return false
    end
    if _cost == 0 then
        -- 不消耗能量不走子弹能量的逻辑
        return true
    end

    if self:IsOverLoad() then
        return false
    end
    _cost = self:__GetEnergyCostRepair(_cost)
    if _cost == 0 then
        -- 不消耗
        return true
    end

    -- 设置属性
    self._componentProperty:ChangeBulletEn(-_cost, self.curBulletPropName, self.maxBulletPropName)

    local _object = self:GetObject()
    -- 子弹能量扣除事件
    self.battleRoom.battleLogicEventService:OnTriggerWeaponEnergyCostEvent(_object:GetParentUnit():GetNetId(), _object:GetObjectId(), 1, _skillId, Mathf.Abs(_cost))
    return true
end

---@public
function BattleObjCom_Weapon:GetCurrentWeapon()
    return self.currentWeapon
end

---@public
function BattleObjCom_Weapon:Clear()
    self:__Clear()
    self.overLoad = false
    self.recoverEnergy = true
end

return BattleObjCom_Weapon;
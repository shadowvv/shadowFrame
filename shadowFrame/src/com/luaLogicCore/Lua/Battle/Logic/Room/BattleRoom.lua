---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2021/12/13 18:22
--- 战斗房间

require "Lib/class"
require "Battle/Utils/IdCreator"
require "Battle/Logic/Room/BattleOutputData"
require "Battle/Logic/LuaBehav/LuaBehav_RuntimeManager"
require "Battle/Logic/Room/Component/BattleRoomStatusManager"
require "Battle/Logic/Room/Component/BattleRoomObjectManager"
require "Battle/Logic/Room/BattleObject/Player/BattlePlayerCreator"
require "Battle/Logic/Room/BattleObject/Monster/BattleMonsterCreator"

---@class BattleRoom : table 战斗房间
BattleRoom = class(nil,'BattleRoom');

if IsServer() then
    require "Battle/Logic/Room/Component/Server/ServerEventDispatcher"
    require "Battle/Logic/Room/Component/Server/ServerInputDataSource"
    require "Battle/Logic/Room/Component/Server/ServerExceptionProcessor"
    require "Battle/Logic/Room/Component/Server/ServerOutputDataProcessor"
else
    require "Battle/Logic/Room/Component/Client/ClientInputDataSource"
    require "Battle/Logic/Room/Component/Client/ClientExceptionProcessor"
    require "Battle/Logic/Room/Component/Client/ClientOutputDataProcessor"
end

function BattleRoom:ctor()
    -- 初始化协议
    InitProtoMap();
    -- 战斗玩家生成器单例
    ---@type BattlePlayerCreator
    BATTLE_PLAYER_CREATOR = BattlePlayerCreator:New();
    ---@type BattleMonsterCreator
    BATTLE_MONSTER_CREATOR = BattleMonsterCreator.New()

    if IsServer() then
        ---@type ServerOutputDataProcessor
        self.outputDataProcessor = ServerOutputDataProcessor:New();
        ---@type ServerExceptionProcessor
        self.exceptionProcessor = ServerExceptionProcessor:New();
        ---@type ServerInputDataSource
        BATTLE_INPUT_DATA_SOURCE = ServerInputDataSource:New();
        ---@type ServerEventDispatcher
        SERVER_EVENT_DISPATCHER = ServerEventDispatcher:New();
    else
        ---@type ClientOutputDataProcessor
        self.outputDataProcessor = ClientOutputDataProcessor:New();
        ---@type ClientExceptionProcessor
        self.exceptionProcessor = ClientExceptionProcessor:New();
        ---@type ClientInputDataSource
        BATTLE_INPUT_DATA_SOURCE = ClientInputDataSource:New();
    end
    ---@type BattleRoomObjectManager
    self.battleRoomObjectManager = BattleRoomObjectManager:New();
    ---@type BattleRoomStatusManager
    self.roomStatusManager = BattleRoomStatusManager:New();
    ---@type LuaBehav_RuntimeManager
    self.behaviorManager = LuaBehav_RuntimeManager.New()

    self.roomStatusManager:Enter(BATTLE_ROOM_CREATE_STATUS);
end

-- 设置客户端logic_core的玩家Id
---@public
---@param _playerId number 客户端logic_core的玩家Id
function BattleRoom:SetClientPlayerId(_playerId)
    ---@type number 客户端logic_core的玩家Id
    self.clientPlayerId = _playerId;
end

-- 初始化战斗房间
---@public
---@param _battleData table 初始化战斗房间协议
function BattleRoom:InitialBattleRoom(_battleData)
    if _battleData == nil then
        self.exceptionProcessor:OnBattleDataNil();
        return;
    end

    ---@type number 战斗id
    self.battleId = _battleData.battleId;
    ---@type number 关卡id
    self.mainLevelId = _battleData.mailLevelId;
    for index, value in ipairs(_battleData.battlePlayerInfo) do
        local player = BATTLE_PLAYER_CREATOR:CreatePlayer(value);
        self.battleRoomObjectManager:AddPlayer(player);
    end
    
    -- 初始化现存的怪物信息
    --for _, _battleMonsterInfo in ipairs(_battleData.battleMonsterInfo) do
    --    local _monster = BATTLE_MONSTER_CREATOR:CreateMonster(_battleMonsterInfo)
    --    --self.outputDataProcessor:RegisterPlayer(value.playerId);
    --    self.battleRoomObjectManager:AddMonster(_monster)
    --end

    BATTLE_INPUT_DATA_SOURCE:Init(self.clientPlayerId);
    self.outputDataProcessor:Init(self.battleId);
    -- 初始化行为树
    self.behaviorManager:Init(false)
    -- 这里根据具体的配置获取编辑器导出的行为树数据
    local _behavTreeName = "LevelBehav_10000"
    local _testTree = LuaBehav_ConfigDataRequirer.GetConfig(_behavTreeName)
    -- 装载行为树数据，某些可以预加载的部分可以在预加载过程中进行
    local _index = self.behaviorManager:AddBehavTree(_testTree)
    -- 唤醒需要开始执行的具体行为树，未唤醒的行为树不会被行为树管理器tick到
    self.behaviorManager:AwakeBehavTree(_index)

    self.roomStatusManager:Enter(BATTLE_ROOM_INITIALIZED_STATUS);
    self.roomStatusManager:Enter(BATTLE_ROOM_READY_STATUS);
end

-- 战斗开始
---@public
function BattleRoom:OnBattleStart()
    print("OnBattleStart");
end

-- 战斗暂停
---@public
function BattleRoom:OnBattlePause()
    print("OnBattlePause");
end

-- 战斗恢复
---@public
function BattleRoom:OnBattleResume()
    print("OnBattleResume");
end

-- 战斗重置
---@public
function BattleRoom:OnBattleReset()
    print("OnBattleReset");
end

-- 创建玩家角色
---@public
---@param _leader number 玩家leaderId。如果为nil或者-1，使用默认leaderId
function BattleRoom:CreateAllPlayerCharacter(_leader)
    local createPlayerCharacter2View = {};
    createPlayerCharacter2View.playerInfo = {};

    if _leader == nil or _leader == -1 then
        for index, value in pairs(self.battleRoomObjectManager:GetAllPlayer()) do
            local playerShowBasicInfo = {};
            playerShowBasicInfo.playerId = value:GetPlayerId();
            local currentLeader = value:GetCurrentLeader();
            playerShowBasicInfo.leaderId = currentLeader:GetId();
            playerShowBasicInfo.netId = currentLeader:GetNetId();
            table.insert(createPlayerCharacter2View.playerInfo,playerShowBasicInfo)

            -- 测试代码
            if IsServer() then
                local tempMessage = {};
                tempMessage.moveParam = Vector3.New(1,0,0);
                tempMessage.cameraParam = Vector3.New(0,0,0);
                self:OnReceiveMessage(value:GetPlayerId(),12003,tempMessage);
            end
        end
    else

    end

    self.outputDataProcessor:CreatePlayerCharacter(createPlayerCharacter2View);
end

-- 生成战场单位
---@param _id number 战斗单位id
function BattleRoom:CreateBattleObject(_id)
    print("create battle object " .. tostring(_id));
end

-- 生成战场怪物单位
-- todo: 目前只是测试用的，实际数据怎么来等正式将怪物接入流程时再改
function BattleRoom:CreateBattleMonster(_instanceId)
    local _battleMonsterInfo = {}
	_battleMonsterInfo.instanceId = _instanceId
	_battleMonsterInfo.calcPropModelInfo = {}
	_battleMonsterInfo.calcPropModelInfo.attributeMap = {}
	_battleMonsterInfo.calcPropModelInfo.growMap = {}
	_battleMonsterInfo.calcPropModelInfo.capability = 100
    
    local _monster = BATTLE_MONSTER_CREATOR:CreateMonster(_battleMonsterInfo)
    --self.outputDataProcessor:RegisterPlayer(value.playerId)
    self.battleRoomObjectManager:AddMonster(_monster)
    
    --self.outputDataProcessor:CreatePlayerCharacter(createPlayerCharacter2View)
    return _monster
end

-- 启动逻辑
---@public
function BattleRoom:StartLogicTick()
    ---@type number 战斗持续时间
    self.battleRunTime = 0;
    self.roomStatusManager:Enter(BATTLE_ROOM_RUN_STATUS);
end

-- 玩家移动
---@public
---@param _playerId number 玩家id
---@param _moveParam Vector3 玩家移动参数
---@param _cameraParam Vector3 玩家镜头参数
function BattleRoom:OnPlayerMove(_playerId,_moveParam,_cameraParam)
    local player = self.battleRoomObjectManager:GetPlayer(_playerId);
    if player ~= nil then
        player:GetActionManager():Move(_moveParam,_cameraParam);
    end
end

-- 切换角色
function BattleRoom:OnPlayerChangeLeader(_message)
    ---@type BattlePlayer
    local player = self.battleRoomObjectManager:GetPlayer(_message:GetUid());
    if player ~= nil then
        player:GetActionManager():PlayerChangeLeader(_message:GetMessage().leaderNetId);
    end
end

-- 驱动房间
---@public
---@param _dt number 更新时间
---@param _frameId number 帧号
function BattleRoom:Run(_dt,_frameId)
    self.roomStatusManager:Run(_dt,_frameId);
end

-- 处理战斗房间相关消息
---@public
function BattleRoom:RunRoomMessage()
    local roomMessages = BATTLE_INPUT_DATA_SOURCE:DrainAllRoomMessage();
    for i, v in pairs(roomMessages) do
        local proto = PROTO_CODE_MAP[tostring(v:GetId())];
        if proto ~= nil then
            proto:GetCallBack()(v);
        end
    end
end

-- 运行游戏逻辑
function BattleRoom:RunLogic(_dt,_frameId)

    self.battleRunTime = self.battleRunTime + _dt;

    self:RunPlayerMessage();
    -- 行为树先行
    self.behaviorManager:OnUpdate(_dt)

    local BattleOutputData = {};
    BattleOutputData.info = {};
    
    local players = self.battleRoomObjectManager:GetAllPlayer();
    for i, player in pairs(players) do
        local outputData = player:DoAction(_dt);
        if outputData ~= nil and #outputData > 0 then
            for _, data in pairs(outputData) do
                table.insert(BattleOutputData.info,data);
            end
        end
    end
    
    ----遍历怪物的行为获取输出
    --local _monsters = self.battleRoomObjectManager:GetAllMonster()
    --for _,_monster in pairs(_monsters) do
    --    local _outputDatas = _monster:DoAction(_dt)
    --    if _outputDatas and #_outputDatas > 0 then
    --        for i, _outputData in pairs(_outputDatas) do
    --            table.insert(BattleOutputData.info, _outputData)
    --        end
    --    end
    --end
    
    if #BattleOutputData.info > 0 then
        self.outputDataProcessor:AddOutputData(BattleOutputData);
        print(dump(BattleOutputData))
    end
end

-- 处理玩家相关消息
---@private
function BattleRoom:RunPlayerMessage()
    local playerCommands = BATTLE_INPUT_DATA_SOURCE:DrainAllCommand();
    for i, v in pairs(playerCommands) do
        local proto = PROTO_CODE_MAP[tostring(v:GetId())];
        if proto ~= nil then
            proto:GetCallBack()(v);
        end
    end
end

-- 接收玩家命令接口
---@public
---@param _uid number 发送协议的玩家id，如果是战斗房间消息该值为nil
---@param _id number 协议id
---@param _msgTable table 协议
function BattleRoom:OnReceiveMessage(_uid, _id, _msgTable)
    BATTLE_INPUT_DATA_SOURCE:OnReceiveMessage(_uid, _id, _msgTable);
end

-- 获取战斗id
function BattleRoom:GetBattleId()
    return self.battleId;
end

-------------------------------------- 事件回调方法
-- 玩家掉线
---@public
---@param _playerId number 玩家Id
function BattleRoom:OnPlayerDisconnect(_playerId)
    self.roomStatusManager:OnPlayerDisconnect(_playerId);
end

-- 玩家重连
---@public
---@param _playerId number 玩家Id
function BattleRoom:OnPlayerReconnect(_playerId)
    self.roomStatusManager:OnPlayerReconnect(_playerId);
end

-- 玩家离开房间
---@public
---@param _playerId number 玩家Id
function BattleRoom:OnPlayerLeave(_playerId)
    self.roomStatusManager:OnPlayerLeave(_playerId);
end

-- 玩家进入战斗房间
---@public
---@param _playerId number 玩家Id
function BattleRoom:OnPlayerEnter(_playerId)
    self.roomStatusManager:OnPlayerEnter(_playerId);
end

return BattleRoom;
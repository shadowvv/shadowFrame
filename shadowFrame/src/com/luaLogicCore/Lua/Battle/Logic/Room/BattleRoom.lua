---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2021/12/13 18:22
--- 战斗房间

require "Battle/Utils/TableUtil"
require "Battle/Utils/IdCreator"
require "Battle/Utils/ProtoEnumTool"
require "Battle/Utils/TimeUtils"
require "Battle/Utils/RandomUtils"
require "Battle/Utils/HurtCollectorUtil"
require "Battle/Utils/PoolObj/Utils_BasePool"
require "Battle/Logic/LuaBehav/LuaBehav_RuntimeManager"
require "Battle/Logic/Room/Component/BattleObjectManager"
require "Battle/Logic/Room/Component/BattleUnitManager"
require "Battle/Logic/Room/BattleObject/Unit/BattleUnitTransUtil"
require "Battle/Logic/Room/BattleObject/LevelTrigger/LevelTriggerManager"
require "Battle/Logic/Room/BattleObject/ActionStateManage"
require "Battle/Logic/Room/BattleObject/BattleElement/BattleElementTypeEnum"
require "Battle/Logic/Room/BattleObject/BattleElement/ElementSource/ElementSourceType"
require "Battle/Logic/Room/Fall/Condition/FallConditionEnum"
require "Battle/Logic/Room/Fall/FallObjectManager"
require "Battle/Logic/Room/BattlePlayerAct/BattlePlayerActManager"
require "Battle/Logic/Room/BattlePlayerAct/BattlePlayerAct_Define"
require "Battle/Logic/Room/BattleLevel/BattleLevelManager"
require "Battle/Logic/Room/BattleLevel/LevelUnit/LevelUnitTypeEnum"
require "Battle/Logic/Room/BattleLevel/LevelUnit/LevelUnitStateEnum"
require "Battle/Logic/Room/BattleRoomEvent/BattleRoomEventEnum"
require "Battle/Logic/Room/BattleResult/BattleResultEnum"
require "Battle/Logic/Room/BattleLevel/TimingType/TimingTypeEnum"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicEventServiceV2"
require "Battle/Logic/Room/HurtChannel/HurtManager"
require "Battle/Logic/Room/BattleGuide/BattleGuideManager"
require "Battle/Logic/BarrageEjector/BarrageEjectorManager"
require "Battle/Logic/Room/Element/ElementManager"
require "Battle/Logic/Room/BattleType/BattleTypeEnum"
require "Battle/Logic/Room/GetBattleData/GetDataEnum"
require "Battle/Logic/Room/Tag/TagManager"
require "Battle/Logic/Skill/SkillTypeEnum"
require "Battle/Logic/Constants/BattleConst"
require "Battle/Logic/Room/DataCollect/DataCollectManager"
require "Battle/Logic/Room/BattleField/BattleField"
require "Battle/Logic/RogueUnitSkill/RogueUnitSkillService"

---@class BattleRoom : table 战斗房间
BattleRoom = class(nil, 'BattleRoom');

if IsServer() then
    require "Battle/Logic/Room/Component/Server/ServerInputDataSource"
    require "Battle/Logic/Room/Component/Server/ServerExceptionProcessor"
    require "Battle/Logic/Room/Component/Server/ServerOutputDataProcessor"
    require "Battle/Logic/Room/Component/Server/ServerBehaviorProcessor"
else
    require "Battle/Logic/Room/Component/Client/ClientInputDataSource"
    require "Battle/Logic/Room/Component/Client/ClientExceptionProcessor"
    require "Battle/Logic/Room/Component/Client/ClientOutputDataProcessor"
    require "Battle/Logic/Room/Component/Client/ClientBehaviorProcessor"
    require "Battle/Configs/BarrageConfig/BarrageSysConfigsRequirer"
end

function BattleRoom:ctor(_battleId)
    ---@type number 战斗id
    self.battleId = _battleId
end

function BattleRoom:Init()
    ---@type boolean 是否初始完成
    self.__init = false
    ---@type number 战斗进入时间
    self.battleEnterTime = TimeUtils.battleNow(self.battleId)
    ---@type RandomUtils
    self.randomUtil = RandomUtils.New(self.battleId)
    ---@type IdCreator
    self.idCreator = IdCreator.New(self.battleId)
    ---@type BattleLogicEventServiceV2
    self.battleLogicEventService = BattleLogicEventServiceV2.New(self.battleId);
    ---@type BattleFiled
    self.battleField = BattleField:New();
    self.battleField:Init(nil)
    ---@type TableUtil
    self.tableUtil = TableUtil.New()
    self.tableUtil:Init()
    ---@type Vector3Pool
    self.vector3Pool = Vector3Pool.New()
    self.vector3Pool:Init()
    ---@type QuaternionPool
    self.quaternionPool = QuaternionPool.New()
    self.quaternionPool:Init()
    ---@type HurtCollectorUtil
    self.hurtCollectorUtil = HurtCollectorUtil.New()
    self.hurtCollectorUtil:Init(self)

    -- 服务器和客户端不同实现
    if IsServer() then
        ---@type ServerOutputDataProcessor
        self.outputDataSource = ServerOutputDataProcessor.New(self.battleId);
        ---@type ServerExceptionProcessor
        self.exceptionProcessor = ServerExceptionProcessor.New(self.battleId);
        ---@type ServerInputDataSource
        self.inputDataSource = ServerInputDataSource.New(self.battleId);
        ---@type ServerBehaviorProcessor
        self.behaviorProcessor = ServerBehaviorProcessor.New(self.battleId);
    else
        ---@type ClientOutputDataProcessor
        self.outputDataSource = ClientOutputDataProcessor.New(self.battleId);
        ---@type ClientExceptionProcessor
        self.exceptionProcessor = ClientExceptionProcessor.New(self.battleId);
        ---@type ClientInputDataSource
        self.inputDataSource = ClientInputDataSource.New(self.battleId);
        ---@type ClientBehaviorProcessor
        self.behaviorProcessor = ClientBehaviorProcessor.New(self.battleId);
    end

    ---@type TagManager
    self.tagManager = TagManager.New(self.battleId)
    ---@type BattleObjectManager
    self.battleObjectManager = BattleObjectManager.New(self.battleId)
    ---@type BattleUnitManager
    self.battleUnitManager = BattleUnitManager.New(self.battleId)
	---@type BattleUnitTransUtil
	self.transUtil = BattleUnitTransUtil.New()
    ---@type BarrageEjectorManager
    self.ejectorManager = BarrageEjectorManager.New(self.battleId)
    ---@type HurtManager
    self.hurtManager = HurtManager.New(self.battleId)
    ---@type ElementManager
    self.elementManager = ElementManager.New(self.battleId)
    ---@type LevelTriggerManager
    self.levelTriggerManager = LevelTriggerManager.New(self.battleId)
    ---@type LuaBehav_RuntimeManager
    self.behaviorManager = LuaBehav_RuntimeManager.New(false, self.battleId)
    ---@type BattleLevelManager
    self.battleLevelManager = BattleLevelManager.New(self.battleId);
    ---@type BattlePlayerActManager
    self.battlePlayerActManager = BattlePlayerActManager.New(self.battleId)
    ---@type BattleGuideManager
    self.battleGuideManager = BattleGuideManager.New(self.battleId)
    ---@type DataCollectManager
    self.dataCollectManager = DataCollectManager.New(self.battleId)
    ---@type FallObjectManager
    self.fallObjectManager = FallObjectManager.New(self.battleId)
    ---@type RogueUnitSkillService
    self.rogueUnitSkillService = RogueUnitSkillService.New(self.battleId)

    ---@type boolean 战斗单位运行逻辑
    self.__runUnitLogic = false
    
    ---关卡是否被全部暂停
    ---@private
    self.__levelAllPaused = false
    ---@type number
    self.levelAllPauseTime = 0
    ---关卡计时是否被暂停
    ---@private
    self.__levelTimePaused = false
    ---@type number
    self.levelTimePauseTime = 0
    ---关卡一般逻辑是否被暂停（不包含关卡行为树）
    ---@private
    self.__levelNormalLogicPaused = false
    ---@type number
    self.levelNormalLogicPauseTime = 0
end

-- 初始化战斗房间
---@public
---@param _battleEnterInfo table 初始化战斗房间协议 msg.BattleEnterInfo
function BattleRoom:InitialBattleRoom(_battleEnterInfo)
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleRoom", "InitialBattleRoom start", dumpTableEx(_battleEnterInfo))
    end

    if _battleEnterInfo == nil then
        self.exceptionProcessor:OnBattleDataNil("_battleEnterInfo nil")
        return
    end

    self.battleEnterInfo = _battleEnterInfo
    ---@type number 战斗id
    self.battleId = _battleEnterInfo.battleId
    self.battleType = GetBattleTypeById(_battleEnterInfo.battleType)
    ---@type boolean 是否是独立游戏（不连接战斗服）
    self.indieGame = _battleEnterInfo.indieGame
    ---@type number[] 关卡玩家buff
    self.levelPlayerBuffIds = _battleEnterInfo.playerBuffIds
    ---@type number[] 关卡怪物buff
    self.levelMonsterBuffIds = _battleEnterInfo.monsterBuffIds
    ---@type number[]  附加的玩家天生BUFF
    self.dynamicPlayerBuffIds = {}
    ---@type number[]  附加的怪物天生BUFF
    self.dynamicMonsterBuffIds = {}
    ---@type number 当前赛季
    self.season = _battleEnterInfo.season

    ---@type number 初始化随机数种子
    self.randomUtil:Init(_battleEnterInfo.randomSeed)
    self.inputDataSource:Init(_battleEnterInfo.battlePlayerInfo)
    --- tag
    self.tagManager:Init()
    --- 关卡流程
    self.battleLevelManager:Init(_battleEnterInfo)
    --- 战斗object
    self.battleObjectManager:Init(self)
    --- 战斗单位
    self.battleUnitManager:Init(self)
    --- 单位trans信息计算辅助类
    self.transUtil:Init(self)
    --- 发射器
    self.ejectorManager:Init()
    --- 伤害
    self.hurtManager:Init()
    --- 元素反应
    self.elementManager:Init()
    --- 关卡触发器
    self.levelTriggerManager:Init(self)
    --- 初始化行为树管理器
    self.behaviorManager:Init(false, self.battleId)
    --- 掉落物
    self.fallObjectManager:Init()
    -- 关卡表演管理
    self.battlePlayerActManager:Init()
    --- 战斗引导
    self.battleGuideManager:Init()
    --- 统计
    self.dataCollectManager:Init()
    ProtoEnumTool.Init()

    ---玩家初始数据
    self.battleUnitManager:InitOriginalPlayerInfo(_battleEnterInfo.battlePlayerInfo)
    -- 初始所有玩家的战斗引导
    for _, _battlePlayerInfo in pairs(_battleEnterInfo.battlePlayerInfo) do
        self.battleGuideManager:InitPlayerGuides(_battlePlayerInfo.playerId, _battlePlayerInfo.completeGuideIds)
    end

    -- 开始关卡流程
    self.battleLevelManager:Start()
    -- 开启关卡行为树
    self.battleLevelManager.levelConfigManager:AwakeLevelBehav()
    self.__init = true

    self:printInitBattleLog(_battleEnterInfo)
end

-- 战斗单位开始运行逻辑
---@public
function BattleRoom:SetUnitRunLogic()
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleRoom", "RunLogic", "Unit", "Run")
    end
    self.__runUnitLogic = true
end

-- 战斗单位停止运行逻辑
---@public
function BattleRoom:SetUnitStopLogic()
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleRoom", "RunLogic", "Unit", "Stop")
    end
    self.__runUnitLogic = false
end

-- 战斗单位逻辑是否运行
---@public
function BattleRoom:IsUnitLogicRun()
    return self.__runUnitLogic
end

function BattleRoom:__OnResumeAllLevel()
    local msg = {
        time = self.levelAllPauseTime + self.levelTimePauseTime
    }
    self.outputDataSource:SyncLevelPauseTime_S2C(msg)
end

function BattleRoom:__OnResumeLevelTime()
    local msg = {
        time = self.levelAllPauseTime + self.levelTimePauseTime
    }
    self.outputDataSource:SyncLevelPauseTime_S2C(msg)
end

function BattleRoom:__OnResumeLevelNormalLogic()
end

---关卡计时是否暂停
---@public
function BattleRoom:CheckPauseAllLevel()
    return self.__levelAllPaused
end

---暂停关卡计时
---@public
function BattleRoom:PauseAllLevel()
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleRoom", "PauseAllLevel")
    end
    self.__levelAllPaused = true
    self.behaviorManager:PauseLevelBehav()
end

---恢复关卡计时
---@public
function BattleRoom:ResumeAllLevel()
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleRoom", "ResumeAllLevel")
    end
    self.__levelAllPaused = false
    self.behaviorManager:ResumeLevelBehav()
    self:__OnResumeAllLevel()
end

---关卡计时是否暂停
---@public
function BattleRoom:CheckPauseLevelTime()
    return self.__levelTimePaused
end

---暂停关卡计时
---@public
function BattleRoom:PauseLevelTime()
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleRoom", "PauseLevelTime")
    end
    self.__levelTimePaused = true
end

---恢复关卡计时
---@public
function BattleRoom:ResumeLevelTime()
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleRoom", "ResumeLevelTime")
    end
    self.__levelTimePaused = false
    self:__OnResumeLevelTime()
end

---关卡一般逻辑是否暂停
---@public
function BattleRoom:CheckPauseLevelNormalLogic()
    return self.__levelNormalLogicPaused
end

---暂停关卡一般逻辑
---@public
function BattleRoom:PauseLevelNormalLogic()
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleRoom", "PauseLevelNormalLogic")
    end
    self.__levelNormalLogicPaused = true
    if self.behaviorManager then
        self.behaviorManager:PauseUnitBehav()
    end
end

---恢复关卡一般逻辑
---@public
function BattleRoom:ResumeLevelNormalLogic()
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleRoom", "ResumeLevelNormalLogic")
    end
    self.__levelNormalLogicPaused = false
    if self.behaviorManager then
        self.behaviorManager:ResumeUnitBehav()
    end
    self:__OnResumeLevelNormalLogic()
end

-- 战斗房间是否初始化完成
---@public
---@return boolean
function BattleRoom:IsInit()
    if self.__init == nil then
        return false
    end
    return self.__init
end

-- 战斗开始
---@public
function BattleRoom:OnBattleStart()
    --LogTools.LogByLevel(LogLevel.log, "BattleRoom", "OnBattleStart")
end

-- 战斗暂停
---@public
function BattleRoom:OnBattlePause()
    --LogTools.LogByLevel(LogLevel.log, "BattleRoom", "OnBattlePause")
end

-- 战斗恢复
---@public
function BattleRoom:OnBattleResume()
    --LogTools.LogByLevel(LogLevel.log, "BattleRoom", "OnBattleResume")
end

-- 是否是多人战斗
---@public
---@return boolean
function BattleRoom:IsMultiPlayerBattle()
    return #self.battleUnitManager:GetOriginalPlayerInfoManager():GetAllPlayer() > 1
end

-- 战斗重置
---@public
function BattleRoom:OnBattleReset()
end

-- 启动逻辑
---@public
function BattleRoom:StartLogicTick()
    -- 切换到战前剧情阶段
    self.battleLevelManager:GoToStage(BattleLevel_Define_StageEnum.PreBattlePlot, false)
end

-- 驱动房间
---@public
---@param _dt number 更新时间
---@param _frameId number 帧号
function BattleRoom:Run(_dt, _frameId)
    if self.battleCloseTime and self.battleCloseTime > 0 then
        -- 战斗已关闭
        return
    end
    ---@type number 当前帧号
    self.frameId = _frameId
    ---@type number 当前帧率
    self.dt = _dt
    ---驱动关卡流程Manager
    self.battleLevelManager:OnUpdate(_dt, _frameId)
end

----------------------------------------------------------------------------------------------------------------------------------
-- 由关卡阶段驱动start
----------------------------------------------------------------------------------------------------------------------------------

-- 处理战斗房间相关消息
-- 由关卡阶段驱动
---@public
function BattleRoom:RunRoomMessage()
    --LuaProfiler.BeginSample("RunRoomMessage")
    local roomMessages = self.inputDataSource:DrainAllRoomMessage();
    while roomMessages and #roomMessages > 0 do
        local _msg = table.remove(roomMessages, 1)
        local _id = _msg:GetId()
        local _proto = PROTO_CODE_MAP[tostring(_id)];

        if _proto ~= nil then
            --LogTools.LogByLevel(LogLevel.log, "BattleRoom", "RunRoomMessage", "_id", _id, "_proto", dumpTableEx(_proto))
            _proto:ApplyCallBack(_msg)
        end
    end
    --LuaProfiler.EndSample("RunPlayerMessage")
end

-- 运行游戏房间逻辑
-- 由关卡阶段驱动
---@param _dt number
---@param _frameId number
function BattleRoom:RunRoomLogic(_dt, _frameId)
    -- 1.暂停计时
    self:AccumulatePauseTime(_dt)
    -- 2.表演管理
    self.battlePlayerActManager:OnUpdate(_dt, _frameId)
    -- 3.行为树
    self.behaviorManager:OnUpdate(_dt, _frameId)
end

-- 累计暂停计时
---@param _dt
function BattleRoom:AccumulatePauseTime(_dt)
    if self:CheckPauseAllLevel() then
        self.levelAllPauseTime = self.levelAllPauseTime + _dt
    end
    if self:CheckPauseLevelNormalLogic() then
        self.levelNormalLogicPauseTime = self.levelNormalLogicPauseTime + _dt
    end
    if self:CheckPauseLevelTime() then
        self.levelTimePauseTime = self.levelTimePauseTime + _dt
    end
end

-- 运行游戏单位逻辑
-- 由关卡阶段驱动
---@param _dt number
---@param _frameId number
function BattleRoom:RunUnitLogic(_dt, _frameId)
    if not self:IsUnitLogicRun() then return end

    -- 掉落物
    self.fallObjectManager:OnUpdate(_dt)
    -- 元素
    self.elementManager:OnUpdate(_dt)
    --LuaProfiler.BeginSample("UnitManager")
    self.battleUnitManager:OnUpdate(_dt)
    --LuaProfiler.EndSample("UnitManager")
    --LuaProfiler.BeginSample("LevelTrigger")
    self.levelTriggerManager:OnUpdate(_dt)
    --LuaProfiler.EndSample("LevelTrigger")
    --LuaProfiler.BeginSample("EjectorManager")
    self.ejectorManager:OnUpdate(_dt)
    --LuaProfiler.EndSample("EjectorManager")
    --LuaProfiler.BeginSample("HurtManager")
    self.hurtManager:OnUpdate(_dt)
    self.transUtil:OnUpdate(_dt)
    --LuaProfiler.EndSample("HurtManager")

end

-- 触发事件
-- 由关卡阶段驱动
---@param _dt number
---@param _frameId number
function BattleRoom:FireEvent(_dt, _frameId)
    -- 1.事件回调
    self.battleLogicEventService:FireEvent();
    -- 2.清除事件
    self.battleLogicEventService:ClearEvent();
end

-- 运行游戏单位逻辑
-- 由关卡阶段驱动
---@param _dt number
---@param _frameId number
function BattleRoom:BroadCastOutputData(_dt, _frameId)
    local units = self.battleUnitManager:GetUnitListByUnitType(BattleUnitType.Player);
    for i = 1, #units do
        local _unit = units[i]
        _unit:GetActionManager():BroadCastStateChanged();
    end
    units = self.battleUnitManager:GetUnitListByUnitType(BattleUnitType.Monster);
    for i = 1, #units do
        local _unit = units[i]
        _unit:GetActionManager():BroadCastStateChanged();
    end

    self.outputDataSource:BroadCastOutputData(_dt);
end


-- 处理玩家相关消息
-- 由关卡阶段驱动
---@public
function BattleRoom:RunPlayerMessage()
    --LuaProfiler.BeginSample("RunPlayerMessage")
    local playerCommands = self.inputDataSource:DrainAllCommand();
    while playerCommands and #playerCommands > 0 do
        local command = table.remove(playerCommands, 1)
        local proto = PROTO_CODE_MAP[tostring(command:GetId())];
        if proto ~= nil then
            --LogTools.LogByLevel(LogLevel.log, "BattleRoom", "RunPlayerMessage", "_id", command:GetId(), "_proto", dumpTableEx(proto))
            proto:ApplyCallBack(command)
        end
    end
    --LuaProfiler.EndSample("RunPlayerMessage")
end

----------------------------------------------------------------------------------------------------------------------------------
-- 由关卡阶段驱动end
----------------------------------------------------------------------------------------------------------------------------------

-- 接收玩家命令接口
---@public
---@param _uid number 发送协议的玩家id，如果是战斗房间消息该值为nil
---@param _id number 协议id
---@param _msgTable table 协议
---@param _arriveNetIoTime number 达到网络时间
function BattleRoom:OnReceiveMessage(_uid, _id, _msgTable, _arriveNetIoTime)
    self.inputDataSource:OnReceiveMessage(_uid, _id, _msgTable, _arriveNetIoTime);
end

-- 获取战斗id
function BattleRoom:GetBattleId()
    return self.battleId
end

------------------------------------------------------------------------------------------------------------------------

-- 玩家切换当前object
function BattleRoom:OnPlayerChangeCurrentObject(_playerId, _objectId)
    local _unit = self.battleUnitManager:GetUnitByPlayerId(_playerId)
    if not _unit then
        return
    end
    _unit:GetActionManager():PlayerChangeLeader(_objectId, PlayerChangeLeaderInputType.Normal, false)
end

-------------------------------------------- 事件回调方法 ---------------------------------------------------------------
-- 玩家掉线
---@public
---@param _playerId number 玩家Id
function BattleRoom:OnPlayerDisconnect(_playerId)
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleRoom", "OnPlayerDisconnect", "_playerId", _playerId)
    end
    self.battleLevelManager:OnPlayerDisconnect(_playerId);
    self.battleUnitManager:ChangePlayerOnlineState(_playerId, BattleUnitOnlineState.OffLine)
    -----@type BattleUnit_Player
    --local _unit = self.battleUnitManager:GetUnitByPlayerId(_playerId)
    --if _unit then
    --    self.outputDataSource:PlayerLeaveL2V({ netId = _unit:GetNetId() })
    --end
end

-- 玩家重连
---@public
---@param _playerId number 玩家Id
function BattleRoom:OnPlayerReconnect(_playerId)
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleRoom", "OnPlayerReconnect", "_playerId", _playerId)
    end
    self.battleLevelManager:OnPlayerReconnect(_playerId);
    self.battleUnitManager:ChangePlayerOnlineState(_playerId, BattleUnitOnlineState.OnLine)
    -----@type BattleUnit_Player
    --local _unit = self.battleUnitManager:GetUnitByPlayerId(_playerId)
    --if _unit then
    --    self.outputDataSource:PlayerEnterL2V({ netId = _unit:GetNetId() })
    --end
    if self.battleLevelManager:GetCurLevelStageEnum() == BattleLevel_Define_StageEnum.RunBattle then
        self:SendCreateSyncMessage(_playerId)
    end
end

function BattleRoom:OnReceiveCreateSyncMessage_S2C(_playerReconnectBattleRoomInfo_S2C)
    --LogTools.LogByLevel(LogLevel.log, "BattleRoom:OnReceiveCreateSyncMessage_S2C", "_playerReconnectBattleRoomInfo_S2C.unitInfos", _playerReconnectBattleRoomInfo_S2C.unitInfos, "_playerReconnectBattleRoomInfo_S2C", dumpTableEx(_playerReconnectBattleRoomInfo_S2C))
    -- FIXME:恢复关卡
    if _playerReconnectBattleRoomInfo_S2C.unitInfos then
        self.battleUnitManager:OnReceiveCreateSyncMessage_S2C(_playerReconnectBattleRoomInfo_S2C.unitInfos);
    end
    if _playerReconnectBattleRoomInfo_S2C.fieldInfo and _playerReconnectBattleRoomInfo_S2C.fieldInfo.fallObjectChange then
        self.fallObjectManager:OnReceiveCreateSyncMessage_S2C(_playerReconnectBattleRoomInfo_S2C.fieldInfo.fallObjectChange)
    end
    if _playerReconnectBattleRoomInfo_S2C.levelTriggerInfos then
        self.levelTriggerManager:OnReceiveCreateSyncMessage_S2C(_playerReconnectBattleRoomInfo_S2C.levelTriggerInfos)
    end

    local playerReconnectBattleRoomInfo_L2V= {};
    playerReconnectBattleRoomInfo_L2V.fieldInfo = {};
    playerReconnectBattleRoomInfo_L2V.fieldInfo = _playerReconnectBattleRoomInfo_S2C.fieldInfo;
    if _playerReconnectBattleRoomInfo_S2C.unitInfos then
        playerReconnectBattleRoomInfo_L2V.unitInfos = self.battleUnitManager:GetCreateSyncMessage_L2V(_playerReconnectBattleRoomInfo_S2C.unitInfos);
    else
        playerReconnectBattleRoomInfo_L2V.unitInfos = {}
    end
    if _playerReconnectBattleRoomInfo_S2C.levelTriggerInfos then
        playerReconnectBattleRoomInfo_L2V.levelTriggerInfos = self.levelTriggerManager:GetCreateSyncMessage_L2V(_playerReconnectBattleRoomInfo_S2C.levelTriggerInfos)
    else
        playerReconnectBattleRoomInfo_L2V.levelTriggerInfos = {}
    end
    self.outputDataSource:SendPlayerReconnectInfoL2V(playerReconnectBattleRoomInfo_L2V);
end

-- 玩家离开房间
---@public
---@param _playerId number 玩家Id
function BattleRoom:OnPlayerLeave(_playerId)
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleRoom", "OnPlayerLeave", "_playerId", _playerId)
    end
    self.battleLevelManager:OnPlayerLeave(_playerId);
    self.battleUnitManager:ChangePlayerOnlineState(_playerId, BattleUnitOnlineState.OffLine)
    ---@type BattleUnit_Player
    local _unit = self.battleUnitManager:GetUnitByPlayerId(_playerId)
    if _unit then
        --self.outputDataSource:PlayerLeaveL2V({ netId = _unit:GetNetId() })
        --FIXME 临时修改，CBT2修改为关卡条件支持多事件触发
        --触发死亡事件，确保联机战斗的正确结算
        self.battleLogicEventService:OnTriggerLevelUnitDeadEvent(0, 0, _unit:GetNetId())
        self.battleLogicEventService:OnTriggerObjectDeadEvent(_unit:GetNetId(), 0, 0)
    end
end

-- 玩家进入战斗房间
---@public
---@param _playerId number 玩家Id
function BattleRoom:OnPlayerEnter(_playerId)
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleRoom", "OnPlayerEnter", "_playerId", _playerId)
    end
    self.battleLevelManager:OnPlayerEnter(_playerId);
    self.battleUnitManager:ChangePlayerOnlineState(_playerId, BattleUnitOnlineState.OnLine)
    -----@type BattleUnit_Player
    --local _unit = self.battleUnitManager:GetUnitByPlayerId(_playerId)
    --if _unit then
    --    -- 通知显示层玩家进入
    --    self.outputDataSource:PlayerEnterL2V({ netId = _unit:GetNetId() })
    --end
end

function BattleRoom:GetBattleRoomInfo()
    local battleFieldInfo = {}
    battleFieldInfo.runTime = self.battleLevelManager:GetRunTimeSecond()
    -- 关卡目标
    battleFieldInfo.levelTargetData = self.battleLevelManager.levelTargetManager:GetLevelTargetDatas()
    -- 掉落物
    battleFieldInfo.fallObjectChange = self.fallObjectManager:GetCreateSyncMessage_S2C()
    return battleFieldInfo
end

-- 玩家网络进入正常状态
---@public
---@param _playerId number 玩家Id
function BattleRoom:OnPlayerChangeNetStateNormal(_playerId)
    ---@type BattleUnit_Player
    local _unit = self.battleUnitManager:GetUnitByPlayerId(_playerId)
    if _unit then
        self.outputDataSource:PlayerEnterL2V({ netId = _unit:GetNetId() })
    end
    if self.battleLevelManager:GetCurLevelStageEnum() == BattleLevel_Define_StageEnum.RunBattle then
        self:SendCreateSyncMessage(_playerId)
    end
end

function BattleRoom:SendCreateSyncMessage(_playerId)
    -- 重连
    local PlayerReconnectBattleRoomInfo_S2C = {};
    PlayerReconnectBattleRoomInfo_S2C.fieldInfo = self:GetBattleRoomInfo();
    PlayerReconnectBattleRoomInfo_S2C.unitInfos = self.battleUnitManager:GetCreateSyncMessage_S2C();
    PlayerReconnectBattleRoomInfo_S2C.levelTriggerInfos = self.levelTriggerManager:GetCreateSyncMessage_S2C()
    self.outputDataSource:SendPlayerReconnectInfo(_playerId, PlayerReconnectBattleRoomInfo_S2C);
end

-- 玩家网络进入异常状态
---@public
---@param _playerId number 玩家Id
function BattleRoom:OnPlayerChangeNetStateAbnormal(_playerId)
    ---@type BattleUnit_Player
    local _unit = self.battleUnitManager:GetUnitByPlayerId(_playerId)
    if _unit then
        self.outputDataSource:PlayerLeaveL2V({ netId = _unit:GetNetId() })
    end
end

-------------------------------------------------关卡阶段---------------------------------------------------
-- 请求切换战斗关卡阶段
---@public
---@param _uid number
function BattleRoom:OnGotoNextBattleLevelStage(_uid)
    ---@type number
    local curStageEnum = self.battleLevelManager:GetCurLevelStageEnum();
    if not curStageEnum then
        return
    end
    ---@type number
    local nextStageEnum = curStageEnum + 1
    ---@type BattleLevelStageBase
    local nextStage = self.battleLevelManager:GetStage(nextStageEnum)
    if not nextStage then
        return
    end

    if not nextStage:StageTrustClient() then
        -- 仅信任客户端的阶段由客户端消息驱动
        return
    end

    -- 玩家确认进入阶段
    self.battleLevelManager:ConfirmGoToNextStage(_uid)

    if self:IsAllPlayerConfirmStage() then
        -- 所有人都确认，进入下个阶段
        self.outputDataSource:BattleLevelGoToStage(nextStageEnum, curStageEnum)
    end
end

-- 是否所有人都确认阶段
---@private
---@return boolean
function BattleRoom:IsAllPlayerConfirmStage()
    ---@type BattleUnit_Player[]
    local _unitPlayerList = self.battleUnitManager:GetUnitListByUnitType(BattleUnitType.Player)
    for i = 1, #_unitPlayerList do
        local _unit = _unitPlayerList[i]
        if not _unit and _unit:CheckOnlineState(BattleUnitOnlineState.OnLine) then
            -- 有一个人没确认，就return false
            if not self.battleLevelManager:IsPlayerConfirmGoToNextStage(_unit:GetPlayerId()) then
                return false
            end
        end
    end
    -- 所有人都确认
    return true
end

-- 通知切换战斗关卡阶段
---@public
---@param _fromStage number
---@param _toStage number
---@param _serverTime number
---@return boolean
function BattleRoom:OnNotifyChangeBattleLevelStage(_fromStage, _toStage, _serverTime)
    -- 进入阶段
    self.battleLevelManager.serverChangingStage = false
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleRoom", "OnNotifyChangeBattleLevelStage", "stage", _fromStage, "enter", _toStage)
    end
    if IsClient() then
        -- 客户端对时
        TimeUtils.ClientSetServerTime(_serverTime, true)
        -- 通知显示层阶段切换
        self.outputDataSource:BattleLevelGoToStage_L2V(_fromStage, _toStage)
    end
    if not self.battleLevelManager:GoToStage(_toStage, false) then
        return false
    end
    return true
end

-- 战斗是否结束
---@public
---@return boolean
function BattleRoom:IsBattleOver()
    return self.battleLevelManager.overResult ~= BattleResultEnum.NO_RESULT
end

-- 战斗结束
---@public
---@param _result BattleResult
---@param _condition number
function BattleRoom:OnBattleOver(_result, _condition)
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleRoom", "OnBattleOver", "_result", _result, "_condition", _condition)
    end
    self.battleLevelManager:OnBattleOver(_result, _condition)
end

-- 获取战斗数据
---@public
---@param _getDataEnumIndex number
---@param _extParam table
function BattleRoom:GetData(_getDataEnumIndex, _extParam)
    ---@type GetData
    local _getDataEnum = GetBattleDataEnumById(_getDataEnumIndex)
    if _getDataEnum == nil then
        if CheckLogLevel(LogLevel.logErr) then
            LogTools.LogByLevel(LogLevel.logErr, "BattleRoom", "GetData", "_getDataEnumIndex", _getDataEnumIndex)
        end
        return
    end
    local data = _getDataEnum:GetOper():GetData(_extParam, self)
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "BattleRoom", "GetData", "_getDataEnumIndex", _getDataEnumIndex, "_extParam", dumpTableEx(_extParam), "getData", dumpTableEx(data))
    end
    return data
end

-- 收到客户端重新开始的请求
function BattleRoom:OnClientBattleRestart()
    if self:IsMultiPlayerBattle() then
        -- 多人不能重新开始
        return
    end
    -- TODO 广播重新开始
    --COMMAND.BroadcastCommandToClientTable()
end

-- 战斗重新开始
---@public
function BattleRoom:BattleRestart()
    if CheckLogLevel(LogLevel.log) then
        --LogTools.LogByLevel(LogLevel.log, "BattleRoom", "BattleRestart")
    end
    -- 清空所有内存
    self:Clear()
    -- 重新初始化房间
    self:Init()
    self:InitialBattleRoom(self.battleEnterInfo)
    -- 从战前剧情开始
    self.outputDataSource:SendBattleRoomEvent(BATTLE_EVENT_ENUM.PLAYER_ENTER, CLIENT_PLAYER_ID)
    self.outputDataSource:BattleLevelGoToStage(BattleLevel_Define_StageEnum.PreBattlePlot)
end

-- 清空
function BattleRoom:Clear()
    self.battleObjectManager:Clear()
    self.battleUnitManager:Clear()
    self.ejectorManager:Clear()
    self.hurtManager:Clear()
    self.elementManager:Clear()
    self.levelTriggerManager:Clear()
    self.fallObjectManager:Clear()
    self.behaviorManager:Clear()
    self.battlePlayerActManager:Clear()
    self.battleLevelManager:Clear()
    self.tagManager:Clear()
end

-- 关闭战斗房间
---@public
function BattleRoom:Close()
    ---@type number 战斗关闭时间
    self.battleCloseTime = TimeUtils.battleNow(self.battleId)
    -- 战斗房间关闭
    if self.battleLevelManager then
        self.battleLevelManager:OnBattleClose()
    end
end
-------------------------------------------------关卡阶段---------------------------------------------------
---@param _battleEnterInfo table 战斗进入数据打印
function BattleRoom:printInitBattleLog(_battleEnterInfo)
    if not IsClient() then
        -- 就给客户端看看战斗带进了些什么数据
        return
    end
    if not LogTools.InitBattleLog or not CheckLogLevel(LogLevel.log) then
        -- 需要手动打开log
        return
    end
    LogTools.LogByLevel(LogLevel.log, "InitBattle", "<color=#00FF00>=======================START=======================</color>")
    -- 关卡信息
    LogTools.LogByLevel(LogLevel.log, "InitBattle", "battleId", _battleEnterInfo.battleId)
    LogTools.LogByLevel(LogLevel.log, "InitBattle", "levelId", _battleEnterInfo.levelId)
    LogTools.LogByLevel(LogLevel.log, "InitBattle", "NewLevelInstanceId", _battleEnterInfo.levelInstanceId)
    LogTools.LogByLevel(LogLevel.log, "InitBattle", "battleType", _battleEnterInfo.battleType)
    LogTools.LogByLevel(LogLevel.log, "InitBattle", "indieGame", _battleEnterInfo.indieGame)
    LogTools.LogByLevel(LogLevel.log, "InitBattle", "playerBuffIds", dumpTableEx(_battleEnterInfo.playerBuffIds))
    LogTools.LogByLevel(LogLevel.log, "InitBattle", "monsterBuffIds", dumpTableEx(_battleEnterInfo.monsterBuffIds))
    LogTools.LogByLevel(LogLevel.log, "InitBattle", "randomSeed", _battleEnterInfo.randomSeed)
    LogTools.LogByLevel(LogLevel.log, "InitBattle", "teamCapability", _battleEnterInfo.teamCapability)
    LogTools.LogByLevel(LogLevel.log, "InitBattle", "customParams", dumpTableEx(_battleEnterInfo.customParams))
    LogTools.LogByLevel(LogLevel.log, "InitBattle", "season", _battleEnterInfo.season)
    -- 玩家信息
    for _, _battlePlayerInfo in pairs(_battleEnterInfo.battlePlayerInfo) do
        LogTools.LogByLevel(LogLevel.log, "InitBattle", "<color=#FF0000>=======================Player["..tostring(_battlePlayerInfo.playerId).."] Start=======================</color>")
        LogTools.LogByLevel(LogLevel.log, "InitBattle", "battlePlayerInfo", "name", _battlePlayerInfo.name)
        LogTools.LogByLevel(LogLevel.log, "InitBattle", "battlePlayerInfo", "level", _battlePlayerInfo.level)
        LogTools.LogByLevel(LogLevel.log, "InitBattle", "battlePlayerInfo", "curLeaderId", _battlePlayerInfo.curLeaderId)
        LogTools.LogByLevel(LogLevel.log, "InitBattle", "battlePlayerInfo", "playerIndex", _battlePlayerInfo.playerIndex)
        LogTools.LogByLevel(LogLevel.log, "InitBattle", "battlePlayerInfo", "customParams", dumpTableEx(_battlePlayerInfo.customParams))
        for _, _leaderBattleInfo in pairs(_battlePlayerInfo.leaders) do
            LogTools.LogByLevel(LogLevel.log, "InitBattle", "<color=#FF00FF>=======================Leader["..tostring(_leaderBattleInfo.id).."] Start=======================</color>")
            LogTools.LogByLevel(LogLevel.log, "InitBattle", "leaderBattleInfo", "level", _leaderBattleInfo.level)
            LogTools.LogByLevel(LogLevel.log, "InitBattle", "leaderBattleInfo", "exp", _leaderBattleInfo.exp)
            LogTools.LogByLevel(LogLevel.log, "InitBattle", "leaderBattleInfo", "star", _leaderBattleInfo.star)
            LogTools.LogByLevel(LogLevel.log, "InitBattle", "leaderBattleInfo", "starLevel", _leaderBattleInfo.starLevel)
            LogTools.LogByLevel(LogLevel.log, "InitBattle", "leaderBattleInfo", "favorabilityLevel", _leaderBattleInfo.favorabilityLevel)
            LogTools.LogByLevel(LogLevel.log, "InitBattle", "leaderBattleInfo", "favorabilityExp", _leaderBattleInfo.favorabilityExp)
            LogTools.LogByLevel(LogLevel.log, "InitBattle", "leaderBattleInfo", "clothingId", _leaderBattleInfo.clothingId)
            LogTools.LogByLevel(LogLevel.log, "InitBattle", "leaderBattleInfo", "weapon", dumpTableEx(_leaderBattleInfo.weapon))
            LogTools.LogByLevel(LogLevel.log, "InitBattle", "leaderBattleInfo", "calcPropModelInfo", dumpTableEx(_leaderBattleInfo.calcPropModelInfo))
            LogTools.LogByLevel(LogLevel.log, "InitBattle", "leaderBattleInfo", "talentSkills", dumpTableEx(_leaderBattleInfo.talentSkills))
            LogTools.LogByLevel(LogLevel.log, "InitBattle", "leaderBattleInfo", "activeSkills", dumpTableEx(_leaderBattleInfo.activeSkills))
            LogTools.LogByLevel(LogLevel.log, "InitBattle", "leaderBattleInfo", "revelations", dumpTableEx(_leaderBattleInfo.revelations))
            LogTools.LogByLevel(LogLevel.log, "InitBattle", "leaderBattleInfo", "signLv", _leaderBattleInfo.signLv)
            LogTools.LogByLevel(LogLevel.log, "InitBattle", "leaderBattleInfo", "trial", _leaderBattleInfo.trial)
            LogTools.LogByLevel(LogLevel.log, "InitBattle", "leaderBattleInfo", "capability", _leaderBattleInfo.capability)
            LogTools.LogByLevel(LogLevel.log, "InitBattle", "leaderBattleInfo", "perk", _leaderBattleInfo.perk)
            LogTools.LogByLevel(LogLevel.log, "InitBattle", "leaderBattleInfo", "buffIds", dumpTableEx(_leaderBattleInfo.buffIds))
            LogTools.LogByLevel(LogLevel.log, "InitBattle", "<color=#FF00FF>=======================Leader["..tostring(_leaderBattleInfo.id).."] End=======================</color>")
        end
        LogTools.LogByLevel(LogLevel.log, "InitBattle", "<color=#FF0000>=======================Player["..tostring(_battlePlayerInfo.playerId).."] End=======================</color>")
    end
    LogTools.LogByLevel(LogLevel.log, "InitBattle", "<color=#00FF00>=======================END=======================</color>")
end

return BattleRoom;
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/3/12 17:35

require "Lib/class"
require "Battle/Logic/Buff/BattleBuffComponentBase"

---@class BattleUnitCom_Buff : BattleUnitComponentBase
---@field buffCom BattleBuffComponentBase buff模块
BattleUnitCom_Buff = class(BattleUnitComponentBase, 'BattleUnitCom_Buff');

function BattleUnitCom_Buff:ctor(_data)
    self:__ctor(BattleUnitComponentType.Buff)
    self.buffCom = BattleBuffComponentBase.New();
end

---@public
---@param _battleUnit BattleUnitBase
function BattleUnitCom_Buff:Init(_battleUnit)
    self:__Init(_battleUnit)
    self.buffCom:Init(self:GetBattleRoom());
end

---@public
---@param _skillId number 技能Id
---@param _skillType number 技能类型
---@param _barrageType number 弹幕类型
---@param _buffGroupId number 增加的buff
function BattleUnitCom_Buff:AddBarrageBattleBuff(_skillId,_skillType,_barrageType,_buffGroupId)
    self.buffCom:AddBarrageBattleBuff(_skillId,_skillType,_barrageType,_buffGroupId);
end

---@public
---@param _skillId number 技能Id
---@param _skillType number 技能类型
---@param _barrageType number 弹幕类型
function BattleUnitCom_Buff:GetBarrageBattleBuff(_skillId,_skillType,_barrageType)
    return self.buffCom:GetBarrageBattleBuff(_skillId,_skillType,_barrageType);
end

---@public
---@param _skillId number 技能Id
---@param _buffGroupId number 移除的buffId
function BattleUnitCom_Buff:RemoveBarrageBattleBuff(_skillId,_buffGroupId)
    self.buffCom:RemoveBarrageBattleBuff(_skillId,_buffGroupId)
end

---@public
---@param _buffInstId number buff实例id
---@param _buffGroupId number 增加的buff
---@param _count number 次数
function BattleUnitCom_Buff:AddBarrageShootCountBattleBuff(_buffInstId,_buffGroupId,_count)
    self.buffCom:AddBarrageShootCountBattleBuff(_buffInstId,_buffGroupId,_count);
end

---@public
---@param _buffInstId number buff实例id
---@param _buffGroupId number 移除的buffId
---@param _count number 次数
function BattleUnitCom_Buff:RemoveBarrageShootCountBattleBuff(_buffInstId,_buffGroupId,_count)
    self.buffCom:RemoveBarrageShootCountBattleBuff(_buffInstId,_buffGroupId,_count);
end

---@public
---@param _buffGroupId number 更改buff持续时间buffId
function BattleUnitCom_Buff:AddBattleBuffExtraTime(_buffGroupId,_buffType,_deltaTime)
    self.buffCom:AddBattleBuffExtraTime(_buffGroupId,_buffType,_deltaTime);
end

---@public
---@param _buffGroupId number 更改buff持续时间buffId
function BattleUnitCom_Buff:GetBattleBuffExtraTime(_buffGroupId,_buffType)
    return self.buffCom:GetBattleBuffExtraTime(_buffGroupId,_buffType);
end

---@public
---@param _buffTemplateId number
---@param _index number
---@param _param number
function BattleUnitCom_Buff:ChangeBuffTempParam(_buffTemplateId,_index,_param)
    self.buffCom:ChangeBuffTempParam(_buffTemplateId,_index,_param);
end

---@public
---@param _buffTemplateId number
---@param _index number
---@param _param number
function BattleUnitCom_Buff:GetBuffTempParam(_buffTemplateId,_index,_param)
    return self.buffCom:GetBuffTempParam(_buffTemplateId,_index,_param);
end

---@public
---@param _buffInstanceId number
---@param _index number
---@param _param number
function BattleUnitCom_Buff:ChangeBuffInstanceParam(_buffInstanceId,_index,_param)
    self.buffCom:ChangeBuffInstanceParam(_buffInstanceId,_index,_param);
end

---@public
---@param _buffInstanceId number
---@param _index number
---@param _param number
function BattleUnitCom_Buff:GetBuffInstanceParam(_buffInstanceId,_index,_param)
    return self.buffCom:GetBuffInstanceParam(_buffInstanceId,_index,_param);
end

---@public
---@param _buffGroupId number
---@param _param number
function BattleUnitCom_Buff:ChangeBuffStackNum(_buffGroupId,_param)
    self.buffCom:ChangeBuffStackNum(_buffGroupId,_param);
end

---@public
---@param _buffGroupId number
---@param _param BattleUnitCom_Buff
function BattleUnitCom_Buff:GetBuffStackNum(_buffGroupId,_param)
    return self.buffCom:GetBuffStackNum(_buffGroupId,_param);
end

---@public 测试buff
---@param _buffId
function BattleUnitCom_Buff:TestBuff(_buffId)
    if not self.buffCom:CheckBuffExist(_buffId) then
        self.buffCom:AddBattleBuffById(self:GetUnit():GetCurrentHeroObject(),_buffId, nil, nil);
    end
end

---@public
---buff存在
---@param _buffId number buffId
---@param _stackNum number buff层数
---@param _buffType number buff类型
function BattleUnitCom_Buff:CheckBuffExist(_buffId,_stackNum,_buffType)
    return self.buffCom:CheckBuffExist(_buffId,_stackNum,_buffType);
end

---@public 获得buff
---@param _buffId number buffId
---@return BattleBuff
function BattleUnitCom_Buff:GetBattleBuff(_buffId)
    return self.buffCom:GetBattleBuff(_buffId);
end

---@public
function BattleUnitCom_Buff:Update(_deltaTime,_buffGroupIdId)
    self.buffCom:__OnUpdate(self:GetUnit():GetCurrentHeroObject(),_deltaTime,_buffGroupIdId,true);
end

function BattleUnitCom_Buff:PushTriggerMessage(_netId,_objectId,_triggerList)
    local battleUnitChangeData = {};
    battleUnitChangeData.netId = _netId;
    battleUnitChangeData.objId = 0;
    battleUnitChangeData.buffTriggerInfo = _triggerList;

    self.battleRoom.outputDataSource:AddBattleUnitChangeData(battleUnitChangeData);
end

---@public
---改变当前buff持续时间
---@param _buffGroupId number buffId
---@param _buffType number buff类型
---@param _changeTime number 改变的时间
---@param _triggerInstIds number[]
function BattleUnitCom_Buff:ChangeBuffCurrentTime(_buffGroupId,_buffType,_changeTime,_triggerInstIds)
    return self.buffCom:ChangeBuffCurrentTime(self:GetUnit():GetCurrentHeroObject(),_buffGroupId,_buffType,_changeTime,_triggerInstIds);
end

---@param _battleBuff BattleBuff
---@param _now number
function BattleUnitCom_Buff:__TriggerBuff(_battleObject,_battleBuff, _now)
    local triggerList = {};
    local _inputDataSource = self:GetBattleRoom().inputDataSource
    local allObjectTriggerList = {};
    local canTrigger = false;
    ---@type BuffGroup
    local buffGroup = _inputDataSource:GetDict("BuffGroup", _battleBuff.buffGroupId);
    if buffGroup and buffGroup.odds and buffGroup.odds ~= 0 then
        local rand = self.battleRoom.randomUtil:RandomInt(1,10000);
        if rand > buffGroup.odds then
            canTrigger = true;
        end
    else
        canTrigger = true;
    end
    for _, effect in pairs(_battleBuff.buffEffects) do
        if effect.nextTriggerTime and _now >= effect.nextTriggerTime then
            ---@type BuffAndActionInstance
            local buffAndActionInstance = _inputDataSource:GetDict("BuffAndActionInstance", effect.buffInstanceId);
            if self.buffCom:GetBuffInstanceParam(effect.buffInstanceId,3,buffAndActionInstance.param[3]) == 0 then
                effect.nextTriggerTime = nil;
            else
                if effect.triggerCount >= self.buffCom:GetBuffInstanceParam(effect.buffInstanceId,4,buffAndActionInstance.param[4]) - 1 then
                    effect.nextTriggerTime = nil;
                else
                    effect.nextTriggerTime = _now + self.buffCom:GetBuffInstanceParam(effect.buffInstanceId,5,buffAndActionInstance.param[5]) * 1000;
                end
            end
            _battleBuff.isReset = false;
            local v = self:GetUnit():GetCurrentHeroObject();
            if not v:CheckDead() and canTrigger then
                effect:Trigger(v, _battleBuff, _battleBuff.stackNum);
                effect.triggerObjectId = v:GetObjectId();
                if LogTools.BuffLog and CheckLogLevel(LogLevel.log) then
                    LogTools.LogByLevel(LogLevel.log,"触发 unit buff",_battleBuff.buffGroupId);
                end
                if not allObjectTriggerList[v:GetObjectId()] then
                    allObjectTriggerList[v:GetObjectId()] = {};
                end
                table.insert(allObjectTriggerList[v:GetObjectId()],effect.buffInstanceId);
                table.insert(triggerList,effect.buffInstanceId);

                ---@type BattleObjCom_Element_V2
                local elementComp = v:GetComponent(BattleObjectComponentType.Element);
                if elementComp and buffAndActionInstance.elementStrengthId > 0 then
                    ---@type boolean
                    local canTriggerReact = buffAndActionInstance.elementtrigger == 1
                    elementComp:AddElementStrength(buffAndActionInstance.elementStrengthId, _battleBuff.castUnitId, _battleBuff.castObjId, nil, canTriggerReact, _battleBuff.castSkillId, ElementSourceType.Buff, _battleBuff.buffGroupId);
                end
            end
        end
    end

    local _outPutDataSource = self:GetBattleRoom().outputDataSource
    for i, v in pairs(allObjectTriggerList) do
        local battleUnitChangeData = {};
        battleUnitChangeData.netId = self:GetUnit():GetNetId();
        battleUnitChangeData.objId = i;
        battleUnitChangeData.buffTriggerInfo = v;

       _outPutDataSource:AddBattleUnitChangeData(battleUnitChangeData);
    end
    return triggerList;
end

---战斗单位下阵
function BattleUnitCom_Buff:OnObjectStandBy(_oldObjectId,_newObjectId)
    self.buffCom:OnObjectStandBy(self:GetUnit():GetCurrentHeroObject(),_oldObjectId,_newObjectId);

    local _battleObject = self:GetUnit():GetCurrentHeroObject();
    ---@type BattleObjectBase
    local oldObject = _battleObject:GetParentUnit():GetHeroObject(_oldObjectId);
    if oldObject then
        for i, v in pairs(self.buffCom.buffList) do
            v:ReleaseBuff(oldObject,false);
        end
    end
    ---@type BattleObjectBase
    local newObject = _battleObject:GetParentUnit():GetHeroObject(_newObjectId);
    if newObject then
        for i, v in pairs(self.buffCom.buffList) do
            ---@type BuffGroup
            local buffGroup = self.battleRoom.inputDataSource:GetDict("BuffGroup", v.buffGroupId);
            if buffGroup then
                local cantrigger = true;
                if buffGroup.odds and buffGroup.odds ~= 0 then
                    local rand = self.battleRoom.randomUtil:RandomInt(1,10000);
                    if rand > buffGroup.odds then
                        cantrigger = false;
                    end
                end
                if cantrigger then
                    for _, effect in pairs(v.buffEffects) do
                        effect:Trigger(newObject,v,v.stackNum,true);
                        effect.triggerObjectId = _newObjectId;
                        ---@type BuffAndActionInstance
                        local buffAndActionInstance = self.battleRoom.inputDataSource:GetDict("BuffAndActionInstance", effect.buffInstanceId);

                        ---@type BattleObjCom_Element_V2
                        local elementComp = _battleObject:GetComponent(BattleObjectComponentType.Element);
                        if elementComp and buffAndActionInstance.elementStrengthId > 0 then
                            ---@type boolean
                            local canTriggerReact = buffAndActionInstance.elementtrigger == 1
                            elementComp:AddElementStrength(buffAndActionInstance.elementStrengthId, v.castUnitId, v.castObjId, nil, canTriggerReact, v.castSkillId, ElementSourceType.Buff, v.buffGroupId);
                        end
                    end
                end
            end
        end
    end
end

---添加buff
---@public
---@param _buffId number 战斗buffId
---@param _customParam table 自定义参数
function BattleUnitCom_Buff:AddBattleBuffById(_buffId,_customParam)
    self:AddBattleBuff(BattleBuffService:GenerateUnitCastBuffTemplate(_buffId,self:GetUnit(),self:GetUnit():GetCurrentHeroObjectId(),_customParam));
end

---@param _battleBuff BattleBuff
---@param _changeStackNum number
function BattleUnitCom_Buff:UpdateBattleBuffStack(_battleBuff, _changeStackNum)
    _battleBuff.stackNum = _battleBuff.stackNum + _changeStackNum;
    if _battleBuff.stackNum > _battleBuff.lastMaxStackNum then
        local _startStack = _battleBuff.lastMaxStackNum
        local _endStack = _battleBuff.stackNum
        _battleBuff.lastMaxStackNum = _battleBuff.stackNum
        self:__TriggerUpdateBattleBuffStackEvent(self:GetUnit():GetCurrentHeroObject(), _battleBuff, _startStack, _endStack)
    end
end

---@param _battleObject BattleObjectBase
---@param _battleBuff BattleBuff
---@param _startStack number 改变前层数
---@param _endStack number 改变后层数
function BattleUnitCom_Buff:__TriggerUpdateBattleBuffStackEvent(_battleObject, _battleBuff, _startStack, _endStack)
    if not _endStack then
        _endStack = _startStack
    end
    ---@type number
    local _netId = _battleObject:GetParentUnit():GetNetId()
    ---@type number
    local _objId = _battleObject:GetObjectId()
    self.battleRoom.battleLogicEventService:OnTriggerBuffStackChangeEvent(_netId, _objId, _battleBuff.buffGroupId, _battleBuff.castUnitId, _battleBuff.castObjId, _startStack, _endStack)
end

---添加buff
---@public
---@param _battleBuffCastTemplate BattleBuffCastTemplate 战斗buff
function BattleUnitCom_Buff:AddBattleBuff(_battleBuffCastTemplate)
    -----@type BuffGroup
    local buffGroup = self:GetBattleRoom().inputDataSource:GetDict("BuffGroup",_battleBuffCastTemplate.buffGroupId);
    if not buffGroup then
        return;
    end

    if not BattleBuffService:CheckAttachBuff(_battleBuffCastTemplate, self:GetUnit():GetCurrentHeroObject()) then
        return;
    end

    local _curTime = TimeUtils.battleNow(self:GetBattleId())
    local stackNum = 0;
    for _, v in pairs(self.buffCom.buffList) do
        if v.buffGroupId == _battleBuffCastTemplate.buffGroupId then
            local stackableNum = self.buffCom:GetBuffStackNum(v.buffGroupId,buffGroup.stackableNum);
            if stackableNum == 0 then
                return;
            else
                if stackableNum == 1 then
                    v:UnitResetTime(self:GetUnit(),_curTime,_battleBuffCastTemplate,self:GetBattleBuffExtraTime(v.buffGroupId,buffGroup.buffType));
                    self:PushBuffUpdate(self:GetUnit():GetCurrentHeroObject(),v);
                    return;
                else
                    if v.stackNum < stackableNum then
                        v:UnitResetTime(self:GetUnit(), _curTime, _battleBuffCastTemplate, self:GetBattleBuffExtraTime(v.buffGroupId, buffGroup.buffType));
                        self:UpdateBattleBuffStack(v, 1)
                    else
                        v:UnitResetTime(self:GetUnit(),_curTime,_battleBuffCastTemplate,self:GetBattleBuffExtraTime(v.buffGroupId,buffGroup.buffType));
                    end
                    if buffGroup.typeClean and buffGroup.typeClean[1] == BATTLE_BUFF_CLEAN_TYPE.CLEAN_TYPE_STACK_NUM and v.stackNum >= buffGroup.typeClean[2] then
                        self:RemoveBuffByGroupId(_battleBuffCastTemplate.buffGroupId);
                    else
                        self:PushBuffUpdate(self:GetUnit():GetCurrentHeroObject(),v);
                    end
                    if LogTools.BuffLog and CheckLogLevel(LogLevel.log) then
                        LogTools.LogByLevel(LogLevel.log,"添加 unit buff",_battleBuffCastTemplate.buffGroupId, "netId", self:GetUnit():GetNetId());
                    end
                    self:Update(0,v.buffGroupId);
                    if buffGroup.offsettingBuff then
                        for i, v in pairs(buffGroup.offsettingBuff) do
                            self:RemoveBuffByGroupId(self:GetUnit():GetCurrentHeroObject(),v);
                        end
                    end
                    self.battleRoom.battleLogicEventService:OnTriggerAddBuffEvent(self:GetUnit():GetNetId(), self:GetUnit():GetCurrentHeroObjectId(), _battleBuffCastTemplate.buffGroupId, v.stackNum, v.castUnitId, v.castObjId);
                    return ;
                end
            end
        end
    end

    if LogTools.BuffLog and CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log,"添加 unit buff",_battleBuffCastTemplate.buffGroupId, "netId", self:GetUnit():GetNetId());
    end

    ---@type BattleBuff
    local battleBuff = BattleBuffService:GenerateUnitBattleBuff(_battleBuffCastTemplate,self:GetUnit());
    battleBuff:AttachUnitBuff(self:GetUnit(),_curTime,self:GetBattleBuffExtraTime(_battleBuffCastTemplate.buffGroupId,buffGroup.buffType));
    self:__TriggerUpdateBattleBuffStackEvent(self:GetUnit():GetCurrentHeroObject(), battleBuff, 0, battleBuff.stackNum)

    self.buffCom.buffList[battleBuff.instId] = battleBuff;
    self.battleRoom.battleLogicEventService:OnTriggerAddBuffEvent(self:GetUnit():GetNetId(), self:GetUnit():GetCurrentHeroObjectId(), _battleBuffCastTemplate.buffGroupId, battleBuff.stackNum, battleBuff.castUnitId, battleBuff.castObjId);

    local battleBuffModel = {};
    battleBuffModel.instId = battleBuff.instId;
    battleBuffModel.dictId = battleBuff.buffGroupId;
    battleBuffModel.startTime = battleBuff.startTime;
    battleBuffModel.stackNum = battleBuff.stackNum;
    battleBuffModel.durationTime = battleBuff.endTime - _curTime;
    battleBuffModel.castNetId = battleBuff.castUnitId;
    battleBuffModel.objectId = battleBuff.castObjId;

    local addBuffList= {}
    table.insert(addBuffList,battleBuffModel);

    local battleUnitBuffInfo = {};
    battleUnitBuffInfo.addBuffList = addBuffList;

    local battleUnitKeyData = {};
    battleUnitKeyData.netId = self:GetUnit():GetNetId();
    battleUnitKeyData.objId = 0;
    battleUnitKeyData.buffInfo = battleUnitBuffInfo;

    self:GetBattleRoom().outputDataSource:AddBattleUnitKeyData(battleUnitKeyData);

    self:Update(0,battleBuff.buffGroupId);
    if buffGroup.offsettingBuff then
        for i, v in pairs(buffGroup.offsettingBuff) do
            self:RemoveBuffByGroupId(v);
        end
    end
end

---@type function 移除buff 层数
---@param _buffId number buffId
---@param _stackNum number buff实例id
function BattleUnitCom_Buff:RemoveBuffStackNum(_buffId,_stackNum)
    self.buffCom:RemoveBuffStackNum(self:GetUnit():GetCurrentHeroObject(),_buffId,_stackNum);
end

---@type function 移除buff 层数
---@param _battleObject BattleObjectBase
---@param _battleBuff BattleBuff buff
function BattleUnitCom_Buff:PushBuffUpdate(_battleObject,_battleBuff)
    local battleBuffModel = {};
    battleBuffModel.instId = _battleBuff.instId;
    battleBuffModel.dictId = _battleBuff.buffGroupId;
    battleBuffModel.startTime = _battleBuff.startTime;
    battleBuffModel.stackNum = _battleBuff.stackNum;
    battleBuffModel.durationTime = _battleBuff.endTime - TimeUtils.battleNow(self:GetBattleId());
    battleBuffModel.castNetId = _battleBuff.castUnitId;
    battleBuffModel.objectId = _battleBuff.castObjId;

    local addBuffList= {}
    table.insert(addBuffList,battleBuffModel);

    local battleUnitBuffInfo = {};
    battleUnitBuffInfo.addBuffList = addBuffList;

    local battleUnitKeyData = {};
    battleUnitKeyData.netId = _battleObject:GetParentUnit():GetNetId();
    battleUnitKeyData.objId = 0;
    battleUnitKeyData.buffInfo = battleUnitBuffInfo;

    self:GetBattleRoom().outputDataSource:AddBattleUnitKeyData(battleUnitKeyData);
end

---@type function 通过实例id移除buff
---@param _isTimeOver boolean 是否时间到移除
---@param ... number buff实例id
function BattleUnitCom_Buff:RemoveBuffByInstId(_isTimeOver,...)
    self.buffCom:RemoveBuffByInstIdUnit(self:GetUnit():GetCurrentHeroObject(),_isTimeOver,...);
end

---@type function 通过buffGroup id移除buff
---@param _buffGroupId number buffGroupId
function BattleUnitCom_Buff:RemoveBuffByGroupId(_buffGroupId)
    self.buffCom:RemoveBuffByGroupIdUnit(self:GetUnit():GetCurrentHeroObject(),_buffGroupId);
end

function BattleUnitCom_Buff:PushRemoveMessage(_netId,_objectId,_removeList)
    local battleUnitBuffInfo = {};
    battleUnitBuffInfo.removeBuffList = _removeList;

    local battleUnitKeyData = {};
    battleUnitKeyData.netId = _netId;
    battleUnitKeyData.objId = 0;
    battleUnitKeyData.buffInfo = battleUnitBuffInfo;

    self.battleRoom.outputDataSource:AddBattleUnitKeyData(battleUnitKeyData);
end

---是否无敌
---@public
---@return boolean 是否无敌
function BattleUnitCom_Buff:IsInvincible()
    return self.buffCom:IsInvincible();
end

---是否无敌
---@public
---@return boolean 是否无敌
function BattleUnitCom_Buff:IsInvincibleTriggerEvent()
    return self.buffCom:IsInvincibleTriggerEvent();
end

---是否元素无敌
---@public
---@return boolean 是否无敌
---@return number[] 免疫伤害类型 （0是全部免疫）
function BattleUnitCom_Buff:IsElementInvincible()
    return self.buffCom:IsElementInvincible();
end

---是否霸体
---@public
---@return boolean 是否霸体
function BattleUnitCom_Buff:IsEndure()
    return self.buffCom:IsEndure();
end

---是否全为弱点
---@public
---@return boolean 是否全弱点
function BattleUnitCom_Buff:IsAllWeak()
    return self.buffCom:IsAllWeak();
end

---是否所有攻击全为弱点
---@public
---@return boolean 是否全弱点
function BattleUnitCom_Buff:IsAllAttackHitWeak()
    return self.buffCom:IsAllAttackHitWeak();
end

---改变技能额外伤害
---@public
---@param _skillId number 技能Id
---@param _targetObject BattleObjectBase 目标
---@return number 伤害
function BattleUnitCom_Buff:CorrectExtraDamage(_skillId,_targetObject)
    return self.buffCom:CorrectExtraDamage(self:GetUnit():GetCurrentHeroObject(),_skillId,_targetObject)
end

---改变受到技能伤害
---@public
---@param _skillId number 技能Id
---@return number 改变百分比
function BattleUnitCom_Buff:CorrectBeDamage(_skillId)
    return self.buffCom:CorrectBeDamage(_skillId);
end

---改变对目标技能伤害
---@public
---@param _targetBattleObject BattleObjectBase 目标
---@param _skillId number 技能Id
---@return number 改变百分比
function BattleUnitCom_Buff:CorrectTargetDamage(_targetBattleObject,_skillId)
    return self.buffCom:CorrectTargetDamage(_targetBattleObject,_skillId);
end

---改变受到元素伤害
---@public
---@param _elementId number 元素反应Id
---@return number 改变百分比
function BattleUnitCom_Buff:CorrectElementBeDamage(_elementId)
    return self.buffCom:CorrectElementBeDamage(_elementId);
end

---改变对目标元素伤害
---@public
---@param _targetBattleObject BattleObjectBase 目标
---@param _elementId number 元素反应Id
---@return number 改变百分比
function BattleUnitCom_Buff:CorrectTargetElementDamage(_targetBattleObject,_elementId)
    return self.buffCom:CorrectTargetElementDamage(_targetBattleObject,_elementId);
end

---改变受到元素伤害
---@public
---@param _elementId number 元素反应Id
---@return number 改变百分比
function BattleUnitCom_Buff:CorrectElementBeDamage(_elementId)
    return self.buffCom:CorrectElementBeDamage(_elementId);
end

---改变对目标元素伤害
---@public
---@param _targetBattleObject BattleObjectBase 目标
---@param _elementId number 元素反应Id
---@return number 改变百分比
function BattleUnitCom_Buff:CorrectTargetElementDamage(_targetBattleObject,_elementId)
    return self.buffCom:CorrectTargetElementDamage(_targetBattleObject,_elementId);
end

---特殊buff才能造成伤害
---@public
---@return number[] buffId
function BattleUnitCom_Buff:SpecialBuffDoDamageIds()
    return self.buffCom:SpecialBuffDoDamageIds();
end

---服务器逻辑核生成用于发送给前端逻辑核的全量信息
---@public
function BattleUnitCom_Buff:GetCreateSyncMessage_S2C()
    return self.buffCom:GetCreateSyncMessage_S2C();
end

---前端逻辑核用服务器发来的全量信息刷新自身数据
---@public
function BattleUnitCom_Buff:OnReceiveCreateSyncMessage_S2C(_message)
    self.buffCom:OnReceiveCreateSyncMessage_S2C(_message);
end

---前端逻辑核生成用于发送给表现的层全量信息
---@public
function BattleUnitCom_Buff:GetCreateSyncMessage_L2V(_message)
    return _message.unitBuffs;
end

return BattleUnitCom_Buff;
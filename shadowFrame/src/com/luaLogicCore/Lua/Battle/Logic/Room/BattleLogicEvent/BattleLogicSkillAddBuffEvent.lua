---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2023/02/02 16:20
--- Describe:
---

require "Lib/class"
require "Battle/Logic/Room/BattleLogicEvent/BattleLogicEventV2"

---@class BattleLogicSkillAddBuffEvent : BattleLogicEventV2
---@field eventType number 事件类型
---@field battleId number 战斗id
---@field eventCompareParam table 事件参数
---@field eventTriggerParam table 事件透传参数
---@field netId number 事件产出单位Id
---@field objectId number 事件产出物体Id
BattleLogicSkillAddBuffEvent = class(BattleLogicEventV2, 'BattleLogicSkillAddBuffEvent');

---@param _eventType number 事件类型
---@param _battleId number 战斗id
---@param _eventCompareParam table 事件参数
---@param _eventTriggerParam table 事件透传参数
---@param _netId number 事件产出单位Id
---@param _objectId number 事件产出物体Id
function BattleLogicSkillAddBuffEvent:ctor(_eventType, _eventCompareParam, _eventTriggerParam, _netId, _objectId, _battleId)
    self.battleId = _battleId
    self.eventType = _eventType;
    self.eventCompareParam = _eventCompareParam;
    self.eventTriggerParam = _eventTriggerParam;
    self.netId = _netId;
    self.objectId = _objectId;
    self.survival = 0;
end

---检测事件触发，默认没有比较参数
---@public
---@param _eventCompareParam table 比较参数
function BattleLogicSkillAddBuffEvent:CheckEventTrigger(_eventCompareParam)
    return false
end

---事件回调，默认为空
---@public
function BattleLogicSkillAddBuffEvent:FireEvent()
	if not self.eventTriggerParam.skillId then return end

	---@type BattleRoom
	local _battleRoom = GetBattleRoom(self.battleId)
	---@type Skill
	local _skillXls = _battleRoom.inputDataSource:GetDict("Skill", self.eventTriggerParam.skillId)
	if not _skillXls then return end
	--LogTools.LogByLevel(LogLevel.log, "skillAddBuff", "BattleLogicSkillAddBuffEvent:FireEvent", self.eventTriggerParam.skillId, "_skillXls.skillType", LogTools.GetEnumTableDesc(SkillTypeEnum, _skillXls.skillType), "self.eventTriggerParam.addBuffList", dumpTableEx(self.eventTriggerParam.addBuffList), "self.eventTriggerParam.removeBuffList", dumpTableEx(self.eventTriggerParam.removeBuffList))
	if _skillXls.skillType ~= SkillTypeEnum.JI_ZOU:GetId() then return end

	---@type TagManager
	local _tagManager = _battleRoom.tagManager
	local _tag = TAG_ENUM.JIZOU_ADDBUFF_NUM

	if self.eventTriggerParam.addBuffList then
		for _, _id in pairs(self.eventTriggerParam.addBuffList) do
			--LogTools.LogByLevel(LogLevel.log, "skillAddBuff", "BattleLogicSkillAddBuffEvent:FireEvent 1", "tonumber(_id)", tonumber(_id))
			if tonumber(_id) == 1000 then
				local _curValue = _tagManager:GetTagValue(_tag) or 0
				--LogTools.LogByLevel(LogLevel.log, "skillAddBuff", "BattleLogicSkillAddBuffEvent:FireEvent", _curValue + 1)
				_tagManager:UpdateTagValue(_tag, _curValue + 1)
			end
		end
	end

	if self.eventTriggerParam.removeBuffList then
		for _, _id in pairs(self.eventTriggerParam.removeBuffList) do
			if tonumber(_id) == 1000 then
				--LogTools.LogByLevel(LogLevel.log, "skillAddBuff", "BattleLogicSkillAddBuffEvent:FireEvent 2", "tonumber(_id)", tonumber(_id))
				local _curValue = _tagManager:GetTagValue(_tag) or 0
				if _curValue > 0 then
					--LogTools.LogByLevel(LogLevel.log, "skillAddBuff", "BattleLogicSkillAddBuffEvent:FireEvent", _curValue - 1)
					_tagManager:UpdateTagValue(_tag, _curValue - 1)
				end
			end
		end
	end
end

---@public
---检测互斥事件
---@param _event BattleLogicEventV2 新事件
---@return boolean 是否互斥
function BattleLogicSkillAddBuffEvent:CheckMutexEvent(_event)
    return false;
end

---检测移除事件，默认事件会在trigger之后的下一帧被移除
---@public
function BattleLogicSkillAddBuffEvent:CheckRemoveEvent()
    self.survival = self.survival + 1;
    if self.survival > 1 then
        return true;
    end
    return false;
end

---生成比较参数
---@public
function BattleLogicSkillAddBuffEvent:GenerateCompareParam(_param);
    local compareParam = {};
    return compareParam;
end

return BattleLogicSkillAddBuffEvent;
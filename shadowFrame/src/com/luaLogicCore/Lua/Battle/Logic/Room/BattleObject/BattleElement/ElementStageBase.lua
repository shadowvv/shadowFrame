---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hejincheng.
--- DateTime: 2022/3/2 19:06

require "Lib/class"

---@class ElementStageBase : table
---@field enterTime number
---@field battleId number
---@field battleRoom BattleRoom
ElementStageBase = class(nil, 'ElementStageBase');

function ElementStageBase:ctor()
end

---@param _index number
---@param _stageManager BattleObjCom_Element_StageManager
function ElementStageBase:__Init(_index, _stageManager)
    self.stateManager = _stageManager
    self.elementId = _stageManager.battleElementType:GetId()
    self.battleObjComElement = _stageManager.battleObjComElement
    self.battleRoom = _stageManager.battleRoom
    self.battleId = _stageManager.__battleId
    self.elementStackEffect = _stageManager.elementStackEffect

    ---@type number 超时时间(s)
    self.timeOut = 0
    ---@type number 阶段index
    self.stageIndex = _index
    ---@type boolean 客户端模式
    self.clientMode = IsClient()
    ---@type boolean 是否驱动
    self.driveElement = self.stateManager.battleObjComElement.driveElement
    self:__Clear()
end

function ElementStageBase:__Clear()
    ---@type number 衰减间隔时间(s)
    self.reduceInterval = 0
    ---@type number 运行时间(s)
    self.runTime = 0
    ---@type number 阶段是否超时
    self.stageTimeOut = false
    ---@type boolean 处理过此阶段结束
    self.handleStageEnd = false
    ---@type number 衰减结束时间(单位s,用于服务器被动计算衰减)
    self.reductionEndRunTime = 0
end

------------------------------------------------------------------------------------------------------------------------
---@protected
function ElementStageBase:__OnEnter()
    if self.timeOut > 0 and self:GetReduceSpeed() > 0 then
        -- 有超时时间，并且有衰减速度
        local _currentValue = self.stateManager.battleObjComElement:GetElementCurrentValue(self.elementId)
        local _time = self:__ConvertValueToTime(_currentValue)
        if _time < self.timeOut then
            -- 限定时间内能衰减完，衰减完的时间点计算一次衰减
            self.reductionEndRunTime = _time
        end
    end
end

---@protected
function ElementStageBase:__OnExit()
    -- 计算衰减
    self:ElementReduction()
end

---@protected
---@return ElementStageBase
function ElementStageBase:__GetNextStage()
    local _nextStage = ElementStage_Define_StageEnum.GetNextStage(self.stageIndex)
    if _nextStage then
        return self.stateManager:GetStage(_nextStage)
    end
end

---@protected
function ElementStageBase:__OnUpdate(_deltaTime)
    if not self.driveElement then
        -- 联机客户端不做处理
        return
    end
    -- 1.更新阶段运行时间
    self.runTime = self.runTime + _deltaTime
    self.reduceInterval = self.reduceInterval + _deltaTime
    ----------------------------------------------------------------------------------------------------
    -- 2.元素衰减
    if self.clientMode or self.runTime >= self.reductionEndRunTime then
        -- 客户端每帧计算衰减，服务器在变化时计算衰减
        self:ElementReduction()
    end
    -- 3.阶段超时结束判断
    if self.timeOut > 0 then
        if not self.stageTimeOut and self.runTime >= self.timeOut then
            -- 阶段超时
            self:OnStageTimeOut()
        end
    end
end

-- 阶段时间重置
---@protected
function ElementStageBase:__ResetRunTime()
    self.runTime = 0
    if CheckLogLevel(LogLevel.log) and LogTools.ElementLog then
        local _targetObjectLog = "[" .. tostring(self.battleObjComElement.__object:GetDicId()) .. "]"
        local _unit = self.battleObjComElement.__object:GetParentUnit()
        if _unit:GetNetId() then
            _targetObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(_unit:GetUnitType()) .. "][" .. _unit:GetNetId() .. "]" .. _targetObjectLog
        end
        LogTools.LogByLevel(LogLevel.log, "元素", "元素[" .. GetBattleElementNameById(self.elementId) .. "]", "目标" .. _targetObjectLog, "<color=#00FF00>元素阶段时间重置</color>",
                "当前时间", TimeUtils.battleNow(self.battleId),
                "元素当前值", self.battleObjComElement:GetElementCurrentValue(self.elementId)
        )
    end
end

-- 元素附着
---@protected
function ElementStageBase:__OnElementAdd(_newValue, _oldValue)
end

-- 元素改变
---@protected
function ElementStageBase:__OnElementChange(_newValue, _oldValue)
end

-- 元素效果
---@protected
function ElementStageBase:__OnElementEffect()
end

-- 元素移除
---@protected
function ElementStageBase:__OnElementRemove()
    self.stateManager:ResetInitStage()
end

---@protected
function ElementStageBase:__OnStageTimeOut()
    self.stageTimeOut = true
    if self.driveElement then
        -- 驱动模式自动切换阶段
        local _nextStage = ElementStage_Define_StageEnum.GetNextStage(self.stageIndex)
        if _nextStage then
            -- 有下个阶段，进入下个阶段
            self.stateManager:GoToStage(_nextStage, false)
        end
    end
end

---@protected
function ElementStageBase:__OnExit()
    self:__Clear()
end

-- 时间转换元素量
---@protected
---@param _time number 时间
---@return number 元素量
function ElementStageBase:__ConvertTimeToValue(_time)
    return 0
end

-- 元素量转换时间
---@protected
---@param _value number 元素量
---@return number 时间
function ElementStageBase:__ConvertValueToTime(_value)
    return self.timeOut
end

---@protected
---@param _index number
---@param _stageManager BattleObjCom_Element_StageManager
function ElementStageBase:Init(_index, _stageManager)
    self:__Init(_index, _stageManager)
end

------------------------------------------------------------------------------------------------------------------------

---@public
---@param _value number 元素量
---@return number 时间
function ElementStageBase:CalculateAllTimeByValue(_value)
    local _time = self:__ConvertValueToTime(_value)
    if self.timeOut == 0 or _time < self.timeOut then
        return _time
    end
    local _stageValue = self:__ConvertValueToTime(self.timeOut)
    local _nextStageValue = _value - _stageValue
    if _nextStageValue > 0 then
        local _nextStage = self:__GetNextStage()
        if _nextStage then
            _time = _time + _nextStage:__ConvertValueToTime(_nextStageValue)
        end
    end
    return _time
end

---@public
---@param _time number 时间
---@return number 元素量
function ElementStageBase:CalculateAllValueByTime(_time)
    local effectTime = _time
    local nextEffectTime = 0
    local _remainTime = self.timeOut - self.runTime
    if _remainTime > 0 and effectTime > _remainTime then
        -- 生效时间比剩余时间还长,下个阶段还需要计算
        nextEffectTime = effectTime - _remainTime
        effectTime = _remainTime
    end
    -- 当前阶段的转换值
    ---@type number
    local _value = self:__ConvertTimeToValue(effectTime)
    -- 继续计算下阶段转换值
    if nextEffectTime > 0 then
        local _nextStage = self:__GetNextStage()
        if _nextStage then
            _value = _value + _nextStage:__ConvertTimeToValue(nextEffectTime)
        end
    end
    return _value
end

--- 获取衰减速度
---@public
---@return number 添加元素压缩系数
function ElementStageBase:GetAddElementRatio()
    return 1
end

--- 获取衰减速度
---@public
---@return number 衰减速度
function ElementStageBase:GetReduceSpeed()
    return 0
end

--- 元素衰减
---@public
---计算模式：
---indie模式：每帧计算
---client模式：每帧计算
---server模式：被动计算，计算时间点：
-------------------1.添加元素
-------------------2.元素积累抗性更改
-------------------3.当前阶段衰减至空的时间点
-------------------4.阶段切换
function ElementStageBase:ElementReduction()
    if self.reduceInterval <= 0 then
        return
    end
    local currentValue = self.battleObjComElement:GetElementCurrentValue(self.elementId)
    if currentValue > 0 then
        -- 有元素量，再进行衰减
        local _reduceSpeed = self:GetReduceSpeed()
        if _reduceSpeed > 0 then
            -- 衰减间隔
            local _reduceValue = self:__ConvertTimeToValue(self.reduceInterval)
            self.battleObjComElement:ChangeElementValue(self.elementId, -_reduceValue, false, true, ELEMENT_CHANGE_TYPE.Reduction)
        end
    end
    -- 间隔计时归零
    self.reduceInterval = 0
end

---@public
function ElementStageBase:OnUpdate(_deltaTime)
    self:__OnUpdate(_deltaTime)
end

---@public
function ElementStageBase:OnEnter()
    self:__OnEnter()
end

---@public
function ElementStageBase:OnExit()
    self:__OnExit()
end

-- 阶段超时
---@public
function ElementStageBase:OnStageTimeOut()
    self:__OnStageTimeOut()
end

-- 元素附着
---@public
function ElementStageBase:OnElementAdd(_attackerNetId, _attackerObjectId)
    self:__OnElementAdd(_attackerNetId, _attackerObjectId)
end

-- 元素改变
---@public
function ElementStageBase:OnElementChange(_newValue, _oldValue)
    self:__OnElementChange(_newValue, _oldValue)
end

-- 元素效果
---@public
function ElementStageBase:OnElementEffect()
    self:__OnElementEffect()
end

-- 元素移除
---@public
function ElementStageBase:OnElementRemove()
    self:__OnElementRemove()
end

function ElementStageBase:Clear()
    self:__Clear()
end

function ElementStageBase:CanEnter(_toStageEnum)
    return ElementStage_Define_StageEnum.CanEnter(self.stageIndex, _toStageEnum)
end

return ElementStageBase;

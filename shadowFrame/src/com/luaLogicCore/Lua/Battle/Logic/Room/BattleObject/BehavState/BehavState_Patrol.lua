---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/02/21 15:34
--- Describe: 巡逻
---

---@class BehavState_Patrol : BattleUnit_PathFindCaller
BehavState_Patrol = class(BattleUnit_PathFindCaller, "BehavState_Patrol")

---@public
---@param _behavCom BattleUnitCom_Behav
function BehavState_Patrol:Init(_behavCom)
	---@private
	---@type BattleUnitCom_Behav
	self.__behavCom = _behavCom
	self:__Init(_behavCom:GetUnit(), 1000, 15)
	self:__InitStateUseInfos()
	self.__running = false
end

---初始化一些当前behavState需要使用的专属信息
---@private
function BehavState_Patrol:__InitStateUseInfos()
	---@private
	---@type number
	self.__patrolDis = self.__unitSelf:GetDataInstanceXls().patrolDis > 0 and self.__unitSelf:GetDataInstanceXls().patrolDis or 10
	---@private
	self.__v3PatrolCenter = self.__behavCom:GetBattleRoom().vector3Pool:Pop()
	---@type Vector3
end

------------------------------------------------------------------------------------------------------------------------
---开启行为
---@public
---@param _dis number 巡逻半径
function BehavState_Patrol:Start(_centerOnBorn)
	--LogTools.LogByLevel(LogLevel.log, "behavState", "BehavState_Patrol:Start", "Start", "_centerOnBorn", _centerOnBorn, "netId", self.__unitSelf:GetNetId())
	if self.__running then return end
	self.__running = true

	Vector3.Copy(self.__v3PatrolCenter, _centerOnBorn and self.__unitSelf:GetBornPos() or self.__actionManagerSelf:GetPosition())
	self.__comPathFind:Open(true)
	self:CallPathFind()
end

---结束行为
---@public
function BehavState_Patrol:Stop()
	--LogTools.LogByLevel(LogLevel.log, "behavState", "BehavState_Patrol:Stop", "Start", "netId", self.__unitSelf:GetNetId())
	self:ReleaseHitBlockParams()
	if not self.__running then return end
	self.__running = false
	
	self.__actionManagerSelf:Exit(self.__actionManagerSelf:GetCurrentMoveState(), false)
	self.__comPathFind:Open(false)
	self.__comPathFind:StopPathFind()
end

------------------------------------------------------------------------------------------------------------------------
---@private
---@param _cnt number 最多进行随机的次数
function BehavState_Patrol:__CalcPatrolTargetShift(_cnt)
	local _patrolDis = self.__patrolDis
	local _randomUtil = self.__behavCom:GetBattleRoom().randomUtil
	local _x = _randomUtil:RandomFloat(-_patrolDis, _patrolDis)
	local _y = _randomUtil:RandomFloat(-_patrolDis, _patrolDis)
	local _z = _randomUtil:RandomFloat(-_patrolDis, _patrolDis)
	if (_x == 0 and _y ==0 and _z == 0) or Vector3.EqualsXYZ(self.__v3TargetShiftPos, _x, _y, _z) and _cnt > 0 then
		self:__GetPatrolTargetShift(_cnt - 1)
	else
		Vector3.Set(self.__v3TargetShiftPos, _x, _y, _z)
	end
end

---获取目标点
---@public
---@param _v3Receiver Vector3 用于接收结果的vec3
---@return boolean 是否成功获取到目标点
function BehavState_Patrol:GetTargetPos(_v3Receiver)
	if self:CheckHitBlockType(BattleUnitAiHitBlockType.Edge) then --巡逻撞边界时默认往出生点寻路
		---@type Vector3
		local _targetPos = self.__unitSelf:GetBornPos()
		
		Vector3.Copy(_v3Receiver, self.__unitSelf:GetBornPos())
		
		local _actionStateManager = self.__actionManagerSelf
		local _targetDir = self:GetBattleRoom().vector3Pool:Pop()
		Vector3.Sub(_targetPos, _actionStateManager:GetPosition(), _targetDir)
		local _qTargetRotation = self:GetBattleRoom().quaternionPool:Pop()
        local _v3TargetDir = self:GetBattleRoom().vector3Pool:Pop(_targetDir)
        Quaternion.LookRotation(_v3TargetDir, Vector3.up_global(), _qTargetRotation, self:GetBattleRoom().vector3Pool)
        Quaternion.ToEulerAngles(_qTargetRotation, _v3TargetDir)
        _v3TargetDir.z = 0
        Quaternion.FromEuler(_v3TargetDir, _qTargetRotation)
		_actionStateManager:SetRotation(_qTargetRotation)
		self:GetBattleRoom().quaternionPool:Push(_qTargetRotation)
		self:GetBattleRoom().vector3Pool:Push(_v3TargetDir)
		self:GetBattleRoom().vector3Pool:Push(_targetDir)
		
		local battleUnitMoveOutput = {};
		battleUnitMoveOutput.v = _actionStateManager:GetVelocity();
		battleUnitMoveOutput.position = _actionStateManager:GetPosition();
		battleUnitMoveOutput.rotation = _actionStateManager:GetRotation();
		battleUnitMoveOutput.accelerate = Vector3.zero_global();
		battleUnitMoveOutput.moveParam = Vector3.one_global();
		battleUnitMoveOutput.cameraParam = Vector3.one_global();
		battleUnitMoveOutput.maxVelocity = _fMaxVelocity;
		battleUnitMoveOutput.type = 16
		battleUnitMoveOutput.rotateSensitivityX = 36000
		battleUnitMoveOutput.rotateSensitivityY = 36000
	
		local battleUnitMoveData = {}
		battleUnitMoveData.netId = self.__unitSelf:GetNetId()
		battleUnitMoveData.objId = self.__unitSelf:GetCurrentHeroObjectId()
		battleUnitMoveData.moveInfo = battleUnitMoveOutput
	
		self:GetBattleRoom().outputDataSource:AddBattleUnitMoveData(battleUnitMoveData)
	else
		self:__CalcPatrolTargetShift(10)
		Vector3.Add(self.__v3PatrolCenter, self.__v3TargetShiftPos, _v3Receiver)
	end

	self:ReleaseHitBlockParams()
	return true
end


---寻路移动结束时的回调
---@public
function BehavState_Patrol:FindPathCallBack()
	self:CallPathFind()
end

------------------------------------------------------------------------------------------------------------------------
---@public
function BehavState_Patrol:CheckRunning()
	return self.__running
end

---@public
function BehavState_Patrol:Clear()
	self:Stop()
	self.__behavCom:GetBattleRoom().vector3Pool:Push(self.__v3PatrolCenter)
	self.__behavCom = nil
	self.__running = nil
	self.__patrolDis = nil
	self.__v3PatrolCenter = nil
	self:__Clear()
end

return BehavState_Patrol
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/04/02 14:50
--- Describe:
---

---@class LevelTrigger : table
LevelTrigger = class(nil, "LevelTrigger")
function LevelTrigger:ctor(_data) end
function LevelTrigger:OnUpdate(_deltaTime) end

---@public
---@param _generateTriggerInfo table msg.GenerateLevelTriggerInfo
function LevelTrigger:Init(_battleId, _generateTriggerInfo)
	self.battleId = _battleId
	self.battleRoom = GetBattleRoom(self.battleId)
	self.id = _generateTriggerInfo.id  --levelUnitId
	self.position = _generateTriggerInfo.position
	self.rotation = _generateTriggerInfo.rotation
	self.scale = _generateTriggerInfo.scale
	self.createTime = _generateTriggerInfo.timeStamp + math.floor(_generateTriggerInfo.delayTime * 1000)
	
	self.__innerKeyUnitDic ={}
	self.__innerLevelUnitDic = {}
	self.__innerPlayerUnitDic = {}
	self.__outUnitDic = {}
	self.__outKeyUnitDic = {}
	
	self.__innerKeyUnitCnt = 0
	self.__innerLevelUnitCnt = 0
	self.__innerPlayerUnitCnt = 0
	self.__outKeyUnitCnt = 0
	self.__outLevelUnitCnt = 0
	self.__outPlayerUnitCnt = 0
	
	self:__InitOutDic()
end

---触发器创建时，默认所有此时已存在的单位都在触发器外，在触发器范围内的会通过进入消息更新进触发器内部
---@private
function LevelTrigger:__InitOutDic()
	local _unitList = self.battleRoom.battleUnitManager:GetUnitListByUnitType(BattleUnitType.Player)
	local _cnt = 0
	for _, _unit in pairs(_unitList) do
		self.__outUnitDic[_unit:GetNetId()] = 1
		_cnt = _cnt + 1
	end
	self.__outPlayerUnitCnt = _cnt

	_unitList = self.battleRoom.battleUnitManager:GetUnitListByUnitType(BattleUnitType.Monster)
	_cnt = 0
	for _, _unit in pairs(_unitList) do
		self.__outUnitDic[_unit:GetNetId()] = 1
		_cnt = _cnt + 1
		local _levelUnit = self.battleRoom.battleLevelManager.levelUnitManager:GetLevelUnit(_unit:GetLevelUnitId())
		if _levelUnit and _levelUnit.keyUnit then
			self.__outKeyUnitCnt = self.__outKeyUnitCnt + 1
			self.__outKeyUnitDic[_unit:GetNetId()] = _unit:GetNetId()
		end
	end
	self.__outLevelUnitCnt = _cnt
end

---有单位进入
---@public
function LevelTrigger:OnUnitEnter(_netId)
	--LogTools.LogByLevel(LogLevel.log, "LevelTrigger:OnUnitEnter 1", "_netId", _netId)
	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return end
	if _unit:CheckUnitType(BattleUnitType.Monster) then
		local _levelUnitId = _unit:GetLevelUnitId()
		if self.__innerLevelUnitDic[_levelUnitId] then return end
		self.__innerLevelUnitDic[_levelUnitId] = _netId
		self.__innerLevelUnitCnt = self.__innerLevelUnitCnt + 1
		if self.__outUnitDic[_netId] then
			self.__outUnitDic[_netId] = nil
			self.__outLevelUnitCnt = self.__outLevelUnitCnt - 1
		end
		
		local _levelUnit = self.battleRoom.battleLevelManager.levelUnitManager:GetLevelUnit(_levelUnitId)
		--LogTools.LogByLevel(LogLevel.log, "LevelTrigger:OnUnitEnter 2", "_levelUnitId", _levelUnitId, "_levelUnit.keyUnit", _levelUnit.keyUnit)
		if _levelUnit and _levelUnit.keyUnit then
			if not self.__innerKeyUnitDic[_levelUnitId] then
				self.__innerKeyUnitDic[_levelUnitId] = _netId
				self.__innerKeyUnitCnt = self.__innerKeyUnitCnt + 1
			end
			if self.__outKeyUnitDic[_netId] then
				self.__outKeyUnitDic[_netId] = nil
				self.__outKeyUnitCnt = self.__outKeyUnitCnt - 1
			end
		end
	elseif _unit:CheckUnitType(BattleUnitType.Player) then
		if self.__innerPlayerUnitDic[_netId] then return end
		self.__innerPlayerUnitDic[_netId] = _netId
		self.__innerPlayerUnitCnt = self.__innerPlayerUnitCnt + 1
		if self.__outUnitDic[_netId] then
			self.__outUnitDic[_netId] = nil
			self.__outPlayerUnitCnt = self.__outPlayerUnitCnt - 1
		end
	end
	
	self.battleRoom.battleLogicEventService:OnTriggerLevelUnitEnterLevelUnitEvent(self.id, _netId)
end

---有单位离开
---@public
function LevelTrigger:OnUnitLeave(_netId)
	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	if not _unit then return end
	if _unit:CheckUnitType(BattleUnitType.Monster) then
		local _levelUnitId = _unit:GetLevelUnitId()
		if not self.__innerLevelUnitDic[_levelUnitId] then return end
		self.__innerLevelUnitDic[_levelUnitId] = nil
		self.__innerLevelUnitCnt = self.__innerLevelUnitCnt - 1
		if not self.__outUnitDic[_netId] then
			self.__outUnitDic[_netId] = _netId
			self.__outLevelUnitCnt = self.__outLevelUnitCnt + 1
		end
		
		local _levelUnit = self.battleRoom.battleLevelManager.levelUnitManager:GetLevelUnit(_levelUnitId)
		if _levelUnit and _levelUnit.keyUnit then
			if self.__innerKeyUnitDic[_levelUnitId] then
				self.__innerLevelUnitDic[_levelUnitId] = nil
				self.__innerKeyUnitCnt = self.__innerKeyUnitCnt - 1
			end
			if not self.__outKeyUnitDic[_netId] then
				self.__outKeyUnitDic[_netId] = _netId
				self.__outKeyUnitCnt = self.__outKeyUnitCnt + 1
			end
		end
	elseif _unit:CheckUnitType(BattleUnitType.Player) then
		if not self.__innerPlayerUnitDic[_netId] then return end
		self.__innerPlayerUnitDic[_netId] = nil
		self.__innerPlayerUnitCnt = self.__innerPlayerUnitCnt - 1
		if not self.__outUnitDic[_netId] then
			self.__outUnitDic[_netId] = _netId
			self.__outPlayerUnitCnt = self.__outPlayerUnitCnt + 1
		end
	end
end

---@public
function LevelTrigger:CheckAny(_selectUnitType, _needKeyTag)
	if _selectUnitType == LuaBehav_Define_TriggerSelectUnitType.PlayerUnit then
		if not _needKeyTag then
			return self.__innerPlayerUnitCnt > 0
		else  --玩家没有关键单位标记
			return false
		end
	elseif _selectUnitType == LuaBehav_Define_TriggerSelectUnitType.LevelUnit then
		if not _needKeyTag then
			return self.__innerLevelUnitCnt > 0
		else
			return self.__innerKeyUnitCnt > 0
		end
	elseif _selectUnitType == LuaBehav_Define_TriggerSelectUnitType.All then
		if not _needKeyTag then
			return self.__innerPlayerUnitCnt > 0 or self.__innerLevelUnitCnt > 0
		else
			return self.__innerKeyUnitCnt > 0
		end
	end
end

---@public
function LevelTrigger:CheckAnyOut(_selectUnitType, _needKeyTag)
	if _selectUnitType == LuaBehav_Define_TriggerSelectUnitType.PlayerUnit then
		if not _needKeyTag then
			return self.__outPlayerUnitCnt > 0
		else --玩家没有关键单位标记
			return false
		end
	elseif _selectUnitType == LuaBehav_Define_TriggerSelectUnitType.LevelUnit then
		if not _needKeyTag then
			return self.__outLevelUnitCnt > 0
		else
			return self.__outKeyUnitCnt > 0
		end
	elseif _selectUnitType == LuaBehav_Define_TriggerSelectUnitType.All then
		if not _needKeyTag then
			return self.__outLevelUnitCnt > 0 or self.__outPlayerUnitCnt > 0
		else
			return self.__outKeyUnitCnt > 0
		end
	end
end

---按照关卡单位ID检查
function LevelTrigger:CheckLevelUnitIn(_levelUnitId, _needKeyTag)
	--LogTools.LogByLevel(LogLevel.log, "LevelTrigger:CheckLevelUnitIn", "_levelUnitId", _levelUnitId, "_needKeyTag", _needKeyTag)
	if not _needKeyTag then
		return self.__innerLevelUnitDic[_levelUnitId]
	else
		--LogTools.LogByLevel(LogLevel.log, "LevelTrigger:CheckLevelUnitIn 2", "self.__innerKeyUnitDic", dumpTableEx(self.__innerKeyUnitDic))
		return self.__innerKeyUnitDic[_levelUnitId]
	end
end

-----按照关卡单位组ID检查
-----@param _all boolean 是否需要组内所有单位全部在触发器内
--function LevelTrigger:CheckLevelUnitGroupIn(_levelUnitGroupId, _all)
--	local _levelUnitList = self.battleRoom.battleLevelManager.levelUnitManager:GetLevelUnitByGroup(_levelUnitGroupId)
--	if not _levelUnitList or #_levelUnitList == 0 then return false end
--	local _dic = self.__innerLevelUnitDic
--	if _all then
--		for i, v in pairs(_levelUnitList) do
--			if not _dic[v.id] then
--				return false
--			end
--		end
--		return true
--	else
--		for i, v in pairs(_levelUnitList) do
--			if _dic[v.id] then
--				return true
--			end
--		end
--		return false
--	end
--end

---按照玩家英雄位置检查
---按照策划开会时的说法，这里的位置不计算死亡的英雄（划掉）
---按照十五最新的说法，玩家只要任何英雄在里面都算，不用管其他参数
function LevelTrigger:CheckPlayerUnitIn(_netId, _pos)
	--LogTools.LogByLevel(LogLevel.log, "LevelTrigger:CheckPlayerUnitIn", "self.__innerPlayerUnitDic", dumpTableEx(self.__innerPlayerUnitDic))
	return self.__innerPlayerUnitDic[_netId]
	
	--if not self.__innerPlayerUnitDic[_netId] then return false end
	--
	--local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
	--if not _unit then return false end
	--
	--local _currentObjId = _unit:GetCurrentHeroObjectId()
	--local _heroList = _unit:GetTypeObjectList(BattleObjectType.LeaderHero)
	--local _cnt = 0
	--local _objId = nil
	--for i = 1, #_heroList do
	--	local _heroObject = _heroList[i]
	--	---@type BattleObjCom_Property
	--	local _propCom = _heroObject:GetComponent(BattleObjCom_Property)
	--	if _propCom:GetPropertyByName(BattlePropertyEnum.Hp_Cur) > 0 then
	--		_cnt = _cnt + 1
	--		if _cnt == _pos then
	--			_objId = _heroObject:GetObjectId()
	--			break
	--		end
	--	end
	--end
	--
	--return _objId == _currentObjId
end

---新创建的单位默认记录到外部列表
---为了避免已经接收到进入消息，后接收到创建事件，这里都判断了一下不在内部列表中才处理（理论上应该不需要）
function LevelTrigger:OnBattleUnitCreate(_netId)
	local _outDic = self.__outUnitDic
	local _innerPlayerUnitDic = self.__innerPlayerUnitDic
	local _innerLevelUnitDic = self.__innerLevelUnitDic
	if not _outDic[_netId] then
		local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
		if _unit:CheckUnitType(BattleUnitType.Player) then
			if not _innerPlayerUnitDic[_netId] then
				_outDic[_netId] = _netId
				self.__outPlayerUnitCnt = self.__outPlayerUnitCnt + 1
			end
		elseif _unit:CheckUnitType(BattleUnitType.Monster) then
			if not _innerLevelUnitDic[_unit:GetLevelUnitId()] then
				_outDic[_netId] = _netId
				self.__outLevelUnitCnt = self.__outLevelUnitCnt + 1
			end
			
			local _levelUnit = self.battleRoom.battleLevelManager.levelUnitManager:GetLevelUnit(_unit:GetLevelUnitId())
			if _levelUnit and _levelUnit.keyUnit then
				if not self.__innerKeyUnitDic[_unit:GetLevelUnitId()] then
					self.__outKeyUnitDic[_netId] = _netId
					self.__outKeyUnitCnt = self.__outKeyUnitCnt + 1
				end
			end
		end
	end
end


function LevelTrigger:OnBattleUnitDead(_netId)
	local _outDic = self.__outUnitDic
	local _innerPlayerUnitDic = self.__innerPlayerUnitDic
	local _innerLevelUnitDic = self.__innerLevelUnitDic
	local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId, true)
	if _unit:CheckUnitType(BattleUnitType.Player) then
		if _outDic[_netId] then
			_outDic[_netId] = nil
			self.__outPlayerUnitCnt = self.__outPlayerUnitCnt - 1
		elseif _innerPlayerUnitDic[_netId] then
			_innerPlayerUnitDic[_netId] = nil
			self.__innerPlayerUnitCnt = self.__innerPlayerUnitCnt - 1
		end
	elseif _unit:CheckUnitType(BattleUnitType.Monster) then
		if _outDic[_netId] then
			_outDic[_netId] = nil
			self.__outPlayerUnitCnt = self.__outPlayerUnitCnt - 1
		elseif _innerLevelUnitDic[_unit:GetLevelUnitId()] then
			_innerLevelUnitDic[_unit:GetLevelUnitId()] = nil
			self.__innerLevelUnitCnt = self.__innerLevelUnitCnt - 1
		end
		
		local _levelUnit = self.battleRoom.battleLevelManager.levelUnitManager:GetLevelUnit(_unit:GetLevelUnitId())
		if _levelUnit and _levelUnit.keyUnit then
			if self.__outKeyUnitDic[_netId] then
				self.__outKeyUnitDic[_netId] = nil
				self.__outKeyUnitCnt = self.__outKeyUnitCnt - 1
			elseif self.__innerKeyUnitDic[_unit:GetLevelUnitId()] then
				self.__innerKeyUnitDic[_unit:GetLevelUnitId()] = nil
				self.__innerKeyUnitCnt = self.__innerKeyUnitCnt - 1
			end
		end
	end
end

---杀死其中单位（只对怪物方生效）
---@public
function LevelTrigger:KillInner(_deadType, _needKeyTag, _forceKiller)
	---@type BattleUnitCom_Camp
	local _campCom
	---@type BattleUnitCom_TagSelector
	local _tagCom
	if _needKeyTag then
		for _, _netId in pairs(self.__innerKeyUnitDic) do
			local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
			if _unit then --需要活着
				_campCom = _unit:GetComponent(BattleUnitComponentType.Camp)
				if _campCom and _campCom:CheckFirstCamp(BattleUnitCampType.Monster) then
					if _forceKiller then
						_tagCom = _unit:GetComponent(BattleUnitComponentType.TagSelector)
						_tagCom:SetTag(BattleUnitTagEnum.LastHurtFromNetID, 1)
					end
					self.battleRoom.battleUnitManager:OnBattleObjectDead(_netId, _unit:GetCurrentHeroObjectId(), _deadType)
				end
			end
		end
	else
		for _, _netId in pairs(self.__innerLevelUnitDic) do
			local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
			if _unit then --需要活着
				_campCom = _unit:GetComponent(BattleUnitComponentType.Camp)
				if _campCom and _campCom:CheckFirstCamp(BattleUnitCampType.Monster) then
					if _forceKiller then
						_tagCom = _unit:GetComponent(BattleUnitComponentType.TagSelector)
						_tagCom:SetTag(BattleUnitTagEnum.LastHurtFromNetID, 1)
					end
					self.battleRoom.battleUnitManager:OnBattleObjectDead(_netId, _unit:GetCurrentHeroObjectId(), _deadType)
				end
			end
		end
		
		---这里只是把玩家的当前英雄杀死了(目前需求不处理玩家)
		for _, _netId in pairs(self.__innerPlayerUnitDic) do
			local _unit = self.battleRoom.battleUnitManager:GetUnit(_netId)
			if _unit then --需要活着
			end
		end
	end
end

function LevelTrigger:Clear()
	self.id = nil
	self.position = nil
	self.rotation = nil
	self.scale = nil
	self.__innerLevelUnitDic = nil
	self.__innerPlayerUnitDic = nil
	self.__innerKeyUnitDic = nil
	self.__outUnitDic = nil
	self.__outKeyUnitDic = nil
	self.__innerLevelUnitCnt = nil
	self.__innerPlayerUnitCnt = nil
	self.__innerKeyUnitCnt = nil
	self.__outLevelUnitCnt = nil
	self.__outPlayerUnitCnt = nil
	self.__outKeyUnitCnt = 0
end

------------------------------------------------------------------------------------------------------------------------
---服务器逻辑核生成用于发送给前端逻辑核的全量信息
---@public
---@return table  msg.BattleObjectCreateSyncInfo
function LevelTrigger:GetCreateSyncMessage_S2C()
    return self:__GetCreateSyncMessage_S2C()
end
---@protected
function LevelTrigger:__GetCreateSyncMessage_S2C()
	local _LevelTriggerCreateSyncInfo_S2C = {}
	local _generateTriggerInfo = {}
	_generateTriggerInfo.id = self.id
	_generateTriggerInfo.position = self.position
	_generateTriggerInfo.rotation = self.rotation
	_generateTriggerInfo.scale = self.scale
	_generateTriggerInfo.delayTime = 0
	_generateTriggerInfo.timeStamp = self.createTime
	_LevelTriggerCreateSyncInfo_S2C.generateInfo = _generateTriggerInfo
	return _LevelTriggerCreateSyncInfo_S2C
end

---前端逻辑核用服务器发来的全量信息刷新自身数据
---@public
---@param _LevelTriggerCreateSyncInfo_S2C table  msg.LevelTriggerCreateSyncInfo_S2C
function LevelTrigger:OnReceiveCreateSyncMessage_S2C(_LevelTriggerCreateSyncInfo_S2C)
	
end

---前端逻辑核生成用于发送给表现的层全量信息
---@public
---@param _BattleObjectCreateSyncInfo table msg.BattleObjectCreateSyncInfo
function LevelTrigger:GetCreateSyncMessage_L2V(_BattleObjectCreateSyncInfo)
   local _LevelTriggerCreateSyncInfo_L2V = {}
	local _generateTriggerInfo = {}
	_generateTriggerInfo.id = self.id
	_generateTriggerInfo.position = self.position
	_generateTriggerInfo.rotation = self.rotation
	_generateTriggerInfo.scale = self.scale
	_generateTriggerInfo.delayTime = 0
	_generateTriggerInfo.timeStamp = self.createTime
	_LevelTriggerCreateSyncInfo_L2V.generateInfo = _generateTriggerInfo
	return _LevelTriggerCreateSyncInfo_L2V
end

return LevelTrigger
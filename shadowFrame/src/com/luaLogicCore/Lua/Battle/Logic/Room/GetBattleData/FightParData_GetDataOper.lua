---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hejincheng.
--- DateTime: 2022/4/18 10:49

require "Lib/class"

---@class FightParData_GetDataOper : GetDataOper
FightParData_GetDataOper = class(GetDataOper, 'FightParData_GetDataOper');

---@public
---@param _extParam table
---@param _battleRoom BattleRoom
function FightParData_GetDataOper:GetData(_extParam, _battleRoom)
    ---@type number
    local _uid = _extParam[1]

    local _attackTime = _battleRoom.battleLevelManager:GetStage(BattleLevel_Define_StageEnum.RunBattle):GetRunTimeSecond()
    _attackTime = math.floor(_attackTime)
    local _battleTime = _battleRoom.battleLevelManager:GetStage(BattleLevel_Define_StageEnum.RunBattle):GetRunTimeSecond()
    _battleTime = math.floor(_battleTime)

    --怪物数据
    local _monsterIdKill = {}
    local _monsterTypeKill = {}
    self:__GetKillMonsterData(_uid, _monsterIdKill, _monsterTypeKill, _battleRoom)

    --buff数据
    local _buffIdAttachCount = {}
    self:__GetBuffAttachData(_uid, _buffIdAttachCount, _battleRoom)

    --武将受伤数据
    local _leaderInjuryS = {}
    self:__GetLeaderHpPercentData(_uid, _leaderInjuryS, _battleRoom)

    --武将死亡数据
    local _leaderdeathS = {}
    self:__GetLeaderDeathData(_uid, _leaderdeathS, _battleRoom)

    --技能数据
    local _useJizouNumber = {}
    local _skillTypeNums = {}
    self:__GetSkillData(_uid, _skillTypeNums, _useJizouNumber, _battleRoom)

    --元素反应数据
    local _elementType = {}
    self:__GetElementData(_uid, _elementType, _battleRoom)

    --元素效果数据
    local _elementEffectType = {}
    self:__GetElementEffectData(_uid, _elementEffectType, _battleRoom)

    local _allGuides = _battleRoom.battleGuideManager:GetAllGuides(_uid)
    local _injuredNumber = _battleRoom.dataCollectManager.beDamageCountDic[tostring(_uid)]
    local _beDamageValue = _battleRoom.dataCollectManager.beDamageValueDic[tostring(_uid)]
    local _isNoInjurie = _beDamageValue == nil or _beDamageValue == 0
    -- 怪物波数
    local _monsterKillWave = _battleRoom.tagManager:GetTagValue(TAG_ENUM.MONSTER_WAVE)
    if _monsterKillWave == nil then
        _monsterKillWave = 0
    else
        _monsterKillWave = _monsterKillWave - 1
    end

    local _finalLeaderAttribute = {}
    local _leaderConsumePropPercent = {}
    local _unitConsumePropPercent = {}
    -- 剩余角色总血量
    local _remainLeaderTotalHp = self:__GetLeaderAttrAndRemainHpPercent(_uid, _finalLeaderAttribute, _unitConsumePropPercent, _leaderConsumePropPercent, _battleRoom)
    -- 或者的怪物剩余血量百分比
    local _monsterIdRemainHp = {}
    -- 击杀怪物总血量
    local _killMonsterTotalHp = self:__GetKillMonsterHp(_uid, _monsterIdRemainHp, _battleRoom)
    -- 单位Tag值
    local _unitTagKeyValues = self:__GetUnitTagKeyValues(_uid, _battleRoom)

    local fightPar = {
        attackTime = _attackTime,
        battleTime = _battleTime,
        completeGuides = _allGuides,
        leaderInjuryS = _leaderInjuryS,
        leaderdeathS = _leaderdeathS,
        skillTypeNums = _skillTypeNums,
        isNoInjurie = _isNoInjurie,
        monsterTypeKill = _monsterTypeKill,
        monsterIdKill = _monsterIdKill,
        elementType = _elementType,
        elementEffectType = _elementEffectType,
        injuredNumber = _injuredNumber,
        useJIZOUNumber = _useJizouNumber,
        finalLeaderAttribute = _finalLeaderAttribute,
        monsterKillWave = _monsterKillWave,
        remainLeaderTotalHp = _remainLeaderTotalHp,
        killMonsterTotalHp = _killMonsterTotalHp,
        buffIdAttachCount = _buffIdAttachCount,
        monsterIdRemainHp = _monsterIdRemainHp,
        unitTags = _unitTagKeyValues,
        leaderConsumePropPercent = _leaderConsumePropPercent,
        unitConsumePropPercent = _unitConsumePropPercent
    }

    return fightPar
end

---@private
---@param _battleRoom BattleRoom
function FightParData_GetDataOper:__GetKillMonsterData(_uid, _monsterIdKill, _monsterTypeKill, _battleRoom)
    ---@type table<string,number>
    local _monsterInstanceIdCount = {}
    ---@type table<string,number>
    local _monsterTemplateIdCount = {}

    ---@type DeathCollectData[]
    local _killCollectDataDic = _battleRoom.dataCollectManager.playerKillCollectDataDic[tostring(_uid)]
    if _killCollectDataDic then
        for _, _deathCollectData in pairs(_killCollectDataDic) do
            if _deathCollectData.deadUnitType == BattleUnitType.Monster then
                -- 怪物MonsterInstance死亡数据
                local _monsterInstanceId = _deathCollectData.deadDictId
                local _monsterInstanceCount = _monsterInstanceIdCount[tostring(_monsterInstanceId)]
                if not _monsterInstanceCount then
                    _monsterInstanceCount = 0
                end
                _monsterInstanceCount = _monsterInstanceCount + 1
                _monsterInstanceIdCount[tostring(_monsterInstanceId)] = _monsterInstanceCount
                -- 怪物MonsterTemplate死亡数据
                ---@type MonsterInstance
                local _monsterInstance = _battleRoom.inputDataSource:GetDict("MonsterInstance", _monsterInstanceId)
                local _monsterTemplateCount = _monsterTemplateIdCount[tostring(_monsterInstance.templateId)]
                if not _monsterTemplateCount then
                    _monsterTemplateCount = 0
                end
                _monsterTemplateCount = _monsterTemplateCount + 1
                _monsterTemplateIdCount[tostring(_monsterInstance.templateId)] = _monsterTemplateCount
            end
        end
    end

    for _monsterInstanceId, _monsterCount in pairs(_monsterInstanceIdCount) do
        local monsterIdKill = {}
        monsterIdKill.key = tonumber(_monsterInstanceId)
        monsterIdKill.value = _monsterCount
        table.insert(_monsterIdKill, monsterIdKill)
    end

    for _monsterTemplateId, _monsterCount in pairs(_monsterTemplateIdCount) do
        local monsterTypeKill = {}
        monsterTypeKill.key = tonumber(_monsterTemplateId)
        monsterTypeKill.value = _monsterCount
        table.insert(_monsterTypeKill, monsterTypeKill)
    end
end

---@private
---@param _battleRoom BattleRoom
function FightParData_GetDataOper:__GetLeaderHpPercentData(_uid, _leaderInjuryS, _battleRoom)
    local _leaderHpPercent = _battleRoom.dataCollectManager.leaderHpPercentDic[tostring(_uid)]
    if _leaderHpPercent then
        for _leaderId, _hpPercent in pairs(_leaderHpPercent) do
            if _hpPercent > 0 and _hpPercent <= BATTLE_CONST.HEAVY_INJURE_PERCENT then
                table.insert(_leaderInjuryS, tonumber(_leaderId))
            end
        end
    end
end

---@private
---@param _battleRoom BattleRoom
function FightParData_GetDataOper:__GetLeaderDeathData(_uid, _leaderdeathS, _battleRoom)
    local _deadLeaderIds = _battleRoom.dataCollectManager.deadLeaderIdDic[tostring(_uid)]
    if _deadLeaderIds then
        for _, _leaderId in pairs(_deadLeaderIds) do
            table.insert(_leaderdeathS, _leaderId)
        end
    end
end

---@private
---@param _battleRoom BattleRoom
function FightParData_GetDataOper:__GetElementData(_uid, _elementType, _battleRoom)
    ---@type table<string,number>
    local _elementTypeReactCount = {}

    local _elementCollectDatas = _battleRoom.dataCollectManager.elementCollectDataDic[tostring(_uid)]
    if _elementCollectDatas then
        for _, _elementCollectData in pairs(_elementCollectDatas) do
            local _reactCount = _elementTypeReactCount[tostring(_elementCollectData.reactionId)]
            if not _reactCount then
                _reactCount = 0
            end
            _reactCount = _reactCount + 1
            _elementTypeReactCount[tostring(_elementCollectData.reactionId)] = _reactCount
        end
    end
    for _reactId, _reactCount in pairs(_elementTypeReactCount) do
        local elementTypeCount = {}
        elementTypeCount.key = tonumber(_reactId)
        elementTypeCount.value = _reactCount
        table.insert(_elementType, elementTypeCount)
    end
end

---@private
---@param _battleRoom BattleRoom
function FightParData_GetDataOper:__GetElementEffectData(_uid, _elementEffectType, _battleRoom)
    ---@type table<string,number>
    local _elementTypeEffectCount = {}

    local _elementEffectDatas = _battleRoom.dataCollectManager.elementEffectDataDic[tostring(_uid)]
    if _elementEffectDatas then
        for _, _elementEffectData in pairs(_elementEffectDatas) do
            local _effectCount = _elementTypeEffectCount[tostring(_elementEffectData.elementId)]
            if not _effectCount then
                _effectCount = 0
            end
            _effectCount = _effectCount + 1
            _elementTypeEffectCount[tostring(_elementEffectData.elementId)] = _effectCount
        end
    end
    for _elementId, _effectCount in pairs(_elementTypeEffectCount) do
        local elementTypeCount = {}
        elementTypeCount.key = tonumber(_elementId)
        elementTypeCount.value = _effectCount
        table.insert(_elementEffectType, elementTypeCount)
    end
end

---@private
---@param _battleRoom BattleRoom
function FightParData_GetDataOper:__GetSkillData(_uid, _skillTypeNums, _useJizouNumber, _battleRoom)
    ---@type table<string,number>
    local _leaderIdJizouCount = {}

    local _skillCollectDatas = _battleRoom.dataCollectManager.skillCollectDataDic[tostring(_uid)]
    if _skillCollectDatas then
        for _, _skillCollectData in pairs(_skillCollectDatas) do
            -- 统计使用极奏技能次数
            local _leaderId = _skillCollectData.dictId
            ---@type Leader
            local _leader = _battleRoom.inputDataSource:GetDict("Leader", _leaderId)
            if _leader and _leader.jizouSkillGroup == _skillCollectData.skillId then
                -- 使用的是极奏技能
                local _jizouCount = _leaderIdJizouCount[tostring(_leaderId)]
                if not _jizouCount then
                    _jizouCount = 0
                end
                _jizouCount = _jizouCount + 1
                _leaderIdJizouCount[tostring(_leaderId)] = _jizouCount
            end
        end
    end
    for _leaderId, _jizouCount in pairs(_leaderIdJizouCount) do
        local useJizouNumber = {}
        useJizouNumber.key = tonumber(_leaderId)
        useJizouNumber.value = _jizouCount
        table.insert(_useJizouNumber, useJizouNumber)
    end

    local _skillTypeStateCountDic = _battleRoom.dataCollectManager.playerSkillTypeCountDic[tostring(_uid)]
    if _skillTypeStateCountDic then
        for _skillType, _skillStateCount in pairs(_skillTypeStateCountDic) do
            local _allCount = 0
            for _, _count in pairs(_skillStateCount) do
                _allCount = _allCount + _count
            end
            local skillTypeNum = {}
            skillTypeNum.key = tonumber(_skillType)
            skillTypeNum.value = _allCount
            table.insert(_skillTypeNums, skillTypeNum)
        end
    end
end

-- 造成的怪物总血量
---@param _uid number
---@param _battleRoom BattleRoom
---@return table
function FightParData_GetDataOper:__GetUnitTagKeyValues(_uid, _battleRoom)
    local _unitTagKeyValues = {}
    ---@type BattleUnit_Player
    local _unit = _battleRoom.battleUnitManager:GetUnitByPlayerId(_uid, true)
    if not _unit then
        return _unitTagKeyValues
    end
    ---@type BattleUnitCom_TagSelector
    local _tagCom = _unit:GetComponent(BattleUnitComponentType.TagSelector)
    if not _tagCom then
        return _unitTagKeyValues
    end
    local _allTags = _tagCom:GetAllTags()
    if not _allTags then
        return _unitTagKeyValues
    end
    for _tag, _value in pairs(_allTags) do
        local keyValue = {}
        keyValue.key = _tag
        keyValue.value = tostring(_value)
        table.insert(_unitTagKeyValues, keyValue)
    end
    return _unitTagKeyValues
end

-- 造成的怪物总血量
---@param _uid number
---@param _monsterIdRemainHp table
---@param _battleRoom BattleRoom
---@return number
function FightParData_GetDataOper:__GetKillMonsterHp(_uid, _monsterIdRemainHp, _battleRoom)
    -- 击杀怪物总血量
    ---@type number
    local _killMonsterTotalHp = _battleRoom.dataCollectManager.playerKillMonsterTotalHpDic[tostring(_uid)]
    if _killMonsterTotalHp == nil then
        _killMonsterTotalHp = 0
    end
    -- 剩余怪物的被打血量
    ---@type BattleUnitBase[]
    local _aliveMonsters = _battleRoom.battleUnitManager:GetUnitListByUnitType(BattleUnitType.Monster, false)
    if _aliveMonsters then
        for _, _monsterUnit in pairs(_aliveMonsters) do
            ---@type BattleObjCom_Property
            local _comProp = _monsterUnit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Property)
            if _comProp then
                local _maxHp = _comProp:GetPropertyByName(BattlePropertyEnum.Hp_Max)
                local _curHp = _comProp:GetPropertyByName(BattlePropertyEnum.Hp_Cur)
                local _killHp = 0
                if _maxHp and _curHp then
                    _killHp = _maxHp - _curHp
                    _killHp = Mathf.Max(_killHp, 0)
                end
                _killMonsterTotalHp = _killMonsterTotalHp + _killHp
                -- 剩余血量百分比
                ---@type MonsterInstance
                local _monsterInstance = _monsterUnit:GetDataInstanceXls()
                if _monsterInstance then
                    local data = {}
                    data.key = _monsterInstance.id
                    data.value = _comProp:GetPropertyPercentByName(BattlePropertyEnum.Hp_Cur)
                    table.insert(_monsterIdRemainHp, data)
                end
            end
        end
    end
    return _killMonsterTotalHp
end

-- 取unit属性
---@param _uid number
---@param _finalLeaderAttribute table
---@param _leaderConsumePropPercent table
---@param _battleRoom BattleRoom
---@return number
function FightParData_GetDataOper:__GetLeaderAttrAndRemainHpPercent(_uid, _finalLeaderAttribute, _unitConsumePropPercent, _leaderConsumePropPercent, _battleRoom)
    local _remainLeaderTotalHp = 0
    local _leaderTotalHp = 0
    -- 战斗原始数据
    local _unit = _battleRoom.battleUnitManager:GetUnitByPlayerId(_uid, true)
    if _unit then

        ---@type BattleUnitCom_UnitProp
        local _unitComProp = _unit:GetComponent(BattleUnitComponentType.UnitProp)
        TableUtil.Copy(_unitComProp:GetConsumePropPercentSnapShot(), _unitConsumePropPercent)

        for _, _object in pairs(_unit:GetAllObjectDic()) do
            if _object then
                ---@type BattleObjCom_Property
                local _comProp = _object:GetComponent(BattleObjectComponentType.Property)

                local _leaderAttribute = {}
                _leaderAttribute.leaderId = _object:GetDicId()
                _leaderAttribute.attributeMap = _comProp:GetPropSnapShot()
                table.insert(_finalLeaderAttribute, _leaderAttribute)

                local LeaderConsumePropPercent = {}
                LeaderConsumePropPercent.leaderId = _object:GetDicId()
                LeaderConsumePropPercent.consumePropPercent = _comProp:GetConsumePropPercentSnapShot()
                table.insert(_leaderConsumePropPercent, LeaderConsumePropPercent)

                -- 剩余总血量
                _remainLeaderTotalHp = _remainLeaderTotalHp + _comProp:GetHp()
                _leaderTotalHp = _leaderTotalHp + _comProp:GetPropertyByName(BattlePropertyEnum.Hp_Max)
            end
        end
    end
    if _leaderTotalHp == 0 then
        return 0
    end
    return Mathf.Round(_remainLeaderTotalHp / _leaderTotalHp * 100)
end

---@private
---@param _uid number
---@param _buffIdAttachCount table
---@param _battleRoom BattleRoom
function FightParData_GetDataOper:__GetBuffAttachData(_uid, _buffIdAttachCount, _battleRoom)
    local _buffAttachIdCountDic = _battleRoom.dataCollectManager.playerBuffAttachIdCountDic[tostring(_uid)]
    if not _buffAttachIdCountDic then
        return
    end
    for _buffId, _count in pairs(_buffAttachIdCountDic) do
        local buffIdCount = {}
        buffIdCount.key = tonumber(_buffId)
        buffIdCount.value = _count
        table.insert(_buffIdAttachCount, buffIdCount)
    end
end

return FightParData_GetDataOper;
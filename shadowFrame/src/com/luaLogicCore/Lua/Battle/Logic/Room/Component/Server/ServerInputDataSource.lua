---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2021/12/16 11:03
--- 服务器输入数据接收器

require "Lib/class"
require "Battle/Logic/Room/Component/InputDataSource"

---@class ServerInputDataSource : InputDataSource 服务器输入数据接收器
ServerInputDataSource = class(InputDataSource, 'ServerInputDataSource');

function ServerInputDataSource:ctor(_battleId)
    self.battleId = _battleId
end

--- 初始化
---@public
---@param _battlePlayerInfo table
function ServerInputDataSource:Init(_battlePlayerInfo)
    self:__Init(_battlePlayerInfo);
end

---@param _battleMessage BattleRoomMessage
function ServerInputDataSource:AddRoomMessage(_battleMessage)
    self:__AddRoomMessage(_battleMessage)
    -- 服务器log打印
    SERVER_LIB.battle:messageRoomMsgQueueLog(_battleMessage.uid, self:GetRoomMessageSize())
end

---@param _uid number
---@param _battleMessage BattleRoomMessage
function ServerInputDataSource:AddPlayerMessage(_uid, _battleMessage)
    self:__AddPlayerMessage(_uid, _battleMessage)
    -- 服务器log打印
    SERVER_LIB.battle:messagePlayerMsgQueueLog(_uid, self:GetPlayerMessageSize(_uid))
end

--- 接收协议接口
---@public
---@param _uid number 发送协议的玩家id，如果是战斗房间消息该值为nil
---@param _id number 协议id
---@param _msgTable table 协议
---@param _arriveNetIoTime number 到达网络时间
function ServerInputDataSource:OnReceiveMessage(_uid, _id, _msgTable, _arriveNetIoTime)
    ---@type BattleRoomMessage
    local battleRoomMessage = BattleRoomMessage.New();
    local proto = PROTO_CODE_MAP[tostring(_id)];
    if proto ~= nil then
        if proto:GetType() == PROTO_MESSAGE_TYPE.InitRoom then
        elseif proto:GetType() == PROTO_MESSAGE_TYPE.Room then
            battleRoomMessage:Init(_uid, _id, self.battleId, _msgTable, _arriveNetIoTime);
            self:AddRoomMessage(battleRoomMessage)
        elseif proto:GetType() == PROTO_MESSAGE_TYPE.tick then
            battleRoomMessage:Init(_uid, _id, self.battleId, _msgTable, _arriveNetIoTime);
            self:AddRoomMessage(battleRoomMessage)
        elseif proto:GetType() == PROTO_MESSAGE_TYPE.player then
            if proto:GetId() == PROTO_CODE_ENUM.PLAYER_PRESS_KEY:GetId() and _msgTable.key == nil then
                battleRoomMessage:Init(_uid, _id, self.battleId, _msgTable, _arriveNetIoTime);
                proto:ApplyCallBack(battleRoomMessage)
            else
                battleRoomMessage:Init(_uid, _id, self.battleId, _msgTable, _arriveNetIoTime);
                self:AddPlayerMessage(_uid, battleRoomMessage)
            end
        elseif proto:GetType() == PROTO_MESSAGE_TYPE.broadcast then
            battleRoomMessage:Init(_uid, _id, self.battleId, _msgTable, _arriveNetIoTime);
            self:AddRoomMessage(battleRoomMessage)
        end
    end
end

--- 读取dict
---@public
---@param _dictName string 表名
---@param _id number 表key(int类型)
---@return table 表数据
function ServerInputDataSource:GetDict(_dictName, _id)
    return SERVER_LIB.battle:getBattleDict():getLuaTableByNameAndIdInt(_dictName, _id)
end

--- 读取dict
---@public
---@param _dictName string 表名
---@param _id string 表key(String类型)
---@return table 表数据
function ServerInputDataSource:GetDictByString(_dictName, _id)
    return SERVER_LIB.battle:getBattleDict():getLuaTableByNameAndId(_dictName, _id)
end

--- 读取skillValue
---@public
---@param _skillId number 技能Id
---@param _level number 技能等级
---@return table 表数据
function ServerInputDataSource:GetSkillValue(_skillId, _level)
    return SERVER_LIB.battle:getBattleDict():getSkillValueBySkillIdAndSkillLevel(_skillId, _level);
end

--- 读取talentSkill
---@public
---@param _skillId number 技能Id
---@param _level number 技能等级
---@return table 表数据
function ServerInputDataSource:GetTalentSkill(_skillId, _level)
    return SERVER_LIB.battle:getBattleDict():getTalentSkillBySkillIdAndSkillLevel(_skillId, _level);
end

-- 根据怪物掉落id获取掉落数据
---@param monsterFallId number 怪物掉落id
---@type function
---@return table
---@public
function ServerInputDataSource:getMonsterFallDataList(monsterFallId)
    return SERVER_LIB.battle:getBattleDict():getMonsterFallDataList(monsterFallId)
end

-- 根据触发id和附着id获取元素反应
---@param triggerId number 触发元素id
---@param attachId number 附着元素id
---@type function
---@return ElementalReaction
---@public
function ServerInputDataSource:getEleReactByTrigIdAndAttachId(triggerId, attachId)
    return SERVER_LIB.battle:getBattleDict():getEleReactByTrigIdAndAttachId(triggerId, attachId)
end

-- 根据怪物掉落id获取掉落数据
---@param fallObjectId number 掉落物id
---@param elementType number 元素类型
---@type function
---@return FallObject
---@public
function ServerInputDataSource:getFallObjectByIdAndElement(fallObjectId, elementType)
    return SERVER_LIB.battle:getBattleDict():getFallObjectByIdAndElement(fallObjectId, elementType)
end

-- 根据距离获取伤害系数
---@param weaponDistanceType number 武器类型
---@param distance number 距离
---@type function
---@return number
---@public
function ServerInputDataSource:getDistanceRatioByRangeIndex(weaponDistanceType, distance)
    return SERVER_LIB.battle:getBattleDict():getDistanceRatioByRangeIndex(weaponDistanceType, distance)
end

-- 根据元素id和附着量获取元素强度
---@param elementId number 元素id
---@param attachNum number 附着元素量
---@type function
---@return ElementStrength
---@public
function ServerInputDataSource:getEleStrengthByEleIdAndAttachId(elementId, attachNum)
    return SERVER_LIB.battle:getBattleDict():getEleStrengthByEleIdAndAttachId(elementId, attachNum)
end

-- 根据类型获取关卡常量
---@param type string 常量类型
---@type function
---@return LevelConstant
---@public
function ServerInputDataSource:getLevelConstantByType(type)
    return SERVER_LIB.battle:getBattleDict():getLevelConstantByType(type)
end

-- 获取elementValue数据
---@public
---@return ElementValue
function ServerInputDataSource:GetElementValueComplexData(_buffInstanceId, _level)
    return SERVER_LIB.battle:getBattleDict():getElementValueByBuffInstanceIdAndLevel(_buffInstanceId, _level)
end

-- 获取伤害距离衰减下标
---@public
---@param _weaponType number 攻击方武装类型ID
---@param _dis number 测算的距离的平方值
---@param _propChangeValue number 攻击方 Skill_Active_CD_Reduce 属性值
---@return number
function ServerInputDataSource:GetHurtDisReduceParamCnt(_weaponType, _dis, _propChangeValue)
    return SERVER_LIB.battle:getBattleDict():getHurtDisReduceParamCnt(_weaponType, _dis, _propChangeValue)
end

-- 获取怪物属性修正
---@public
---@param _group number
---@param _classify number
---@param _playerNum number
function ServerInputDataSource:GetLevelMemberFix(_group, _classify, _playerNum)
    return SERVER_LIB.battle:getBattleDict():getLevelMemberFix(_group, _classify, _playerNum)
end

--- 读取战前剧情
---@public
---@param _mainLevelId number 技能Id
---@return table 战前剧情id
function ServerInputDataSource:GetMainLevelPreBattlePlots(_mainLevelId)
    return SERVER_LIB.battle:getBattleDict():getPreBattlePlotIdsByMainLevelId(_mainLevelId);
end

--- 读取战前剧情
---@public
---@param _multiPveBossLevelId number 关卡id
---@return table 战前剧情id
function ServerInputDataSource:GetMultiPveBossLevelPreBattlePlots(_multiPveBossLevelId)
    return SERVER_LIB.battle:getBattleDict():getPreBattlePlotIdsByMultiPveBossLevelId(_multiPveBossLevelId);
end

-- 获取伤害距离衰减下标
---@public
---@return BountyMissionsLevelStage
function ServerInputDataSource:GetBountyMissionLevelStage(_levelInstanceId, _level)
    return SERVER_LIB.battle:getBattleDict():getBountyMissionLevelStage(_levelInstanceId, _level)
end

-- 修正属性上下限
---@public
---@param _propId number 属性ID
---@param _value number 属性原始值
function ServerInputDataSource:FormatPropLimit(_propId, _value)
    return SERVER_LIB.battle:getBattleDict():formatPropLimit(_propId, _value)
end

-- 获取赛季关卡数据
---@public
---@param _levelInstanceId number 关卡id
---@param _season number 赛季
---@return SeasonReplaceLevel
function ServerInputDataSource:GetSeasonReplaceLevelByLevelIdAndSeason(_levelInstanceId, _season)
    return SERVER_LIB.battle:getBattleDict():getSeasonReplaceLevelByLevelIdAndSeason(_levelInstanceId, _season)
end

return ServerInputDataSource;
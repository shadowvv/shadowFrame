---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guokun.
--- DateTime: 2022/11/23 12:00

require "Lib/class"
require "Battle/Logic/Room/BattleObject/ActionState/ActionState"

---@class ReloadAfterActionState : ActionState 换弹状态
---@field battleRoom BattleRoom 战斗
---@field stateParam StateParameter 状态参数配置
---@field unitType number 单位类型
---@field runTime number 运行时间
---@field switchRule StateSwitchRule 状态互斥规则表
ReloadAfterActionState = class(ActionState, 'ReloadAfterActionState');

---@param _battleId number 战斗id
---@param _stateParamId number 状态参数配置Id
---@param _unitType number 单位类型
function ReloadAfterActionState:ctor(_battleId,_stateParamId,_unitType)
    self.battleRoom = GetBattleRoom(_battleId)
    self.stateParam = self.battleRoom.inputDataSource:GetDict("StateParameter", _stateParamId);
    self.unitType = _unitType;
    self.runTime = 0;
    self.switchRule = self.battleRoom.inputDataSource:GetDict("StateSwitchRule",self:GetId());
end

function ReloadAfterActionState:Init()

end

--- 切换行为,判断行为的参数正确性
---@param _actionStateManager ActionStateManage 行为管理器
---@param _currentStates ActionState[] 行为管理器
---@param _objectId number 角色id
---@return boolean 是否可进入行为
function ReloadAfterActionState:EnterAction(_actionStateManager, _currentStates, _objectId)
    ---@type BattleObjectBase
    local currentObject = _actionStateManager:GetUnit():GetCurrentHeroObject();
    --- @type BattleObjCom_Weapon
    local componentWeapon = currentObject:GetComponent(BattleObjectComponentType.Weapon)
    if not componentWeapon:IsInReloadState() then
        return false
    end
    ---@type BattleObjCom_Property
    local componentProperty = currentObject:GetComponent(BattleObjectComponentType.Property)
    if not componentProperty then
        return false
    end

    -- 换弹后时间乘系数
    self.reloadBackTime = self.stateParam.reloadBackTime * (1 + tonumber(componentProperty:GetPropertyByName(BattlePropertyEnum.Speed_Add_Reload)));

    self.runTime = 0;
    return true
end

--- 执行行为
---@param _actionStateManager ActionStateManage 行为管理器
---@param _dt number 更新时间
---@param _netId number 单位id
---@param _objId number 单位对应实体id
function ReloadAfterActionState:DoAction(_actionStateManager, _dt, _netId,_objId)
    if self.runTime >= self.reloadBackTime then
        _actionStateManager:Exit(self);
    end

    self.runTime = self.runTime + _dt;
end

--- 退出行为
---@param _actionStateManager ActionStateManage 行为管理器
---@param _isBreak boolean 是否为打断退出
---@param _isActive boolean 是否为主动打断
function ReloadAfterActionState:ExitAction(_actionStateManager,_isBreak,_isActive)
    local battleRoom = GetBattleRoom(_actionStateManager.battleId)
    local tempBreak = true;
    if not _isBreak then
        tempBreak = false;
    end
    battleRoom.battleLogicEventService:OnTriggerReloadEndEvent(_actionStateManager:GetUnit():GetNetId(), _actionStateManager:GetUnit():GetCurrentHeroObjectId(), tempBreak)

    ---@type BattleObjectBase
    local currentObject = _actionStateManager:GetUnit():GetCurrentHeroObject();
    --- @type BattleObjCom_Weapon
    local componentWeapon = currentObject:GetComponent(BattleObjectComponentType.Weapon)
    if not tempBreak then
        -- 执行换弹
        componentWeapon:Reload();
    end
    if componentWeapon:IsInReloadState() then
        -- 退出换弹
        componentWeapon:ExitReloadState()
    end
end

-- 是否为主动状态
---@return boolean 是否为主动状态
function ReloadAfterActionState:IsActive()
    return true;
end

-- 行为状态Id
---@return number
function ReloadAfterActionState:GetId()
    return 19;
end

---获得状态冲突表
---@return StateSwitchRule
function ReloadAfterActionState:GetSwitchRule()
    return self.switchRule
end

return ReloadAfterActionState;
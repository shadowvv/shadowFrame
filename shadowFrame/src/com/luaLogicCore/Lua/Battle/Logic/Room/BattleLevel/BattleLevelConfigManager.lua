---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/09/19 11:30
--- Describe: 关卡配置管理
---

---@class BattleLevelConfigManager : table
BattleLevelConfigManager = class(nil, "BattleLevelConfigManager")
function BattleLevelConfigManager:ctor(_battleId)
	---@type number
	self.battleId = _battleId
	self.battleRoom = GetBattleRoom(self.battleId)
end

---@public
---@param _battleEnterInfo table msg.BattleEnterInfo
function BattleLevelConfigManager:Init(_battleEnterInfo)
	---@private
	self.__levelId = _battleEnterInfo.levelId
	
	---怪物气血影响值
	---@private
	self.__monsHPFixParam = 1
	if _battleEnterInfo.customParams and _battleEnterInfo.customParams[1] then
		self.__monsHPFixParam = tonumber(_battleEnterInfo.customParams[1])
	--elseif CheckLogLevel(LogLevel.logErr) then
	--	LogTools.LogByLevel(LogLevel.logErr, "battleEnterInfo.customParams[1] is not exist!!!")
	end
	
	if CheckLogLevel(LogLevel.log) and LogTools.InitBattleLog then
		LogTools.LogByLevel(LogLevel.log, "关卡初始化", "levelId", self.__levelId, "气血值影响值", self.__monsHPFixParam, "_battleEnterInfo.customParams", dumpTableEx(_battleEnterInfo.customParams))
	end

	self:__InitLevelType(_battleEnterInfo.battleType)
	self:__InitMainLevelXls(_battleEnterInfo.levelId)
	self:__InitLevelInstanceXls(_battleEnterInfo.levelInstanceId)
	self:__InitLevelConfig()
	self:__InitLevelStageXls(_battleEnterInfo)
	self:__InitWeatherType()
	self:__InitLevelRecommendPower(_battleEnterInfo)
end

---初始化关卡类型
---@private
function BattleLevelConfigManager:__InitLevelType(_battleTypeIndex)
	if not _battleTypeIndex then return end

	---@private
	---@type BattleType
    self.__battleType = GetBattleTypeById(_battleTypeIndex)
    if not self.__battleType or not self.__battleType:GetOper() then
        self.battleRoom.exceptionProcessor:OnBattleDataNil("self.battleType[" .. tostring(_battleTypeIndex) .. "] nil");
		return
    end

	---@type BattleTypeOperBase
	local _battleTypeOper = self.battleRoom.battleLevelManager.levelConfigManager:GetBattleType():GetOper()
	-- 初始关卡自定义数据
	_battleTypeOper:Init(self.battleRoom)

	---@private
	self.__battleTypeIndex = _battleTypeIndex
	
	if CheckLogLevel(LogLevel.log) and LogTools.InitBattleLog then
		LogTools.LogByLevel(LogLevel.log, "关卡初始化", "__InitLevelType", "_battleTypeIndex", _battleTypeIndex, "关卡类型", LogTools.GetEnumTableDesc(BattleTypeEnum, self.__battleType))
	end
end

---根据关卡类型初始化MainLevel表数据
---@private
---@param _mainLevelId number
function BattleLevelConfigManager:__InitMainLevelXls(_mainLevelId)
	if not self.__battleTypeIndex then return end
	if not _mainLevelId then return end

	if not self.__battleType then
		self.battleRoom.exceptionProcessor:OnBattleDataNil("无效的BattleType:" .. tostring(_mainLevelId));
		return
	end

	---@type BattleTypeOperBase
	local oper = self.__battleType:GetOper()
	if not oper then
		self.battleRoom.exceptionProcessor:OnBattleDataNil("无效的BattleType[" .. tostring(_mainLevelId) .. "]oper");
		return
	end

	---@private
	self.__levelXls = oper:GetLevelXls(_mainLevelId)
	---@private
	self.__levelId = _mainLevelId
	
	if CheckLogLevel(LogLevel.log) and LogTools.InitBattleLog then
		LogTools.LogByLevel(LogLevel.log, "关卡初始化", "__InitMainLevelXls", "MainLevelId", _mainLevelId, "对应关卡类型的MainLevel名字", oper:GetMainLevelName(), "读取对应关卡类型的MainLevel主表", self.__levelXls ~= nil)
	end
end

---初始化NewLevelInstance表数据
---@private
function BattleLevelConfigManager:__InitLevelInstanceXls(_levelInstanceId)
	if not _levelInstanceId then return end
	
	---@private
	---@type NewLevelInstance
    self.__levelInstanceXls = self.battleRoom.inputDataSource:GetDict("NewLevelInstance", _levelInstanceId)
    if not self.__levelInstanceXls then
		self.battleRoom.exceptionProcessor:OnBattleDataNil("self.levelInstanceXls[" .. tostring(_levelInstanceId) .. "] nil");
        return
    end
	
	---@private
	self.__levelInstanceId = _levelInstanceId
	
	if CheckLogLevel(LogLevel.log) and LogTools.InitBattleLog then
		LogTools.LogByLevel(LogLevel.log, "关卡初始化", "__InitLevelInstanceXls", "LevelInstanceId", self.__levelInstanceId, "读取NewLevelInstance表", self.__levelInstanceXls ~= nil)
	end
end

---初始化关卡编辑器数据
---@private
function BattleLevelConfigManager:__InitLevelConfig()
	if not self.__levelInstanceXls then return end
	
	---@private
	self.__levelEditorConfig = require("Battle/Configs/" .. tostring(self.__levelInstanceXls.deployMonsterConfig))
    if not self.__levelEditorConfig then
		self.battleRoom.exceptionProcessor:OnBattleDataNil("self.levelConfig[" .. tostring(self.__levelInstanceXls.deployMonsterConfig) .. "] nil");
        return
    end
	
	if CheckLogLevel(LogLevel.log) and LogTools.InitBattleLog then
		LogTools.LogByLevel(LogLevel.log, "关卡初始化", "__InitLevelConfig", "配置路径", "Battle/Configs/" .. tostring(self.__levelInstanceXls.deployMonsterConfig), "读取关卡编辑器数据", self.__levelEditorConfig ~= nil)
	end
end

---初始化LevelStage表数据
---@private
function BattleLevelConfigManager:__InitLevelStageXls(_battleEnterInfo)
	if not self.__levelInstanceXls then return end
	if not self.__levelInstanceId then return end
	if not self.__levelXls then return end

	--local _levelStageId = self.__levelInstanceXls.stageLevel

	--if self.__battleType == BattleTypeEnum.BOUNTY_LEVEL or self.__battleType == BattleTypeEnum.LIMITED_TIME_LEVEL then
	--	--悬赏关卡 或 限时关卡
	--	local levelInstanceId = self.__levelInstanceId
	--	local _playerLevel = _battleEnterInfo.battlePlayerInfo[1].level
	--
	--	---策划说这个表现在不止悬赏关卡用了，虽然名字叫悬赏关卡的levelStage
	--	---是不是很奇怪？为什么限时关卡也读悬赏关卡的stage？因为策划没配新表！表也不改名！！！他们用同一个表！！！
	--	---@type BountyMissionsLevelStage
	--	local _BountyMissionsLevelStage = self.battleRoom.inputDataSource:GetBountyMissionLevelStage(levelInstanceId, _playerLevel)
	--	if _BountyMissionsLevelStage then
	--		_levelStageId = _BountyMissionsLevelStage.levelStage
	--		---@private
	--		self.__BountyMissionsLevelStageXls = _BountyMissionsLevelStage
	--	end
	--	if CheckLogLevel(LogLevel.log) and LogTools.InitBattleLog then
	--		LogTools.LogByLevel(LogLevel.log, "关卡初始化", "走悬赏关/限时关的StageLevel初始化逻辑", "玩家等级", _playerLevel, "读取BountyMissionsLevelStage表", _BountyMissionsLevelStage ~= nil)
	--	end
	--end
	--
	--if self.__battleType == BattleTypeEnum.TRIALROLE_LEVEL or self.__battleType == BattleTypeEnum.SMALL_BATTLE_GROUND_LEVEL then
	--	_levelStageId = self.__levelInstanceXls.stageLevel
	--end

	-- 除单机的角色试用关以外，其他关卡的levelStage改为服务器读取传值进来
	---@type number
	local _levelStageId = _battleEnterInfo.levelStageId
	if self.__battleType == BattleTypeEnum.TRIALROLE_LEVEL then
		_levelStageId = self.__levelInstanceXls.stageLevel
	end

	---@private
	---@type NewLevelStage
	self.__levelStageXls = self.battleRoom.inputDataSource:GetDict("NewLevelStage", _levelStageId)
	if not self.__levelStageXls then
		self.battleRoom.exceptionProcessor:OnBattleDataNil("没有找到LevelStage数据， _levelStageId： " ..tostring(_levelStageId));
		return
	end
	---@private
	self.__levelStageId = _levelStageId

	if CheckLogLevel(LogLevel.log) and LogTools.InitBattleLog then
		LogTools.LogByLevel(LogLevel.log, "关卡初始化", "__InitLevelStageXls", "levelStageId", self.__levelStageId, "读取NewLevelStage表", self.__levelStageXls ~= nil)
	end
end

---初始化关卡天气数据
---@private
function BattleLevelConfigManager:__InitWeatherType()
	if not self.__levelInstanceXls then return end

	---@private
	---@type WeatherType
	self.__weatherTypeXls = self.battleRoom.inputDataSource:GetDict("WeatherType", self.__levelInstanceXls.weatherID)
																													 
	if CheckLogLevel(LogLevel.log) and LogTools.InitBattleLog then
		LogTools.LogByLevel(LogLevel.log, "关卡初始化", "__InitWeatherType", "weatherID", self.__levelInstanceXls.weatherID, "读取WeatherType表", self.__weatherTypeXls ~= nil)
	end
end

---关卡推荐战力
---@param _battleEnterInfo table msg.BattleEnterInfo
function BattleLevelConfigManager:__InitLevelRecommendPower(_battleEnterInfo)
	
	self.__recommendPowerFixIds = {}  --战力修改的属性ID
	self.__recommendPowerFixValues = {}  --战力修改的属性加值（百分比）
	local _recommendPowerId = self.__levelXls.recommendPower
	--_recommendPowerId = 99103
	--LogTools.LogByLevel(LogLevel.log, "BattleLevelConfigManager:__InitLevelRecommendPower", "_recommendPowerId", _recommendPowerId)
	---@type BattlePowerSystem
	local _recommendPowerXls = self.battleRoom.inputDataSource:GetDict("BattlePowerSystem", _recommendPowerId)
	if not _recommendPowerXls then
		if CheckLogLevel(LogLevel.log) and LogTools.InitBattleLog then
			LogTools.LogByLevel(LogLevel.logErr, "关卡初始化", "关卡推荐战力索引ID错误，找不到对应的战力表数据，ID：", _recommendPowerId)
		end
		return
	end
	self.__recommendPowerFixIds = _recommendPowerXls.levelupAttributeID
	
	local _standPower = _recommendPowerXls.battleValue
	local _teamPower = _battleEnterInfo.teamCapability or _standPower
	local _ratio = _teamPower/_standPower
	if CheckLogLevel(LogLevel.log) and LogTools.InitBattleLog then
		LogTools.LogByLevel(LogLevel.log, "关卡初始化", "__InitLevelRecommendPower", _battleEnterInfo.teamCapability, "_recommendPowerXls.battleValue", _recommendPowerXls.battleValue, "_ratio", _ratio)
	end
	if _teamPower >= _standPower then return end
	
	
	local _list_1 = _recommendPowerXls.perpercent
	for i = 1, #_list_1 do
		if _ratio >= _list_1[i] then
			for j = 1, #_recommendPowerXls.typeValue do
				self.__recommendPowerFixValues[j] = _recommendPowerXls.typeValue[j] + (i - 1) * _recommendPowerXls.typeValueUp[j]
			end
			if CheckLogLevel(LogLevel.log) and LogTools.InitBattleLog then
				LogTools.LogByLevel(LogLevel.log, "关卡初始化", "__InitLevelRecommendPower", "档位", i, "self.__recommendPowerFixIds", dumpTableEx(self.__recommendPowerFixIds), "self.__recommendPowerFixValues", dumpTableEx(self.__recommendPowerFixValues))
			end
			return
		end
	end
end

------------------------------------------------------------------------------------------------------------------------
---@public
---@return BattleType
function BattleLevelConfigManager:GetBattleType()
	return self.__battleType
end

---@public
---@param _battleType BattleType
function BattleLevelConfigManager:CheckBattleType(_battleType)
	return self.__battleType and self.__battleType == _battleType
end

---@public
function BattleLevelConfigManager:CheckBattleTypeByIndex(_battleTypeIndex)
	return self.__battleType and self.__battleType:GetId() == _battleTypeIndex
end

---@public
function BattleLevelConfigManager:GetLevelId()
	return self.__levelId
end

---@public
function BattleLevelConfigManager:GetLevelXls()
	return self.__levelXls
end

---@public
function BattleLevelConfigManager:GetLevelMemberGroupId()
	return self.__levelXls.levelMember or 1
end

---@public
function BattleLevelConfigManager:GetLevelInstanceId()
	return self.__levelInstanceId
end

---@public
---@return NewLevelInstance
function BattleLevelConfigManager:GetLevelInstanceXls()
	return self.__levelInstanceXls
end

---@public
function BattleLevelConfigManager:GetLevelEditorConfig()
	return self.__levelEditorConfig
end

---@public
function BattleLevelConfigManager:GetLevelStageId()
	return self.__levelStageId
end

---@public
---@return NewLevelStage
function BattleLevelConfigManager:GetLevelStageXls()
	return self.__levelStageXls
end

---@public
function BattleLevelConfigManager:GetRecommendPowerFixIds()
	return self.__recommendPowerFixIds
end

---@public
function BattleLevelConfigManager:GetRecommendPowerFixValues()
	return self.__recommendPowerFixValues
end

---@return WeatherType
function BattleLevelConfigManager:GetWeatherTypeXls()
	return self.__weatherTypeXls
end

function BattleLevelConfigManager:GetRecommendPowerFixList()
	return self.__recommendPowerFixList
end

---获取关卡推荐等级
---@public
function BattleLevelConfigManager:GetRecommendLevel()
	return self.__levelXls.recommendLevel or 1
end

---获取怪物气血影响值
---@public
function BattleLevelConfigManager:GetMonsHpFixParam()
	return self.__monsHPFixParam or 1
end

---@public
function BattleLevelConfigManager:AwakeLevelBehav()
	if not self.__levelInstanceXls then return end
	local _behavTreeName = self.__levelInstanceXls.levelBehavPath
	if not _behavTreeName then return end
	--_behavTreeName = "LevelBehav/LevelBehav_9000002"
	--_behavTreeName = "MonsterBehav/TestMonsterLocal"
	if CheckLogLevel(LogLevel.log) and LogTools.InitBattleLog then
		LogTools.LogByLevel(LogLevel.log, "BattleLevelConfigManager", "AwakeLevelBehav", "_behavTreeName", _behavTreeName)
	end
	local _testTree = LuaBehav_ConfigDataRequirer.GetConfig(_behavTreeName)
	if not _testTree then return end
	local _strList = LuaTool:Split(_behavTreeName,"/")
	local _index = self.battleRoom.behaviorManager:AddBehavTree(_strList[#_strList], _testTree, LuaBehav_Define_TreeBelongType.Level, nil)
	self.battleRoom.behaviorManager:AwakeBehavTree(_index, nil)
end

return BattleLevelConfigManager
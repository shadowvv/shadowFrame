---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/8/17 11:14

require "Lib/class"

---@class BattleObjCom_PlayMode : BattleObjectComponentBase
BattleObjCom_PlayMode = class(BattleObjectComponentBase, 'BattleObjCom_PlayMode');

BATTLE_OBJECT_PLAY_MODE_TYPE = {
    normal = 0,
    aim = 1,
    transform = 2,
}

BATTLE_OBJECT_PLAY_MODE_EXIT_TYPE = {
    skill_node = 1,
    key_press = 2,
    time = 3,
    other = 4,
}

function BattleObjCom_PlayMode:ctor()
    self:__ctor(BattleObjectComponentType.PlayMode)
    self.currentMode = 1;
    self.currentHoldTime = 0;
    self.closeMode = {};
    self.modeChange = {};--key为类型Id
    self.originalModeId = {};--key为类型Id
end

---@public
---@param _battleObject BattleObjectBase
function BattleObjCom_PlayMode:Init(_battleObject)
    self:__Init(_battleObject)
end

function BattleObjCom_PlayMode:ChangeModeId(_type,_id,_originalModeId)
    local temp = self.modeChange[_type];

    self.modeChange[_type] = _id;
    self.originalModeId[_type] = _originalModeId;

    if temp and temp == self.currentMode then
        local finalMode = _id;
        if _id == nil and self.originalModeId[_type] then
            finalMode = self.originalModeId[_type];
        end
        self:ChangeMode(finalMode,true);
    end
end

---@public
-- 驱动
function BattleObjCom_PlayMode:OnUpdate(_deltaTime)
    self.currentHoldTime = self.currentHoldTime + _deltaTime;

    ---@type PlayMode
    local playModeConfig = self.battleRoom.inputDataSource:GetDict("PlayMode",self.currentMode);
    if playModeConfig and playModeConfig.time and playModeConfig.time > 0 and self.currentMode ~= 1 then
        if self.currentHoldTime >= playModeConfig.time then
            self:ChangeMode(1);
        end
    end
end

---@public
---关闭模式
---@param _modeId number 模式Id
function BattleObjCom_PlayMode:ClosePlayMode(_modeId)
    self.closeMode[_modeId] = 1;
end

---@public
---打开模式
---@param _modeId number 模式Id
function BattleObjCom_PlayMode:OpenPlayMode(_modeId)
    self.closeMode[_modeId] = nil;
end

---@public
---切换模式
---@param _modeId number 模式Id
function BattleObjCom_PlayMode:ChangeMode(_modeId,_isChangeBack)
    if self.currentMode == _modeId then
        return;
    end
    if self:GetObject():CheckDead() then
        return;
    end
    if self.closeMode[_modeId] then
        return;
    end
    ---@type PlayMode
    local currentPlayModeConfig = self.battleRoom.inputDataSource:GetDict("PlayMode",self.currentMode);
    if not currentPlayModeConfig then
        return;
    end
    ---@type PlayerSwitchRule
    local modeSwitchRule = self.battleRoom.inputDataSource:GetDict("PlayerSwitchRule", self:GetObject():GetDataInstanceXls().playerSwitchRule);
    if not modeSwitchRule then
        return;
    end
    ---@type PlayMode
    local targetPlayModeConfig = self.battleRoom.inputDataSource:GetDict("PlayMode",_modeId);
    if not targetPlayModeConfig then
        return;
    end
    if self.modeChange[targetPlayModeConfig.modeType] then
        _modeId = self.modeChange[targetPlayModeConfig.modeType];
    end
    targetPlayModeConfig = self.battleRoom.inputDataSource:GetDict("PlayMode",_modeId);
    if not targetPlayModeConfig then
        return;
    end
    local currentPlayModeType = currentPlayModeConfig.modeType;
    local entry= {};
    if currentPlayModeType == BATTLE_OBJECT_PLAY_MODE_TYPE.normal then
        entry = modeSwitchRule.player1;
    elseif currentPlayModeType == BATTLE_OBJECT_PLAY_MODE_TYPE.aim then
        entry = modeSwitchRule.player2;
    elseif currentPlayModeType == BATTLE_OBJECT_PLAY_MODE_TYPE.transform then
        entry = modeSwitchRule.player3;
    end
    if not _isChangeBack then
        local canEnter = false;
        for i, v in pairs(entry) do
            if v == targetPlayModeConfig.modeType then
                canEnter = true;
            end
        end
        if not canEnter then
            return;
        end
    end
    if targetPlayModeConfig.modeType == BATTLE_OBJECT_PLAY_MODE_TYPE.normal then
        self:EnterNormal();
    elseif targetPlayModeConfig.modeType == BATTLE_OBJECT_PLAY_MODE_TYPE.aim then
        ---@type BattleObjCom_Weapon
        local weaponComp = self:GetObject():GetComponent(BattleObjectComponentType.Weapon);
        if weaponComp.overLoad then
            return;
        end
        self:EnterAim();
    elseif targetPlayModeConfig.modeType == BATTLE_OBJECT_PLAY_MODE_TYPE.transform then
        self:EnterTransform();
    end

    for i = 1, 3 do
        ---@type BattleObjCom_Skill
        local skillComp = self:GetObject():GetComponent(BattleObjectComponentType.Skill);
        skillComp:SetSkillChange(i,targetPlayModeConfig.skillChange[i],skillComp:GetOriginalSkillLevelByType(i),true);
    end
    if targetPlayModeConfig.stateParameter then
        self:GetObject():GetParentUnit():GetActionManager():OnStateParamIdChanged(targetPlayModeConfig.stateParameter);
    end

    self.currentMode = _modeId;
    self.currentHoldTime = 0;

    local aimModeInfo = {};
    aimModeInfo.aimMode = self.currentMode;
    aimModeInfo.holdTime = self.currentHoldTime;

    local battleUnitChangeData = {};
    battleUnitChangeData.netId = self:GetObject():GetParentUnit():GetNetId();
    battleUnitChangeData.objId = self:GetObject():GetObjectId();
    battleUnitChangeData.aimMode = aimModeInfo;
    self.battleRoom.outputDataSource:AddBattleUnitChangeData(battleUnitChangeData);
end

function BattleObjCom_PlayMode:GetCurrentModeType()
    ---@type PlayMode
    local currentPlayModeConfig = self.battleRoom.inputDataSource:GetDict("PlayMode",self.currentMode);
    if not currentPlayModeConfig then
        return 0;
    end
    return currentPlayModeConfig.modeType;
end

function BattleObjCom_PlayMode:EnterNormal()
    ---@type Leader
    local leader = self:GetObject():GetInstanceXls();
    if leader and leader.aminGlobalBattleParameter and leader.aminGlobalBattleParameter > 1 then
        ---@type GlobalBattleParameter
        local config = self.battleRoom.inputDataSource:GetDict("GlobalBattleParameter",1);
        if config then
            ---@type BattleObjCom_Property
            local _propCom = self:GetObject():GetComponent(BattleObjectComponentType.Property)
            _propCom:SetRotateSensitivityX(config.cameraSensitivity[1]);
            _propCom:SetRotateSensitivityY(config.cameraSensitivity[2]);
        end
    end
end

function BattleObjCom_PlayMode:EnterAim()
    ---@type Leader
    local leader = self:GetObject():GetInstanceXls();
    if leader and leader.aminGlobalBattleParameter and leader.aminGlobalBattleParameter > 1 then
        ---@type GlobalBattleParameter
        local config = self.battleRoom.inputDataSource:GetDict("GlobalBattleParameter",leader.aminGlobalBattleParameter);
        if config then
            ---@type BattleObjCom_Property
            local _propCom = self:GetObject():GetComponent(BattleObjectComponentType.Property)
            _propCom:SetRotateSensitivityX(config.cameraSensitivity[1]);
            _propCom:SetRotateSensitivityY(config.cameraSensitivity[2]);
        end
    end
end

function BattleObjCom_PlayMode:EnterTransform()
    ---@type Leader
    local leader = self:GetObject():GetInstanceXls();
    if leader and leader.aminGlobalBattleParameter and leader.aminGlobalBattleParameter > 1 then
        ---@type GlobalBattleParameter
        local config = self.battleRoom.inputDataSource:GetDict("GlobalBattleParameter",1);
        if config then
            ---@type BattleObjCom_Property
            local _propCom = self:GetObject():GetComponent(BattleObjectComponentType.Property)
            _propCom:SetRotateSensitivityX(config.cameraSensitivity[1]);
            _propCom:SetRotateSensitivityY(config.cameraSensitivity[2]);
        end
    end
end

---@public
---重置维持时间
function BattleObjCom_PlayMode:ResetHoldTime()
    self.currentHoldTime = 0;

    local aimModeInfo = {};
    aimModeInfo.holdTime = self.currentHoldTime;

    local battleUnitChangeData = {};
    battleUnitChangeData.netId = self:GetObject():GetParentUnit():GetNetId();
    battleUnitChangeData.objId = self:GetObject():GetObjectId();
    battleUnitChangeData.aimMode = aimModeInfo;
    self.battleRoom.outputDataSource:AddBattleUnitChangeData(battleUnitChangeData);
end

---@public
---boss出场重置
function BattleObjCom_PlayMode:OnBossAnimation()
    ---@type PlayMode
    local currentPlayModeConfig = self.battleRoom.inputDataSource:GetDict("PlayMode",self.currentMode);
    if not currentPlayModeConfig then
        return;
    end
    if currentPlayModeConfig.bossResetId and currentPlayModeConfig.bossResetId > 0 then
        self:ChangeMode(currentPlayModeConfig.bossResetId);
    end
end

---服务器逻辑核生成用于发送给前端逻辑核的全量信息
---@public
function BattleObjCom_PlayMode:GetCreateSyncMessage_S2C()
    local playModeInfo = {};
    playModeInfo.aimMode = self.currentMode;
    playModeInfo.holdTime = self.currentHoldTime;
    return playModeInfo;
end

---前端逻辑核用服务器发来的全量信息刷新自身数据
---@public
function BattleObjCom_PlayMode:OnReceiveCreateSyncMessage_S2C(_message)

end

---前端逻辑核生成用于发送给表现的层全量信息
---@public
function BattleObjCom_PlayMode:GetCreateSyncMessage_L2V(_message)
    return _message.playModeInfo;
end

return BattleObjCom_PlayMode;
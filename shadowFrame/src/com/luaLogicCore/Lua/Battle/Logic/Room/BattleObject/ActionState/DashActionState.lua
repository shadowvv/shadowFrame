---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/2/9 18:38

require "Lib/class"
require "Battle/Logic/Room/BattleObject/ActionState/ActionState"

---@class DashActionState : ActionState
---@field battleRoom BattleRoom 战斗
---@field stateParam StateParameter 状态参数配置
---@field unitType number 单位类型
DashActionState = class(ActionState, 'DashActionState');

---@param _battleId number 战斗id
---@param _stateParamId number 状态参数配置Id
---@param _unitType number 单位类型
function DashActionState:ctor(_battleId,_stateParamId,_unitType)
    self.battleRoom = GetBattleRoom(_battleId)
    self.stateParam = self.battleRoom.inputDataSource:GetDict("StateParameter", _stateParamId);
    self.unitType = _unitType;
    self.moveParam = nil;
    self.cameraParam = nil;
    self.hitWall = false;
    self.dashMoveParam = nil;
    self.dashCameraParam = nil;
    self.canEnterSprint = false;
    self.dashDir = nil;
    self.runTime = 0;
    self.switchRule = self.battleRoom.inputDataSource:GetDict("StateSwitchRule",self:GetId());

    self.hitPosition = nil;
    self.hitMoveDir = nil;
end


---@param _moveParam Vector3
function DashActionState:Init(_moveParam,_cameraParam,_hitWall,_hitPosition,_hitMoveDir)
    self.moveParam = _moveParam;
    self.cameraParam = _cameraParam;
    --闪避中间无法切换方向，所以临时存储方向
    self.dashMoveParam = _moveParam;
    self.dashCameraParam = _cameraParam;
    --默认闪避可以进入冲刺
    self.canEnterSprint = true;
    if _hitWall then
        self.hitWall = _hitWall;
    end

    self.hitPosition = _hitPosition;
    self.hitMoveDir = _hitMoveDir;
end

function DashActionState:EnterAction(_actionStateManager)
    local _unit = _actionStateManager:GetUnit()
    local sprintCur = _unit:GetPropertyByName(BattlePropertyEnum.Sprint_En_Cur)
    local dodgeCast = self.stateParam.dodgeCast * (1 + _actionStateManager:GetUnit():GetPropertyByName(BattlePropertyEnum.Dash_En_Consume));
    ----LogTools.LogByLevel(LogLevel.log,"DashActionState", "sprintCur", sprintCur)
    if sprintCur <  dodgeCast then
        return false
    end
    ---@type BattleUnitCom_UnitProp
    local _unitPropCom = _unit:GetComponent(BattleUnitComponentType.UnitProp)
    if not _unitPropCom then
        return false
    end
    _unitPropCom:DecreasePropByName(BattlePropertyEnum.Sprint_En_Cur, dodgeCast)

    local _,dir
    if self.battleRoom.battleLevelManager.levelConfigManager:GetLevelInstanceXls().controlMode == 0 then
        _,dir = MOVE_UTILS.EnterDash(self.dashMoveParam,_actionStateManager:GetRotation(),self.stateParam.dodgeStartVelocity);
    else
        _,dir = MOVE_UTILS.EnterDash_FreeFly(self.dashMoveParam,_actionStateManager:GetRotation(),self.stateParam.dodgeStartVelocity);
    end
    self.dashDir = dir;
    _actionStateManager.canEnterDash = false;
    return true,dir;
end

-- 执行行为
---@param _actionStateManager ActionStateManage 行为管理器
---@param _dt number 更新时间
---@param _netId number 单位id
---@param _objId number 单位对应实体id
function DashActionState:DoAction(_actionStateManager, _dt, _netId,_objId)

    local currentV = _actionStateManager:GetVelocity();
    local currentDirection = _actionStateManager:GetRotation();
    local currentPosition = _actionStateManager:GetPosition();

    -- 启动闪避
    if self.runTime == 0 then
        if self.battleRoom.battleLevelManager.levelConfigManager:GetLevelInstanceXls().controlMode == 0 then
            currentV = MOVE_UTILS.EnterDash(self.dashMoveParam,currentDirection,self.stateParam.dodgeStartVelocity);
        else
            currentV = MOVE_UTILS.EnterDash_FreeFly(self.dashMoveParam,currentDirection,self.stateParam.dodgeStartVelocity);
        end
    end

    if self.runTime < self.stateParam.dodgeSpeedUpTime then
        -- 加速
        currentV = currentV.normalized:Mul(currentV.magnitude + self.stateParam.dodgeAccelerate * _dt)
    else
        if self.runTime < self.stateParam.dodgeSpeedUpTime + self.stateParam.dodgeSpeedDownTime then
            -- 减速
            currentV = currentV.normalized:Mul(currentV.magnitude + -self.stateParam.dodgeSlowAccelerate * _dt)
        end
    end

    if self.hitMoveDir then
        Vector3.Project(currentV, self.hitMoveDir, currentV)
    end

    if self.runTime > self.stateParam.minDodgeTime then
        self.switchRule = self.battleRoom.inputDataSource:GetDict("MinStateSwitchRule",self:GetId());
    end

    local positionChanged = Vector3.zero_local();
    positionChanged = currentV * _dt;
    currentPosition = currentPosition + positionChanged;

    if self.runTime > self.stateParam.dodgeSpeedUpTime + self.stateParam.dodgeSpeedDownTime then
        _actionStateManager:Exit(self);
        if self.moveParam ~= nil and self.moveParam ~= Vector3.zero_local() and self.canEnterSprint then
            _actionStateManager:GetUnit():GetActionManager():EnterSprint(self.moveParam,self.hitWall,self.hitPosition,self.hitMoveDir);
        else
            _actionStateManager:Move(self.moveParam,self.cameraParam,false,self.hitWall,true,self.hitPosition,self.hitMoveDir);
        end
    end

    self.runTime = self.runTime + _dt;

    --检测碰撞
    ---@type BattleObjectBase
    local currentObject = _actionStateManager:GetUnit():GetCurrentHeroObject();
    ---@type BattleObjCom_Collider
    local colliderCom = currentObject:GetComponent(BattleObjectComponentType.Collider);
    if colliderCom then
        local collision = self.battleRoom.battleField:ObjectMove(colliderCom.objectCollider,currentPosition,_actionStateManager.rotation);
        if collision then
            _actionStateManager:Exit(self);
            _actionStateManager:Idle();
            return;
        end
    end
    _actionStateManager:SetVelocity(currentV);
    if not self.hitWall then
        _actionStateManager:SetPosition(currentPosition);
    end

    local battleUnitMoveOutput = {};
    battleUnitMoveOutput.v = _actionStateManager:GetVelocity();
    battleUnitMoveOutput.position = _actionStateManager:GetPosition()
    battleUnitMoveOutput.rotation = _actionStateManager:GetRotation()
    battleUnitMoveOutput.accelerate = Vector3.New(self.stateParam.dodgeAccelerate,0,0);
    battleUnitMoveOutput.moveParam = _actionStateManager.moveParam;
    battleUnitMoveOutput.cameraParam = _actionStateManager.cameraParam;
    battleUnitMoveOutput.airFriction = self.stateParam.airFriction;
    battleUnitMoveOutput.breakAcc = self.stateParam.breakAccelerate;
    battleUnitMoveOutput.maxVelocity = 100;
    battleUnitMoveOutput.forceAcc = _actionStateManager:GetForceAcc();
    battleUnitMoveOutput.type = self:GetId();
    battleUnitMoveOutput.dashDir = self.dashDir;

    local battleUnitMoveData = {};
    battleUnitMoveData.netId = _netId;
    battleUnitMoveData.objId = _objId;
    battleUnitMoveData.moveInfo = battleUnitMoveOutput;

    self.battleRoom.outputDataSource:AddBattleUnitMoveData(battleUnitMoveData);
end

-- 退出行为
---@param _actionStateManager ActionStateManage 行为管理器
---@param _isBreak boolean 是否为打断退出
---@param _isActive boolean 是否为主动打断
function DashActionState:ExitAction(_actionStateManager,_isBreak,_isActive)
    local battleUnitMoveOutput = {};
    battleUnitMoveOutput.v = _actionStateManager:GetVelocity();
    battleUnitMoveOutput.position = _actionStateManager:GetPosition();
    battleUnitMoveOutput.rotation = _actionStateManager:GetRotation();
    battleUnitMoveOutput.accelerate = Vector3.zero_local();
    battleUnitMoveOutput.moveParam = _actionStateManager.moveParam;
    battleUnitMoveOutput.cameraParam = _actionStateManager.cameraParam;
    battleUnitMoveOutput.type = 1;
    battleUnitMoveOutput.dashDir = self.dashDir;

    local battleUnitMoveData = {};
    battleUnitMoveData.netId = _actionStateManager:GetUnit():GetNetId();
    battleUnitMoveData.objId = _actionStateManager:GetUnit():GetCurrentHeroObjectId();
    battleUnitMoveData.moveInfo = battleUnitMoveOutput;

    self.battleRoom.outputDataSource:AddBattleUnitMoveData(battleUnitMoveData);
end

-- 是否为主动状态
---@return boolean 是否为主动状态
function DashActionState:IsActive()
    return true;
end

function DashActionState:GetId()
    return 3;
end

---获得状态冲突表
---@return StateSwitchRule
function DashActionState:GetSwitchRule()
    return self.switchRule;
end

return DashActionState;
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/4/15 14:57

require "Lib/class"
require "Battle/Logic/Room/BattleObject/ActionState/ActionState"

---@class TurnActionState : ActionState
---@field battleRoom BattleRoom 战斗
---@field stateParam StateParameter 状态参数配置
---@field unitType number 单位类型
TurnActionState = class(ActionState, 'TurnActionState');

---@param _battleId number 战斗id
---@param _stateParamId number 状态参数配置id
---@param _unitType number 单位类型
function TurnActionState:ctor(_battleId, _stateParamId, _unitType)
    self.battleRoom = GetBattleRoom(_battleId)
    self.stateParam = self.battleRoom.inputDataSource:GetDict("StateParameter", _stateParamId);
    self.unitType = _unitType;
    self.maxAngleCache = Vector3.zero_local()
end

---@param _cameraParam Vector3 朝向参数
---@param _targetQuan Quaternion 移动目标朝向
function TurnActionState:Init(_cameraParam, _hAngle, _vAngle)
    self.cameraParam = _cameraParam
    self.targetRotation = _targetQuan
    self.hAngleLimit = _hAngle
    self.vAngleLimit = _vAngle
end

-- 切换行为,判断行为的参数正确性
---@param _actionStateManager ActionStateManage 行为管理器
---@return boolean 是否可进入行为
function TurnActionState:EnterAction(_actionStateManager)
    return true;
end

---根据当前单位类型获取XY灵敏度
---@private
---@param _actionStateManager ActionStateManage
---@return number _sensitivityX _sensitivityY 
function TurnActionState:__GetSensitivityValue(_actionStateManager, _dt)
    
    ---@type BattleObjCom_Property
    local _propCom = _actionStateManager:GetUnit():GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Property)
    local _sensitivityX = _propCom:GetPropertyByName(BattlePropertyEnum.Sensitivity_Rotate_X)
    local _sensitivityY = _propCom:GetPropertyByName(BattlePropertyEnum.Sensitivity_Rotate_Y)
    if self.unitType == BattleUnitType.Monster or self.unitType == BattleUnitType.SummonedMons then
        return _sensitivityX * _dt, _sensitivityY * _dt
    else
        return _sensitivityX, _sensitivityY
    end
end

-- 执行行为
---@param _actionStateManager ActionStateManage 行为管理器
---@param _dt number 更新时间
---@param _netId number 单位id
---@param _objId number 单位对应实体id
function TurnActionState:DoAction(_actionStateManager, _dt, _netId, _objId)
    local _qCalcFinalRotation = self.battleRoom.quaternionPool:Pop()
    Quaternion.Copy(_qCalcFinalRotation, _actionStateManager:GetRotation())

    ---俯仰角限制
    local _v3AngleLimit = self.battleRoom.vector3Pool:Pop()
    Vector3.Set(_v3AngleLimit, self.stateParam.yLimitAngle[1],self.stateParam.yLimitAngle[2], 0)
    local _sensitivityX, _sensitivityY = self:__GetSensitivityValue(_actionStateManager, _dt)

    if self.unitType ~= BattleUnitType.Player then
        MOVE_UTILS.AiRotate(_actionStateManager, _qCalcFinalRotation,
                _actionStateManager:GetEuler(),
                self.cameraParam,
                _sensitivityX,
                _sensitivityY,
                self.hAngleLimit,
                self.vAngleLimit)
    else
        MOVE_UTILS.Rotate(self.battleRoom,
                _qCalcFinalRotation,
                _actionStateManager:GetRotation(),
                self.cameraParam,
                _sensitivityX,
                _sensitivityY,
                _v3AngleLimit,
                self.hAngleLimit,
                self.vAngleLimit,
                _dt)
    end

    if _qCalcFinalRotation == _actionStateManager:GetRotation() then
        _actionStateManager:Exit(self);
        _actionStateManager:Idle();
        self.battleRoom.battleLogicEventService:OnTriggerUnitReachPoint(_netId)
        self.battleRoom.quaternionPool:Push(_qCalcFinalRotation)
        return
    end
    
    _actionStateManager:SetRotation(_qCalcFinalRotation)
    self.battleRoom.quaternionPool:Push(_qCalcFinalRotation)


    local _fMaxVelocity = self.stateParam.maxVelocity * (1 + _actionStateManager:GetUnit():GetPropertyByName(BattlePropertyEnum.Speed_Add_Move));
    local moveState = _actionStateManager:GetCurrentMoveState();
    if moveState and moveState:GetId() == SprintActionState:GetId() then
        _fMaxVelocity = self.stateParam.dashMaxVelocity * (1 + _actionStateManager:GetUnit():GetPropertyByName(BattlePropertyEnum.Sprint_Add));
    end
    local battleUnitMoveOutput = {};
    battleUnitMoveOutput.v = _actionStateManager:GetVelocity();
    battleUnitMoveOutput.position = _actionStateManager:GetPosition();
    battleUnitMoveOutput.rotation = _actionStateManager:GetRotation();
    battleUnitMoveOutput.accelerate = Vector3.zero_global();
    battleUnitMoveOutput.moveParam = _actionStateManager.moveParam;
    battleUnitMoveOutput.cameraParam = _actionStateManager.cameraParam;
    battleUnitMoveOutput.maxVelocity = _fMaxVelocity;
    battleUnitMoveOutput.rotateSensitivityX = _sensitivityX
    battleUnitMoveOutput.rotateSensitivityY = _sensitivityY

    local battleUnitMoveData = {};
    battleUnitMoveData.netId = _netId;
    battleUnitMoveData.objId = _objId;
    battleUnitMoveData.moveInfo = battleUnitMoveOutput;

    self.battleRoom.outputDataSource:AddBattleUnitMoveData(battleUnitMoveData)
end

-- 退出行为
---@param _actionStateManager ActionStateManage 行为管理器
---@param _isBreak boolean 是否为打断退出
---@param _isActive boolean 是否为主动打断
function TurnActionState:ExitAction(_actionStateManager,_isBreak,_isActive)
    local _fMaxVelocity = self.stateParam.maxVelocity * (1 + _actionStateManager:GetUnit():GetPropertyByName(BattlePropertyEnum.Speed_Add_Move));
    local moveState = _actionStateManager:GetCurrentMoveState();
    if moveState and moveState:GetId() == SprintActionState:GetId() then
        _fMaxVelocity = self.stateParam.dashMaxVelocity * (1 + _actionStateManager:GetUnit():GetPropertyByName(BattlePropertyEnum.Sprint_Add));
    end
    local battleUnitMoveOutput = {};
    battleUnitMoveOutput.v = _actionStateManager:GetVelocity();
    battleUnitMoveOutput.position = _actionStateManager:GetPosition();
    battleUnitMoveOutput.rotation = _actionStateManager:GetRotation();
    battleUnitMoveOutput.accelerate = Vector3.zero_global();
    battleUnitMoveOutput.moveParam = _actionStateManager.moveParam;
    battleUnitMoveOutput.cameraParam = _actionStateManager.cameraParam;
    battleUnitMoveOutput.maxVelocity = _fMaxVelocity;
    battleUnitMoveOutput.type = 1;

    local battleUnitMoveData = {};
    battleUnitMoveData.netId = _actionStateManager:GetUnit():GetNetId();
    battleUnitMoveData.objId = _actionStateManager:GetUnit():GetCurrentHeroObjectId();
    battleUnitMoveData.moveInfo = battleUnitMoveOutput;

    self.battleRoom.outputDataSource:AddBattleUnitMoveData(battleUnitMoveData)
end

-- 是否为主动状态
---@return boolean 是否为主动状态
function TurnActionState:IsActive()
    return true;
end

-- 行为状态Id
---@return number 行为状态Id 参照stateSwitchRule表
function TurnActionState:GetId()
    return 16;
end

---获得状态冲突表
---@return StateSwitchRule
function TurnActionState:GetSwitchRule()
    return self.battleRoom.inputDataSource:GetDict("StateSwitchRule",self:GetId());
end

return TurnActionState;
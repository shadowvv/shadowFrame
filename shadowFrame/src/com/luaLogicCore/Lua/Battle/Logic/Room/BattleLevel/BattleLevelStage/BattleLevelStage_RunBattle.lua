---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/01/13 11:01
--- Describe: 战斗过程阶段
---

---@class BattleLevelStage_RunBattle : BattleLevelStageBase
BattleLevelStage_RunBattle = class(BattleLevelStageBase, "BattleLevelStage_RunBattle")

function BattleLevelStage_RunBattle:OnEnter()
    self:__OnEnter()
    self.battleRoom.outputDataSource:BattleShowRunUi_L2S()

    -- 开始处理单位消息
    self.battleRoom:SetUnitRunLogic()

    if self.battleStageManager.driveStage then
        self._battleOver = nil
        self._battleResult = nil

        local _levelInstanceXls = self.battleRoom.battleLevelManager.levelConfigManager:GetLevelInstanceXls()
        local _timingType = GetTimingTypeById(_levelInstanceXls.timingType)
        if _timingType and _timingType.limitTime then
            self.limit = true
            self.limitTime = _levelInstanceXls.timeLimit
            if CheckLogLevel(LogLevel.log) then
                LogTools.LogByLevel(LogLevel.log, "BattleLevelStage_RunBattle", "time limit(s)", self.limitTime)
            end
        end

        -- 战斗开始事件
        self.battleRoom.battleLogicEventService:OnTriggerBattleRunStartEvent()
    end
end

---修改时间
---@public
---@param _changeTimeSec number 修改时间
---@return number 限制时间
function BattleLevelStage_RunBattle:ChangeTimeLimit(_changeTimeSec)
    local _oldLimitTime = self.limitTime
    self.limitTime = self.limitTime + _changeTimeSec
    -- 下限边界
    self.limitTime = Mathf.Max(self.limitTime, 0)
    local _changeTime = self.limitTime - _oldLimitTime
    if _changeTime ~= 0 then
        local msg = {}
        msg.changeTime = _changeTime
        self.battleRoom.outputDataSource:LevelChangeTimeLimit_S2C(msg)
    end
    return self.limitTime
end

function BattleLevelStage_RunBattle:OnUpdate(_deltaTime, _frameId)
    if self._battleOver then
        -- 停止战斗，停止玩家和单位逻辑，停止广播
        self.runPlayerMessage = false
        self.runUnitLogic = false
        self.fireEvent = false
        self.broadCastOutputData = false
    end

    -- 驱动
    self:__OnUpdate(_deltaTime, _frameId)

    if not self._battleOver and self.battleStageManager.driveStage then
        -- 3.限时检测
        if not self.battleRoom.battleLevelManager.runBattleStop and self.limit then
            local runTime = self:GetRunTimeSecond()
            if runTime >= self.limitTime then
                if CheckLogLevel(LogLevel.log) then
                    LogTools.LogByLevel(LogLevel.log, "BattleLevelStage_RunBattle", "TimeCountDown", "Over", "runTime", runTime)
                end

                -- 倒计时结束事件
                self.battleRoom.battleLogicEventService:OnTriggerCountDownTimeOutEvent()
            end
        end

        -- 4.检测战斗结果
        local battleStop, battleOver = self.battleRoom.battleLevelManager.overConditionManager:CheckBattleOver()
        -- 停止战斗
        self.battleRoom.battleLevelManager.runBattleStop = battleStop
        if battleOver then
            -- 广播进入结算阶段
            self.battleRoom.outputDataSource:BattleLevelGoToStage(BattleLevel_Define_StageEnum.ShowBattleEnd)
            -- 战斗结束
            self._battleOver = true
        end
    end
end

function BattleLevelStage_RunBattle:OnExit()
    self:__OnExit()

    --local _timeSec = (TimeUtils.battleNow(self.battleId) - self.battleRoom.battleEnterTime)/1000
    --LuaProfiler.PrintProfiler(_timeSec)

    if self.battleStageManager.driveStage then
        local overCondition = self.battleRoom.battleLevelManager:GetConditionBattleOverCondition()
        local overResult = self.battleRoom.battleLevelManager:GetConditionBattleOverResult()
        if not self.battleRoom:IsBattleOver() then
            if overResult == BattleResultEnum.NO_RESULT then
                -- 结束时没有战斗结果，赋予一个结果
                overResult = BattleResultEnum.FAIL
                if self.stageTimeOut then
                    -- 阶段超时，已倒计时结束为失败条件
                    overCondition = BATTLE_CONST.BATTLE_STAGE_TIME_OUT_CONDITION_ID
                end
            end
            self.battleRoom.outputDataSource:BattleOver(overResult, overCondition)
        end
    end

    if LogTools.CollectHurt then
        self.battleRoom.hurtCollectorUtil:PrintHurtMessage()
    end
end

return BattleLevelStage_RunBattle
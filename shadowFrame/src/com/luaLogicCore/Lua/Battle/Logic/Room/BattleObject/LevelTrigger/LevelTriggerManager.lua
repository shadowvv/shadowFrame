---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/04/02 11:33
--- Describe: 关卡触发器管理
---

require "Battle/Logic/Room/BattleObject/LevelTrigger/LevelTrigger"

---@class LevelTriggerManager : table
LevelTriggerManager = class(nil, "LevelTriggerManager")
function LevelTriggerManager:ctor(_battleId)
	self.battleId = _battleId
end

---@public
---@param _battleRoom BattleRoom
function LevelTriggerManager:Init(_battleRoom)
	---@private
	self.__battleRoom = _battleRoom
	---levelUnitId - trigger
	---@private
	---@type LevelTrigger[]
	self.__triggerDic = {}
	self.__delayCreateList = {}
end

-- 
function LevelTriggerManager:OnUpdate(_deltaTime)
	local _list = self.__delayCreateList
	local _findList = {}
	for i = #_list, 1, -1 do
		local _tab = _list[i]
		_tab.timeAcc = _tab.timeAcc + _deltaTime
		--LogTools.LogByLevel(LogLevel.log, "LevelTriggerManager", "OnUpdate", "i", i, "_tab.timeAcc", _tab.timeAcc, "_tab.timeTotal", _tab.timeTotal)
		if _tab.timeAcc > _tab.timeTotal then
			table.insert(_findList, _tab.info)
			table.remove(_list, i)
		end
	end

	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "__CheckDelayCreateUnits", "#_findList", #_findList)
	if #_findList > 0 then
		self:__OnReadyCreateTrigger(_findList, true)
	end
end

---创建触发器
---@public
---@param _generateLevelTriggerInfoList table msg.GenerateLevelTriggerInfo[]
function LevelTriggerManager:CreateTrigger(_generateLevelTriggerInfoList)
	--LogTools.LogByLevel(LogLevel.log, "LevelTriggerManager", "CreateTrigger", #_generateLevelTriggerInfoList)
	local _list = self.__delayCreateList
	for i = 1, #_generateLevelTriggerInfoList do
		local _generateTriggerInfo = _generateLevelTriggerInfoList[i]
		local _tab = {}
		_tab.timeAcc = 0
		_tab.timeTotal = _generateTriggerInfo.delayTime
		--LogTools.LogByLevel(LogLevel.log, "LevelTriggerManager", "i", i, "_generateTriggerInfo.delayTime", _generateTriggerInfo.delayTime)
		_tab.info = _generateTriggerInfo
		table.insert(_list, _tab)
	end
	
	--LogTools.LogByLevel(LogLevel.log, "LevelTriggerManager", "CreateTrigger end")
end

function LevelTriggerManager:__OnReadyCreateTrigger(_generateLevelTriggerInfoList, _sendMsg)
	--LogTools.LogByLevel(LogLevel.log, "LevelTriggerManager", "CreateTrigger", #_generateLevelTriggerInfoList)
	for i = 1, #_generateLevelTriggerInfoList do
		local _generateTriggerInfo = _generateLevelTriggerInfoList[i]
		self:__CreateTrigger(_generateTriggerInfo)
		
		local _LevelTriggerInfo = {}
		_LevelTriggerInfo.removeId = -1
		_LevelTriggerInfo.createInfo = _generateTriggerInfo
		local _BattleFieldData = {}
		_BattleFieldData.LevelTriggerInfo = _LevelTriggerInfo
		self.__battleRoom.outputDataSource:AddBattleFieldData(_BattleFieldData)
	end
	
	--LogTools.LogByLevel(LogLevel.log, "LevelTriggerManager", "CreateTrigger end")
end

---@private
---@return LevelTrigger
function LevelTriggerManager:__CreateTrigger(_generateTriggerInfo)
	local _id = _generateTriggerInfo.id
	---@type LevelTrigger
	local _trigger = LevelTrigger.New()
	_trigger:Init(self.battleId, _generateTriggerInfo)
	self.__triggerDic[_id] = _trigger
	return _trigger
end

---销毁触发器
function LevelTriggerManager:RemoveTrigger(_id)
	--LogTools.LogByLevel(LogLevel.log, "LevelTriggerManager", "RemoveTrigger", _id)
	local _dic = self.__triggerDic
	local _trigger = _dic[_id]
	if not _trigger then return end
	
	_trigger:Clear()
	_dic[_id] = nil
	
	local _LevelTriggerInfo = {}
	_LevelTriggerInfo.removeId = _id
	_LevelTriggerInfo.createInfo = nil
	
	local _BattleFieldData = {}
	_BattleFieldData.LevelTriggerInfo = _LevelTriggerInfo
	self.__battleRoom.outputDataSource:AddBattleFieldData(_BattleFieldData)
	--LogTools.LogByLevel(LogLevel.log, "LevelTriggerManager", "RemoveTrigger end")
end

---获取触发器
---@return LevelTrigger
function LevelTriggerManager:GetTrigger(_id)
	return self.__triggerDic[_id]
end

---获取所有触发器
---@public
---@return LevelTrigger[]
function LevelTriggerManager:GetAllTrigger()
	return self.__triggerDic
end

---单位进入触发器
function LevelTriggerManager:OnUnitEnter(_triggerId, _battleUnitNetId)
	local _trigger = self.__triggerDic[_triggerId]
	if not _trigger then return end
	_trigger:OnUnitEnter(_battleUnitNetId)
end

---单位离开触发器
function LevelTriggerManager:OnUnitLeave(_triggerId, _battleUnitNetId)
	local _trigger = self.__triggerDic[_triggerId]
	if not _trigger then return end
	_trigger:OnUnitLeave(_battleUnitNetId)
end

---@public
---@param _param LuaBehav_LevelTriggerCheckParam
function LevelTriggerManager:Check(_param)
	--LogTools.LogByLevel(LogLevel.log, "LevelTriggerManager", "Check", "_param.selectUnitType", LogTools.GetEnumTableDesc(LuaBehav_Define_TriggerSelectUnitType, _param.selectUnitType), "_param.targetIdList", dumpTableEx(_param.targetIdList), "_param.needKeyTag", _param.needKeyTag)
	local _triggerId = _param.triggerId
	local _checkInner = _param.checkInner

	if #_param.targetIdList == 0 or _param.selectUnitType == LuaBehav_Define_TriggerSelectUnitType.All then
		--ALL的情况只能是任意，否则ID没有意义
		--id列表为空时默认任意
		if _checkInner then --任意单位在触发器中
			return self:CheckAny(_triggerId, _param.selectUnitType, _param.needKeyTag)
		else --任意单位不在触发器中
			return self:CheckAnyOut(_triggerId, _param.selectUnitType, _param.needKeyTag)
		end
	else
		local _checkFunc = nil
		if _param.selectUnitType == LuaBehav_Define_TriggerSelectUnitType.PlayerUnit then
			_checkFunc = LevelTriggerManager.CheckPlayerUnitInTrigger
		elseif _param.selectUnitType == LuaBehav_Define_TriggerSelectUnitType.LevelUnit then
			_checkFunc = LevelTriggerManager.CheckLevelUnitInTrigger
		end
		if not _checkFunc then return false end

		if _checkInner then --所有都在内部
			for _, _id in pairs(_param.targetIdList) do
				if not _checkFunc(self, _triggerId, _id, _param.needKeyTag) then return false end
			end
		else --所有都在外部
			for _, _id in pairs(_param.targetIdList) do
				if _checkFunc(self, _triggerId, _id, _param.needKeyTag) then return false end
			end
		end
		
		return true
	end
end

---检查任意单位在触发器中
function LevelTriggerManager:CheckAny(_triggerId, _selectUnitType, _needKeyTag)
	local _trigger = self.__triggerDic[_triggerId]
	if not _trigger then return false end
	return _trigger:CheckAny(_selectUnitType, _needKeyTag)
end

---检查任意单位不在触发器中
function LevelTriggerManager:CheckAnyOut(_triggerId, _selectUnitType)
	local _trigger = self.__triggerDic[_triggerId]
	if not _trigger then return false end
	return _trigger:CheckAnyOut(_selectUnitType, _needKeyTag)
end

---检查关卡单位在触发器中
function LevelTriggerManager:CheckLevelUnitInTrigger(_triggerId, _levelUnitId, _needKeyTag)
	local _trigger = self.__triggerDic[_triggerId]
	if not _trigger then return false end
	return _trigger:CheckLevelUnitIn(_levelUnitId, _needKeyTag)
end

-----检查关卡单位组在触发器中
--function LevelTriggerManager:CheckLevelUnitGroupInTrigger(_triggerId, _levelUnitGroupId, _needAll)
--	local _trigger = self.__triggerDic[_triggerId]
--	if not _trigger then return false end
--	return _trigger:CheckLevelUnitGroupIn(_levelUnitGroupId, _needAll)
--end

---检查玩家单位在触发器中
---按照策划开会时的说法，这里只需要考虑第一个玩家，不会用在多人中
function LevelTriggerManager:CheckPlayerUnitInTrigger(_triggerId, _pos, _needKeyTag)
	local _trigger = self.__triggerDic[_triggerId]
	if not _trigger then return false end
	local _playerList = self.__battleRoom.battleUnitManager.GetOriginalPlayerInfoManager():GetAllPlayer()
	local _playerData = _playerList[1]
	local _netId = _playerData:GetNetId()
	return _trigger:CheckPlayerUnitIn(_netId, _pos)
end

-- 
function LevelTriggerManager:Clear()
	for i, v in pairs(self.__triggerDic) do
		v:Clear()
	end
	self.__triggerDic = nil
	self.__battleRoom = nil
	self.__delayCreateList = nil
end

------------------------------------------------------------------------------------------------------------------------
---服务器逻辑核生成用于发送给前端逻辑核的全量信息
---@public
---@return table  msg.LevelTriggerCreateSyncInfo_S2C[]
function LevelTriggerManager:GetCreateSyncMessage_S2C()
    return self:__GetCreateSyncMessage_S2C()
end
---@protected
function LevelTriggerManager:__GetCreateSyncMessage_S2C()
	local _levelTriggerInfos = {}

	for _, _levelTrigger in pairs(self.__triggerDic) do
		table.insert(_levelTriggerInfos, _levelTrigger:GetCreateSyncMessage_S2C())
	end
	
	return _levelTriggerInfos
end

---前端逻辑核用服务器发来的全量信息刷新自身数据
---@public
---@param _levelTriggerInfos table  msg.LevelTriggerCreateSyncInfo_S2C[]
function LevelTriggerManager:OnReceiveCreateSyncMessage_S2C(_levelTriggerInfos)
	for _key, _levelTrigger in pairs(self.__triggerDic) do
		_levelTrigger:Clear()
		self.__triggerDic[_key] = nil
	end
	
	---@type LevelTrigger
	local _levelTrigger
	for _, _LevelTriggerCreateSyncInfo_S2C in pairs(_levelTriggerInfos) do
		_levelTrigger = self:__OnReadyCreateTrigger(_LevelTriggerCreateSyncInfo_S2C.generateInfo)
		_levelTrigger:OnReceiveCreateSyncMessage_S2C(_LevelTriggerCreateSyncInfo_S2C)
	end
end

---前端逻辑核生成用于发送给表现的层全量信息
---@public
---@param _LevelTriggerCreateSyncInfo_S2CList table msg.LevelTriggerCreateSyncInfo_S2C[]
---@return table msg._LevelTriggerCreateSyncInfo_L2V[]
function LevelTriggerManager:GetCreateSyncMessage_L2V(_LevelTriggerCreateSyncInfo_S2CList)
    local _levelTriggerInfos = {}

	for _, _levelTrigger in pairs(self.__triggerDic) do
		table.insert(_levelTriggerInfos, _levelTrigger:GetCreateSyncMessage_L2V())
	end
	
	return _levelTriggerInfos
end

return LevelTriggerManager
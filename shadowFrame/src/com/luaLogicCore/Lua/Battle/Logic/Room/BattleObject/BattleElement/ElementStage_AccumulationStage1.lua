---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hejincheng.
--- DateTime: 2022/3/2 19:06

require "Lib/class"

---@class ElementStage_AccumulationStage1 : ElementStageBase
ElementStage_AccumulationStage1 = class(ElementStageBase, 'ElementStage_AccumulationStage1');

function ElementStage_AccumulationStage1:Init(_index, _stageManager)
    self:__Init(_index, _stageManager)
    local _elementStackEffect = self.elementStackEffect
    self.timeOut = _elementStackEffect.reduceSpeed[BATTLE_ELEMENT_CONST.ELEMENT_REDUCE_TIME_A_INDEX] or 0
end

function ElementStage_AccumulationStage1:OnEnter()
    self:__OnEnter()
    if CheckLogLevel(LogLevel.log) and LogTools.ElementLog then
        local _targetObjectLog = "[" .. tostring(self.battleObjComElement.__object:GetDicId()) .. "]"
        local _unit = self.battleObjComElement.__object:GetParentUnit()
        if _unit:GetNetId() then
            _targetObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(_unit:GetUnitType()) .. "][" .. _unit:GetNetId() .. "]" .. _targetObjectLog
        end
        LogTools.LogByLevel(LogLevel.log, "元素", "元素[" .. GetBattleElementNameById(self.elementId) .. "]", "目标" .. _targetObjectLog, "<color=#00FF00>进入积累阶段</color>",
                "元素不衰减",
                "超时时间", self.timeOut,
                "当前时间", TimeUtils.battleNow(self.battleId),
                "元素当前值", self.battleObjComElement:GetElementCurrentValue(self.elementId)
        )
    end
end

-- 元素附着
---@public
function ElementStage_AccumulationStage1:OnUpdate(_deltaTime)
    local currentValue = self.battleObjComElement:GetElementCurrentValue(self.elementId)
    if currentValue > 0 then
        -- 初始阶段仅有元素量再进行update
        self:__OnUpdate(_deltaTime)
    end
end

-- 元素改变
---@public
function ElementStage_AccumulationStage1:OnElementChange(_newValue, _oldValue)
    self:__OnElementChange(_newValue, _oldValue)
    if _newValue > _oldValue then
        -- 元素增加，阶段时间归零
        self:__ResetRunTime()
    end
end

-- 元素效果
---@public
function ElementStage_AccumulationStage1:OnElementEffect()
    self:__OnElementEffect()
    self.stateManager:GoToStage(ElementStage_Define_StageEnum.MaxReduceStage1, false)
end

return ElementStage_AccumulationStage1;

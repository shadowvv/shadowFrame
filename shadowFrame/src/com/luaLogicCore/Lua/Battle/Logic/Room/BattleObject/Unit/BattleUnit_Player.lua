---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/01/27 11:24
--- Describe:
---

---@class BattleUnit_Player : BattleUnitBase
BattleUnit_Player = class(BattleUnitBase, "BattleUnit_Player")

---@public
---@param _netId number
---@param _battleCreateUnitParam BattleCreateUnitParam
---@param _leaderObjectDic BattleObject_LeaderObject[]
function BattleUnit_Player:Init(_battleCreateUnitParam, _leaderObjectDic, _currentObjectId)
	self:__Init(BattleUnitType.Player, _battleCreateUnitParam, _leaderObjectDic, _currentObjectId)
	self:__InitBattlePlayerInfo(_battleCreateUnitParam.battlePlayerInfo)
	self:__InitComponents(_battleCreateUnitParam)
end

---@private
function BattleUnit_Player:__InitBattlePlayerInfo(_battlePlayerInfo)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnit_Player", "__InitBattlePlayerInfo", "_battlePlayerInfo", dumpTableEx(_battlePlayerInfo))
	---@protected
	self.__playerId = _battlePlayerInfo.playerId
	---@protected
	self.__name = _battlePlayerInfo.name
	---@protected
	self.__level = _battlePlayerInfo.level
end

---@public
function BattleUnit_Player:AddUnitDefaultBuff()
	local _leaderObjList = self:GetTypeObjectList(BattleObjectType.LeaderHero)
	for _, _leaderObj in pairs(_leaderObjList) do
		---@type BattleObjCom_Buff
		local _buffCom = _leaderObj:GetComponent(BattleObjectComponentType.Buff)
		if _buffCom then
			local buffIds = {}
			-- 关卡带进来的角色的buff
			if _leaderObj.initBuffIds then
				for _, _buffId in pairs(_leaderObj.initBuffIds) do
					table.insert(buffIds, _buffId)
				end
			end
			-- 关卡带进来的所有玩家的buff
			if self:GetBattleRoom().levelPlayerBuffIds then
				for _, _buffId in pairs(self:GetBattleRoom().levelPlayerBuffIds) do
					table.insert(buffIds, _buffId)
				end
			end
			-- 关卡表里配置的角色的buff
			if _leaderObj:GetDataTemplateXls().defaultBuff then
				for _, _buffId in pairs(_leaderObj:GetDataTemplateXls().defaultBuff) do
					table.insert(buffIds, _buffId)
				end
			end
			-- 动态添加的玩家天生buff
			if self:GetBattleRoom().dynamicPlayerBuffIds then
				for _, _buffId in pairs(self:GetBattleRoom().dynamicPlayerBuffIds) do
					table.insert(buffIds, _buffId)
				end
			end
			if #buffIds > 0 then
				for _, _buffGroupId in pairs(buffIds) do
					if _buffGroupId and _buffGroupId ~= 0 then
						_buffCom:AddBattleBuff(BattleBuffService:GenerateCastBuffTemplate(_buffGroupId, _leaderObj, nil, nil))
						--LogTools.LogByLevel(LogLevel.log, "AddUnitDefaultBuff 1", "buffGroupId", _buffGroupId, "netId", self.__netId, "objId", _leaderObj:GetObjectId())
					end
				end
			end
		end
	end
end

---@private
---@param _battleCreateUnitParam BattleCreateUnitParam
function BattleUnit_Player:__InitComponents(_battleCreateUnitParam)
	---@type BattleUnitComponentManager
	local _comManager = self:GetBattleRoom().battleUnitManager:GetUnitComponentManager()

	---@type BattleUnitCom_TagSelector
	local _tagCom = _comManager:AddComponent(self, BattleUnitComponentType.TagSelector)
	_tagCom:Init(self, _battleCreateUnitParam)
	
	---@type BattleUnitCom_UnitProp
	local _unitPropCom = _comManager:AddComponent(self, BattleUnitComponentType.UnitProp)
	_unitPropCom:Init(self, _battleCreateUnitParam.battlePlayerInfo)
	
	---@type BattleUnitCom_Subordination
	local _subordinationCom = _comManager:AddComponent(self, BattleUnitComponentType.Subordination)
	_subordinationCom:Init(self, _battleCreateUnitParam)
	
	---@type BattleUnitCom_Camp
	local _campCom = _comManager:AddComponent(self, BattleUnitComponentType.Camp)
	_campCom:Init(self, _battleCreateUnitParam.firstCamp, _battleCreateUnitParam.secCamp)

	---@type BattleUnitCom_Hatred
	local _hatredCom = _comManager:AddComponent(self, BattleUnitComponentType.Hatred)
	_hatredCom:Init(self)

	---@type BattleUnitCom_Buff
	local _buffCom = _comManager:AddComponent(self, BattleUnitComponentType.Buff)
	_buffCom:Init(self)
	
	---@type BattleUnitCom_CoverShield
	local _shieldCom = _comManager:AddComponent(self, BattleUnitComponentType.CoverShield)
	_shieldCom:Init(self, _battleCreateUnitParam)
	
	---@type BattleUnitCom_Collector
	local _collectorCom = _comManager:AddComponent(self, BattleUnitComponentType.Collector)
	_collectorCom:Init(self)
	
	---@type BattleUnitCom_Behav
	local _behavCom = _comManager:AddComponent(self, BattleUnitComponentType.Behav)
	_behavCom:Init(self)
	
	---@type BattleUnitCom_RogueUnitSkill
	local _rogueCom = _comManager:AddComponent(self, BattleUnitComponentType.RogueUnitSkill)
	_rogueCom:Init(self, _battleCreateUnitParam)
end

---添加关卡初始buff和被动
function BattleUnit_Player:AddLevelInitBuffAndTalent()
	local _heroObjectList = self:GetTypeObjectList(BattleObjectType.LeaderHero)
	---@type NewLevelInstance
	local _levelXls = self.battleRoom.battleLevelManager.levelConfigManager:GetLevelInstanceXls()
	local _weatherXls = self.battleRoom.battleLevelManager.levelConfigManager:GetWeatherTypeXls()
	local _monsterBuffList = {}
	local _monsterTalentList = {}
	local _playerBuffList = {}
	local _playerTalentList = {}
	
	for _,buffId in pairs(_levelXls.newLevelMonsterBuff) do
		_monsterBuffList[buffId] = buffId
	end
	for _,buffId  in pairs(_levelXls.newLevelMonsterTalent) do
		_monsterTalentList[buffId] = buffId
	end
	for _,buffId  in pairs(_levelXls.newLevelLeaderBuff) do
		_playerBuffList[buffId] = buffId
	end
	for _,buffId  in pairs(_levelXls.newLevelLeaderTalent) do
		_playerTalentList[buffId] = buffId
	end
	if _weatherXls then
		for _,buffId in pairs(_weatherXls.newLevelMonsterBuff) do
			_monsterBuffList[buffId] = buffId
		end
		for _,buffId  in pairs(_weatherXls.newLevelMonsterTalent) do
			_monsterTalentList[buffId] = buffId
		end
		for _,buffId  in pairs(_weatherXls.newLevelLeaderBuff) do
			_playerBuffList[buffId] = buffId
		end
		for _,buffId  in pairs(_weatherXls.newLevelLeaderTalent) do
			_playerTalentList[buffId] = buffId
		end
	end

	---@type BattleUnitCom_Camp
	local _campCom = self:GetComponent(BattleUnitComponentType.Camp)
	local _buffGroupId
	local _talentId
	if _campCom:CheckFirstCamp(BattleUnitCampType.Player) then --玩家方玩家
		for _, _obj in pairs(_heroObjectList) do

			---@type BattleObjCom_Buff
			local _buffCom = _obj:GetComponent(BattleObjectComponentType.Buff)
			if _buffCom then
				for _, _buffStr in pairs(_playerBuffList) do
					_buffGroupId = tonumber(_buffStr)
					_buffCom:AddBattleBuff(BattleBuffService:GenerateCastBuffTemplate(_buffGroupId, _obj, nil, nil))
					--LogTools.LogByLevel(LogLevel.log, "添加关卡默认buff", "buffGroupId", _buffGroupId, "netId", self.__netId, "objId", _obj:GetObjectId())
				end
			end
			
			---@type BattleObjCom_Skill
			local _skillCom = _obj:GetComponent(BattleObjectComponentType.Skill)
			if _skillCom then
				for _, _talentStr in pairs(_playerTalentList) do
					_talentId = tonumber(_talentStr)
					_skillCom:AddTalentSkill(_talentId, 1, 1)
					--LogTools.LogByLevel(LogLevel.log, "添加关卡默认被动", "_talentId", _talentId, "netId", self.__netId, "objId", _obj:GetObjectId())
				end
			end
		end
	elseif _campCom:CheckFirstCamp(BattleUnitCampType.Monster) then --怪物方玩家
		for _, _obj in pairs(_heroObjectList) do

			---@type BattleObjCom_Buff
			local _buffCom = _obj:GetComponent(BattleObjectComponentType.Buff)
			if _buffCom then
				for _, _buffStr in pairs(_monsterBuffList) do
					_buffGroupId = tonumber(_buffStr)
					_buffCom:AddBattleBuff(BattleBuffService:GenerateCastBuffTemplate(_buffGroupId, _obj, nil, nil))
					--LogTools.LogByLevel(LogLevel.log, "添加关卡默认buff", "buffGroupId", _buffGroupId, "netId", self.__netId, "objId", _obj:GetObjectId())
				end
			end

			---@type BattleObjCom_Skill
			local _skillCom = _obj:GetComponent(BattleObjectComponentType.Skill)
			if _skillCom then
				for _, _talentStr in pairs(_monsterTalentList) do
					_talentId = tonumber(_talentStr)
					_skillCom:AddTalentSkill(_talentId, 1, 1)
					--LogTools.LogByLevel(LogLevel.log, "添加关卡默认被动", "_talentId", _talentId, "netId", self.__netId, "objId", _obj:GetObjectId())
				end
			end
		end
	end
end

---@public
function BattleUnit_Player:GetPlayerId()
	return self.__playerId
end

---@public
function BattleUnit_Player:GetUnitName()
	return self.__name
end

---@public
function BattleUnit_Player:GetUnitLevel()
	return self.__level
end

---@public
function BattleUnit_Player:CheckOnlineState(_onlineState)
	return self:GetBattleRoom().battleUnitManager:GetOriginalPlayerInfoManager():CheckPlayerOnlineState(self.__playerId, _onlineState)
end
------------------------------------------------------------------------------------------------------------------------
---@protected
-- 更换当前使用的object
---@param _oldObjectId number
---@param _newObjectId number
function BattleUnit_Player:__OnChangeCurrentHeroObject(_oldObjectId, _newObjectId)
end
------------------------------------------------------------------------------------------------------------------------
--构建向表现层传送的消息
function BattleUnit_Player:GetL2SMessageData()
	local _playerUnitInfo_L2S = {}
	_playerUnitInfo_L2S.netId = self:GetNetId()
	_playerUnitInfo_L2S.alive = self.__alive
	_playerUnitInfo_L2S.createTime = self.__createTime
	_playerUnitInfo_L2S.playerId = self:GetPlayerId()
	---@type BattleUnitCom_Camp
	local _campCom = self:GetComponent(BattleUnitComponentType.Camp)
	_playerUnitInfo_L2S.firstCamp = _campCom:GetFirstCamp()
	_playerUnitInfo_L2S.secCamp = _campCom:GetSecCamp()
	_playerUnitInfo_L2S.currentObjectId = self:GetCurrentHeroObjectId()
	_playerUnitInfo_L2S.name = self:GetUnitName()
	_playerUnitInfo_L2S.level = self:GetUnitLevel()
	
	local _objectInfoList = {}
	---@type BattleObject_LeaderObject[]
	local _objectList = self:GetTypeObjectList(BattleObjectType.LeaderHero)
	table.sort(_objectList, function(a, b)
		return a:GetTeamPos() < b:GetTeamPos()
	end)

	for i = 1, #_objectList do
		local _leaderObject = _objectList[i]
		table.insert(_objectInfoList, _leaderObject:GetL2SMessageData())
	end
	_playerUnitInfo_L2S.objectList = _objectInfoList

	local _moveInfo = {}
	---@type ActionStateManage
	local _actionManager = self:GetActionManager()
	_moveInfo.position = _actionManager:GetPosition()
	_moveInfo.rotation = _actionManager:GetRotation()
	_moveInfo.v = _actionManager:GetVelocity()
	_moveInfo.accelerate = Vector3.zero_local()
	_moveInfo.moveParam = Vector3.zero_local()
	_moveInfo.cameraParam = Vector3.zero_local()
	_moveInfo.type = 0
	_playerUnitInfo_L2S.moveInfo = _moveInfo
	_playerUnitInfo_L2S.scale = _actionManager:GetScale()
	
	---@type BattleUnitCom_UnitProp
	local _unitPropCom = self.__componentDic[BattleUnitComponentType.UnitProp]
	_playerUnitInfo_L2S.UnitProps = _unitPropCom:GetCreateSyncMessage_L2V()
	
	---@type BattleUnitCom_RogueUnitSkill
	local _rogueUnitSkillCom = self:GetComponent(BattleUnitComponentType.RogueUnitSkill)
	_playerUnitInfo_L2S.rogueUnitSkillInfo = _rogueUnitSkillCom and _rogueUnitSkillCom:GetRogueUnitSkillInfo() or nil
	---@type BattleUnitCom_CoverShield
	local _shieldCom = self.__componentDic[BattleUnitComponentType.CoverShield]
	_playerUnitInfo_L2S.coverShieldInfo = _shieldCom and _shieldCom:GetCreateSyncMessage_L2V()
	_playerUnitInfo_L2S.targetPointId = self:GetOriginalGenerateInfo().targetPointId
	--LogTools.LogByLevel(LogLevel.logErr, "BattleUnit_Player _playerUnitInfo_L2S", "_playerUnitInfo_L2S.UnitProps", dumpTableEx(_playerUnitInfo_L2S.UnitProps))
	return _playerUnitInfo_L2S
end
------------------------------------------------------------------------------------------------------------------------

---@public
function BattleUnit_Player:Clear()
	self:__Clear()
	self.__playerId = nil
	self.__name = nil
	self.__level = nil
end

return BattleUnit_Player
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/03/17 19:31
--- Describe: 属性快照管理器
---

require "Battle/Logic/Room/HurtChannel/SnapShotData"

---@class SnapShotDataManager : table
SnapShotDataManager = class(nil, "SnapShotDataManager")
function SnapShotDataManager:ctor(_data) end

function SnapShotDataManager:Init(_battleId)
	self.battleId = _battleId
	self.battleRoom = GetBattleRoom(self.battleId)
	---快照id计数
	---@private
	---@type number
	self.__snapIndexCnt = 0
	---快照池扩容步长
	---@private
	---@type number
	self.__snapShotPoolStep = 10
	---回收的快照池
	---@private
	---@type SnapShotData[]
	self.__deadSnapPool = {}
	---存活的快照字典
	---@private
	---@type SnapShotData[]
	self.__snapDic = {}
	
	self:__ExpandSnapShotPool()
end


------------------------------------------------------------------------------------------------------------------------
---快照池扩容
---@private
function SnapShotDataManager:__ExpandSnapShotPool()
	local _pool = self.__deadSnapPool
	for i = 1, self.__snapShotPoolStep do
		local _snapShot = SnapShotData.New()
		table.insert(_pool, _snapShot)
	end
end

---从池中获取备用快照
---@private
---@return SnapShotData
function SnapShotDataManager:__PopSnapShot()
	local _pool = self.__deadSnapPool
	if #_pool == 0 then
		self:__ExpandSnapShotPool()
	end
	
	local _cnt = #_pool
	local _snapShot = _pool[_cnt]
	table.remove(_pool, _cnt)
	
	return _snapShot
end

---将快照放回池
---@private
---@param _snapShot SnapShotData
function SnapShotDataManager:__PushSnapShot(_snapShot)
	table.insert(self.__deadSnapPool, _snapShot)
end
------------------------------------------------------------------------------------------------------------------------

---获取指定index的快照数据
---@public
---@param _index number 快照id
---@return SnapShotData
function SnapShotDataManager:GetSnapShot(_index)
	return self.__snapDic[_index]
end

---创建快照
---@public
function SnapShotDataManager:CreateSnapShot(_objId, _sourceType, _sourceId, _elementId, _addElementId, _addElementRand, _addElementNum, _hurtParam, _hatredParam)
	local _index = self.__snapIndexCnt + 1
	self.__snapIndexCnt = _index
	local _snapShot = self:__PopSnapShot()
	_snapShot:Init(self.battleId, _index, _objId, _sourceType, _sourceId, _elementId, _addElementId, _addElementRand, _addElementNum, _hurtParam, _hatredParam)
	_snapShot:SetAlive(true)
	self.__snapDic[_index] = _snapShot
	
	return _snapShot
end

---返还快照数据
---@public
---@param _snapShot SnapShotData
function SnapShotDataManager:PushSnapShot(_snapShot)
	_snapShot:SetAlive(false)
	local _index = _snapShot:GetIndex()
	self.__snapDic[_index] = nil
	self:__PushSnapShot(_snapShot)
end

---返还快照数据
---@public
function SnapShotDataManager:PushSnapShotById(_id)
	local _snapShot = self.__snapDic[_id]
	if not _snapShot then return end

	_snapShot:SetAlive(false)
	self.__snapDic[_id] = nil
	self:__PushSnapShot(_snapShot)
end

------------------------------------------------------------------------------------------------------------------------
---@public
function SnapShotDataManager:Clear()
	for _, _snapShot in pairs(self.__deadSnapPool) do
		_snapShot:Clear()
	end
	
	for _, _snapShot in pairs(self.__snapDic) do
		_snapShot:Clear()
	end
	
	self.__snapIndexCnt = nil
	self.__snapShotPoolStep = nil
	self.__deadSnapPool = nil
	self.__snapDic = nil
end
return SnapShotDataManager
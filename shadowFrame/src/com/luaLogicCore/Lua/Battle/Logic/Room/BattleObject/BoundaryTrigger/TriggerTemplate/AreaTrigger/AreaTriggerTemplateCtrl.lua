---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/04/09 15:03
--- Describe: 模板管理
---

require "Battle/Logic/Room/BattleObject/BoundaryTrigger/TriggerTemplate/AreaTrigger/AreaTriggerTemplateBase"
require "Battle/Logic/Room/BattleObject/BoundaryTrigger/TriggerTemplate/AreaTrigger/AreaTriggerTemplate_Box"
require "Battle/Logic/Room/BattleObject/BoundaryTrigger/TriggerTemplate/AreaTrigger/AreaTriggerTemplate_Sphere"

---触发器区域形状类型
---@class AreaTriggerShapType : table
AreaTriggerShapType = {
	Box = 1,      --盒形
	Sphere = 2,   --球形
}

---@class AreaTriggerTemplateCtrl : BoundaryTriggerTemplateCtrlBase
AreaTriggerTemplateCtrl = class(BoundaryTriggerTemplateCtrlBase, "AreaTriggerTemplateCtrl")
function AreaTriggerTemplateCtrl:ctor(_data) end
---@type AreaTriggerTemplateCtrl[][]
AreaTriggerTemplateCtrl.listeners = {}

---@public
---@param _caller AreaTriggerTemplateCtrl
function AreaTriggerTemplateCtrl.AddListener(_battleId, _caller)
	local _dic = AreaTriggerTemplateCtrl.listeners[_battleId]
	if not _dic then
		_dic = {}
		AreaTriggerTemplateCtrl.listeners[_battleId] = _dic
	end
	_dic[_caller] = _caller
end

---@public
function AreaTriggerTemplateCtrl.RemoveListener(_battleId, _caller)
	local _dic = AreaTriggerTemplateCtrl.listeners[_battleId]
	if not _dic then return end
	_dic[_caller] = nil
end

---@public
function AreaTriggerTemplateCtrl.OnUnitCreate(_battleId, _unit)
	local _dic = AreaTriggerTemplateCtrl.listeners[_battleId]
	if not _dic then return end
	for _, _caller in pairs(_dic) do
		_caller:OnBattleUnitCreate(_unit)
	end
end

---@public
function AreaTriggerTemplateCtrl.OnUnitDead(_battleId, _netId)
	local _dic = AreaTriggerTemplateCtrl.listeners[_battleId]
	if not _dic then return end
	for _, _caller in pairs(_dic) do
		_caller:OnBattleUnitDead(_netId)
	end
end

---@param _triggerCom BattleObjCom_BoundaryTrigger
---@param _battleCreateUnitParam BattleCreateUnitParam
function AreaTriggerTemplateCtrl:Init(_triggerCom, _dicId, _battleCreateUnitParam)
	self:__Init(_triggerCom)
	---@private
	---@type BattleUnitBase
	self.__unit = nil
	---@private
	---@type number
	self.__battleId = _triggerCom:GetBattleId()
	---@private
	---@type BattleRoom
	self.__battleRoom = _triggerCom:GetBattleRoom()

	---@type AreaColliderTemplate
	local _templateXls = self:GetBattleRoom().inputDataSource:GetDict("AreaColliderTemplate", _dicId)
	---@private
	---@type AreaColliderTemplate
	self.__templateXls = _templateXls
	
	---@private
	---@type Vector3
	self.__templateRotation = nil
	local _eventRotation = _templateXls.eventRotation
	if _templateXls.isEventRotation == 1 then
		self.__templateRotation = Vector3.New(_eventRotation[1] or 0, _eventRotation[2] or 0, _eventRotation[3] or 0)
	end

	self:__InitCampUnitList(_templateXls.dragControl)
	self:__InitDragConfigs(_templateXls, _battleCreateUnitParam)
end
------------------------------------------------------------------------------------------------------------------------

---@private
---@param _templateXls AreaColliderTemplate
---@param _battleCreateUnitParam BattleCreateUnitParam
function AreaTriggerTemplateCtrl:__InitDragConfigs(_templateXls, _battleCreateUnitParam)
	if not self.__needDrag then return end

	local _dragShift = _templateXls.dragCoordinate
	---@private
	---@type Vector3
	self.__dragShift = Vector3.New(_dragShift[1] or 0, _dragShift[2] or 0, _dragShift[3] or 0)
	local _dragDisList = {0}
	local _dragDisConfig = _templateXls.dragDistance
	for i = 1, #_dragDisConfig do
		table.insert(_dragDisList, _dragDisConfig[i] * _dragDisConfig[i])
	end
	---@private
	---@type number
	self.__dragDisList = _dragDisList
	
	---@private
	---@type number[]
	self.__draggingUnitSpdCache = {}
	
	---重新计算牵引中心的时间
	---@private
	---@type number
	self.__reCalcDragCenterTime = _templateXls.movingTime > 0 and 1000 or nil
	self:__CalcDragCenter(_battleCreateUnitParam)
end

---@private
---@param _battleCreateUnitParam BattleCreateUnitParam 有这个的表示是初始化
function AreaTriggerTemplateCtrl:__CalcDragCenter(_battleCreateUnitParam)
	if not _battleCreateUnitParam and not self.__reCalcDragCenterTime then return end

	local _curTime = TimeUtils.battleNow(self.__battleId)

	local _pos
	local _rot
	if _battleCreateUnitParam then
		_pos = _battleCreateUnitParam.position
		_rot = _battleCreateUnitParam.rotation
		---@private
		---@type Vector3
		self.__dragCenter = Vector3.zero_local()
	else
		if _curTime - self.__lastCalcCenterTime < self.__reCalcDragCenterTime then return end

		local _unit = self.__unit
		if not _unit then
			_unit = self.__triggerCom:GetObject():GetParentUnit()
			if not _unit:CheckAlive() then
				_unit = nil
			end
			self.__unit = _unit
		end
		if not _unit then return end
		local _actionManager  = _unit:GetActionManager()
		_pos = _actionManager:GetPosition()
		_rot = _actionManager:GetRotation()
	end

	local _center = self.__dragCenter
	Vector3.MulQuat(self.__dragShift, _rot, _center)
	Vector3.Add(_center, _pos, _center)
	---@private
	---@type number
	self.__lastCalcCenterTime = _curTime
end

---@private
function AreaTriggerTemplateCtrl:__InitCampUnitList(_dragCampList)
	
	local _needDrag = false
	local _dragCampIdDic = {}
	local _dragCampUnitDic = {}
	--local _dragCareUnitList = {}
	local _unitManager = self:GetBattleRoom().battleUnitManager
	---@type BattleUnitBase[]
	local _unitList
	---@type BattleObjectBase
	local _obj
	for _, _campId in pairs(_dragCampList) do
		_dragCampIdDic[_campId] = true
		_unitList = _unitManager:GetUnitListByCampTypeUnsafe(_campId)
		for _, _unit in pairs(_unitList) do
			if _unit:CheckAlive() then
				_obj = _unit:GetCurrentHeroObject()
				if _obj and _obj:CheckCanBeDraged() then
					--table.insert(_dragCareUnitList, _unit)
					_dragCampUnitDic[_unit:GetNetId()] = _unit
				end
			end
		end

		if not _needDrag then _needDrag = true end
	end

	---@private
	---@type number[]
	self.__dragCareCampIdDic = _dragCampIdDic
	---@private
	---@type BattleUnitBase[]
	self.__dragCareUnitDic = _dragCampUnitDic
	-----@private
	-----@type BattleUnitBase[]
	--self.__dragCareUnitList = _dragCareUnitList
	---@private
	---@type boolean
	self.__needDrag = _needDrag
	---@private
	---@type Vector3
	self.__dragCenter = nil
	-----@private
	-----@type number
	--self.__dragPointer = 0
	-------@private
	-------@type number
	--self.__dragMax = 100

	if _needDrag then
		AreaTriggerTemplateCtrl.AddListener(self.__battleId, self)
	end
end

---@public
---@param _unit BattleUnitBase
function AreaTriggerTemplateCtrl:OnBattleUnitCreate(_unit)

	---@type BattleUnitCom_Camp
	local _campCom = _unit:GetComponent(BattleUnitComponentType.Camp)
	if not _campCom then return end

	local _id = _campCom:GetFirstCamp()
	if not self.__dragCareCampIdDic[_id] then return end

	local _obj = _unit:GetCurrentHeroObject()
	if not _obj then return end
	if not _obj:CheckCanBeDraged() then return end

	local _netId = _unit:GetNetId()
	if self.__dragCareUnitDic[_netId] then return end
	self.__dragCareUnitDic[_unit:GetNetId()] = _unit
	--table.insert(self.__dragCareUnitList, _unit)
end

---@public
function AreaTriggerTemplateCtrl:OnBattleUnitDead(_netId)
	if not self.__dragCareUnitDic[_netId] then return end
	
	self.__dragCareUnitDic[_netId] = nil
	--for _index, _unit in pairs(self.__dragCareUnitList) do
	--	if _unit:GetNetId() == _netId then
	--		table.remove(self.__dragCareUnitList, _index)
	--		break
	--	end
	--end
	self:__RemoveDraggingUnitSpdCache(_netId)
end

---@private
function AreaTriggerTemplateCtrl:__RemoveDraggingUnitSpdCache(_netId)
	local _draggingUnitDic = self.__draggingUnitSpdCache
	if not _draggingUnitDic[_netId] then return end

	_draggingUnitDic[_netId] = 0
	local _dragUnit = self:GetBattleRoom().battleUnitManager:GetUnit(_netId)
	if not _dragUnit then return end
	_dragUnit:GetActionManager():RemoveForceAcc()
end

------------------------------------------------------------------------------------------------------------------------
---@public
---@return Vector3
function AreaTriggerTemplateCtrl:GetTemplateRotation()
	return self.__templateRotation
end

function AreaTriggerTemplateCtrl:OnUpdate(_deltaTime)
	if not self.__triggerCom:CheckLifeState(BoundaryTriggerLifeState.Opened) then return end
	if not self.__needDrag then return end
	self:__CalcDragCenter()
	self:__TickDrag(_deltaTime)
end

---处理牵引效果
---这里先简单粗暴的把逻辑实现了，回头再优化
---@private
function AreaTriggerTemplateCtrl:__TickDrag(_deltaTime)
	--LogTools.LogByLevel(LogLevel.log, "AreaTriggerTemplateCtrl", "__TickDrag start")
	
	--牵引给个CD，不要每帧都去拉
	local _dragCD = 3
	local _curTime = TimeUtils.battleNow(self.__battleId)
	if self.__tickDragTime and _curTime - self.__tickDragTime < _dragCD then
		return
	end
	self.__tickDragTime = _curTime

	---先移除之前的牵引力
	local _draggingUnitDic = self.__draggingUnitSpdCache
	for _netId, _dis in pairs(_draggingUnitDic) do
		if _netId and _dis and _dis > 0 then
			self:__RemoveDraggingUnitSpdCache(_netId)
		end
	end
	
	
	local _dragCenter = self.__dragCenter
	local _pos
	local _dis
	local _dragSpd
	local _draggingUnitDisCacheDisCache = self.__draggingUnitSpdCache
	
	--local _dragMax = self.__dragMax
	--local _caredUnitList = self.__dragCareUnitList
	local _careUnitDic = self.__dragCareUnitDic
	--local _caredUnitNum = #_caredUnitList
	---@type ActionStateManage
	local _actionManager
	---@type Vector3
	local _dragForce
	--LogTools.LogByLevel(LogLevel.logErr, "_dragMax", _dragMax, "_caredUnitNum", _caredUnitNum, "self.__dragPointer", self.__dragPointer, "frame", LOOPER.GetFrameId())
	--if _dragMax >= _caredUnitNum then
	--	self.__dragPointer = 0
		for _, _campUnit in pairs(_careUnitDic) do
			_actionManager = _campUnit:GetActionManager()
			_pos = _actionManager:GetPosition()
			_dragForce = _actionManager:GetForceAcc() or Vector3.zero_local()
			Vector3.Sub(_dragCenter, _pos, _dragForce)
			_dis = Vector3.SqrMagnitude(_dragForce)
			_dragSpd = self:__GetDragSpd(_dis)
			_actionManager:AddForceAcc(_dragForce, _dragSpd)
			if _dragSpd > 0 then
				if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
					LogTools.LogByLevel(LogLevel.log, "区域牵引", "AreaTriggerTemplateCtrl", "区域NetId", self.__triggerCom:GetObject():GetParentUnit():GetNetId(), "牵引目标NetId", _campUnit:GetNetId(), "牵引中心", _dragCenter, "距离平方", _dis, "牵引方向", _dir, "牵引速度", _dragSpd)
				end
				_draggingUnitDisCacheDisCache[_campUnit:GetNetId()] = _dragSpd
			else
				self:__RemoveDraggingUnitSpdCache(_campUnit:GetNetId())
			end
		end
	--else
	--	local _pointer = self.__dragPointer
	--	---@type BattleUnitBase
	--	local _campUnit
	--	for i = 1, _dragMax do
	--		_pointer = _pointer + 1
	--		if _pointer > _caredUnitNum then
	--			_pointer = 1
	--		end
	--		_campUnit = _caredUnitList[_pointer]
	--		_actionManager = _campUnit:GetActionManager()
	--		_pos = _actionManager:GetPosition()
	--		_dragForce = _actionManager:GetForceAcc() or Vector3.zero_local()
	--		Vector3.Sub(_dragCenter, _pos, _dragForce)
	--		_dis = Vector3.SqrMagnitude(_dragForce)
	--		_dragSpd = self:__GetDragSpd(_dis)
	--		_actionManager:AddForceAcc(_dragForce, _dragSpd)
	--		if _dragSpd > 0 then
	--			if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
	--				LogTools.LogByLevel(LogLevel.log, "区域牵引", "AreaTriggerTemplateCtrl", "区域NetId", self.__triggerCom:GetObject():GetParentUnit():GetNetId(), "牵引目标NetId", _campUnit:GetNetId(), "牵引中心", _dragCenter, "距离平方", _dis, "牵引方向", _dir, "牵引速度", _dragSpd)
	--			end
	--			_draggingUnitDisCacheDisCache[_campUnit:GetNetId()] = _dragSpd
	--		else
	--			self:__RemoveDraggingUnitSpdCache(_campUnit:GetNetId())
	--		end
	--	end
	--	self.__dragPointer = _pointer
	--end
	
	
	--LogTools.LogByLevel(LogLevel.log, "AreaTriggerTemplateCtrl", "__TickDrag end")
end

---获取牵引速度
---@private
function AreaTriggerTemplateCtrl:__GetDragSpd(_dis)
	local _cnt = 1
	local _list = self.__dragDisList
	for i = 1, #_list do
		if _dis > _list[i] then
			_cnt = i
		else
			break
		end
	end

	return self.__templateXls.dragSpeed[_cnt] or 0
end


---@public
function AreaTriggerTemplateCtrl:OnClose()
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "区域牵引", "AreaTriggerTemplateCtrl", "OnClose start")
	end

	if not self.__draggingUnitSpdCache then return end
	for _netId, _ in pairs(self.__draggingUnitSpdCache) do
		self:__RemoveDraggingUnitSpdCache(_netId)
	end
	AreaTriggerTemplateCtrl.RemoveListener(self.__battleId, self)
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "区域牵引", "AreaTriggerTemplateCtrl", "OnClose end")
	end
end

---@public
function AreaTriggerTemplateCtrl:OnDestroy()
	
end

---@public 
function AreaTriggerTemplateCtrl:Clear()
	self.__templateXls = nil
	self.__dragCampList = nil
	self.__needDrag = nil
	self.__dragShift = nil
	self.__dragDisList = nil
	self:__Clear()
end
return AreaTriggerTemplateCtrl
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/4/6 17:07

require "Lib/class"
require "Battle/Logic/Room/BattleObject/ActionState/ActionState"

---@class TrappedActionState : ActionState
---@field battleRoom BattleRoom 战斗
---@field stateParam StateParameter 状态参数配置
---@field unitType number 单位类型
TrappedActionState = class(ActionState, 'TrappedActionState');

---@param _battleId number 战斗id
---@param _stateParamId number 状态参数配置id
---@param _unitType number 单位类型
function TrappedActionState:ctor(_battleId, _stateParamId, _unitType,_trappedType,_trappedTime)
    self.battleRoom = GetBattleRoom(_battleId)
    self.stateParam = self.battleRoom.inputDataSource:GetDict("StateParameter", _stateParamId);
    self.unitType = _unitType;
    self.trappedType = _trappedType;
    self.trappedTime = _trappedTime;
end

-- 切换行为,判断行为的参数正确性
---@param _actionStateManager ActionStateManage 行为管理器
---@return boolean 是否可进入行为
function TrappedActionState:EnterAction(_actionStateManager)
    ---@type BattleUnitCom_Buff
    local unitBuffCom = _actionStateManager:GetUnit():GetComponent(BattleUnitComponentType.Buff);
    if unitBuffCom and unitBuffCom:IsEndure() then
        return false,0;
    end

    ---@type BattleObjectBase
    local object = _actionStateManager:GetUnit():GetCurrentHeroObject();
    ---@type BattleObjCom_Buff
    local buffCom = object:GetComponent(BattleObjectComponentType.Buff)
    if buffCom and buffCom:IsEndure() then
        return false,0;
    end

    self.runTime = 0;
    _actionStateManager:SetVelocity(Vector3.zero_local());
    return true,self.trappedType;
end

-- 执行行为
---@param _actionStateManager ActionStateManage 行为管理器
---@param _dt number 更新时间
---@param _netId number 单位id
function TrappedActionState:DoAction(_actionStateManager, _dt, _netId)
    if self.runTime > self.trappedTime then
        _actionStateManager:Exit(self);
        _actionStateManager:Idle();
    end

    self.runTime = self.runTime + _dt;
end

-- 退出行为
---@param _actionStateManager ActionStateManage 行为管理器
---@param _isBreak boolean 是否为打断退出
---@param _isActive boolean 是否为主动打断
function TrappedActionState:ExitAction(_actionStateManager,_isBreak,_isActive)

end

-- 是否为主动状态
---@return boolean 是否为主动状态
function TrappedActionState:IsActive()
    return false;
end

-- 行为状态Id
---@return number 行为状态Id 参照stateSwitchRule表
function TrappedActionState:GetId()
    return 6;
end

---获得状态冲突表
---@return StateSwitchRule
function TrappedActionState:GetSwitchRule()
    return self.battleRoom.inputDataSource:GetDict("StateSwitchRule",self:GetId());
end

return TrappedActionState;
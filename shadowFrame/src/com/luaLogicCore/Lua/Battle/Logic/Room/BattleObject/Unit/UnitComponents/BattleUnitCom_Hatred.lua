---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/02/19 10:38
--- Describe: 仇恨值组件
---

---仇恨值记录数据
---@class BattleUnitHatredRecordData
BattleUnitHatredRecordData = class(BattleUnitComponentBase, "BattleUnitHatredRecordData")
function BattleUnitHatredRecordData:ctor(_netId, _hatredValue, _timeStamp)
	self.netId = _netId
	self.value = _hatredValue
	self.lastTime = _timeStamp
end

---@class BattleUnitCom_Hatred : BattleUnitComponentBase
BattleUnitCom_Hatred = class(BattleUnitComponentBase, "BattleUnitCom_Hatred")
BattleUnitCom_Hatred.Inited = nil
---仇恨衰减系数
---秒级
BattleUnitCom_Hatred.HatredReduceParam = nil

function BattleUnitCom_Hatred:ctor() 
	self:__ctor(BattleUnitComponentType.Hatred)
end

---@public
---@param _battleUnit BattleUnitBase
function BattleUnitCom_Hatred:Init(_battleUnit)
	self:__Init(_battleUnit)
	
	---@type BattleUnitHatredRecordData[]
	self.__hatredDic = {}
	
	self.__mostHatredNetId = nil
	self.__smallestHatredNetId = nil
	---上次计算仇恨衰减的时间
	self.__lastReduceTime = 0
	
	if not BattleUnitCom_Hatred.Inited then
		BattleUnitCom_Hatred.HatredReduceParam = self:GetBattleRoom().inputDataSource:GetDict("BattleDefault", 11001).value3
		BattleUnitCom_Hatred.Inited = true
	end
end

--- 计算伤害造成的仇恨
--- 仇恨值增加 = 伤害 * 仇恨系数
---@public
function BattleUnitCom_Hatred:OnHurt(_fromNetId, _hurtNum, _hatredParam)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Hatred", "OnHurt", "_fromNetId", _fromNetId, "_hurtNum", _hurtNum)
	_hatredParam = _hatredParam or 1
	local _hatredValue = _hurtNum * _hatredParam
	self:ChangeHatred(_fromNetId, _hatredValue)
end

---@public
---@param _netId number 目标unit
---@param _hatredValue number 仇恨值变化量
function BattleUnitCom_Hatred:ChangeHatred(_netId, _hatredValue)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Hatred", "ChangeHatred", "_netId", _netId, "_hatredValue", _hatredValue)
	local _curTime = TimeUtils.battleNow(self:GetBattleId())
	
	if 0 == self.__lastReduceTime then
		self.__lastReduceTime = _curTime
	elseif self.__lastReduceTime < _curTime then
		self:__CountHatredReduce(self.__lastReduceTime, _curTime)
		self.__lastReduceTime = _curTime
	end

	---@type BattleUnitHatredRecordData
	local _hatredData = self.__hatredDic[_netId]
	if not _hatredData then
		_hatredData = BattleUnitHatredRecordData.New(_netId, 0, _curTime)
		self.__hatredDic[_netId] = _hatredData
	end

	local _curHatred = _hatredData.value
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Hatred", "ChangeHatred", "oldHatred: ", _curHatred)
	_curHatred = _curHatred + _hatredValue
	_hatredData.value = _curHatred

	---@type BattleUnitHatredRecordData
	local _mostHatredData = self.__mostHatredNetId and self.__hatredDic[self.__mostHatredNetId]
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Hatred", "ChangeHatred", "_mostHatredData: ", dumpTableEx(_mostHatredData))
	if not _mostHatredData or _mostHatredData.value < _curHatred then
		self.__mostHatredNetId = _netId
	end

	local _smallestHatredNetId = self.__smallestHatredNetId and self.__hatredDic[self.__smallestHatredNetId]
	if not _smallestHatredNetId or _smallestHatredNetId.value > _curHatred then
		self.__smallestHatredNetId = _netId
	end
	
end

---计算仇恨衰减
---目前只在仇恨发生变化的时候重新计算
---@public
function BattleUnitCom_Hatred:__CountHatredReduce(_lastTime, _curTime)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Hatred", "__CountHatredReduce", "_lastTime", _lastTime, "_curTime", _curTime, "dis", _curTime - _lastTime)
	local _timeDelta = Mathf.Ceil((_curTime - _lastTime) * 0.001)
	local _reduceParam = BattleUnitCom_Hatred.HatredReduceParam
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Hatred", "__CountHatredReduce", "_reduceParam", _reduceParam, "_timeDelta", _timeDelta)
	for _netId, _hatredData in pairs(self.__hatredDic) do
		----LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Hatred", "__CountHatredReduce", "before reduce", _hatredData.value)
		for i = 1, _timeDelta do
			_hatredData.value = _hatredData.value * _reduceParam
		end
		----LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Hatred", "__CountHatredReduce", "after reduce", _hatredData.value)
	end
end

---@public
function BattleUnitCom_Hatred:GetMostHatredNetId()
	return self.__mostHatredNetId
end

---@public
function BattleUnitCom_Hatred:GetMostHatredValue()
	if not self.__mostHatredNetId then return 0 end
	local _hatredData = self.__hatredDic[self.__mostHatredNetId]
	return _hatredData.value
end

---@public
function BattleUnitCom_Hatred:GetSmallestHatredNetId()
	return self.__smallestHatredNetId
end

---@public
function BattleUnitCom_Hatred:GetSmallestHatredValue()
	if not self.__smallestHatredNetId then return 0 end
	local _hatredData = self.__hatredDic[self.__smallestHatredNetId]
	return _hatredData.value
end

---@public
function BattleUnitCom_Hatred:GetHatred(_netId)
	local _hatredData = self.__hatredDic[_netId]
	if not _hatredData then return 0 end
	return _hatredData.value
end

---@public
function BattleUnitCom_Hatred:Clear()
	self:__Clear()
	self.__hatredDic = nil
	self.__hatredList = nil
	BattleUnitCom_Hatred.Inited = nil
	BattleUnitCom_Hatred.HatredReduceParam = nil
	self.__lastTime = nil
end

return BattleUnitCom_Hatred
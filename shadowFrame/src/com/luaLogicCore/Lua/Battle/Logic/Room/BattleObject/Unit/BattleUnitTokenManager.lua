---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2023/06/26 15:30
--- Describe:
---

---@class BattleUnitTokenManager : table
BattleUnitTokenManager = class(nil, "BattleUnitTokenManager")
function BattleUnitTokenManager:ctor(_data) end
function BattleUnitTokenManager:OnUpdate(_deltaTime) end

---@public
---@param _unitManager BattleUnitManager
function BattleUnitTokenManager:Init(_unitManager)
	---@private
	self.__unitManager = _unitManager
	self:__InitTokenDic()
end

---@public
function BattleUnitTokenManager:Clear()
	self.__unitManager = nil
	self.__tokenNumDic = nil
	self.__typeToTokenIdDic = nil
	self.__checkSkillToken = nil
end

---@private
function BattleUnitTokenManager:__InitTokenDic()
	---@private
	self.__typeToTokenIdDic = {}
	---@private
	self.__tokenNumDic = {}
	
	local _levelInstanceXls = self.__unitManager:GetBattleRoom().battleLevelManager.levelConfigManager:GetLevelInstanceXls()
	local _skillTokenXlsId = _levelInstanceXls.monsterlimitID
	--LogTools.LogByLevel(LogLevel.logErr, "BattleUnitTokenManager:__InitTokenDic", "_skillTokenXlsId", _skillTokenXlsId)
	--_skillTokenXlsId = 1
	
	if not _skillTokenXlsId or 0 == _skillTokenXlsId then
		self.__checkSkillToken = false
		return
	end
	
	---@type LevelMonsterLimit
	local _monsLimitXls = self.__unitManager:GetBattleRoom().inputDataSource:GetDict("LevelMonsterLimit", _skillTokenXlsId)
	if not _monsLimitXls then
		if CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.logErr, "LevelMonsterLimit is nil!!!", "LevelInstanceXls.monsterlimitID", monsterlimitID)
		end
		self.__checkSkillToken = false
		return
	end

	local _tokenIdCnt = 0
	---@type number[]
	local _typeArr
	local _num
	for i = 1, 99 do
		_typeArr = _monsLimitXls["typeId" ..i]
		if not _typeArr or #_typeArr == 0 then break end
		_tokenIdCnt = _tokenIdCnt + 1
		_num = _monsLimitXls["num" ..i]
		self.__tokenNumDic[_tokenIdCnt] = _num
		for _, _monsType in pairs(_typeArr) do
			self.__typeToTokenIdDic[_monsType] = _tokenIdCnt
		end
	end
	self.__checkSkillToken = true
	
	--LogTools.LogByLevel(LogLevel.logErr, "BattleUnitTokenManager:__InitTokenDic", "self.__typeToTokenIdDic", dumpTableEx(self.__typeToTokenIdDic), "self.__tokenNumDic", dumpTableEx(self.__tokenNumDic))
end

---@public
---@param _unit BattleUnitBase
---@return boolean
function BattleUnitTokenManager:GetSkillToken(_unit)
	--LogTools.LogByLevel(LogLevel.logErr, "CheckBarrage", "BattleUnitTokenManager:GetSkillToken 1", "_unit", _unit and _unit:GetNetId(), "self.__checkSkillToken", self.__checkSkillToken)
	if not _unit then return false end
	if not self.__checkSkillToken then return true end

	--暂时AI才走这里，将来如果需要再进行类型之类的判断
	return self:__TryGetSkillToken(_unit)

end

---@private
---@param _unit BattleUnitBase
function BattleUnitTokenManager:__TryGetSkillToken(_unit)
	---@type BattleObjCom_Config
	local _configCom = _unit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Config)
	---@type MonsterInstance
	local _monsXls = _configCom:GetDataInstanceXls()
	local _type = _monsXls.type
	--LogTools.LogByLevel(LogLevel.logErr, "CheckBarrage", "BattleUnitTokenManager:__TryGetSkillToken 1", "_type", _type)
	if not _type then return true end
	local _tokenId = self.__typeToTokenIdDic[_type]
	--LogTools.LogByLevel(LogLevel.logErr, "CheckBarrage", "BattleUnitTokenManager:__TryGetSkillToken 2", "_tokenId", _tokenId)
	if not _tokenId then return true end
	local _tokenNum = self.__tokenNumDic[_tokenId]
	--LogTools.LogByLevel(LogLevel.logErr, "CheckBarrage", "BattleUnitTokenManager:__TryGetSkillToken 3", "_tokenNum", _tokenNum)
	if _tokenNum > 0 then
		self.__tokenNumDic[_tokenId] = _tokenNum - 1
		_configCom:SetSkillTokenId(_tokenId)
		--LogTools.LogByLevel(LogLevel.logErr, "CheckBarrage", "BattleUnitTokenManager:__TryGetSkillToken ret", "true")
		return true
	end
	--LogTools.LogByLevel(LogLevel.logErr, "CheckBarrage", "BattleUnitTokenManager:__TryGetSkillToken ret", "false")
	return false
end

---@public
---@param _unit BattleUnitBase
function BattleUnitTokenManager:PushSkillToken(_unit)
	--LogTools.LogByLevel(LogLevel.logErr, "CheckBarrage", "BattleUnitTokenManager:PushSkillToken 1", "_unit", _unit and _unit:GetNetId())
	if not _unit then return end
	---@type BattleObjCom_Config
	local _configCom = _unit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Config)
	local _tokenId = _configCom:GetSkillTokenId()
	--LogTools.LogByLevel(LogLevel.logErr, "CheckBarrage", "BattleUnitTokenManager:PushSkillToken 2", "_tokenId", _tokenId)
	if not _tokenId then return end
	self.__tokenNumDic[_tokenId] = self.__tokenNumDic[_tokenId] + 1
	_configCom:SetSkillTokenId(nil)
	--LogTools.LogByLevel(LogLevel.logErr, "CheckBarrage", "BattleUnitTokenManager:PushSkillToken 3", "self.__tokenNumDic", dumpTableEx(self.__tokenNumDic))
	--for i, v in pairs(self.__tokenNumDic) do
	--	LogTools.LogByLevel(LogLevel.logErr, "CheckBarrage", "    BattleUnitTokenManager:PushSkillToken 3", "left tokenId", i, "left tokenNum", v)	
	--end
end

return BattleUnitTokenManager
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/03/07 11:56
--- Describe: 靠近目标（前端走）
---

---@class BehavState_ChaseTarget : BattleUnit_PathFindCaller
BehavState_ChaseTarget = class(BattleUnit_PathFindCaller, "BehavState_ChaseTarget")

---@public
---@param _behavCom BattleUnitCom_Behav
function BehavState_ChaseTarget:Init(_behavCom)
	---@private
	---@type BattleUnitCom_Behav
	self.__behavCom = _behavCom
	self:__Init(_behavCom:GetUnit(), 1000, 15)
	self:__InitStateUseInfos()
	self.__running = false
end

---初始化一些当前behavState需要使用的专属信息
---@private
function BehavState_ChaseTarget:__InitStateUseInfos()
	---@private
	---@type ActionStateManage
	self.__actionManagerTarget = nil
end

------------------------------------------------------------------------------------------------------------------------
---开启行为
---@public
---@param _targetNetId number 要追逐的目标Unit的netId
function BehavState_ChaseTarget:Start(_targetNetId)
	--LogTools.LogByLevel(LogLevel.log, "behavState", "BehavState_ChaseTarget:Start", "Start", "netId", self.__unitSelf:GetNetId(), "self.__running", self.__running)
	self:ReleaseHitBlockParams()
	if self.__running then return end
	self.__running = true

	self.__chaseTime = TimeUtils.battleNow(self:GetBattleId())
	local _unitTarget = self.__unitSelf:GetBattleRoom().battleUnitManager:GetUnit(_targetNetId)
	if not _unitTarget then return end
	self.__actionManagerTarget = _unitTarget:GetActionManager()
	if not self.__actionManagerTarget then return end
	self.__comPathFind:Open(true)
	self:CallPathFind()
end

---结束行为
---@public
function BehavState_ChaseTarget:Stop()
	--LogTools.LogByLevel(LogLevel.log, "behavState", "BehavState_ChaseTarget:Stop", "Start", "netId", self.__unitSelf:GetNetId())
	if not self.__running then return end
	self.__running = false
	
	self.__chaseTime = nil
	self.__comPathFind:Open(false)
	self.__comPathFind:StopPathFind()
	
	local _actionManagerSelf = self.__actionManagerSelf
	_actionManagerSelf:Exit(_actionManagerSelf:GetCurrentMoveState(), false)
	local _turnAction = _actionManagerSelf.currentStates[TurnActionState:GetId()]
	if _turnAction then
		_actionManagerSelf:Exit(_turnAction, false)
	end
	
	self.__actionManagerTarget = nil
end

------------------------------------------------------------------------------------------------------------------------

---获取目标点
---@public
---@param _v3Receiver Vector3 用于接收结果的vec3
---@return boolean 是否成功获取到目标点
function BehavState_ChaseTarget:GetTargetPos(_v3Receiver)
	if not self.__actionManagerTarget then return false end

	if self:CheckHitBlockType(BattleUnitAiHitBlockType.Edge) or (self.__chaseTime and TimeUtils.battleNow(self:GetBattleId()) - self.__chaseTime > 4500) then

		local _actionManager = self.__actionManagerSelf
		
		local _targetPos = self.__comPathFind and self.__comPathFind:GetCurNexPoint()
		if not _targetPos then
			_targetPos = self.__actionManagerTarget:GetPosition()
		end

		if self.__actionManagerSelf:GetUnit():GetNetId() == ActionStateManage.checkNetId then
			LogTools.LogByLevel(LogLevel.logErr, "CheckAiMove", "BehavState_ChaseTarget:GetTargetPos hit", "_targetPos", _targetPos, "netId", self.__unitSelf:GetNetId(), "self:CheckHitBlockType(BattleUnitAiHitBlockType.Edge)", self:CheckHitBlockType(BattleUnitAiHitBlockType.Edge))
		end
		local _qTargetRotation = self:GetBattleRoom().quaternionPool:Pop()
		local _v3TargetDir = self:GetBattleRoom().vector3Pool:Pop(_targetPos - _actionManager:GetPosition())
		Quaternion.LookRotation(_v3TargetDir, Vector3.up_global(), _qTargetRotation, self:GetBattleRoom().vector3Pool)
		local _v3Euler = self:GetBattleRoom().vector3Pool:Pop()
		Quaternion.ToEulerAngles(_qTargetRotation, _v3Euler)
		_v3Euler.z = 0
		Quaternion.FromEuler(_v3Euler, _qTargetRotation)
		--LogTools.LogByLevel(LogLevel.logErr, "BehavState_ChaseTarget:GetTargetPos hit", "_v3Euler", _v3Euler, "netId", self.__unitSelf:GetNetId())
		local _vec = _actionManager:GetVelocity()
		local _length = Vector3.Length(_vec)
		Vector3.MulNumber(_v3TargetDir, _length)
		_actionManager:SetVelocity(_v3TargetDir)
		_actionManager:SetRotation(_qTargetRotation)
		self:GetBattleRoom().quaternionPool:Push(_qTargetRotation)
		self:GetBattleRoom().vector3Pool:Push(_v3TargetDir)
		self:GetBattleRoom().vector3Pool:Push(_v3Euler)

		local battleUnitMoveOutput = {}
		battleUnitMoveOutput.v = _actionManager:GetVelocity()
		battleUnitMoveOutput.position = _actionManager:GetPosition()
		battleUnitMoveOutput.rotation = _actionManager:GetRotation()
		battleUnitMoveOutput.accelerate = Vector3.zero_global()
		battleUnitMoveOutput.moveParam = Vector3.zero_global()
		battleUnitMoveOutput.cameraParam = Vector3.zero_global()
		battleUnitMoveOutput.type = 100

		local battleUnitMoveData = {}
		battleUnitMoveData.netId = self.__unitSelf:GetNetId()
		battleUnitMoveData.objId = self.__unitSelf:GetCurrentHeroObjectId()
		battleUnitMoveData.moveInfo = battleUnitMoveOutput

		self:GetBattleRoom().outputDataSource:AddBattleUnitMoveData(battleUnitMoveData)
		self.__chaseTime = TimeUtils.battleNow(self:GetBattleId())

		if self:CheckHitBlockType(BattleUnitAiHitBlockType.Edge) then
			--self.__forceRefindPath = true
			self:ReleaseHitBlockParams()
			return false
		end
	else
		if self.__behavCom:GetAiLevel() == BattleUnitAiLevel.Normal then
			Vector3.Copy(self.__v3LastTargetPos, self.__actionManagerTarget:GetPosition())
		else
			local _v3TargetForward = self.__behavCom:GetBattleRoom().vector3Pool:Pop()
			self.__unitSelf:GetBattleRoom().transUtil:GetUnitForwardDir(self.__actionManagerTarget:GetUnit():GetNetId(), _v3TargetForward)
			Vector3.MulNumber(_v3TargetForward, 100, _v3TargetForward)
			Vector3.Add(self.__actionManagerTarget:GetPosition(), _v3TargetForward, self.__v3LastTargetPos)
			self.__behavCom:GetBattleRoom().vector3Pool:Push(_v3TargetForward)
		end
		Vector3.Copy(_v3Receiver, self.__v3LastTargetPos)

	end

	self:ReleaseHitBlockParams()
	return true
	
end

---检查是否需要重新寻路
---@public
---@return boolean
function BehavState_ChaseTarget:CheckRefindPath(_deltaTime)
	if not self:__CheckReFindPathTime(_deltaTime) then return false end
	if self.__forceRefindPath then
		self.__forceRefindPath = false
		return true 
	end

	local _bRet = false
	local _v3NewPos = self.__behavCom:GetBattleRoom().vector3Pool:Pop()
	if self:GetTargetPos(_v3NewPos) and Vector3.SqrDistance(_v3NewPos, self.__v3LastTargetPos) > self.__reFindPathDis then
		_bRet = true
	end
	self.__behavCom:GetBattleRoom().vector3Pool:Push(_v3NewPos)
	return _bRet
end

---寻路移动结束时的回调
---@public
function BehavState_ChaseTarget:FindPathCallBack()
	if not self.__behavCom:GetBattleRoom().behaviorProcessor:CheckMonsAIHost() then return end
	self.__behavCom:GetBattleRoom().behaviorManager:PostTaskListenEvent(self.__behavCom:GetTreeIndex(), LuaBehav_Define_TaskListenEnum.ChaseTargetEnd)
end

------------------------------------------------------------------------------------------------------------------------
---@public
---@return boolean
function BehavState_ChaseTarget:CheckRunning()
	return self.__running
end

---@public
function BehavState_ChaseTarget:Clear()
	self:Stop()
	self.__behavCom = nil
	self.__actionManagerTarget = nil
	self.__running = nil
	self:__Clear()
end

return BehavState_ChaseTarget
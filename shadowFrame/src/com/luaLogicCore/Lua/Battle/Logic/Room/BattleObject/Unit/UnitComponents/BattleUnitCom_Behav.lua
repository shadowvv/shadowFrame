---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/02/21 11:03
--- Describe: 行为树组件
---

require "Battle/Logic/Room/BattleObject/BehavState/BehavState_Patrol"
require "Battle/Logic/Room/BattleObject/BehavState/BehavState_SelectTarget"
require "Battle/Logic/Room/BattleObject/BehavState/BehavState_ChaseTarget"
require "Battle/Logic/Room/BattleObject/BehavState/BehavState_EscapeTarget"
require "Battle/Logic/Room/BattleObject/BehavState/BehavState_MoveTowards"
require "Battle/Logic/Room/BattleObject/BehavState/BehavState_MoveTowards_2"
require "Battle/Logic/Room/BattleObject/BehavState/BehavState_FaceTarget"
require "Battle/Logic/Room/BattleObject/BehavState/BehavState_ChaseSubordinate"
require "Battle/Logic/Room/BattleObject/BehavState/BehavState_MoveNavPoints"
require "Battle/Logic/Room/BattleObject/BehavState/BehavState_ForceFaceTarget"
require "Battle/Logic/Room/BattleObject/BehavState/BehavState_FixHeight"

---单位AI级别
---先简单整一下，占个坑，回头再考虑具体扩展
---@class BattleUnitAiLevel : table
BattleUnitAiLevel = {
	Normal = 1,
	NoAtk = 2,
}

---单位行为类型
---@class BattleUnitBehavType : table
BattleUnitBehavType = {
	SelectTarget = 1,
	Patrol = 2,
	ChaseTarget = 3,
	EscapeTarget = 4,
	MoveTowards = 5,
	FaceTarget = 6,
	ChaseSubordinate = 7,
	MoveTowards_2 = 8,
	MoveNavPoints = 9,
	ForceFaceTarget = 10,
	FixHeight = 11,
}

---@class BattleUnitCom_Behav : BattleUnitComponentBase
BattleUnitCom_Behav = class(BattleUnitComponentBase, "BattleUnitCom_Behav")
function BattleUnitCom_Behav:ctor(_data)
	self:__ctor(BattleUnitComponentType.Behav)
end

---@public
---@param _battleUnit BattleUnitBase
function BattleUnitCom_Behav:Init(_battleUnit)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Behav", "Init start")
	self:__Init(_battleUnit)
	self:__InitConfigs()
	self.__paused = false
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Behav", "Init end", "self.__behavIndex", self.__behavIndex, "netId", self.__netId)
end

---@private
function BattleUnitCom_Behav:__InitConfigs()
	---@private
	self.__aiLevel = BattleUnitAiLevel.Normal
	---@private
	self.__atkAngle = 90
	---@private
	self.__atkCheckDot = 1

	---@type MonsterInstance
	local _instanceXls = self.__unit:GetDataInstanceXls()
	if not _instanceXls then return end

	local _behavTreeName = _instanceXls.behavTree
	if not _behavTreeName then return end

	--_behavTreeName = "MonsterBehav/TestMonsterLocal"
	local _behavTree = LuaBehav_ConfigDataRequirer.GetConfig(_behavTreeName)
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "_behavTreeName", _behavTreeName, "netId", self.__netId, "instanceId", _instanceXls.id, "_behavTree", _behavTree)
	end
	if not _behavTree then return end

	local _strList = LuaTool:Split(_behavTreeName,"/")
	---@private
	self.__behavIndex = self:GetBattleRoom().behaviorManager:AddBehavTree(_strList[#_strList], _behavTree, LuaBehav_Define_TreeBelongType.Unit, self.__netId)

	---@private
	self.__aiLevel = BattleUnitAiLevel.Normal
	
	
	---@private
	self.__atkAngle = _instanceXls.attackRangeAngle or 90
	---@private
	self.__atkCheckDot = math.abs(math.sin(math.rad(self.__atkAngle)) * 0.5)
end

---@private
function BattleUnitCom_Behav:CheckLog()
	return false
	--return self.__netId == 2
end
------------------------------------------------------------------------------------------------------------------------
---@public
function BattleUnitCom_Behav:StartAi()
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Behav", "StartAi", "self.__behavIndex", self.__behavIndex, "netId", self.__netId)
	end
	if not self.__behavIndex then return end
	self:GetBattleRoom().behaviorManager:AwakeBehavTree(self.__behavIndex, self.__unit:GetUnitType())
end

---@public
function BattleUnitCom_Behav:Pause()
	if not self.__behavIndex then return end
	self:GetBattleRoom().behaviorManager:PauseBehavTree(self.__behavIndex)
	self.__paused = true
	
	local _actionManager = self.__actionManager
	_actionManager:Exit(_actionManager:GetCurrentMoveState(), false)
	_actionManager:Exit(_actionManager.currentStates[TurnActionState:GetId()], false)
end

---@public
function BattleUnitCom_Behav:Resume()
	if not self.__behavIndex then return end
	self:GetBattleRoom().behaviorManager:ResumeBehavTree(self.__behavIndex)
	self.__paused = false
end

---@public
function BattleUnitCom_Behav:GetTreeIndex()
	if not self.__behavIndex then return end
	return self.__behavIndex
end

-- 
function BattleUnitCom_Behav:CheckAIPaused()
	return self.__paused
end

---设置AI等级
---@public
---@param _level BattleUnitAiLevel
function BattleUnitCom_Behav:SetAiLevel(_level)
	self.__aiLevel = _level
end

---@public
---@return BattleUnitAiLevel
function BattleUnitCom_Behav:GetAiLevel()
	return self.__aiLevel
end

---@public
function BattleUnitCom_Behav:GetAtkAngle()
	return self.__atkAngle
end

---@public
function BattleUnitCom_Behav:GetAtkCheckDot()
	return self.__atkCheckDot
end

------------------------------------------------------------------------------------------------------------------------

---施放技能
---@public
function BattleUnitCom_Behav:CastSkill(_skillId)
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "CastSkill", "_skillId", _skillId, "netId", self.__netId)
	end
	self.__unit:GetActionManager():CastSkill(_skillId)
end

---开始巡逻
---@public
---@param _dis number 巡逻半径
function BattleUnitCom_Behav:StartPatrol(_centerOnBorn)
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StartPatrol", "netId", self.__netId, "_centerOnBorn", _centerOnBorn)
	end
	local _patrol = self:GetBehavState_Patrol()
	_patrol:Start(_centerOnBorn)
end

---结束巡逻
---@public
function BattleUnitCom_Behav:StopPatrol()
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StopPatrol", "netId", self.__netId)
	end
	if not self.__patrol then return end
	self.__patrol:Stop()
end

---开始靠近目标
---@public
function BattleUnitCom_Behav:StartChaseTarget(_targetNetId)
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StartChaseTarget", "netId", self.__netId)
	end
	local _chaseTarget = self:GetBehavState_ChaseTarget()
	_chaseTarget:Start(_targetNetId)
end

---结束靠近目标
---@public
function BattleUnitCom_Behav:StopChaseTarget()
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StopChaseTarget", "self.__chaseTarget", self.__chaseTarget, "netId", self.__netId)
	end
	if not self.__chaseTarget then return end
	self.__chaseTarget:Stop()
end

---开始远离目标
---@public
function BattleUnitCom_Behav:StartEscapeTarget(_targetNetId)
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StartEscapeTarget", "netId", self.__netId)
	end
	local _chaseTarget = self:GetBehavState_EscapeTarget()
	_chaseTarget:Start(_targetNetId)
end

---结束远离目标
---@public
function BattleUnitCom_Behav:StopEscapeTarget()
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StopEscapeTarget", "netId", self.__netId)
	end
	if not self.__escapeTarget then return end
	self.__escapeTarget:Stop()
end

---开始转向目标
---@public
function BattleUnitCom_Behav:StartFaceTarget(_targetNetId)
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StartFaceTarget", "netId", self.__netId)
	end
	local _faceTarget = self:GetBehavState_FaceTarget()
	_faceTarget:Start(_targetNetId)
	
	local _startFaceTarget = {}
	_startFaceTarget.netId = self:GetUnit():GetNetId()
	_startFaceTarget.objId = self:GetUnit():GetCurrentHeroObjectId()
	self:GetBattleRoom().outputDataSource:StartFaceTarget_L2V(_startFaceTarget)
end

---结束转向目标
---@public
function BattleUnitCom_Behav:StopFaceTarget()
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StopFaceTarget", "self.__faceTarget", self.__faceTarget, "netId", self.__netId)
	end
	if not self.__faceTarget then return end
	self.__faceTarget:Stop()
	
	local _stopFaceTarget = {}
	_stopFaceTarget.netId = self:GetUnit():GetNetId()
	_stopFaceTarget.objId = self:GetUnit():GetCurrentHeroObjectId()
	self:GetBattleRoom().outputDataSource:StopFaceTarget_L2V(_stopFaceTarget)
end

---开始强制转向目标
---@public
---@param _yawSpeed number 水平角速度（度/秒）
---@param _pitchSpeed number 竖直角速度（度/秒）
function BattleUnitCom_Behav:StartForceFaceTarget(_yawSpeed, _pitchSpeed)
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StartForceFaceTarget", "netId", self.__netId, "_yawSpeed", _yawSpeed, "_pitchSpeed", _pitchSpeed)
	end
	local _forceFaceTarget = self:GetBehavState_ForceFaceTarget()
	_forceFaceTarget:Start(self:GetTarget(), _yawSpeed, _pitchSpeed)
end

---结束强制转向目标
---@public
function BattleUnitCom_Behav:StopForceFaceTarget()
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StopForceFaceTarget", "self.__faceTarget", self.__faceTarget, "netId", self.__netId)
	end
	if not self.__forceFaceTarget then return end
	self.__forceFaceTarget:Stop()
end

---开始跟随召唤者
---@public
---@param _chaseType LuaBehav_Define_ChaseSubordinateType
---@param _posShift Vector3
function BattleUnitCom_Behav:StartChaseSubordinate(_chaseType, _posShift)
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StartChaseSubodinate", "netId", self.__netId, "_posShift", _posShift)
	end
	local _chaseSubordinate = self:GetBehavState_ChaseSubordinate()
	_chaseSubordinate:Start(_chaseType, _posShift)
end

---结束跟随召唤者
---@public
function BattleUnitCom_Behav:StopChaseSubordinate()
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StopChaseSubordinate", "netId", self.__netId)
	end
	if not self.__chaseSubordinate then return end
	self.__chaseSubordinate:Stop()
end

---开始指定移动
---@public
function BattleUnitCom_Behav:StartMoveTowards(_spaceType, _posShift, _stopWhenArrive)
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StartMoveTowards", "netId", self.__netId)
	end
	local _moveTowards = self:GetBehavState_MoveTowards()
	_moveTowards:Start(_spaceType, _posShift, _stopWhenArrive)
end

---结束指定移动
---@public
function BattleUnitCom_Behav:StopMoveTowards()
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StopMoveTowards", "netId", self.__netId)
	end
	if not self.__moveTowards then return end
	self.__moveTowards:Stop()
end

---开始平移行为
---@public
function BattleUnitCom_Behav:StartMoveTowards_2(_posShift, _faceTarget)
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StartMoveTowards_2", "netId", self.__netId)
	end
	local _moveTowards_2 = self:GetBehavState_MoveTowards_2()
	_moveTowards_2:Start(_posShift, _faceTarget, self:GetTarget())
end

---结束平移行为
---@public
function BattleUnitCom_Behav:StopMoveTowards_2()
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StopMoveTowards_2", "netId", self.__netId)
	end
	if not self.__moveTowards_2 then return end
	self.__moveTowards_2:Stop()
end

---开始导航点移动
---@public
---@param _param LuaBehav_MonsMoveNavPointsParam
function BattleUnitCom_Behav:StartMoveNavPoints(_pointList, _loop)
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StartMoveNavPoints", "netId", self.__netId)
	end
	local _moveNavPoints = self:GetBehavState_MoveNavPoints()
	_moveNavPoints:Start(_pointList, _loop)
end

---结束导航点移动
---@public
function BattleUnitCom_Behav:StopMoveNaPoints()
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StopMoveNaPoints", "netId", self.__netId)
	end
	if not self.__moveNavPoints then return end
	self.__moveNavPoints:Stop()
end

---开始调整高度
---@public
function BattleUnitCom_Behav:StartFixHeight()
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StartFixHeight", "netId", self.__netId)
	end
	local _fixHeight = self:GetBehavState_FixHeight()
	_fixHeight:Start()
end

---结束调整高度
---@public
function BattleUnitCom_Behav:StopFixHeight()
	if self:CheckLog() then
		LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitCom_Behav", "StopFixHeight", "netId", self.__netId)
	end
	if not self.__fixHeight then return end
	self.__fixHeight:Stop()
end

---选择目标
---@public
function BattleUnitCom_Behav:SelectTarget(_param)
	local _selectTarget = self:GetBehavState_SelectTarget()
	_selectTarget:Select(_param)
end

---获取当前目标
---@public
function BattleUnitCom_Behav:GetTarget()
	if not self.__selectTarget then return nil end
	return self.__selectTarget:GetTargetNetId()
end

---设置当前目标
---@public
function BattleUnitCom_Behav:SetTargetNetId(_netId)
	local _selectTarget = self:GetBehavState_SelectTarget()
	_selectTarget:SetTargetNetId(_netId)
end

---当前目标在警戒范围内
function BattleUnitCom_Behav:CheckTargetInAlertRange(_scale)
	if not self.__selectTarget then return false end
	return self.__selectTarget:CheckTargetInAlertRange(_scale)
end

---当前目标在攻击范围内
function BattleUnitCom_Behav:CheckTargetInAtkRange(_scale)
	if not self.__selectTarget then return false end
	return self.__selectTarget:CheckTargetInAtkRange(_scale)
end

---当前目标在逃离范围内
function BattleUnitCom_Behav:CheckTargetInEscapeRange(_scale)
	if not self.__selectTarget then return false end
	return self.__selectTarget:CheckTargetInEscapeRange(_scale)
end

---当前目标在攻击角度内
function BattleUnitCom_Behav:CheckTargetInAtkAngle(_axisType)
	if not self.__selectTarget then return false end
	return self.__selectTarget:CheckTargetInAtkAngle(_axisType)
end
------------------------------------------------------------------------------------------------------------------------

---@public
---@return BehavState_Patrol
function BattleUnitCom_Behav:GetBehavState_Patrol()
	if not self.__patrol then
		---@type BehavState_Patrol
		self.__patrol = BehavState_Patrol.New()
		self.__patrol:Init(self)
	end
	return self.__patrol
end

---@public
---@return BehavState_SelectTarget
function BattleUnitCom_Behav:GetBehavState_SelectTarget()
	if not self.__selectTarget then
		---@type BehavState_SelectTarget
		self.__selectTarget = BehavState_SelectTarget.New()
		self.__selectTarget:Init(self)
	end
	return self.__selectTarget
end

---@public
---@return BehavState_ChaseTarget
function BattleUnitCom_Behav:GetBehavState_ChaseTarget()
	if not self.__chaseTarget then
		---@type BehavState_ChaseTarget
		self.__chaseTarget = BehavState_ChaseTarget.New()
		self.__chaseTarget:Init(self)
	end
	return self.__chaseTarget
end

---@public
---@return BehavState_EscapeTarget
function BattleUnitCom_Behav:GetBehavState_EscapeTarget()
	if not self.__escapeTarget then
		---@type BehavState_EscapeTarget
		self.__escapeTarget = BehavState_EscapeTarget.New()
		self.__escapeTarget:Init(self)
	end
	return self.__escapeTarget
end

---@public
---@return BehavState_MoveTowards
function BattleUnitCom_Behav:GetBehavState_MoveTowards()
	if not self.__moveTowards then
		---@type BehavState_MoveTowards
		self.__moveTowards = BehavState_MoveTowards.New()
		self.__moveTowards:Init(self)
	end
	return self.__moveTowards
end

---@public
---@return BehavState_MoveTowards_2
function BattleUnitCom_Behav:GetBehavState_MoveTowards_2()
	if not self.__moveTowards_2 then
		---@type BehavState_MoveTowards_2
		self.__moveTowards_2 = BehavState_MoveTowards_2.New()
		self.__moveTowards_2:Init(self)
	end
	return self.__moveTowards_2
end

---@public
---@return BehavState_FaceTarget
function BattleUnitCom_Behav:GetBehavState_FaceTarget()
	if not self.__faceTarget then
		---@type BehavState_FaceTarget
		self.__faceTarget = BehavState_FaceTarget.New()
		self.__faceTarget:Init(self)
	end
	return self.__faceTarget
end

---@public
---@return BehavState_ForceFaceTarget
function BattleUnitCom_Behav:GetBehavState_ForceFaceTarget()
	if not self.__forceFaceTarget then
		---@type BehavState_ForceFaceTarget
		self.__forceFaceTarget = BehavState_ForceFaceTarget.New()
		self.__forceFaceTarget:Init(self)
	end
	return self.__forceFaceTarget
end

---@public
---@return BehavState_ChaseSubordinate
function BattleUnitCom_Behav:GetBehavState_ChaseSubordinate()
	if not self.__chaseSubordinate then
		---@type BehavState_ChaseSubordinate
		self.__chaseSubordinate = BehavState_ChaseSubordinate.New()
		self.__chaseSubordinate:Init(self)
	end
	return self.__chaseSubordinate
end

---@public
---@return BehavState_MoveNavPoints
function BattleUnitCom_Behav:GetBehavState_MoveNavPoints()
	if not self.__moveNavPoints then
		---@type BehavState_MoveNavPoints
		self.__moveNavPoints = BehavState_MoveNavPoints.New()
		self.__moveNavPoints:Init(self)
	end
	return self.__moveNavPoints
end

---@public
---@return BehavState_FixHeight
function BattleUnitCom_Behav:GetBehavState_FixHeight()
	if not self.__fixHeight then
		---@type BehavState_FixHeight
		self.__fixHeight = BehavState_FixHeight.New()
		self.__fixHeight:Init(self)
	end
	return self.__fixHeight
end
------------------------------------------------------------------------------------------------------------------------
---@public
---@param _behavType BattleUnitBehavType
function BattleUnitCom_Behav:CheckBehavRunning(_behavType)
	if _behavType == BattleUnitBehavType.SelectTarget then
		--选择目标是瞬时行为
		return false
	elseif _behavType == BattleUnitBehavType.Patrol then
		return self.__patrol and self.__patrol:CheckRunning()
	elseif _behavType == BattleUnitBehavType.ChaseTarget then
		return self.__chaseTarget and self.__chaseTarget:CheckRunning()
	elseif _behavType == BattleUnitBehavType.EscapeTarget then
		return self.__escapeTarget and self.__escapeTarget:CheckRunning()
	elseif _behavType == BattleUnitBehavType.MoveTowards then
		return self.__moveTowards and self.__moveTowards:CheckRunning()
	elseif _behavType == BattleUnitBehavType.FaceTarget then
		return self.__faceTarget and self.__faceTarget:CheckRunning()
	elseif _behavType == BattleUnitBehavType.ChaseSubordinate then
		return self.__chaseSubordinate and self.__chaseSubordinate:CheckRunning()
	elseif _behavType == BattleUnitBehavType.MoveTowards_2 then
		return self.__moveTowards_2 and self.__moveTowards_2:CheckRunning()
	elseif _behavType == BattleUnitBehavType.MoveNavPoints then
		return self.__moveNavPoints and self.__moveNavPoints:CheckRunning()
	elseif _behavType == BattleUnitBehavType.ForceFaceTarget then
		return self.__forceFaceTarget and self.__forceFaceTarget:CheckRunning()
	elseif _behavType == BattleUnitBehavType.FixHeight then
		return self.__fixHeight and self.__fixHeight:CheckRunning()
	end
	
	return false
end

------------------------------------------------------------------------------------------------------------------------
---@public
function BattleUnitCom_Behav:OnDead()
	if self.__behavIndex then
		self:GetBattleRoom().behaviorManager:RemoveBehavTree(self.__behavIndex)
		self.__behavIndex = nil
	end
end

---@public
function BattleUnitCom_Behav:OnUnitCreateEvent(_netId)
	if self.__selectTarget then
		self.__selectTarget:OnUnitCreateEvent(_netId)
	end
end

---@public
function BattleUnitCom_Behav:OnUnitDeadEvent(_netId)
	if self.__selectTarget then
		self.__selectTarget:OnUnitDeadEvent(_netId)
	end
end

---@public
function BattleUnitCom_Behav:Clear()
	self:OnDead()
	
	if self.__patrol then
		self.__patrol:Clear()
	end
	self.__patrol = nil

	if self.__selectTarget then
		self.__selectTarget:Clear()
	end
	self.__selectTarget = nil
	
	if self.__chaseTarget then
		self.__chaseTarget:Clear()
	end
	self.__chaseTarget = nil
	
	if self.__escapeTarget then
		self.__escapeTarget:Clear()
	end
	self.__escapeTarget = nil
	
	if self.__moveTowards then
		self.__moveTowards:Clear()
	end
	self.__moveTowards = nil
	
	if self.__faceTarget then
		self.__faceTarget:Clear()
	end
	self.__faceTarget = nil
	
	if self.__forceFaceTarget then
		self.__forceFaceTarget:Clear()
	end
	self.__forceFaceTarget = nil

	if self.__chaseSubordinate then
		self.__chaseSubordinate:Clear()
	end
	self.__chaseSubordinate = nil
	
	if self.__moveNavPoints then
		self.__moveNavPoints:Clear()
	end
	self.__moveNavPoints = nil
	
	if self.__fixHeight then
		self.__fixHeight:Clear()
	end
	self.__fixHeight = nil
	
	self.__atkAngle = nil
	self.__atkCheckDot = nil
	
	self:__Clear()
end

return BattleUnitCom_Behav
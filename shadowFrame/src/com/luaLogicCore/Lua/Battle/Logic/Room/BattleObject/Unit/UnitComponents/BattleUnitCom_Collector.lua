---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/11/01 15:46
--- Describe: 采集
---

---@class BattleUnitCollectState : table
BattleUnitCollectState = {
	None = 1,
	WaitCollect = 2,
	Collecting = 3,
}

---@class BattleUnitCom_Collector : BattleUnitComponentBase
BattleUnitCom_Collector = class(BattleUnitComponentBase, "BattleUnitCom_Collector")
function BattleUnitCom_Collector:ctor(_data)
	self:__ctor(BattleUnitComponentType.Collector)
end

---@public
---@param _battleUnit BattleUnitBase
function BattleUnitCom_Collector:Init(_battleUnit)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Collector", "Init start")
	self:__Init(_battleUnit)

	---需要关注的可交互对象objId列表
	---@private
	---@type boolean[]
	self.__caringObjIdDic = {}
	---可以自动进行交互的对象objId列表
	---@private
	---@type boolean[]
	self.__autoHandleObjIdDic = {}
	---当前正在采集的对象objId
	---@private
	---@type number
	self.__collectingObjId = -1
	---当前正在采集的对象
	---@private
	---@type BattleObjectBase
	self.__collectingObj = nil
	---可以直接进行采集的对象objId
	---@private
	---@type BattleObjectBase
	self.__directCollectObjId = nil
	---当前采集状态
	---@private
	self.__collectState = BattleUnitCollectState.None
	---打断标记，当前只有受击的时候会更改
	---@private
	self.__abortTag = false
	---开始标记，收到的开始操作
	---@private
	self.__startTag = false
	---采集开始时间
	---@private
	self.__collectStartTime = nil
	---采集需要的总时间
	---@private
	self.__collectTotalTime = nil
	---本次状态改变时间
	---@private
	self.__stateChangeTime = 0
	---当前采集目标的读条最大距离(平方)
	---@private
	---@type number
	self.__collectingMaxDis = 0
	---当前状态的总时间 -1为不限时
	---@private
	self.__stateTotalTime = -1
	---当前状态的继承时间
	---@private
	self.__stateInheritTime = 0
	---当前等待采集的目标netId
	---@private
	self.__waitCollectTargetNetId = -1
	---当前等待采集的目标objId
	---@private
	self.__waitCollectTargetObjId = -1
	
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Collector", "Init end", "netId", self.__netId)
end

---尝试添加关注对象
---有可能重复
---@public
---@param _battleObject BattleObjectBase
function BattleUnitCom_Collector:Add(_battleObject)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Collector", "Add", "_battleObject", _battleObject:GetObjectId())
	local _objId = _battleObject:GetObjectId()
	if self.__caringObjIdDic[_objId] then return end
	self.__caringObjIdDic[_objId] = true
	---@type Gadget
	local _xls = _battleObject:GetDataInstanceXls()
	if _xls.handleType == 0 then
		self.__autoHandleObjIdDic[_objId] = true
	end
end

---移除关注对象
---不管是否正被采集，都会移除
---正在被采集的对象会被记录到 collectingObj
---@public
---@param _battleObject BattleObjectBase
function BattleUnitCom_Collector:Remove(_battleObject)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Collector", "Remove", "_battleObject", _battleObject:GetObjectId())
	local _objId = _battleObject:GetObjectId()
	self.__caringObjIdDic[_objId] = nil
	self.__autoHandleObjIdDic[_objId] = nil
end

------------------------------------------------------------------------------------------------------------------------
---@public
function BattleUnitCom_Collector:Update(_dt)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Collector", "Update", "self.__collectState", LogTools.GetEnumTableDesc(BattleUnitCollectState, self.__collectState))
	if self:__CheckCollectState(BattleUnitCollectState.Collecting) then
		self.__collectingObj = self:GetBattleRoom().battleObjectManager:GetObject(self.__collectingObjId)
		---暂定采集中只会切换到none状态
		if self:__CheckCollectFailed() then
			self:TrigCollectFailed(_dt)
		elseif self:__CheckCollectSuccess() then
			self:TrigCollectSuccess(_dt)
		end
	elseif self:__CheckCollectState(BattleUnitCollectState.WaitCollect) then
		---等待采集时，可能切换到采集状态，也可能切换回none状态
		if self:__CheckBeginCollect() then
			if self:__CheckWaitCollectTargetChange() then --采集目标发生变化
				if -1 == self.__waitCollectTargetNetId then --采集目标丢失
					self:__ChangeState(BattleUnitCollectState.None, BattleUnitCom_Collector.__EnterNoneStateType.Normal)
				else --采集目标更换
					self:SyncStateChange()
					self:TrigBeginCollect()
				end
			else
				self:TrigBeginCollect()
			end
		elseif not self:__CheckCollectAvailable() then
			self:__ChangeState(BattleUnitCollectState.None, BattleUnitCom_Collector.__EnterNoneStateType.Normal)
		elseif self:__CheckWaitCollectTargetChange() then
			if -1 == self.__waitCollectTargetNetId then --采集目标丢失
				self:__ChangeState(BattleUnitCollectState.None, BattleUnitCom_Collector.__EnterNoneStateType.Normal)
			else --采集目标更换
				self:SyncStateChange()
			end	
		end
	elseif self:__CheckCollectState(BattleUnitCollectState.None) then
		if self:__CheckCollectAvailable() then
			self:TrigWaitCollect()
		end
	end
	
	self.__startTag = false
	self.__abortTag = false
	self.__directCollectObjId = -1
end

---@public
function BattleUnitCom_Collector:TrigCollectFailed(_dt)
	---@type BattleUnitCom_TagSelector
	local _tagCom = self.__collectingObj:GetParentUnit():GetComponent(BattleUnitComponentType.TagSelector)
	_tagCom:SetTag(BattleUnitTagEnum.BeingCollected, false)
	---@type Gadget
	local _gadgetXls = self.__collectingObj:GetDataInstanceXls()
	--LogTools.LogByLevel(LogLevel.log, "checkCollector", "_gadgetXls", _gadgetXls.id, "_gadgetXls.loadingCarryOn", _gadgetXls.loadingCarryOn)
	if _gadgetXls.loadingCarryOn == 1 then
		_tagCom:SetTag(BattleUnitTagEnum.CollectInheritTime, TimeUtils.battleNow(self:GetBattleId()) - self.__collectStartTime + self.__stateInheritTime)
	end
	
	self:__ChangeState(BattleUnitCollectState.None, BattleUnitCom_Collector.__EnterNoneStateType.Failed)
end

---@public
function BattleUnitCom_Collector:TrigCollectSuccess(_dt)
	---@type Gadget
	local _xls = self.__collectingObj:GetDataInstanceXls()
	---@type BattleUnitCom_TagSelector
	local _tagCom = self.__collectingObj:GetParentUnit():GetComponent(BattleUnitComponentType.TagSelector)
	_tagCom:SetTag(BattleUnitTagEnum.SceneObjState, _xls.gadgetUnavailable)
	_tagCom:SetTag(BattleUnitTagEnum.BeingCollected, false)
	_tagCom:SetTag(BattleUnitTagEnum.CollectorNetId, self:GetUnit():GetNetId())
	_tagCom:SetTag(BattleUnitTagEnum.CollectInheritTime, 0)
	
	self:GetUnit():GetBattleRoom().battleLogicEventService:OnTriggerCollectSuccessEvent(self:GetUnit():GetNetId(), self:GetUnit():GetCurrentHeroObjectId(), self.__collectingObj:GetParentUnit():GetNetId(), self.__collectingObj:GetObjectId())
	self:__ChangeState(BattleUnitCollectState.None, BattleUnitCom_Collector.__EnterNoneStateType.Success)
end

---@public
function BattleUnitCom_Collector:TrigWaitCollect()
	local _targetObjId = self:__GetCollectTarget()
	local _targetObj = self:GetBattleRoom().battleObjectManager:GetObject(_targetObjId)
	self.__waitCollectTargetNetId = _targetObj:GetParentUnit():GetNetId()
	self.__waitCollectTargetObjId = _targetObjId
	self:__ChangeState(BattleUnitCollectState.WaitCollect)
end

---@public
function BattleUnitCom_Collector:TrigBeginCollect()
	self.__collectingObjId = self:__GetCollectTarget()
	self.__collectingObj = self:GetBattleRoom().battleObjectManager:GetObject(self.__collectingObjId)
	if not self.__collectingObj then
		self:__ChangeState(BattleUnitCollectState.None)
	else
		self:__ChangeState(BattleUnitCollectState.Collecting)
	end
end
------------------------------------------------------------------------------------------------------------------------

---@private
---@param _enterType number 进入none状态的类型，BattleUnitCom_Collector.__EnterNoneStateType
function BattleUnitCom_Collector:__OnEnterCollectNone(_enterType)
	self.__stateTotalTime = -1
	self.__stateInheritTime = 0
	self.__waitCollectTargetNetId = -1
	self.__waitCollectTargetObjId = -1
	if _enterType == BattleUnitCom_Collector.__EnterNoneStateType.Normal then
		self:SyncStateChange()
	elseif _enterType == BattleUnitCom_Collector.__EnterNoneStateType.Success then
		self:SyncHandleResult(_enterType)
		self:SyncStateChange()
	elseif _enterType == BattleUnitCom_Collector.__EnterNoneStateType.Failed then
		self:SyncHandleResult(_enterType)
		self:SyncStateChange()
	end
	self.__collectingObjId = -1
	self.__collectingObj = nil
end

---@private
function BattleUnitCom_Collector:__OnEnterCollecting()
	self.__collectStartTime = TimeUtils.battleNow(self:GetBattleId())
	---@type Gadget
	local _xls = self.__collectingObj:GetDataInstanceXls()
	self.__collectTotalTime = _xls.loadingTime * 1000
	self.__collectingMaxDis = _xls.loadingRange * _xls.loadingRange
	
	---@type BattleUnitCom_TagSelector
	local _tagCom = self.__collectingObj:GetParentUnit():GetComponent(BattleUnitComponentType.TagSelector)
	_tagCom:SetTag(BattleUnitTagEnum.BeingCollected, true)
	
	self.__stateTotalTime = _xls.loadingTime
	self.__stateInheritTime = _tagCom:GetTag(BattleUnitTagEnum.CollectInheritTime)
	--LogTools.LogByLevel(LogLevel.log, "checkCollector", "self.__collectStartTime", self.__collectStartTime, "self.__stateInheritTime", self.__stateInheritTime, "self.__stateTotalTime", self.__stateTotalTime)
	self:SyncStateChange()
end

---@private 
function BattleUnitCom_Collector:__OnEnterWaitCollecting()
	self.__stateTotalTime = -1
	self.__stateInheritTime = 0
	if self:__CheckBeginCollect() then return end
	self:SyncStateChange()
end

---切换采集状态
---@private
---@param _collectState BattleUnitCollectState
---@param _param table 切换状态可能带有参数, 类型不定
function BattleUnitCom_Collector:__ChangeState(_collectState, _param)
	if self:__CheckCollectState(_collectState) then return end
	self.__collectState = _collectState
	if _collectState == BattleUnitCollectState.None then
		self:__OnEnterCollectNone(_param)
	elseif _collectState == BattleUnitCollectState.WaitCollect then
		self:__OnEnterWaitCollecting(_param)
	elseif _collectState == BattleUnitCollectState.Collecting then
		self:__OnEnterCollecting(_param)
	end
end

------------------------------------------------------------------------------------------------------------------------
---@private
---@param _state BattleUnitCollectState
---@return boolean
function BattleUnitCom_Collector:__CheckCollectState(_state)
	return self.__collectState == _state
end

---检查采集失败
---受击、目标死亡、目标状态变化、自己离开读条范围
---@private
function BattleUnitCom_Collector:__CheckCollectFailed()
	if self.__abortTag then return true end
	if self.__collectingObj:CheckDead() then return true end
	if not BattleUnitCom_Collector.__CheckHandleAvailableState(self.__collectingObj, false) then return true end
	if self:__CheckleaveCollectBoundary() then return true end
	return false
end

---检查是否采集完成
---@private
---@return boolean
function BattleUnitCom_Collector:__CheckCollectSuccess()
	return TimeUtils.battleNow(self:GetBattleId()) - self.__collectStartTime > self.__collectTotalTime - self.__stateInheritTime
end

---检查当前是否有关注的对象可采集
---@private
---@return boolean
function BattleUnitCom_Collector:__CheckCollectAvailable()
	local _checkFunc = BattleUnitCom_Collector.__CheckHandleAvailableState
	local _objManager = self:GetBattleRoom().battleObjectManager
	---@type BattleObjectBase
	local _obj
	for _objId, _ in pairs(self.__caringObjIdDic) do
		_obj = _objManager:GetObject(_objId)
		if not _obj or _obj:CheckDead() then
			self.__caringObjIdDic[_objId] = nil
		elseif _checkFunc(_obj, true) then
			return true
		end
	end
	return false
end

---检查等待采集的目标改变
---@private
---@return boolean
function BattleUnitCom_Collector:__CheckWaitCollectTargetChange()
	local _targetObjId = self:__GetCollectTarget()
	local _targetObj = self:GetBattleRoom().battleObjectManager:GetObject(_targetObjId)
	if not _targetObj then
		LogTools.LogByLevel(LogLevel.log, "not _targetObj", "_targetObjId", _targetObjId)
		self.__waitCollectTargetNetId = -1
		self.__waitCollectTargetObjId = -1
		return true
	elseif _targetObj:GetParentUnit():GetNetId() ~= self.__waitCollectTargetNetId or _targetObjId ~= self.__waitCollectTargetObjId then
		self.__waitCollectTargetNetId = _targetObj:GetParentUnit():GetNetId()
		self.__waitCollectTargetObjId = _targetObjId
		return true
	end
	return false
end

---检查是否满足可采集条件
---接收操作消息设置startTag
---或者当前关注列表中有自动交互的对象（handleType == 0）
---@private
function BattleUnitCom_Collector:__CheckBeginCollect()
	if self.__startTag then return true end
	return self:__CheckAutoBeginCollect()
end

---检查是否满足自动交互
---@private
function BattleUnitCom_Collector:__CheckAutoBeginCollect()
	local _selfPos = self.__actionManager:GetPosition()
	local _minDis = nil
	---@type BattleObjectBase
	local _minObj = nil
	local _dis = nil
	---@type ActionStateManage
	local _objActionManager
	local _checkFunc = BattleUnitCom_Collector.__CheckHandleAvailableState
	local _objManager = self:GetBattleRoom().battleObjectManager
	---@type BattleObjectBase
	local _obj
	for _objId, _ in pairs(self.__autoHandleObjIdDic) do
		_obj = _objManager:GetObject(_objId)
		if not _obj or _obj:CheckDead() then
			self.__autoHandleObjIdDic[_objId] = nil
		elseif _checkFunc(_obj, true) then
			_objActionManager = _obj:GetParentUnit():GetActionManager()
			_dis = Vector3.SqrMagnitude(_selfPos - _objActionManager:GetPosition())
			if not _minDis then
				_minDis = _dis
				_minObj = _obj
			elseif _dis < _minDis then
				_minDis = _dis
				_minObj = _obj
			end
		end
	end

	if _minObj then
		self.__directCollectObjId = _minObj:GetObjectId()
		return true
	end
	return false
end

---获取采集的对象
---最近的对象
---@private
---@return BattleObjectBase
function BattleUnitCom_Collector:__GetCollectTarget()
	--Vector3.Copy(self.__cachedVector_1, self.__actionManager:GetPosition())
	if self.__directCollectObjId and self.__directCollectObjId ~= -1 then
		return self.__directCollectObjId
	end
	
	local _selfPos = self.__actionManager:GetPosition()
	local _minDis = nil
	---@type BattleObjectBase
	local _minObj = nil
	local _dis = nil
	---@type ActionStateManage
	local _objActionManager
	local _checkFunc = BattleUnitCom_Collector.__CheckHandleAvailableState
	local _objManager = self:GetBattleRoom().battleObjectManager
	---@type BattleObjectBase
	local _obj
	for _objId, _ in pairs(self.__caringObjIdDic) do
		_obj = _objManager:GetObject(_objId)
		if not _obj or _obj:CheckDead() then
			self.__caringObjIdDic[_objId] = nil
		elseif _checkFunc(_obj, true) then
			_objActionManager = _obj:GetParentUnit():GetActionManager()
			_dis = Vector3.SqrMagnitude(_selfPos - _objActionManager:GetPosition())
			if not _minDis then
				_minDis = _dis
				_minObj = _obj
			elseif _dis < _minDis then
				_minDis = _dis
				_minObj = _obj
			end
		end
	end
	
	return _minObj and _minObj:GetObjectId() or -1
end

---检查是否离开采集范围
---@private
---@param _obj BattleObjectBase
---@return boolean
function BattleUnitCom_Collector:__CheckleaveCollectBoundary()
	return self:GetBattleRoom().transUtil:GetDisBetweenUnits(self.__netId, self.__collectingObj:GetParentUnit():GetNetId(), BattleUnitDisRecordType.CollisionDis) > self.__collectingMaxDis
end
------------------------------------------------------------------------------------------------------------------------
---检查是否是可交互状态
---@private
---@param _obj BattleObjectBase
---@param _checkCollectingTag boolean 是否需要检查不在被采集状态中
function BattleUnitCom_Collector.__CheckHandleAvailableState(_obj, _checkCollectingTag)
	---@type Gadget
	local _dataInstance = _obj:GetDataInstanceXls()
	---@type BattleUnitCom_TagSelector
	local _tagCom = _obj:GetParentUnit():GetComponent(BattleUnitComponentType.TagSelector)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Collector", "__CheckHandleAvailableState", "_obj", _obj:GetObjectId(), "_dataInstance.handleAvailable", _dataInstance.handleAvailable, "_tagCom:GetTag(BattleUnitTagEnum.SceneObjState)", _tagCom:GetTag(BattleUnitTagEnum.SceneObjState))
	if _checkCollectingTag then
		return not _tagCom:GetTag(BattleUnitTagEnum.BeingCollected) and _tagCom:GetTag(BattleUnitTagEnum.SceneObjState) == _dataInstance.handleAvailable
	else
		return _tagCom:GetTag(BattleUnitTagEnum.SceneObjState) == _dataInstance.handleAvailable
	end
end

---进入none状态的类型
---@private
BattleUnitCom_Collector.__EnterNoneStateType = {
	Normal = 1,    --自然进入，未采集状态下脱离所有采集目标
	Success = 2,   --采集成功
	Failed = 3     --采集失败
}

------------------------------------------------------------------------------------------------------------------------
---设置开始采集标记
---从表现层发来的操作消息
---@public
function BattleUnitCom_Collector:SetStartTag()
	if self:__CheckCollectState(BattleUnitCollectState.WaitCollect) then
		self.__startTag = true
	end
end

---设置采集打断标记
---目前只有受击时被打断
---@public
function BattleUnitCom_Collector:SetAbortTag()
	if self:__CheckCollectState(BattleUnitCollectState.Collecting) then
		self.__abortTag = true
	end
end

------------------------------------------------------------------------------------------------------------------------
---@public
function BattleUnitCom_Collector:SyncHandleResult(_resultType)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Collector", "SyncHandleResult start", "_resultType", _resultType)
	local _BattleUnitHandleResult_S2C = {}
	_BattleUnitHandleResult_S2C.netId = self:GetUnit():GetNetId()
	_BattleUnitHandleResult_S2C.objId = self:GetUnit():GetCurrentHeroObjectId()
	_BattleUnitHandleResult_S2C.targetNetId = self.__collectingObj:GetParentUnit():GetNetId()
	_BattleUnitHandleResult_S2C.targetObjId = self.__collectingObj:GetObjectId()
	_BattleUnitHandleResult_S2C.result = _resultType
	if IsServer() then
		self:GetUnit():GetBattleRoom().outputDataSource:BattleUnitHandleResultS2C(_BattleUnitHandleResult_S2C)
	else
		self:GetUnit():GetBattleRoom().outputDataSource:BattleUnitHandleResultL2V(_BattleUnitHandleResult_S2C)
	end
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Collector", "SyncHandleResult end", "_BattleUnitHandleResult_S2C", dumpTableEx(_BattleUnitHandleResult_S2C))
end

---@public
function BattleUnitCom_Collector:SyncStateChange()
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Collector", "SyncStateChange start")
	self.__stateChangeTime = TimeUtils.battleNow(self:GetBattleId())
	local _changeData = {}
	_changeData.netId = self:GetUnit():GetNetId()
	_changeData.objId = self:GetUnit():GetCurrentHeroObjectId()
	_changeData.handleState = self:__CollectStateInfo()

	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Collector", "SyncStateChange end", "_changeData", dumpTableEx(_changeData))
	if IsServer() then
		self:GetUnit():GetBattleRoom().outputDataSource:AddBattleUnitChangeData(_changeData)
	else
		self:OnReceiveChangeData(_changeData.handleState)
	end
end

---@private
---@return table msg.BattleUnitHandleStateInfo
function BattleUnitCom_Collector:__CollectStateInfo()
	local _BattleUnitHandleStateInfo = {}
	_BattleUnitHandleStateInfo.stateId = self.__collectState
	_BattleUnitHandleStateInfo.stateChangeTime = self.__stateChangeTime
	_BattleUnitHandleStateInfo.stateTotalTime = self.__stateTotalTime
	_BattleUnitHandleStateInfo.stateInheritTime = self.__stateInheritTime
	_BattleUnitHandleStateInfo.targetNetId = self.__waitCollectTargetNetId
	_BattleUnitHandleStateInfo.targetObjId = self.__waitCollectTargetObjId
	return _BattleUnitHandleStateInfo
end

---@public
function BattleUnitCom_Collector:OnReceiveChangeData(_BattleUnitHandleStateInfo)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Collector", "OnReceiveChangeData start", "_BattleUnitHandleStateInfo", dumpTableEx(_BattleUnitHandleStateInfo))
	local _BattleUnitHandleStateChange_L2V = {}
	_BattleUnitHandleStateChange_L2V.netId = self:GetUnit():GetNetId()
	_BattleUnitHandleStateChange_L2V.objId = self:GetUnit():GetCurrentHeroObjectId()
	_BattleUnitHandleStateChange_L2V.info = _BattleUnitHandleStateInfo
	self:GetUnit():GetBattleRoom().outputDataSource:BattleUnitHandleStateChangeL2V(_BattleUnitHandleStateChange_L2V)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Collector", "OnReceiveChangeData end", "_BattleUnitHandleStateChange_L2V", dumpTableEx(_BattleUnitHandleStateChange_L2V))
end

---@private
---@param _BattleUnitHandleStateInfo table msg.BattleUnitHandleStateInfo 
function BattleUnitCom_Collector:__RefreshStateInfo(_BattleUnitHandleStateInfo)
	self.__collectState = _BattleUnitHandleStateInfo.stateId
	self.__stateChangeTime = _BattleUnitHandleStateInfo.stateChangeTime
	self.__stateTotalTime = _BattleUnitHandleStateInfo.stateTotalTime
	self.__stateInheritTime = _BattleUnitHandleStateInfo.stateInheritTime
	self.__waitCollectTargetNetId = _BattleUnitHandleStateInfo.targetNetId
	self.__waitCollectTargetObjId = _BattleUnitHandleStateInfo.targetObjId
end

---@public
function BattleUnitCom_Collector:Clear()
	self.__caringObjIdDic = nil
	self.__autoHandleObjIdDic = nil
	self.__collectingObjId = nil
	self.__collectingObj = nil
	self.__directCollectObjId = nil
	self.__collectState = nil
	self.__abortTag = nil
	self.__startTag = nil
	self.__collectStartTime = nil
	self.__collectTotalTime = nil
	self.__collectingMaxDis = nil
	self.__stateTotalTime = nil
	self.__stateInheritTime = nil
	self.__waitCollectTargetNetId = nil
	self.__waitCollectTargetObjId = nil
	self.__tmpList = nil
	self.__cachedVector_1 = nil
	self:__Clear()
end

------------------------------------------------------------------------------------------------------------------------
---服务器逻辑核生成用于发送给前端逻辑核的全量信息
---@public
---@return table msg.BattleUnitHandleStateInfo
function BattleUnitCom_Collector:GetCreateSyncMessage_S2C()
    return self:__CollectStateInfo()
end

---前端逻辑核用服务器发来的全量信息刷新自身数据
---@public
---@param _BattleUnitHandleStateInfo table msg.BattleUnitHandleStateInfo 
function BattleUnitCom_Collector:OnReceiveCreateSyncMessage_S2C(_BattleUnitHandleStateInfo)
    self:__RefreshStateInfo(_BattleUnitHandleStateInfo)
end

---前端逻辑核生成用于发送给表现的层全量信息
---@public
function BattleUnitCom_Collector:GetCreateSyncMessage_L2V()
    return self:__CollectStateInfo()
end

return BattleUnitCom_Collector
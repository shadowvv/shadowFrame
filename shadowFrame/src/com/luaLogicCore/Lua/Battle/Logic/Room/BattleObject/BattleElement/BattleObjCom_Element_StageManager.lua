---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hejincheng.
--- DateTime: 2023/5/26 14:47
---

require "Battle/Logic/Room/BattleObject/BattleElement/ElementStageBase"
require "Battle/Logic/Room/BattleObject/BattleElement/ElementStage_AccumulationStage1"
require "Battle/Logic/Room/BattleObject/BattleElement/ElementStage_AccumulationStage2"
require "Battle/Logic/Room/BattleObject/BattleElement/ElementStage_AccumulationStage3"
require "Battle/Logic/Room/BattleObject/BattleElement/ElementStage_MaxReduceStage1"
require "Battle/Logic/Room/BattleObject/BattleElement/ElementStage_MaxReduceStage2"

---@class BattleObjCom_Element_StageManager : table
BattleObjCom_Element_StageManager = class(nil, "BattleObjCom_Element_StageManager")
function BattleObjCom_Element_StageManager:ctor()
end

---@protected
---@param _battleObjComElement BattleObjCom_Element_V2
---@param _battleObject BattleObjectBase
---@param _battleElementType BattleElementType
function BattleObjCom_Element_StageManager:__Init(_battleObjComElement, _battleObject, _battleElementType)
    self.battleObjComElement = _battleObjComElement
    self.__object = _battleObject
    self.__battleId = _battleObject:GetBattleId()
    self.battleRoom = _battleObject:GetBattleRoom()
    self.battleElementType = _battleElementType
    self.elementId = _battleElementType:GetId()
    ---@type number
    self.curStageEnum = nil
    ---@type ElementStageBase
    self.curStage = nil
    ---@type ElementStackEffect
    self.elementStackEffect = self.battleObjComElement:GetElementStackEffectTable(self.elementId)

    self:__Clear()
    self:__InitStageTable()

    -- 初始为积累阶段1
    self:ResetInitStage()
end

---@public
---@param _battleObjComElement BattleObjCom_Element_V2
---@param _battleObject BattleObjectBase
---@param _battleElementType BattleElementType
function BattleObjCom_Element_StageManager:Init(_battleObjComElement, _battleObject, _battleElementType)
    self:__Init(_battleObjComElement, _battleObject, _battleElementType)
end

---@protected
function BattleObjCom_Element_StageManager:__Clear()
    ---@type number
    self.curStageEnum = nil
    ---@type ElementStageBase
    self.curStage = nil

    if not self.stageTable then
        return
    end
    for _, _stage in pairs(self.stageTable) do
        _stage:Clear()
    end
    self.stageTable = nil
end

function BattleObjCom_Element_StageManager:Clear()
    self:__Clear()
end

-- 初始阶段
---@protected
function BattleObjCom_Element_StageManager:__InitStageTable()
    ---@type ElementStageBase[]
    local _stageTable = {}

    --积累阶段1：正常阶段
    _stageTable[ElementStage_Define_StageEnum.AccumulationStage1] = ElementStage_AccumulationStage1.New()
    --积累阶段2：匀速衰减
    _stageTable[ElementStage_Define_StageEnum.AccumulationStage2] = ElementStage_AccumulationStage2.New()
    --积累阶段3：加速衰减
    _stageTable[ElementStage_Define_StageEnum.AccumulationStage3] = ElementStage_AccumulationStage3.New()
    --创伤阶段1：匀速衰减
    _stageTable[ElementStage_Define_StageEnum.MaxReduceStage1] = ElementStage_MaxReduceStage1.New()
    --创伤阶段2：创伤加速衰减
    --_stageTable[ElementStage_Define_StageEnum.MaxReduceStage2] = ElementStage_MaxReduceStage2.New()

    for _index, _stage in pairs(_stageTable) do
        _stage:Init(_index, self)
    end

    ---@type ElementStageBase[]
    self.stageTable = _stageTable
end

-- 离开阶段
---@protected
function BattleObjCom_Element_StageManager:__LeftStage()
    if not self.curStage then
        return
    end
    self.curStage:OnExit()
    self.curStage = nil
end

-- 进入阶段
---@protected
---@param _stageEnum number
function BattleObjCom_Element_StageManager:__EnterStage(_stageEnum)
    local _stage = self.stageTable[_stageEnum]
    self.curStageEnum = _stageEnum
    self.curStage = _stage
    if not _stage then
        return
    end
    _stage:OnEnter()
end

-- 获取阶段
---@public
---@param _stageEnum number 阶段
---@return ElementStageBase
function BattleObjCom_Element_StageManager:GetStage(_stageEnum)
    return self.stageTable[_stageEnum]
end

-- 重置初始阶段
---@public
function BattleObjCom_Element_StageManager:ResetInitStage()
    self:GoToStage(ElementStage_Define_StageEnum.AccumulationStage1, true)
end

-- 进入指定阶段
---@public
---@param _stageEnum number
---@param _forceEnter boolean
---@return boolean 是否成功进入
function BattleObjCom_Element_StageManager:GoToStage(_stageEnum, _forceEnter)
    if _stageEnum < 0 then
        if CheckLogLevel(LogLevel.logErr) then
            LogTools.LogByLevel(LogLevel.logErr, self.elementId, "BattleObjCom_Element_StageManager", "GoToStage", "stage", self.curStageEnum, "< 0")
        end
        return false
    end
    if (_forceEnter == nil or _forceEnter == false) and not self.curStage:CanEnter(_stageEnum) then
        if CheckLogLevel(LogLevel.logErr) then
            LogTools.LogByLevel(LogLevel.logErr, self.elementId, "BattleObjCom_Element_StageManager", "GoToStage", "stage", self.curStageEnum, "cannot enter", _stageEnum)
        end
        return false
    end

    local _oldStageEnum = self.curStageEnum

    -- 离开阶段
    self:__LeftStage()

    if CheckLogLevel(LogLevel.log) and LogTools.ElementLog and _oldStageEnum ~= _stageEnum then
        local _targetObjectLog = "[" .. tostring(self.__object:GetDicId()) .. "]"
        local _unit = self.__object:GetParentUnit()
        if _unit:GetNetId() then
            _targetObjectLog = "[" .. self.battleRoom.battleUnitManager:GetBattleUnitTypeName(self.__object:GetParentUnit():GetUnitType()) .. "][" .. self.__object:GetParentUnit():GetNetId() .. "]" .. _targetObjectLog
        end
        LogTools.LogByLevel(LogLevel.log, "元素", GetBattleElementNameById(self.elementId), "目标" .. _targetObjectLog,
                "<color=#00FF00>" .. ElementStage_Define_StageEnum.GetElementStageNameById(_oldStageEnum) .. "</color>",
                "切换到",
                "<color=#00FF00>" .. ElementStage_Define_StageEnum.GetElementStageNameById(_stageEnum) .. "</color>")
    end

    -- 进入阶段
    self:__EnterStage(_stageEnum)

    if IsServer() then
        -- 通知客户端阶段切换
        local changeData = {
            elementStage = {
                elementId = self.elementId,
                stage = self.curStageEnum
            }
        }
        -- 输出数据
        local outputData = {
            netId = self.__object:GetParentUnit():GetNetId(),
            objId = self.__object:GetObjectId(),
            elementChange = changeData
        }
        self.battleRoom.outputDataSource:AddBattleUnitKeyData(outputData)
    end
    return true
end

-- 根据时间计算元素量
---@public
---@param _time number 时间
---@return number 元素量
function BattleObjCom_Element_StageManager:CalculateAddValueByTime(_time)
    if not self.curStage then
        return 0
    end
    return self.curStage:CalculateAllValueByTime(_time)
end

---@public
---@param _attackerNetId, _attackerObjectId number
---@param _attackerNetId, _attackerObjectId number
function BattleObjCom_Element_StageManager:OnElementAdd(_attackerNetId, _attackerObjectId)
    if self.curStage then
        self.curStage:OnElementAdd(_attackerNetId, _attackerObjectId)
    end
end

-- 元素改变
---@public
---@param _newValue
---@param _oldValue
function BattleObjCom_Element_StageManager:OnElementChange(_newValue, _oldValue)
    if self.curStage then
        self.curStage:OnElementChange(_newValue, _oldValue)
    end
end

-- 元素效果
---@public
function BattleObjCom_Element_StageManager:OnElementEffect()
    if self.curStage then
        self.curStage:OnElementEffect()
    end
end

-- 元素移除
---@public
function BattleObjCom_Element_StageManager:OnElementRemove()
    if self.curStage then
        self.curStage:OnElementRemove()
    end
end

-- tick
---@public
---@param _deltaTime number
function BattleObjCom_Element_StageManager:OnUpdate(_deltaTime)
    if self.curStage then
        self.curStage:OnUpdate(_deltaTime)
    end
end
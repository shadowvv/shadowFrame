---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/03/22 11:10
--- Describe: battleUnit相关的接口，从battleUnitManager中拆出来，免得乱七八糟的

---@class BattleKeyMap : table
BattleKeyMap = {
	dash = 1,
	commonSkill = 2,
	activeSkill = 3,
	jizouskill = 4,
	aim = 5,
	reload = 6,
	rogueUnitSkill = 7   --施放肉鸽主公技
}

---@class PlayerChangeLeaderInputType : table
PlayerChangeLeaderInputType = {
	Normal = 1,
	Jizou = 2,
	ObjDead = 3,
}

------------------------------------------------------------------------------------------------------------------------

---修改玩家在线状态
---@param _playerId number
---@param _onlineState BattleUnitOnlineState
function BattleUnitManager:ChangePlayerOnlineState(_playerId, _onlineState)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "ChangePlayerOnlineState", "_playerId", _playerId, "_onlineState", LogTools.GetEnumTableDesc(BattleUnitOnlineState, _onlineState))
	local _playerOriginalData = self.__originalPlayerInfoManager:GetPlayer(_playerId)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "ChangePlayerOnlineState", "_playerOriginalData:CheckOnlineState(_onlineState)", _playerOriginalData:CheckOnlineState(_onlineState))
	if _playerOriginalData:CheckOnlineState(_onlineState) then return end
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "ChangePlayerOnlineState", "_playerOriginalData:CheckCreated()", _playerOriginalData:CheckCreated())
	_playerOriginalData:SetOnlineState(_onlineState)

	local _playerUnit = self:GetUnitByPlayerId(_playerId)
	if _playerUnit then
		if _onlineState == BattleUnitOnlineState.OnLine then
			--投放后进入副本
			self:GetBattleRoom().outputDataSource:PlayerEnterL2V({ netId = _playerUnit:GetNetId() })
		elseif _onlineState == BattleUnitOnlineState.OffLine then
			--投放后离开副本
			self:GetBattleRoom().outputDataSource:PlayerLeaveL2V({ netId = _playerUnit:GetNetId() })
		end
	end
end

---等待创建Unit，添加DelayCreate数据
---@public
---@param _data BattleUnitDelayCreateData
function BattleUnitManager:AddDelayUnitCreateData(_data)
	table.insert(self.__delayCreateUnitList, _data)
end

---玩家换人请求处理
---@public
---@param _netId number
---@param _objectId number
---@param _inputType PlayerChangeLeaderInputType
---@param _force boolean
function BattleUnitManager:PlayerChangeLeaderInput(_netId, _objectId, _inputType, _force)
	if CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "PlayerChangeLeaderInput", "_netId", _netId, "_objectId", _objectId, "_castJizou", _castJizou)
	end

	local _unit = self:GetUnit(_netId, false)
	if not _unit then return end
	local _heroObj = _unit:GetHeroObject(_objectId)
	if not _heroObj then return end

	---@type BattleObjCom_Property
	local _propCom = _heroObj:GetComponent(BattleObjectComponentType.Property)
	if not _propCom or _propCom:GetPropertyByName(BattlePropertyEnum.Hp_Cur) == 0 then
		--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "PlayerChangeLeaderInput", "not hp")
		return
	end

	---死亡换人不触发行为树监听
	if _inputType ~= PlayerChangeLeaderInputType.ObjDead then
		self:GetBattleRoom().behaviorManager:PostTaskListenEvent(1, LuaBehav_Define_TaskListenEnum.Controll_ChangePlayer)
	end
	
	_unit:GetActionManager():PlayerChangeLeader(_objectId, _inputType, _force)
end

---英雄死亡
---@param _netId number
---@param _objectId number
---@param _deadType LuaBehav_Define_DeadType
function BattleUnitManager:OnBattleObjectDead(_netId, _objectId, _deadType)
	if CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckDead", "BattleUnitManager", "OnBattleObjectDead", "_netId", _netId, "_objectId", _objectId, "_deadType", _deadType)
	end
	
	local _unit = self:GetUnit(_netId)
	if not _unit then return end
	_unit:GetActionManager():ObjectDead(_objectId, _deadType)

	if CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckDead", "BattleUnitManager", "OnBattleObjectDead end")
	end
end

--unit死亡
function BattleUnitManager:OnBattleUnitDead(_netId, _deadType)
	if CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckDead", "BattleUnitManager", "OnBattleUnitDead", "_netId", _netId, "_deadType", _deadType)
	end
	
	local _unit = self:GetUnit(_netId, false)
	if not _unit then return end
	_unit:GetActionManager():Dead(_deadType)

	if CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckDead", "BattleUnitManager", "OnBattleUnitDead end")
	end
end

------------------------------------------------------------------------------------------------------------------------

---切换角色，设置玩家当前角色
---@public
---@param _netId number 要换人的单位的netId
---@param _objectId number 要换上的英雄的objId
function BattleUnitManager:PlayerChangeLeaderS2C(_netId, _objectId)
	if CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "PlayerChangeLeaderS2C", "_netId", _netId, "_objectId", _objectId)
	end
	
	local _unit = self:GetUnit(_netId, false)
	if not _unit then
		if CheckLogLevel(LogLevel.logErr) then
			LogTools.LogByLevel(LogLevel.logErr, "BattleUnitManager", "PlayerChangeLeaderS2C", "Cannot find unit!!!", "_netId", _netId)
		end
		return
	end
	if not _unit:CheckHasObjectId(_objectId) then
		if CheckLogLevel(LogLevel.logErr) then
			LogTools.LogByLevel(LogLevel.logErr, "BattleUnitManager", "PlayerChangeLeaderS2C", "Unit does not has object!!!", "_netId", _netId, "_objectId", _objectId)
		end
		return
	end

	local _allUnitList = self.__allUnitList
	---@type BattleObjCom_BoundaryListener[]
	local _boundaryList = {}

	local _netIdList = {_netId}
	for _, _checkUnit in pairs(_allUnitList) do
		if _checkUnit:CheckAlive() then
			---@type BattleObjCom_BoundaryListener
			local _boundaryListenerCom = _checkUnit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.BoundaryListener)
			if _boundaryListenerCom and _boundaryListenerCom:CheckPlayerIn(_netId) then
				_boundaryListenerCom:OnUnitLeave(_netIdList)
				table.insert(_boundaryList, _boundaryListenerCom)
			end
		end
	end
	_unit:ChangeCurrentHeroObject(_objectId)
	for _, _boundaryListenerCom in pairs(_boundaryList) do
		_boundaryListenerCom:OnUnitEnter(_netIdList)
	end

	local _playerChangeLeaderL2S = {}
	local _info = {}
	_playerChangeLeaderL2S.info = _info
	_info.playerId = _unit:GetPlayerId()
	_info.objectId = _objectId
	self:GetBattleRoom().outputDataSource:PlayerChangeLeaderL2S(_playerChangeLeaderL2S)
end

--- 玩家按键
---@public
---@param _playerId number 玩家Id
---@param _key number 按键
---@param _pressType boolean 按键形式
---@param _moveParam Vector3 玩家移动参数
---@param _cameraParam Vector3 玩家镜头参数
---@param _hitWall boolean 是否撞墙
---@param _dt number 显示层移动变化时间
---@param _isBufferKey boolean 玩家按键缓存
---@param _moveOverFrameId number 移动协议完成帧号
---@param _position Vector3 玩家重置位置
---@param _moveDir Vector3 玩家移动方向
function BattleUnitManager:PlayerPressKey(_playerId,_key,_pressType,_moveParam,_cameraParam,_hitWall,_dt,_isBufferKey,_moveOverFrameId,_position,_moveDir)
	---@type BattleUnit_Player
	local unit = self:GetUnitByPlayerId(_playerId);
	if unit == nil then
		return;
	end

	--BOSS 出现动画屏蔽玩家操作
	---2022-6-18 按键抬起不屏蔽
	if _pressType and self:GetBattleRoom().battleLogicEventService:CheckBossAnimationEvent(true) then
		return;
	end

	if _pressType and unit:GetActionManager().blockKeys then
		if unit:GetActionManager().blockKeys[_key] then
			return;
		end
	end

	if _key ~= nil and not _isBufferKey then
		self:GetBattleRoom().battleLogicEventService:OnTriggerKeyPressEvent(unit:GetNetId(),_key,_pressType);
	end
	if _key == nil then
		unit:GetActionManager():Move(_moveParam,_cameraParam,nil,_hitWall,_isBufferKey,_position,_moveDir);
		if not Vector3.IsZero(_moveParam) then
			self:GetBattleRoom().behaviorManager:PostTaskListenEvent(1, LuaBehav_Define_TaskListenEnum.Controll_Move)
		end
		if not Vector3.IsZero(_cameraParam) then
			self:GetBattleRoom().behaviorManager:PostTaskListenEvent(1, LuaBehav_Define_TaskListenEnum.Controll_Rotate)
		end
		unit:DoMoveAction(_dt);
		if _moveOverFrameId then
			self:GetBattleRoom().outputDataSource:DiscardOldData(unit:GetNetId(),_moveOverFrameId);
		end
		return;
	end
	if _key == BattleKeyMap.dash then
		unit:GetActionManager():Move(_moveParam,_cameraParam,_pressType,_hitWall,_isBufferKey,_position,_moveDir);
		self:GetBattleRoom().behaviorManager:PostTaskListenEvent(1, LuaBehav_Define_TaskListenEnum.Controll_Shanbi)
		return;
	end
	if _key == BattleKeyMap.aim then
		if _pressType then
			---@type BattleObjCom_PlayMode
			local playMode = unit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.PlayMode);
			if playMode:GetCurrentModeType() ~= BATTLE_OBJECT_PLAY_MODE_TYPE.aim then
				unit:GetActionManager():ChangePlayMode(unit:GetCurrentHeroObject():GetDataInstanceXls().aimPlayMode);
			else
				unit:GetActionManager():ChangePlayMode(1);
			end
		end
		return;
	end
	-- 换弹按钮换弹
	if _key == BattleKeyMap.reload then
		if _pressType then
			---@type BattleObjCom_Weapon
			local componentWeapon = unit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Weapon);
			if componentWeapon ~= nil and not componentWeapon:IsBulletFull() then
				unit:GetActionManager():Reload(false);
				self:GetBattleRoom().behaviorManager:PostTaskListenEvent(1, LuaBehav_Define_TaskListenEnum.Controll_Reload)
			end
		end
		return
	end
	-- 肉鸽主公技
	if _key == BattleKeyMap.rogueUnitSkill then
		if _pressType then
			---@type BattleUnitCom_RogueUnitSkill
			local _rogueUnitSkillCom = unit:GetComponent(BattleUnitComponentType.RogueUnitSkill)
			if _rogueUnitSkillCom and _rogueUnitSkillCom:CheckCanUseSkill() then
				_rogueUnitSkillCom:Open(true, false)
			end
		end
		return
	end
	if _pressType then
		---@type Leader
		local dict = unit:GetDataInstanceXls();
		local skillId = 0;
		if(_key == BattleKeyMap.commonSkill) then
			-- 过载后普攻换弹
			---@type BattleObjCom_Weapon
			local componentWeapon = unit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Weapon);
			if componentWeapon ~= nil and componentWeapon:IsOverLoad() and componentWeapon:IsBulletNil() then
				unit:GetActionManager():Reload(true);
				self:GetBattleRoom().behaviorManager:PostTaskListenEvent(1, LuaBehav_Define_TaskListenEnum.Controll_Reload)
				return
			else
				local _curHero = unit:GetCurrentHeroObject();
				---@type BattleObjCom_Skill
				local skillComp = _curHero:GetComponent(BattleObjectComponentType.Skill);
				skillId = skillComp:GetNormalSKillId();
				self:GetBattleRoom().behaviorManager:PostTaskListenEvent(1, LuaBehav_Define_TaskListenEnum.Controll_CommonSkill)
				--unit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Buff):TestBuff(20007)
			end
			
			-----@type BattleUnitCom_RogueUnitSkill
			--local _rogueCom = unit:GetComponent(BattleUnitComponentType.RogueUnitSkill)
			--_rogueCom:Open(true, false)
			
		end
		if(_key == BattleKeyMap.activeSkill) then
			skillId = dict.activeSkillId;
			self:GetBattleRoom().behaviorManager:PostTaskListenEvent(1, LuaBehav_Define_TaskListenEnum.Controll_ActiveSkill)
		end
		if(_key == BattleKeyMap.jizouskill) then
			skillId = dict.jizouSkillGroup;
			self:GetBattleRoom().behaviorManager:PostTaskListenEvent(1, LuaBehav_Define_TaskListenEnum.Controll_JizouSkill)
		end
		unit:GetActionManager():CastSkill(skillId);
	end
end

--- 玩家撞墙
---@public
---@param _playerId number 玩家Id
---@param _hitWallFrameId number 碰撞帧数
function BattleUnitManager:PlayerHitWall(_playerId,_hitWallFrameId)
	---@type BattleUnit_Player
	local unit = self:GetUnitByPlayerId(_playerId);
	if unit == nil then
		return;
	end
	unit:GetActionManager():PlayerHitWall(_hitWallFrameId);
end

--- 玩家撞墙
---@public
---@param _netId number netId
---@param _position Vector3 位置
---@param _moveDir Vector3 移动方向
---@param _hitEdge boolean 是否撞到边界
function BattleUnitManager:BattleUnitHitWall(_netId,_position,_moveDir,_hitEdge)

	if _netId == ActionStateManage.checkNetId then
		LogTools.LogByLevel(LogLevel.log, "CheckAiMove", "BattleUnitManager:BattleUnitHitWall", "_netId", _netId, "_position", _position, "_moveDir", _moveDir, "_hitEdge", _hitEdge)
	end
	
	---@type BattleUnitBase
	local unit = self:GetUnit(_netId)
	if not unit then return end

	local position = Vector3.New(_position.x,_position.y,_position.z)
	local moveDir = Vector3.New(_moveDir.x,_moveDir.y,_moveDir.z)
	--LogTools.LogByLevel(LogLevel.logErr, "BattleUnitManager:BattleUnitHitWall", "_netId", _netId, "_position", position, "_moveDir", moveDir, "_hitEdge", _hitEdge)

	---@type BattleUnitCom_PathFind
	local _comPathFind = unit:GetComponent(BattleUnitComponentType.PathFind)
	if _comPathFind then
		_comPathFind:OnHitBlock(position, moveDir, _hitEdge)
	end

	---@type BattleUnitCom_PositionSet
	local _comPosSet = unit:GetComponent(BattleUnitComponentType.PosSet)
	if _comPosSet then
		_comPosSet:OnHitBlock(position, moveDir, _hitEdge)
	end

	unit:GetActionManager():BattleUnitHitWall(position,moveDir);
	self:GetBattleRoom().battleLogicEventService:OnTriggerUnitCollideEvent(_netId,unit:GetCurrentHeroObject():GetObjectId());
end

--- 玩家按键
---@public
---@param _playerId number 玩家Id
---@param _eventType number 事件类型
---@param _eventParam string 事件参数
function BattleUnitManager:PlayerTriggerEvent(_playerId,_eventType,_eventParam)
	local unit = self:GetUnitByPlayerId(_playerId);
	if unit == nil then
		return;
	end

	if self:GetBattleRoom().battleLogicEventService:IsClientTrigger(_eventType) then
		self:GetBattleRoom().battleLogicEventService:OnTriggerClientEvent(_eventType,unit:GetNetId(),_eventParam);
	end
end



--- 战斗单位受伤广播
--- 直接推给表现层，属性的改变会单独同步
---@public
---@param _unitHurtInfoList table msg.UnitHurtInfo_S2C[]
function BattleUnitManager:UnitHurtS2C(_unitHurtInfoList)
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "BattleUnitManager", "UnitHurtS2C start", "_unitHurtInfoList", dumpTableEx(_unitHurtInfoList))
	local _UnitHurtL2S = {}
	_UnitHurtL2S.infoList = _unitHurtInfoList

	self:GetBattleRoom().outputDataSource:UnitHurtL2S(_UnitHurtL2S)
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "BattleUnitManager", "UnitHurtS2C end", dumpTableEx(_UnitHurtL2S))
end

---服务器通知开启巡逻
function BattleUnitManager:UnitPatrolS2C(_netId, _centerOnBorn)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitPatrolS2C", "_netId", _netId, "_centerOnBorn", _centerOnBorn)
	local _unit = self:GetUnit(_netId)
	----LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitPatrolS2C", "_unit", _unit)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	----LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitPatrolS2C", "_behavCom", _behavCom)
	if not _behavCom then return end
	_behavCom:StartPatrol(_centerOnBorn)

end

---服务器通知结束巡逻
function BattleUnitManager:UnitPatrolCancelS2C(_netId)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitPatrolCancelS2C", "_netId", _netId)
	local _unit = self:GetUnit(_netId)
	----LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitPatrolCancelS2C", "_unit", _unit)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	----LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitPatrolCancelS2C", "_behavCom", _behavCom)
	if not _behavCom then return end
	_behavCom:StopPatrol()
end


---服务器通知开始追逐目标
function BattleUnitManager:UnitChaseTargetS2C(_netId, _targetNetId)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitChaseTargetS2C", "_netId", _netId, "_targetNetId", _targetNetId)
	local _unit = self:GetUnit(_netId)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitChaseTargetS2C", "_unit", _unit)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitChaseTargetS2C", "_behavCom", _behavCom)
	if not _behavCom then return end
	_behavCom:StartChaseTarget(_targetNetId)

end

---服务器通知结束追逐目标
function BattleUnitManager:UnitStopChaseTargetS2C(_netId)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitStopChaseTargetS2C", "_netId", _netId)
	local _unit = self:GetUnit(_netId)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitStopChaseTargetS2C", "_unit", _unit)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitStopChaseTargetS2C", "_behavCom", _behavCom)
	if not _behavCom then return end
	_behavCom:StopChaseTarget()
end

---服务器通知开始远离目标
function BattleUnitManager:UnitEscapeTargetS2C(_netId, _targetNetId)
	----LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitEscapeTargetS2C", "_netId", _netId, "_targetNetId", _targetNetId)
	local _unit = self:GetUnit(_netId)
	----LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitEscapeTargetS2C", "_unit", _unit)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	----LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitEscapeTargetS2C", "_behavCom", _behavCom)
	if not _behavCom then return end
	_behavCom:StartEscapeTarget(_targetNetId)

end

---服务器通知结束远离目标
function BattleUnitManager:UnitStopEscapeTargetS2C(_netId)
	----LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitStopEscapeTargetS2C", "_netId", _netId)
	local _unit = self:GetUnit(_netId)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitStopEscapeTargetS2C", "_unit", _unit)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitStopEscapeTargetS2C", "_behavCom", _behavCom)
	if not _behavCom then return end
	_behavCom:StopEscapeTarget()
end

---服务器通知开始转向目标
function BattleUnitManager:UnitFaceTargetS2C(_netId, _targetNetId)
	----LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitFaceTargetS2C", "_netId", _netId, "_targetNetId", _targetNetId)
	local _unit = self:GetUnit(_netId)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitFaceTargetS2C", "_unit", _unit)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitFaceTargetS2C", "_behavCom", _behavCom)
	if not _behavCom then return end
	_behavCom:StartFaceTarget(_targetNetId)
end

---服务器通知结束转向目标
function BattleUnitManager:UnitStopFaceTargetS2C(_netId)
	----LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitStopFaceTargetS2C", "_netId", _netId)
	local _unit = self:GetUnit(_netId)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitStopFaceTargetS2C", "_unit", _unit)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitStopFaceTargetS2C", "_behavCom", _behavCom)
	if not _behavCom then return end
	self:GetBattleRoom().battleLogicEventService:OnTriggerUnitReachLastPoint(_netId);
	_behavCom:StopFaceTarget()
end

---服务器通知开始强制转向目标
---@param _netId number 要转向的单位的netId
---@param _yawSpeed number 水平角速度（度/秒）
---@param _pitchSpeed number 竖直角速度（度/秒）
function BattleUnitManager:UnitForceFaceTargetS2C(_netId, _yawSpeed, _pitchSpeed)
	----LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitForceFaceTargetS2C", "_netId", _netId, "_targetNetId", _targetNetId)
	local _unit = self:GetUnit(_netId)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitForceFaceTargetS2C", "_unit", _unit)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitForceFaceTargetS2C", "_behavCom", _behavCom)
	if not _behavCom then return end
	_behavCom:StartForceFaceTarget(_yawSpeed, _pitchSpeed)
end

---服务器通知结束强制转向目标
function BattleUnitManager:UnitStopForceFaceTargetS2C(_netId)
	----LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitStopForceFaceTargetS2C", "_netId", _netId)
	local _unit = self:GetUnit(_netId)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitStopForceFaceTargetS2C", "_unit", _unit)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitStopForceFaceTargetS2C", "_behavCom", _behavCom)
	if not _behavCom then return end
	self:GetBattleRoom().battleLogicEventService:OnTriggerUnitReachLastPoint(_netId);
	_behavCom:StopForceFaceTarget()
end

---服务器通知开始跟随召唤者
function BattleUnitManager:UnitChaseSubordinateS2C(_netId, _chaseType, _posShift)
	----LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitChaseSubordinateS2C", "_netId", _netId, "_posShift", _posShift)
	local _unit = self:GetUnit(_netId)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitChaseSubordinateS2C", "_unit", _unit)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitChaseSubordinateS2C", "_behavCom", _behavCom)
	if not _behavCom then return end
	_behavCom:StartChaseSubordinate(_chaseType, _posShift)
end

---服务器通知结束结束跟随召唤者
function BattleUnitManager:UnitStopChaseSubordinateS2C(_netId)
	----LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitStopChaseSubordinateS2C", "_netId", _netId)
	local _unit = self:GetUnit(_netId)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitStopChaseSubordinateS2C", "_unit", _unit)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitStopChaseSubordinateS2C", "_behavCom", _behavCom)
	if not _behavCom then return end
	self:GetBattleRoom().battleLogicEventService:OnTriggerUnitReachLastPoint(_netId);
	_behavCom:StopChaseSubordinate()
end

---服务器通知开始指定移动
function BattleUnitManager:UnitMoveTowardsS2C(_netId, _spaceType, _posShift, _stopWhenArrive)
	----LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitMoveTowardsS2C", "_netId", _netId)
	local _unit = self:GetUnit(_netId)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitMoveTowardsS2C", "_unit", _unit)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitMoveTowardsS2C", "_behavCom", _behavCom)
	if not _behavCom then return end

	_behavCom:StartMoveTowards(_spaceType, Vector3.Clone(_posShift), _stopWhenArrive)
end

---服务器通知结束指定移动
function BattleUnitManager:UnitStopMoveTowardsS2C(_netId)
	----LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitStopMoveTowardsS2C", "_netId", _netId)
	local _unit = self:GetUnit(_netId)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitStopMoveTowardsS2C", "_unit", _unit)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitStopMoveTowardsS2C", "_behavCom", _behavCom)
	if not _behavCom then return end
	self:GetBattleRoom().battleLogicEventService:OnTriggerUnitReachLastPoint(_netId);
	_behavCom:StopMoveTowards()
end

---服务器通知开始平移行为
function BattleUnitManager:UnitMoveTowards_2_S2C(_netId, _posShift, _faceTarget)
	local _unit = self:GetUnit(_netId)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitMoveTowardsS2C", "_unit", _unit)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitMoveTowardsS2C", "_behavCom", _behavCom)
	if not _behavCom then return end

	_behavCom:StartMoveTowards_2(Vector3.Clone(_posShift), _faceTarget)
end

---服务器通知结束平移行为
function BattleUnitManager:UnitStopMoveTowards_2_S2C(_netId)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitStopMoveTowards_2_S2C", "_netId", _netId)
	local _unit = self:GetUnit(_netId)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitStopMoveTowardsS2C", "_unit", _unit)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitStopMoveTowardsS2C", "_behavCom", _behavCom)
	if not _behavCom then return end
	--BATTLE_LOGIC_EVENT_SERVICE_V2:OnTriggerUnitReachLastPoint(_netId);
	_behavCom:StopMoveTowards_2()
end

---服务器通知开始导航点移动
function BattleUnitManager:UnitMoveNavPoints_S2C(_netId, _pointList, _loop)
	local _unit = self:GetUnit(_netId)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitMoveNavPoints_S2C", "_unit", _unit, "_netId", _netId)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitMoveNavPoints_S2C", "_behavCom", _behavCom)
	if not _behavCom then return end

	_behavCom:StartMoveNavPoints(_pointList, _loop)
end

---服务器通知结束导航点移动
function BattleUnitManager:UnitStopMoveNavPoints_S2C(_netId)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitStopMoveNavPoints_S2C", "_netId", _netId)
	local _unit = self:GetUnit(_netId)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitStopMoveNavPoints_S2C", "_unit", _unit)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	----LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "UnitStopMoveNavPoints_S2C", "_behavCom", _behavCom)
	if not _behavCom then return end
	--BATTLE_LOGIC_EVENT_SERVICE_V2:OnTriggerUnitReachLastPoint(_netId);
	_behavCom:StopMoveNaPoints()
end

---服务器通知开始调整高度
function BattleUnitManager:UnitFixHeightS2C(_netId)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitFixHeightS2C", "_netId", _netId)
	local _unit = self:GetUnit(_netId)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitFixHeightS2C", "_unit", _unit)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitFixHeightS2C", "_behavCom", _behavCom)
	if not _behavCom then return end
	_behavCom:StartFixHeight()

end

---服务器通知结束调整高度
function BattleUnitManager:UnitStopFixHeightS2C(_netId)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitStopFixHeightS2C", "_netId", _netId)
	local _unit = self:GetUnit(_netId)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitStopFixHeightS2C", "_unit", _unit)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "UnitStopFixHeightS2C", "_behavCom", _behavCom)
	if not _behavCom then return end
	_behavCom:StopFixHeight()
end

---前端收到服务器发起寻路请求
function BattleUnitManager:OnCallPathFindS2C(_PathFindResult)
	--LogTools.LogByLevel(LogLevel.log, "CheckPathFind", "BattleUnitManager", "OnCallPathFindS2C", "_PathFindResult", dumpTableEx(_PathFindResult))
	self:GetBattleRoom().outputDataSource:SendPathFindRequest_L2V(_PathFindResult)
end

---前端收到服务器取消寻路请求
function BattleUnitManager:OnCancelPathFindS2C(_PathFindResult)
	--LogTools.LogByLevel(LogLevel.log, "CheckPathFind", "BattleUnitManager", "OnCancelPathFindS2C", "_PathFindResult", dumpTableEx(_PathFindResult))
	self:GetBattleRoom().outputDataSource:CancelPathFindRequest_L2V(_PathFindResult)
end

---收到表现层寻路结果
---只有AI控制权的一方会实际处理
function BattleUnitManager:PathFindResult(_PathFindResult)
	--LogTools.LogByLevel(LogLevel.log, "CheckPathFind", "BattleUnitManager", "PathFindResult", "_PathFindResult", dumpTableEx(_PathFindResult))
	if _PathFindResult.error then
		if CheckLogLevel(LogLevel.log) then
			LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "PathFindResult", "error", _PathFindResult.error)
		end
		--return
	end
	local _findPathId = _PathFindResult.requestId
	local _netId = math.floor(_findPathId * 0.0001)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "PathFindResult", "_netId", _netId)
	local _unit = self:GetUnit(_netId)
	if not _unit then return end
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "PathFindResult get unit")
	---@type BattleUnitCom_PathFind
	local _pathFindCom = _unit:GetComponent(BattleUnitComponentType.PathFind)
	if not _pathFindCom then return end
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "PathFindResult get pathFindCom")
	_pathFindCom:OnPathFindRequestBack(_PathFindResult)
end

--- 接收到服务器同步的路点
function BattleUnitManager:OnMonsterSyncPathPointListS2C(_netId, _posList)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager", "OnMonsterSyncPathPointListS2C", "_netId", _netId, "_posList", dumpTableEx(_posList))
	local _unit = self:GetUnit(_netId)
	if not _unit then return end
	---@type BattleUnitCom_PathFind
	local _pathFindCom = _unit:GetComponent(BattleUnitComponentType.PathFind)
	if not _pathFindCom then return end
	_pathFindCom:UpdatePathPointList(_posList)
end

-- 暂停怪物AI
function BattleUnitManager:OnPauseMonsAI(_netId)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "OnPauseMonsAI", "_netId", _netId)
	local _unit = self:GetUnit(_netId)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	_behavCom:Pause()
end

-- 恢复怪物AI
function BattleUnitManager:OnResumeMonsAI(_netId)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "BattleUnitManager", "OnResumeMonsAI", "_netId", _netId)
	local _unit = self:GetUnit(_netId)
	if not _unit then return end
	---@type BattleUnitCom_Behav
	local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
	if not _behavCom then return end
	_behavCom:Resume()
end

---收到服务器同步的创建信息，转发给表现层
---@public
function BattleUnitManager:OnCreateAreaTrigS2C(_createAreaTrigInfo)
	if not _createAreaTrigInfo then return end
	--LogTools.LogByLevel(LogLevel.log, "CheckArea", "BattleUnitManager OnCreateAreaTrigS2C start", "_netId", _netId, "_objId", _objId, "_createAreaTrigInfo", dumpTableEx(_createAreaTrigInfo))

	--local _createAreaTrigL2V = {}
	--_createAreaTrigL2V.netId = _createAreaTrigInfo.fromNetId
	--_createAreaTrigL2V.objectId = _createAreaTrigInfo.fromObjId
	--_createAreaTrigL2V.info = _createAreaTrigInfo
	--
	--self.__battleRoom.outputDataSource:CreateAreaTrigL2V(_createAreaTrigL2V)
	--LogTools.LogByLevel(LogLevel.log, "CheckArea", "BattleUnitManager OnCreateAreaTrigS2C end")
end

---收到服务器同步的开启信息，转发给表现层
---@public
function BattleUnitManager:OnOpenAreaTrigS2C(_index)
	if not _index or -1 == _index then return end
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "BattleUnitManager OnOpenAreaTrigS2C start", "_index", _index)
	end

	local _openAreaTrigL2V = {}
	_openAreaTrigL2V.index = _index

	self:GetBattleRoom().outputDataSource:OpenAreaTrigL2V(_openAreaTrigL2V)
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "BattleUnitManager OnOpenAreaTrigS2C end", "_openAreaTrigL2V", dumpTableEx(_openAreaTrigL2V))
	end
end

---收到服务器同步的关闭信息，转发给表现层
---@public
function BattleUnitManager:OnCloseAreaTrigS2C(_index)
	if not _index or -1 == _index then return end
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "BattleUnitManager OnCloseAreaTrigS2C start", "_index", _index)
	end

	local _closeAreaTrigL2V = {}
	_closeAreaTrigL2V.index = _index

	self:GetBattleRoom().outputDataSource:CloseAreaTrigL2V(_closeAreaTrigL2V)
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "BattleUnitManager OnCloseAreaTrigS2C end", "_closeAreaTrigL2V", dumpTableEx(_closeAreaTrigL2V))
	end
end

---收到服务器同步的销毁信息，转发给表现层
---@public
function BattleUnitManager:OnDestroyAreaTrigS2C(_index)
	if not _index or -1 == _index then return end
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "BattleUnitManager OnDestroyAreaTrigS2C start", "_index", _index)
	end

	local _destroyAreaTrigL2V = {}
	_destroyAreaTrigL2V.index = _index

	self:GetBattleRoom().outputDataSource:DestroyAreaTrigL2V(_destroyAreaTrigL2V)
	if LogTools.AreaLog and CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "CheckArea", "BattleUnitManager OnDestroyAreaTrigS2C end", "_destroyAreaTrigL2V", dumpTableEx(_destroyAreaTrigL2V))
	end
end

---显示层通知逻辑核消弹消息
---@public
---@param _netId number netId
---@param _position Vector3 掉落物位置
function BattleUnitManager:DestroyBulletV2L(_netId, _position, _bulletIndex)
	if not _bulletIndex or _bulletIndex ~= 1 then
		-- 消弹只判断第一次
		return
	end

	-- 通知行为树监听
	self:GetBattleRoom().behaviorManager:PostTaskListenEvent(1, LuaBehav_Define_TaskListenEnum.Controll_ShanbiXiaodan)

	-- 消弹掉落
	---@type BattleDefault
	local destroyBulletDropIdConfig = self:GetBattleRoom().inputDataSource:GetDict("BattleDefault", BATTLE_CONST.DESTROY_BULLET_DROP_ID)
	if destroyBulletDropIdConfig == nil then
		return
	end
	local _unit = self:GetUnit(_netId)
	if _unit then
		self:GetBattleRoom().battleLogicEventService:OnTriggerDestroyBulletEvent(_netId,_unit:GetCurrentHeroObjectId(),_position);
	end
	local dropId = destroyBulletDropIdConfig.value
	self:GetBattleRoom().fallObjectManager:DropFallObjectByPosition(dropId, 1, _netId, nil, _position, nil, false)
end

---显示层通知朝向敌人
---@public
---@param _netId number netId
---@param _position Vector3 掉落物位置
function BattleUnitManager:AutoFaceEnemyV2L(_netId)

	-- 通知行为树监听
	self:GetBattleRoom().behaviorManager:PostTaskListenEvent(1, LuaBehav_Define_TaskListenEnum.Controll_AutoFace)


end

---收到服务器同步的修改怪物分块命令
---@public
function BattleUnitManager:OnUnitChangeBlockStateS2C(_netId, _objId, _blockId, _stateId, _weaknessId)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager:OnUnitChangeBlockStateS2C", "_netId", _netId, "_objId", _objId, "_blockId", _blockId, "_stateId", _stateId, "_weaknessId", _weaknessId)

	local _obj = self:GetBattleRoom().battleObjectManager:GetObject(_objId)
	if not _obj or _obj:CheckDead() then return end

	---@type BattleObjCom_Block
	local _blockCom = _obj:GetComponent(BattleObjectComponentType.Block)
	if not _blockCom then return end

	_blockCom:ChangeBlockState(_blockId, _stateId, _weaknessId)
end

---玩家调用召唤物技能
---@public
function BattleUnitManager:OnUnitCallSummondSkill(_netId, _summondXlsId, _summondSkillId)
	if CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BattleUnitManager:OnUnitCallSummondSkill", "_netId", _netId, "_summondXlsId", _summondXlsId, "_summondSkillId", _summondSkillId)
	end
	
	local _unit = self:GetBattleRoom().battleUnitManager:GetUnit(_netId)
	if not _unit then return end

	---@type BattleUnitCom_Subordination
	local _subordinationCom = _unit:GetComponent(BattleUnitComponentType.Subordination)
	if not _subordinationCom then return end

	local _summondList = _subordinationCom:GetManagedObjListByObjType(BattleObjectType.SummonedMons)
	for _, _object in pairs(_summondList) do
		if _object:GetDicId() == _summondXlsId then
			 _object:GetParentUnit():GetActionManager():CastSkill(_summondSkillId)
		end
	end
end	

--- 战斗单位位置非法
---@public
---@param _netId number
function BattleUnitManager:UnitPosIllegal(_netId)
	if CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BattleUnitManager:UnitPosIllegal", "_netId", _netId)
	end

	if _netId == ActionStateManage.checkNetId then
		LogTools.LogByLevel(LogLevel.log, "CheckAiMove", "BattleUnitManager:UnitPosIllegal", "_netId", _netId)
	end

	local _unit = self:GetUnit(_netId)
	if not _unit then return end

	---@type BattleUnitCom_TagSelector
	local _tagCom = _unit:GetComponent(BattleUnitComponentType.TagSelector)
	if _tagCom then
		local _lastTime = _tagCom:GetTag(BattleUnitTagEnum.LastIllegalPosFixTime) or 0
		local _curTime = TimeUtils.battleNow(self:GetBattleId())
		if _curTime - _lastTime < 100 then --最快0.1秒纠正一次
			if CheckLogLevel(LogLevel.log) then
				LogTools.LogByLevel(LogLevel.log, "BattleUnitManager:UnitPosIllegal", "小于1秒 丢弃", _curTime - _lastTime)
			end
			return
		end
		_tagCom:SetTag(BattleUnitTagEnum.LastIllegalPosFixTime, _curTime)
	end

	local _bornPos = _unit:GetBornPos()
	local _bornRot = _unit:GetBornRot()
	if not _bornPos or not _bornRot then return end

	local _stateActionManager = _unit:GetActionManager()
	if not _stateActionManager then return end
	
	_stateActionManager:SetPosition(_bornPos)
	_stateActionManager:SetRotation(_bornRot)
	_stateActionManager:Exit(_stateActionManager:GetCurrentMoveState())
	local _turnActionState = _stateActionManager.currentStates[TurnActionState:GetId()]
	if _turnActionState then
		_stateActionManager:Exit(_turnActionState)
	end

	---结束时给表现层清一下当前速度
	local battleUnitMoveOutput = {}
	battleUnitMoveOutput.v = Vector3.zero_global()
	battleUnitMoveOutput.position = _bornPos
	battleUnitMoveOutput.rotation = _bornRot
	battleUnitMoveOutput.accelerate = Vector3.zero_global()
	battleUnitMoveOutput.moveParam = Vector3.zero_global()
	battleUnitMoveOutput.cameraParam = Vector3.zero_global()
	battleUnitMoveOutput.type = 100

	local battleUnitMoveData = {}
	battleUnitMoveData.netId = _netId
	battleUnitMoveData.objId = _unit:GetCurrentHeroObjectId()
	battleUnitMoveData.moveInfo = battleUnitMoveOutput

	self:GetBattleRoom().outputDataSource:AddBattleUnitMoveData(battleUnitMoveData)

	if CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BattleUnitManager:UnitPosIllegal", "end", "_bornPos", _bornPos, "_bornRot", _bornRot)
	end
end

---Gm功能
---@public
function BattleUnitManager:OnPlayerGM(_uid, _module, _command, _target, _paramStr)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager:OnPlayerGM", "_uid", _uid, "_module", _module, "_command", _command, "_target", _target, "_paramStr", _paramStr);

	if not self.__gmInterface then return end
	if not _uid then return end
	local _unit = self:GetUnitByPlayerId(_uid)
	self.__gmInterface:OnPlayerGM(_unit, _module, _command, _target, _paramStr)
end

---收到服务器同步的修改怪物分块命令
---@public
---@param _unit BattleUnitBase
function BattleUnitManager:UnitChangeWarriorState(_unit, _newValue)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager:UnitChangeWarriorState", "_netId", _unit:GetNetId(), "_newValue", _newValue)

	---@type BattleUnitCom_TagSelector
	local _tagCom = _unit:GetComponent(BattleUnitComponentType.TagSelector)
	if not _tagCom then return end


	local _curValue = _tagCom:GetTag(BattleUnitTagEnum.WarriorState)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager:UnitChangeWarriorState", "_curValue", _curValue)
	if _curValue == _newValue then return end
	_tagCom:SetTag(BattleUnitTagEnum.WarriorState, _newValue)

	---@type BattleObjCom_Buff
	local _buffCom = _unit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Buff)
	---@type BattleObjCom_Skill
	local _skillCom = _unit:GetCurrentHeroObject():GetComponent(BattleObjectComponentType.Skill)

	---获取老的勇士状态表数据，移除一堆
	---@type WarriorEffect
	local _curWarriorEffect = self:GetBattleRoom().inputDataSource:GetDict("WarriorEffect", _curValue)
	if _curWarriorEffect then
		if _buffCom then
			local _curBuffList = _curWarriorEffect.conBuff
			for _, _buffIdStr in pairs(_curBuffList) do
				--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager:UnitChangeWarriorState", "移除旧的勇士状态进入BUFF", "RemoveBuffStackNum", _buffIdStr)
				_buffCom:RemoveBuffStackNum(tonumber(_buffIdStr), 1)
			end
			
			local _curEndBuffList = _curWarriorEffect.endBuff
			for _, _buffIdStr in pairs(_curEndBuffList) do
				--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager:UnitChangeWarriorState", "添加旧的勇士状态结束BUFF", "AddBattleBuffById", _buffIdStr)
				_buffCom:AddBattleBuffById(tonumber(_buffIdStr), nil)
			end
		end

		if _skillCom then
			local _curSkillList = _curWarriorEffect.conTalent
			for _, _skillIdStr in pairs(_curSkillList) do
				--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager:UnitChangeWarriorState", "移除旧的勇士状态进入被动", "RemoveTalentSkill", _skillIdStr)
				_skillCom:RemoveTalentSkill(tonumber(_skillIdStr))
			end
		end
	end

	---获取新的勇士状态表数据，添加一堆
	if _newValue == 0 then return end
	---@type WarriorEffect
	local _newWarriorEffect = self:GetBattleRoom().inputDataSource:GetDict("WarriorEffect", _newValue)
	if not _newWarriorEffect then return end
	if _buffCom then
		local _curBuffList = _newWarriorEffect.conBuff
		for _, _buffIdStr in pairs(_curBuffList) do
			--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager:UnitChangeWarriorState", "添加新的勇士状态进入BUFF", "RemoveBuffStackNum", _buffIdStr)
			_buffCom:AddBattleBuffById(tonumber(_buffIdStr), nil)
		end
	end

	if _skillCom then
		local _curSkillList = _newWarriorEffect.conTalent
		for _, _skillIdStr in pairs(_curSkillList) do
			--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager:UnitChangeWarriorState", "添加新的勇士状态进入被动", "AddTalentSkill", _skillIdStr)
			_skillCom:AddTalentSkill(tonumber(_skillIdStr), 1, 0)
		end
	end
	
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitManager:UnitChangeWarriorState end", "_netId", _unit:GetNetId(), "_newValue", _newValue)
end

---@public
function BattleUnitManager:OnAskBehaviorInfo(_msg)
	if CheckLogLevel(LogLevel.log) then
		LogTools.LogByLevel(LogLevel.log, "BattleUnitManager:OnAskBehaviorInfo", "_msg.netId", _msg.netId, "_msg.graphName", _msg.graphName)
	end

	if _msg.netId then

		if 0 == _msg.netId then
			self:GetBattleRoom().behaviorManager:SetDebugTreeByIndex(1)
			return
		end
		
		local _unit = self:GetUnit(_msg.netId)
		if _unit then
			---@type BattleUnitCom_Behav
			local _behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
			if not _behavCom then return end
			local _behavIndex = _behavCom:GetTreeIndex()
			self:GetBattleRoom().behaviorManager:SetDebugTreeByIndex(_behavIndex)
		else
			self:GetBattleRoom().behaviorManager:SetDebugTreeByName(_msg.graphName)
		end
	else
		self:GetBattleRoom().behaviorManager:SetDebugTreeByName(_msg.graphName)
	end
end
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/10/25 10:59
--- Describe: 分块/部位管理组件
---

------------------------------------------------------------------------------------------------------------------------
---分块/部位的状态类型
---@class BattleObjectBlockStateType : table
BattleObjectBlockStateType = {
	ClosedBlock = 0,       ---普通分块未开启
	OpenedBlock = 1,       ---普通分块已开启
	OpenedWeakness = 2,    ---弱点已开启
	HideBlockAndMesh = 3,  ---分块和网格都隐藏
	HideBlockNotMesh = 4,  ---隐藏分块，不隐藏网格
}

---分块/部位数据类
---@class BattleObjectBlockData : table
BattleObjectBlockData = class(nil, "BattleObjCom_Block")
function BattleObjectBlockData:ctor() end

---弱点的状态
BattleObjectBlockData.WeaknessState = {
	None = 1,        --没有变成弱点
	Normal = 2,      --弱点正常
	Timeout = 3,     --弱点超时
	Broken = 4,      --弱点被击破
}

---@public
---@param _blockCom BattleObjCom_Block
---@param _normalHurtParam number 分块的普通伤害修正系数
---@param _reactHurtParam number 分块的元素反应伤害修正系数
---@param _openState BattleObjectBlockStateType 当前分块的开启状态
---@param _closeNormalHurtParam number 分块关闭时的普通伤害修正系数
---@param _closeReactHurtParam number 分块关闭时的元素反应伤害修正系数
function BattleObjectBlockData:Init(_blockCom, _blockId, _normalHurtParam, _reactHurtParam, _openState, _closeNormalHurtParam, _closeReactHurtParam)
	self.__blockCom = _blockCom
	self.__blockId = _blockId
	self.__weaknessId = -1
	self.__maxHp = -1
	self.__curHp = -1
	self.__timeTotal = 0
	self.__startTime = 0
	self.__state = BattleObjectBlockStateType.ClosedBlock
	self.__weaknessState = BattleObjectBlockData.WeaknessState.None
	self.__normalHurtParamCache = _normalHurtParam
	self.__reactHurtParamCache = _reactHurtParam
	self.__closeNormalHurtParamCache = _closeNormalHurtParam
	self.__closeReactHurtParamCache = _closeReactHurtParam
	self.__weakBreakBuff = {}
	self:__switchState(_openState, nil)
end

---@public
function BattleObjectBlockData:ChangeState(_state, _param)
	if self.__state == _state then return end
	if _state == BattleObjectBlockStateType.OpenedWeakness then
		self:ChangeState(BattleObjectBlockStateType.OpenedBlock)
	end
	local _oldState = self.__state
	self:__switchState(_state, _param)
	self:__SyncChangeData(_oldState, self.__state)
end

---@private
function BattleObjectBlockData:__switchState(_state, _param)
	self.__state = _state
	if _state == BattleObjectBlockStateType.OpenedBlock then
		self.__normalHurtParam = self.__normalHurtParamCache
		self.__reactHurtParam = self.__reactHurtParamCache
	elseif _state == BattleObjectBlockStateType.OpenedWeakness then
		self.__weaknessState = BattleObjectBlockData.WeaknessState.Normal
		---@type WeakPoint
		local _weaknessXls = self.__blockCom:GetObject():GetBattleRoom().inputDataSource:GetDict("WeakPoint", _param)
		self.__weaknessId = _param
		self.__normalHurtParam = _weaknessXls.weakHurtParam
		self.__reactHurtParam = _weaknessXls.weakReactHurtParam
		TableUtil.ClearTable(self.__weakBreakBuff)
		for i = 1, #_weaknessXls.weakBreakBuff do
			table.insert(self.__weakBreakBuff, _weaknessXls.weakBreakBuff[i])
		end
		local _hpConfig = _weaknessXls.maxHp
		if _hpConfig > 1 then
			self.__maxHp = _hpConfig
		else
			---@type BattleObjCom_Property
			local _propCom = self.__blockCom:GetObject():GetComponent(BattleObjectComponentType.Property)
			self.__maxHp = math.ceil(_propCom:GetPropertyByName(BattlePropertyEnum.Hp_Max) * _hpConfig)
		end
		self.__curHp = self.__maxHp

		self.__timeTotal = _weaknessXls.weakTime * 1000
		self.__startTime = TimeUtils.battleNow(self.__blockCom:GetBattleId())
	elseif _state == BattleObjectBlockStateType.ClosedBlock then
		self.__normalHurtParam = self.__closeNormalHurtParamCache
		self.__reactHurtParam = self.__closeReactHurtParamCache
	else
		self.__normalHurtParam = 0
		self.__reactHurtParam = 0
	end
end

---获取普通伤害修正系数
---@public
function BattleObjectBlockData:GetNormalHurtParam()
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "BattleObjectBlockData:GetNormalHurtParam", "self.__normalHurtParam", self.__normalHurtParam)
	return self.__normalHurtParam
end

---获取元素反应伤害修正系数
---@public
function BattleObjectBlockData:GetReactHurtParam()
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "BattleObjectBlockData:GetReactHurtParam", "self.__reactHurtParam", self.__reactHurtParam)
	return self.__reactHurtParam
end

---受伤扣血
---@public
function BattleObjectBlockData:OnDamage(_value, _atkNetId, _atkObjId)
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "BattleObjectBlockData:OnDamage", "_value", _value, "self.__curHp", self.__curHp)
	if self.__state ~= BattleObjectBlockStateType.OpenedWeakness then return end
	self.__curHp = self.__curHp + _value
	if self.__curHp < 0 then self.__curHp = 0 end
	self:__SyncChangeData(self.__state, self.__state)
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "BattleObjectBlockData:OnDamage 2", "self.__curHp", self.__curHp)
	if self.__curHp > 0 then return end
	self.__weaknessState = BattleObjectBlockData.WeaknessState.Broken
	---@type BattleObjCom_Buff
	local _buffCom = self.__blockCom:GetObject():GetComponent(BattleObjectComponentType.Buff)
	if _buffCom then
		for i = 1, #self.__weakBreakBuff do
			_buffCom:AddBattleBuffById(tonumber(self.__weakBreakBuff[i]), nil, nil)
		end
	end
	
	local _WeaknessBroken_S2C = {}
	_WeaknessBroken_S2C.netId = self.__blockCom:GetObject():GetParentUnit():GetNetId()
	_WeaknessBroken_S2C.objId = self.__blockCom:GetObject():GetObjectId()
	_WeaknessBroken_S2C.blockId = self.__blockId
	_WeaknessBroken_S2C.weaknessId = self.__weaknessId
	self.__blockCom:GetBattleRoom().outputDataSource:WeaknessBroken_S2C(_WeaknessBroken_S2C)
	
	self.__blockCom:GetBattleRoom().battleLogicEventService:OnTriggerWeakPointBreakEvent(_atkNetId, _atkObjId, self.__blockCom:GetObject():GetParentUnit():GetNetId(), self.__blockCom:GetObject():GetObjectId(), self.__weaknessId)
	self:ChangeState(BattleObjectBlockStateType.OpenedBlock)
	
end

---检查分块被隐藏
---@public
function BattleObjectBlockData:CheckBlockHided()
	return self.__state == BattleObjectBlockStateType.HideBlockAndMesh or self.__state == BattleObjectBlockStateType.HideBlockNotMesh
end

---检查分块当前状态
---@public
---@param _blockState BattleObjectBlockStateType
function BattleObjectBlockData:CheckBlockState(_blockState)
	return self.__state == _blockState
end

---检查弱点状态
---@public
---@param _weaknessState number BattleObjectBlockData.WeaknessState
---@return boolean
function BattleObjectBlockData:CheckWeaknessState(_weaknessState)
	return self.__weaknessState == _weaknessState
end

---逻辑层状态通信
---@private
function BattleObjectBlockData:__SyncChangeData(_oldState, _newState)
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "BattleObjectBlockData:__SyncChangeData 1")
	local _obj = self.__blockCom:GetObject()
	local _changeData = {}
	_changeData.netId = _obj:GetParentUnit():GetNetId()
	_changeData.objId = _obj:GetObjectId()
	_changeData.blockState = self:CollectStateInfo(_oldState, _newState)
	
	if IsServer() then
		_obj:GetBattleRoom().outputDataSource:AddBattleUnitChangeData(_changeData)
	else
		self:OnReceiveChangeData(_changeData.blockState)
	end
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "BattleObjectBlockData:__SyncChangeData end _changeData", dumpTableEx(_changeData))
end

---@public
---@return table msg.BattleUnitBlockStateInfo
function BattleObjectBlockData:CollectStateInfo(_oldState, _newState)
	local _BattleUnitBlockStateInfo = {}
	_BattleUnitBlockStateInfo.blockId = self.__blockId
	_BattleUnitBlockStateInfo.oldState = _oldState
	_BattleUnitBlockStateInfo.blockState = _newState or self.__state
	_BattleUnitBlockStateInfo.startTime = self.__startTime
	_BattleUnitBlockStateInfo.totalTime = self.__timeTotal
	_BattleUnitBlockStateInfo.weaknessId = self.__weaknessId
	_BattleUnitBlockStateInfo.weaknessMaxHp = self.__maxHp
	_BattleUnitBlockStateInfo.weaknessCurHp = self.__curHp
	_BattleUnitBlockStateInfo.normalHurtParam = self.__normalHurtParam
	_BattleUnitBlockStateInfo.reactHurtParam = self.__reactHurtParam
	return _BattleUnitBlockStateInfo
end

---收到服务器同步的变化信息
---@public
---@param _BattleUnitBlockStateInfo table msg.BattleUnitBlockStateInfo
function BattleObjectBlockData:OnReceiveChangeData(_BattleUnitBlockStateInfo)
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "BattleObjectBlockData:OnReceiveChangeData end _BattleUnitBlockStateInfo", dumpTableEx(_BattleUnitBlockStateInfo))
	local _targetState = _BattleUnitBlockStateInfo.blockState
	if _targetState ~= _BattleUnitBlockStateInfo.oldState then --状态改变触发的消息
		self:__SyncStateChangeToView(_BattleUnitBlockStateInfo)
	elseif _targetState == BattleObjectBlockStateType.OpenedWeakness then --弱点血量变化触发的消息
		self:__SyncHpChangeToView(_BattleUnitBlockStateInfo)
	end
	self:RefreshStateInfo(_BattleUnitBlockStateInfo)
end

---@public
---@param _BattleUnitBlockStateInfo table msg.BattleUnitBlockStateInfo
function BattleObjectBlockData:RefreshStateInfo(_BattleUnitBlockStateInfo)
	self.__state = _BattleUnitBlockStateInfo.blockState
	self.__weaknessId = _BattleUnitBlockStateInfo.weaknessId
	self.__maxHp = _BattleUnitBlockStateInfo.weaknessMaxHp
	self.__curHp = _BattleUnitBlockStateInfo.weaknessCurHp
	self.__startTime = _BattleUnitBlockStateInfo.startTime
	self.__timeTotal = _BattleUnitBlockStateInfo.totalTime
	self.__normalHurtParam = _BattleUnitBlockStateInfo.normalHurtParam
	self.__reactHurtParam = _BattleUnitBlockStateInfo.reactHurtParam
end

---同步分块状态变化到表现层
---@private
function BattleObjectBlockData:__SyncStateChangeToView(_BattleUnitBlockStateInfo)
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "BattleObjectBlockData:__SyncStateChangeToView _BattleUnitBlockStateInfo", dumpTableEx(_BattleUnitBlockStateInfo))

	local _targetState = _BattleUnitBlockStateInfo.blockState

	if _BattleUnitBlockStateInfo.oldState == BattleObjectBlockStateType.OpenedWeakness then
		local _obj = self.__blockCom:GetObject()
		local _UnitCloseWeakness_L2V = {}
		_UnitCloseWeakness_L2V.netId = _obj:GetParentUnit():GetNetId()
		_UnitCloseWeakness_L2V.objId = _obj:GetObjectId()
		_UnitCloseWeakness_L2V.blockId = _BattleUnitBlockStateInfo.blockId
		_obj:GetBattleRoom().outputDataSource:BattleUnitCloseWeaknessL2V(_UnitCloseWeakness_L2V)
		--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "BattleObjectBlockData:__SyncStateChangeToView BattleUnitCloseWeaknessL2V", dumpTableEx(_UnitCloseWeakness_L2V))
	end

	if _BattleUnitBlockStateInfo.oldState == BattleObjectBlockStateType.HideBlockNotMesh or _BattleUnitBlockStateInfo.oldState == BattleObjectBlockStateType.HideBlockAndMesh then
		if _targetState ~= BattleObjectBlockStateType.HideBlockNotMesh and _targetState ~= BattleObjectBlockStateType.HideBlockAndMesh then
			local _obj = self.__blockCom:GetObject()
			local _UnitHideBlockEnd_L2V = {}
			_UnitHideBlockEnd_L2V.netId = _obj:GetParentUnit():GetNetId()
			_UnitHideBlockEnd_L2V.objId = _obj:GetObjectId()
			_UnitHideBlockEnd_L2V.blockId = _BattleUnitBlockStateInfo.blockId
			_obj:GetBattleRoom().outputDataSource:BattleUnitHideBlockEndL2V(_UnitHideBlockEnd_L2V)
		end
	end

	if _BattleUnitBlockStateInfo.oldState ~= BattleObjectBlockStateType.HideBlockNotMesh and _BattleUnitBlockStateInfo.oldState ~= BattleObjectBlockStateType.HideBlockAndMesh then
		if _targetState == BattleObjectBlockStateType.HideBlockNotMesh or _targetState == BattleObjectBlockStateType.HideBlockAndMesh then
			local _obj = self.__blockCom:GetObject()
			local _UnitHideBlock_L2V = {}
			_UnitHideBlock_L2V.netId = _obj:GetParentUnit():GetNetId()
			_UnitHideBlock_L2V.objId = _obj:GetObjectId()
			_UnitHideBlock_L2V.blockId = _BattleUnitBlockStateInfo.blockId
			_obj:GetBattleRoom().outputDataSource:BattleUnitHideBlockL2V(_UnitHideBlock_L2V)
		end
	end 
	if _BattleUnitBlockStateInfo.oldState ~= BattleObjectBlockStateType.HideBlockAndMesh then
		if _targetState == BattleObjectBlockStateType.HideBlockAndMesh then
			local _obj = self.__blockCom:GetObject()
			local _UnitHideBlockMesh_L2V = {}
			_UnitHideBlockMesh_L2V.netId = _obj:GetParentUnit():GetNetId()
			_UnitHideBlockMesh_L2V.objId = _obj:GetObjectId()
			_UnitHideBlockMesh_L2V.blockId = _BattleUnitBlockStateInfo.blockId
			_obj:GetBattleRoom().outputDataSource:BattleUnitHideBlockMeshL2V(_UnitHideBlockMesh_L2V)
		end
	end
	if _BattleUnitBlockStateInfo.oldState == BattleObjectBlockStateType.HideBlockAndMesh then
		if _targetState ~= BattleObjectBlockStateType.HideBlockAndMesh then
			local _obj = self.__blockCom:GetObject()
			local _UnitHideBlockMeshEnd_L2V = {}
			_UnitHideBlockMeshEnd_L2V.netId = _obj:GetParentUnit():GetNetId()
			_UnitHideBlockMeshEnd_L2V.objId = _obj:GetObjectId()
			_UnitHideBlockMeshEnd_L2V.blockId = _BattleUnitBlockStateInfo.blockId
			_obj:GetBattleRoom().outputDataSource:BattleUnitHideBlockMeshEndL2V(_UnitHideBlockMeshEnd_L2V)
		end
	end

	if _targetState == BattleObjectBlockStateType.OpenedBlock then
		local _obj = self.__blockCom:GetObject()
		local _UnitOpenBlock_L2V = {}
		_UnitOpenBlock_L2V.netId = _obj:GetParentUnit():GetNetId()
		_UnitOpenBlock_L2V.objId = _obj:GetObjectId()
		_UnitOpenBlock_L2V.blockId = _BattleUnitBlockStateInfo.blockId
		_obj:GetBattleRoom().outputDataSource:BattleUnitOpenBlockL2V(_UnitOpenBlock_L2V)
		--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "BattleObjectBlockData:__SyncStateChangeToView BattleUnitOpenBlockL2V", dumpTableEx(_UnitOpenBlock_L2V))
	elseif _targetState == BattleObjectBlockStateType.ClosedBlock then
		local _obj = self.__blockCom:GetObject()
		local _UnitCloseBlock_L2V = {}
		_UnitCloseBlock_L2V.netId = _obj:GetParentUnit():GetNetId()
		_UnitCloseBlock_L2V.objId = _obj:GetObjectId()
		_UnitCloseBlock_L2V.blockId = _BattleUnitBlockStateInfo.blockId
		_obj:GetBattleRoom().outputDataSource:BattleUnitCloseBlockL2V(_UnitCloseBlock_L2V)
		--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "BattleObjectBlockData:__SyncStateChangeToView BattleUnitCloseBlockL2V", dumpTableEx(_UnitCloseBlock_L2V))
	elseif _targetState == BattleObjectBlockStateType.OpenedWeakness then
		local _obj = self.__blockCom:GetObject()
		local _UnitOpenWeakness_L2V = {}
		_UnitOpenWeakness_L2V.netId = _obj:GetParentUnit():GetNetId()
		_UnitOpenWeakness_L2V.objId = _obj:GetObjectId()
		_UnitOpenWeakness_L2V.blockId = _BattleUnitBlockStateInfo.blockId
		_UnitOpenWeakness_L2V.weaknessId = _BattleUnitBlockStateInfo.weaknessId
		_UnitOpenWeakness_L2V.maxHp = _BattleUnitBlockStateInfo.weaknessMaxHp
		_UnitOpenWeakness_L2V.curHp = _BattleUnitBlockStateInfo.weaknessCurHp
		_UnitOpenWeakness_L2V.startTime = _BattleUnitBlockStateInfo.startTime
		_obj:GetBattleRoom().outputDataSource:BattleUnitOpenWeaknessL2V(_UnitOpenWeakness_L2V)
		--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "BattleObjectBlockData:__SyncStateChangeToView BattleUnitOpenWeaknessL2V", dumpTableEx(_UnitOpenWeakness_L2V))
	end
end

---同步弱点血量变化到表现层
---@private
function BattleObjectBlockData:__SyncHpChangeToView(_BattleUnitBlockStateInfo)
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "BattleObjectBlockData:__SyncHpChangeToView 1")
	local _obj = self.__blockCom:GetObject()
	local _UnitWeaknessHpChange_L2V = {}
	_UnitWeaknessHpChange_L2V.netId = _obj:GetParentUnit():GetNetId()
	_UnitWeaknessHpChange_L2V.objId = _obj:GetObjectId()
	_UnitWeaknessHpChange_L2V.blockId = _BattleUnitBlockStateInfo.blockId
	_UnitWeaknessHpChange_L2V.maxHp = _BattleUnitBlockStateInfo.weaknessMaxHp
	_UnitWeaknessHpChange_L2V.curHp = _BattleUnitBlockStateInfo.weaknessCurHp
	_obj:GetBattleRoom().outputDataSource:BattleUnitWeaknessHPChangeL2V(_UnitWeaknessHpChange_L2V)
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "BattleObjectBlockData:__SyncHpChangeToView end _UnitWeaknessHpChange_L2V", dumpTableEx(_UnitWeaknessHpChange_L2V))
end

---@public
function BattleObjectBlockData:OnUpdate(_deltaTime)
	if self.__state ~= BattleObjectBlockStateType.OpenedWeakness then return end
	if -1 == self.__timeTotal then return end
	if TimeUtils.battleNow(self.__blockCom:GetBattleId()) - self.__startTime > self.__timeTotal then
		self.__weaknessState = BattleObjectBlockData.WeaknessState.Timeout
		self:ChangeState(BattleObjectBlockStateType.OpenedBlock)
	end
end

---生成给表现层用的分块数据
---@public
function BattleObjectBlockData:CollectBlockData()
	local _BattleUnitBlockStateInfo = {}
	_BattleUnitBlockStateInfo.blockId = self.__blockId
	_BattleUnitBlockStateInfo.oldState = -1
	_BattleUnitBlockStateInfo.blockState = self.__state
	_BattleUnitBlockStateInfo.weaknessId = self.__weaknessId
	_BattleUnitBlockStateInfo.startTime = self.__startTime
	_BattleUnitBlockStateInfo.weaknessMaxHp = self.__maxHp
	_BattleUnitBlockStateInfo.weaknessCurHp = self.__curHp
	return _BattleUnitBlockStateInfo
end

---@public
function BattleObjectBlockData:Clear()
	self.__blockCom = nil
	self.__blockId = nil
	self.__weaknessId = nil
	self.__maxHp = nil
	self.__curHp = nil
	self.__state = nil
	self.__normalHurtParamCache = nil
	self.__reactHurtParamCache = nil
	self.__closeNormalHurtParamCache = nil
	self.__closeReactHurtParamCache = nil
	self.__weaknessState = nil
	self.__state = nil
end
------------------------------------------------------------------------------------------------------------------------
---@class BattleObjCom_Block : BattleObjectComponentBase
BattleObjCom_Block = class(BattleObjectComponentBase, "BattleObjCom_Block")

function BattleObjCom_Block:ctor()
	self:__ctor(BattleObjectComponentType.Block)
end

---@public
---@param _battleObject BattleObjectBase
function BattleObjCom_Block:Init(_battleObject)
	self:__Init(_battleObject)

	---@private
	---@type BattleObjectBlockData[]
	self.__blockDataDic = {}
	if _battleObject:CheckObjectType(BattleObjectType.MonsterHero) then
		self:__InitMonster()
	elseif _battleObject:CheckObjectType(BattleObjectType.SummonedMons) then
		self:__InitSummonedMons()
	else
		self:__InitDefault()
	end
end

---@private
function BattleObjCom_Block:__InitDefault()
	---@type BattleObjectBlockData
	local _defaultBlockData = BattleObjectBlockData.New()
	_defaultBlockData:Init(self, 0, 1, 1, 1)
	self.__blockDataDic[BattleObjCom_Block.__CountBlockId(0)] = _defaultBlockData
end

---@private
function BattleObjCom_Block:__InitMonster()
	---@type MonsterInstance
	local _monsterInstanceXls = self:GetObject():GetDataInstanceXls()
	if not _monsterInstanceXls then return end
	local _blockHurtParamList = _monsterInstanceXls.bodyPartHurtParam
	local _blockReactHurtParamList = _monsterInstanceXls.bodyPartReactHurtParam
	local _blockClosedHurtParamList = _monsterInstanceXls.bodyPartOffHurtParam
	local _blockOpenStateList = _monsterInstanceXls.bodyPartSwitchParam

	local _blockDataDic = self.__blockDataDic
	---@type BattleObjectBlockData
	local _defaultBlockData = BattleObjectBlockData.New()
	_defaultBlockData:Init(self, 0, 1, 1, 1, _blockClosedHurtParamList[1], _blockClosedHurtParamList[2])
	_blockDataDic[BattleObjCom_Block.__CountBlockId(0)] = _defaultBlockData
	for i = 1, #_blockHurtParamList do
		---@type BattleObjectBlockData
		local _blockData = BattleObjectBlockData.New()
		_blockData:Init(self, i, _blockHurtParamList[i], _blockReactHurtParamList[i] or 1, _blockOpenStateList[i] or BattleObjectBlockStateType.OpenedBlock, _blockClosedHurtParamList[1], _blockClosedHurtParamList[2])
		_blockDataDic[BattleObjCom_Block.__CountBlockId(i)] = _blockData
	end
end

---@private
function BattleObjCom_Block:__InitSummonedMons()
	
	---@type MonsterInstance
	local _monsterInstanceXls = self:GetObject():GetDataInstanceXls()
	if not _monsterInstanceXls then return end


	---@type SummonedMonster
	local _summondedXls = self:GetObject():GetInstanceXls()
	local _hitBoxEx = _summondedXls.hitboxEx
	--LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Block:__InitSummonedMons", "monsInstanceId", _monsterInstanceXls.id, "_hitBoxEx", dumpTableEx(_hitBoxEx))
	if #_hitBoxEx > 0 then
		self:__InitSummonedMonsByHitBoxEx(_monsterInstanceXls, _hitBoxEx)
		return
	end

	local _blockHurtParamList = _monsterInstanceXls.bodyPartHurtParam
	local _blockReactHurtParamList = _monsterInstanceXls.bodyPartReactHurtParam
	local _blockClosedHurtParamList = _monsterInstanceXls.bodyPartOffHurtParam
	local _blockOpenStateList = _monsterInstanceXls.bodyPartSwitchParam

	local _blockDataDic = self.__blockDataDic
	---@type BattleObjectBlockData
	local _defaultBlockData = BattleObjectBlockData.New()
	_defaultBlockData:Init(self, 0, 1, 1, 1, _blockClosedHurtParamList[1], _blockClosedHurtParamList[2])
	_blockDataDic[BattleObjCom_Block.__CountBlockId(0)] = _defaultBlockData
	for i = 1, #_blockHurtParamList do
		---@type BattleObjectBlockData
		local _blockData = BattleObjectBlockData.New()
		_blockData:Init(self, i, _blockHurtParamList[i], _blockReactHurtParamList[i] or 1, _blockOpenStateList[i] or BattleObjectBlockStateType.OpenedBlock, _blockClosedHurtParamList[1], _blockClosedHurtParamList[2])
		_blockDataDic[BattleObjCom_Block.__CountBlockId(i)] = _blockData
	end
end

---@private
---@param _monsterInstanceXls MonsterInstance
---@param _hitBoxEx number[] 指定的分块ID
function BattleObjCom_Block:__InitSummonedMonsByHitBoxEx(_monsterInstanceXls, _hitBoxEx)
	
	local _useHurtParam = _monsterInstanceXls.bodyPartHurtParam[1] or 1
	local _useReactHurtParam = _monsterInstanceXls.bodyPartReactHurtParam[1] or 1
	local _blockClosedHurtParamList = _monsterInstanceXls.bodyPartOffHurtParam
	local _useBlockOpenState = _monsterInstanceXls.bodyPartSwitchParam[1]
	
	local _blockDataDic = self.__blockDataDic
	---@type BattleObjectBlockData
	local _defaultBlockData = BattleObjectBlockData.New()
	_defaultBlockData:Init(self, 0, 1, 1, 1, _blockClosedHurtParamList[1], _blockClosedHurtParamList[2])
	_blockDataDic[BattleObjCom_Block.__CountBlockId(0)] = _defaultBlockData
	for i = 1, #_hitBoxEx do
		---@type BattleObjectBlockData
		local _blockData = BattleObjectBlockData.New()
		_blockData:Init(self, _hitBoxEx[i], _useHurtParam, _useReactHurtParam, _useBlockOpenState, _blockClosedHurtParamList[1], _blockClosedHurtParamList[2])
		_blockDataDic[BattleObjCom_Block.__CountBlockId(_hitBoxEx[i])] = _blockData
	end
	
end

------------------------------------------------------------------------------------------------------------------------
---修改状态
---@public
function BattleObjCom_Block:ChangeBlockState(_blockId, _stateId, _weaknessId)
	--LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Block:ChangeBlockState", "_blockId", _blockId, "_stateId", _stateId, "_weaknessId", _weaknessId)
	local _blockData = self.__blockDataDic[BattleObjCom_Block.__CountBlockId(_blockId)]
	if not _blockData then return end
	_blockData:ChangeState(_stateId, _weaknessId)
end

---检查分块被隐藏（分块不存在按照true处理）
---@public
function BattleObjCom_Block:CheckBlockHided(_blockId)
	local _blockData = self.__blockDataDic[BattleObjCom_Block.__CountBlockId(_blockId)]
	--LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Block:CheckBlockHided", "blockId", _blockId, "_blockData", _blockData)
	if not _blockData then return true end
	return _blockData:CheckBlockHided()
end

---检查分块状态
---@public
function BattleObjCom_Block:CheckBlockState(_blockId, _stateId)
	local _blockData = self.__blockDataDic[BattleObjCom_Block.__CountBlockId(_blockId)]
	if not _blockData then return end
	return _blockData:CheckBlockState(_stateId)
end

---获取分块的普通伤害修正
---@public
---@param _atkNetId number 攻击方NetId
---@param _atkObjId number 攻击方ObjId
function BattleObjCom_Block:GetBlockNormalHurtParam(_blockId, _atkNetId, _atkObjId)
	
	if _atkNetId then
		local _atkUnit = self:GetBattleRoom().battleUnitManager:GetUnit(_atkNetId, true)
		---@type BattleUnitCom_Buff
		local _atkUnitBuffCom = _atkUnit:GetComponent(BattleUnitComponentType.Buff)
		if _atkUnitBuffCom then
			local _weakId = _atkUnitBuffCom:IsAllAttackHitWeak()
			if _weakId then
				---@type WeakPoint
				local _weaknessXls = self:GetBattleRoom().inputDataSource:GetDict("WeakPoint", _weakId)
				return _weaknessXls.weakHurtParam
			end
		end
	end

	if _atkObjId then
		local _atkObj = self:GetBattleRoom().battleObjectManager:GetObject(_atkObjId)
		---@type BattleObjCom_Buff
		local _atkObjBuffCom = _atkObj:GetComponent(BattleObjectComponentType.Buff)
		if _atkObjBuffCom then
			local _weakId = _atkObjBuffCom:IsAllAttackHitWeak()
			if _weakId then
				---@type WeakPoint
				local _weaknessXls = self:GetBattleRoom().inputDataSource:GetDict("WeakPoint", _weakId)
				return _weaknessXls.weakHurtParam
			end
		end
	end
	
	---@type BattleUnitCom_Buff
	local _unitBuffCom = self:GetObject():GetParentUnit():GetComponent(BattleUnitComponentType.Buff)
	if _unitBuffCom then
		local _weakId = _unitBuffCom:IsAllWeak()
		if _weakId then
			---@type WeakPoint
			local _weaknessXls = self:GetBattleRoom().inputDataSource:GetDict("WeakPoint", math.floor(_weakId))
			return _weaknessXls.weakHurtParam
		end
	end

	---@type BattleObjCom_Buff
	local _objBuffCom = self:GetObject():GetComponent(BattleObjectComponentType.Buff)
	if _objBuffCom then
		local _weakId = _objBuffCom:IsAllWeak()
		if _weakId then
			---@type WeakPoint
			local _weaknessXls = self:GetBattleRoom().inputDataSource:GetDict("WeakPoint", math.floor(_weakId))
			return _weaknessXls.weakHurtParam
		end
	end

	if not _blockId then return 1 end
	local _blockData = self.__blockDataDic[BattleObjCom_Block.__CountBlockId(_blockId)]
	if not _blockData then return 1 end
	
	return _blockData:GetNormalHurtParam()
end

---获取分块的元素反应伤害修正
---@public
---@param _atkNetId number 攻击方NetId
---@param _atkObjId number 攻击方ObjId
function BattleObjCom_Block:GetBlockReactHurtParam(_blockId, _atkNetId, _atkObjId)

	if _atkNetId then
		local _atkUnit = self:GetBattleRoom().battleUnitManager:GetUnit(_atkNetId, true)
		---@type BattleUnitCom_Buff
		local _atkUnitBuffCom = _atkUnit:GetComponent(BattleUnitComponentType.Buff)
		if _atkUnitBuffCom then
			local _weakId = _atkUnitBuffCom:IsAllAttackHitWeak()
			if _weakId then
				---@type WeakPoint
				local _weaknessXls = self:GetBattleRoom().inputDataSource:GetDict("WeakPoint", _weakId)
				return _weaknessXls.weakReactHurtParam
			end
		end
	end

	if _atkObjId then
		local _atkObj = self:GetBattleRoom().battleObjectManager:GetObject(_atkObjId)
		---@type BattleObjCom_Buff
		local _atkObjBuffCom = _atkObj:GetComponent(BattleObjectComponentType.Buff)
		if _atkObjBuffCom then
			local _weakId = _atkObjBuffCom:IsAllAttackHitWeak()
			if _weakId then
				---@type WeakPoint
				local _weaknessXls = self:GetBattleRoom().inputDataSource:GetDict("WeakPoint", _weakId)
				return _weaknessXls.weakReactHurtParam
			end
		end
	end
	
	---@type BattleUnitCom_Buff
	local _unitBuffCom = self:GetObject():GetParentUnit():GetComponent(BattleUnitComponentType.Buff)
	if _unitBuffCom then
		local _weakId = _unitBuffCom:IsAllWeak()
		if _weakId then
			---@type WeakPoint
			local _weaknessXls = self:GetBattleRoom().inputDataSource:GetDict("WeakPoint", _weakId)
			return _weaknessXls.weakReactHurtParam
		end
	end
	
	---@type BattleObjCom_Buff
	local _objBuffCom = self:GetObject():GetComponent(BattleObjectComponentType.Buff)
	if _objBuffCom then
		local _weakId = _objBuffCom:IsAllWeak()
		if _weakId then
			---@type WeakPoint
			local _weaknessXls = self:GetBattleRoom().inputDataSource:GetDict("WeakPoint", _weakId)
			return _weaknessXls.weakReactHurtParam
		end
	end
	
	if not _blockId then return 1 end
	local _blockData = self.__blockDataDic[BattleObjCom_Block.__CountBlockId(_blockId)]
	if not _blockData then return 1 end
	
	return _blockData:GetReactHurtParam()
end

---分块受伤
---@public
---@param _blockId number 分块ID
---@param _value number 伤害值 有正负
---@param _atkNetId number 攻击者netID
---@param _atkObjId number 攻击者objID
function BattleObjCom_Block:OnBlockDamage(_blockId, _value, _atkNetId, _atkObjId)
	local _blockData = self.__blockDataDic[BattleObjCom_Block.__CountBlockId(_blockId)]
	if not _blockData then return end
	_blockData:OnDamage(_value, _atkNetId, _atkObjId)
end

---检查某个分块的弱点被击破
---@public
---@param _blockId number 分块ID
function BattleObjCom_Block:CheckWeaknessBroken(_blockId)
	local _blockData = self.__blockDataDic[BattleObjCom_Block.__CountBlockId(_blockId)]
	if not _blockData then return false end
	return _blockData:CheckWeaknessState(BattleObjectBlockData.WeaknessState.Broken)
end

---检查某个分块的弱点到时
---@public
---@param _blockId number 分块ID 
function BattleObjCom_Block:CheckWeaknessTimeout(_blockId)
	local _blockData = self.__blockDataDic[BattleObjCom_Block.__CountBlockId(_blockId)]
	if not _blockData then return false end
	return _blockData:CheckWeaknessState(BattleObjectBlockData.WeaknessState.Timeout)
end

---@public
function BattleObjCom_Block:OnUpdate(_deltaTime)
	self:__OnUpdate(_deltaTime)
	for _, _blockData in pairs(self.__blockDataDic) do
		_blockData:OnUpdate(_deltaTime)
	end
end

---@public
---@param _battleUnitBlockStateInfo table msg.BattleUnitBlockStateInfo
function BattleObjCom_Block:OnReceiveChangeData(_battleUnitBlockStateInfo)
	--LogTools.LogByLevel(LogLevel.log, "CheckHurt", "BattleObjCom_Block:OnReceiveChangeData", "_battleUnitBlockStateInfo", dumpTableEx(_battleUnitBlockStateInfo))
	local _blockId = _battleUnitBlockStateInfo.blockId
	local _blockData = self.__blockDataDic[BattleObjCom_Block.__CountBlockId(_blockId)]
	if _blockData then
		_blockData:OnReceiveChangeData(_battleUnitBlockStateInfo)
	end
end

---@public
function BattleObjCom_Block:CollectBlockDatas()
	local _tab = {}
	for _, _blockData in pairs(self.__blockDataDic) do
		table.insert(_tab, _blockData:CollectBlockData())
	end
	return _tab
end
------------------------------------------------------------------------------------------------------------------------
---ID转化规则
---@private
function BattleObjCom_Block.__CountBlockId(_block)
	return 100 + _block
end

---@public
function BattleObjCom_Block:Clear()
	for _, _blockData in pairs(self.__blockDataDic) do
		_blockData:Clear()
	end
	self.__blockDataDic = nil
	self:__Clear()
end

------------------------------------------------------------------------------------------------------------------------
---服务器逻辑核生成用于发送给前端逻辑核的全量信息
---@public
function BattleObjCom_Block:GetCreateSyncMessage_S2C()
	local BattleUnitBlockStateInfoList = {}
	for _, _blockData in pairs(self.__blockDataDic) do
		table.insert(BattleUnitBlockStateInfoList, _blockData:CollectStateInfo())
	end
	return BattleUnitBlockStateInfoList
end

---前端逻辑核用服务器发来的全量信息刷新自身数据
---@public
function BattleObjCom_Block:OnReceiveCreateSyncMessage_S2C(_BattleUnitBlockStateInfoList)
	for _, _BattleUnitBlockStateInfo in pairs(_BattleUnitBlockStateInfoList) do
		local _blockData = self.__blockDataDic[BattleObjCom_Block.__CountBlockId(_BattleUnitBlockStateInfo.blockId)]
		_blockData:RefreshStateInfo(_BattleUnitBlockStateInfo)
	end
end

-----前端逻辑核生成用于发送给表现的层全量信息
-----@public
--function BattleObjCom_Block:GetCreateSyncMessage_L2V()
--    local BattleUnitBlockStateInfoList = {}
--	for _, _blockData in pairs(self.__blockDataDic) do
--		table.insert(BattleUnitBlockStateInfoList, _blockData:CollectStateInfo())
--	end
--	return BattleUnitBlockStateInfoList
--end

return BattleObjCom_Block
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2021/12/16 11:05
--- 服务器logic_core输出数据处理器

require "Lib/class"
require "Battle/Logic/Room/Component/OutputDataProcessor"
require "Battle/Logic/Room/Component/Server/ServerOutputData"

---@class ServerOutputDataProcessor : OutputDataProcessor 服务器logic_core输出数据处理器
ServerOutputDataProcessor = class(OutputDataProcessor,'ServerOutputDataProcessor');

function ServerOutputDataProcessor:ctor(_battleId)
    self.battleId = _battleId
    self.battleRoom = GetBattleRoom(_battleId)
    self.fullData = ServerOutputData.New();
    self.currentFrameId = 0;
    self.traceBackList = {};
    self.playerCurrentFrameId = {};
    ---@type table[] 玩家移动输出列表
    self.battleUnitMoveDataList = {};
    ---@type table[] 玩家改变输出列表
    self.battleUnitChangeDataList = {};
    ---@type table[] 玩家关键帧输出列表
    self.battleUnitKeyDataList = {};
    ---@type table[] 战场输出列表
    self.battleFieldDataList = {};
end

--- 通知前端创建关卡触发器
---@public
---@param _generateLevelTrigger table 创建关卡触发器协议
function ServerOutputDataProcessor:CreateLevelTriggerS2C(_generateLevelTrigger)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.GENERATE_LEVEL_TRIGGER_S2C:GetId(),_generateLevelTrigger,true)
end

--- 暂停怪物AI
---@public
---@param _MonsPauseAi_S2C table msg.MonsPauseAi_S2C
function ServerOutputDataProcessor:PauseMonsAiS2C(_MonsPauseAi_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.MONS_PAUSE_AI:GetId(),_MonsPauseAi_S2C,true)
end

--- 恢复怪物AI
---@public
---@param _MonsResumeAi_S2C table msg.MonsResumeAi_S2C
function ServerOutputDataProcessor:ResumeMonsAiS2C(_MonsResumeAi_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.MONS_RESUME_AI:GetId(),_MonsResumeAi_S2C,true)
end

--- 怪物开启巡逻
---@public
---@param _UnitPatrol_S2C table msg.UnitPatrol_S2C
function ServerOutputDataProcessor:StartMonsPatrolS2C(_UnitPatrol_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_PATROL_S2C:GetId(),_UnitPatrol_S2C,false)
end

--- 怪物停止巡逻
---@public
---@param _UnitPatrolCancel_S2C table msg.UnitPatrolCancel_S2C
function ServerOutputDataProcessor:StopMonsPatrolS2C(_UnitPatrolCancel_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_PATROL_CANCEL_S2C:GetId(),_UnitPatrolCancel_S2C,false)
end

--- 开始追逐目标
---@public
---@param _UnitChaseTarget_S2C table msg.UnitChaseTarget_S2C
function ServerOutputDataProcessor:StartChaseTargetS2C(_UnitChaseTarget_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_CHASE_TARGET_S2C:GetId(),_UnitChaseTarget_S2C,false)
end

--- 停止追逐目标
---@public
---@param _UnitStopChaseTarget_S2C table msg.UnitStopChaseTarget_S2C
function ServerOutputDataProcessor:StopChaseTargetS2C(_UnitStopChaseTarget_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_STOP_CHASE_TARGET_S2C:GetId(),_UnitStopChaseTarget_S2C,false)
end

--- 开始远离目标
---@public
---@param _UnitEscapeTarget_S2C table msg.UnitEscapeTarget_S2C
function ServerOutputDataProcessor:StartEscapeTargetS2C(_UnitEscapeTarget_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_ESCAPE_TARGET_S2C:GetId(),_UnitEscapeTarget_S2C,false)
end

--- 停止远离目标
---@public
---@param _UnitStopEscapeTarget_S2C table msg.UnitStopEscapeTarget_S2C
function ServerOutputDataProcessor:StopEscapeTargetS2C(_UnitStopEscapeTarget_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_STOP_ESCAPE_TARGET_S2C:GetId(),_UnitStopEscapeTarget_S2C,false)
end

--- 开始指定移动
---@public
---@param _UnitMoveTowards_S2C table msg.UnitMoveTowards_S2C
function ServerOutputDataProcessor:StartMoveTowardsS2C(_UnitMoveTowards_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_MOVE_TOWARDS_TARGET_S2C:GetId(),_UnitMoveTowards_S2C,false)
end

--- 停止指定移动
---@public
---@param _UnitStopMoveTowards_S2C table msg.UnitStopMoveTowards_S2C
function ServerOutputDataProcessor:StopMoveTowardsS2C(_UnitStopMoveTowards_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_STOP_MOVE_TOWARDS_TARGET_S2C:GetId(),_UnitStopMoveTowards_S2C,false)
end

--- 开始平移
---@public
---@param _UnitMoveTowards_2_S2C table msg.UnitMoveTowards_2_S2C
function ServerOutputDataProcessor:StartMoveTowards_2_S2C(_UnitMoveTowards_2_S2C)
    COMMAND.BroadcastCommandToClientTable(PROTO_CODE_ENUM.UNIT_MOVE_TOWARDS_2_S2C:GetId(), _UnitMoveTowards_2_S2C, false)
end

--- 停止平移
---@public
---@param _UnitStopMoveTowards_2_S2C table msg.UnitStopMoveTowards_S2C
function ServerOutputDataProcessor:StopMoveTowards_2_S2C(_UnitStopMoveTowards_2_S2C)
    COMMAND.BroadcastCommandToClientTable(PROTO_CODE_ENUM.UNIT_STOP_MOVE_TOWARDS_2_S2C:GetId(), _UnitStopMoveTowards_2_S2C, false)
end

--- 开始转向目标
---@public
---@param _UnitFaceTarget_S2C table msg.UnitFaceTarget_S2C
function ServerOutputDataProcessor:StartFaceTargetS2C(_UnitFaceTarget_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_FACE_TARGET_S2C:GetId(),_UnitFaceTarget_S2C,true)
end

--- 停止转向目标
---@public
---@param _UnitStopFaceTarget_S2C table msg.UnitStopFaceTarget_S2C
function ServerOutputDataProcessor:StopFaceTargetS2C(_UnitStopFaceTarget_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_STOP_FACE_TARGET_S2C:GetId(),_UnitStopFaceTarget_S2C,true)
end

--- 开始跟随召唤者
---@public
---@param _UnitChaseSubordinate_S2C table msg.UnitChaseSubordinate_S2C
function ServerOutputDataProcessor:StartChaseSubordinateS2C(_UnitChaseSubordinate_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_CHASE_SUBORDINATE:GetId(),_UnitChaseSubordinate_S2C,false)
end

--- 停止跟随召唤者
---@public
---@param _UnitStopChaseSubordinate_S2C table msg.UnitStopChaseSubordinate_S2C
function ServerOutputDataProcessor:StopChaseSubordinateS2C(_UnitStopChaseSubordinate_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_STOP_CHASE_SUBORDINATE:GetId(),_UnitStopChaseSubordinate_S2C,false)
end

--- 开始导航点移动
---@public
---@param _UnitMoveNavPoints_S2C table msg.UnitMoveNavPoints_S2C
function ServerOutputDataProcessor:StartMoveNavPointsS2C(_UnitMoveNavPoints_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_MOVE_NAV_POINTS_S2C:GetId(), _UnitMoveNavPoints_S2C, false)
end

--- 停止导航点移动
---@public
---@param _UnitStopMoveNavPoints_S2C table msg.UnitStopMoveNavPoints_S2C
function ServerOutputDataProcessor:StopMoveNavPointsS2C(_UnitStopMoveNavPoints_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_STOP_MOVE_NAV_POINTS_S2C:GetId(), _UnitStopMoveNavPoints_S2C, false)
end

--- 怪物施放技能
---@public
---@param _MonsCastSkill_S2C table msg.MonsCastSkill_S2C
function ServerOutputDataProcessor:MonsCastSkillS2C(_MonsCastSkill_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.MONS_CAST_SKILL_S2C:GetId(),_MonsCastSkill_S2C,true)
end

--- 战斗单位开始切换血量阶段
---@public
---@param _UnitStartChangeStage_S2C table msg.UnitStartChangeStage_S2C
function ServerOutputDataProcessor:UnitStartChangeStage_S2C(_UnitStartChangeStage_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_START_CHANGE_STAGE_S2C:GetId(),_UnitStartChangeStage_S2C,false)
end

--- 战斗单位切换血量阶段
---@public
---@param _UnitChangeStage_S2C table msg.UnitChangeStage_S2C
function ServerOutputDataProcessor:UnitChangeStageS2C(_UnitChangeStage_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_CHANGE_STAGE_S2C:GetId(),_UnitChangeStage_S2C,false)
end


--- 添加移动输出数据
---@public
---@param _battleMoveData table logic_core每帧输出的数据
function ServerOutputDataProcessor:AddBattleUnitMoveData(_battleMoveData)
    --note by kun 2022.05.31
    --目前MoveActionState和TurnActionState都会产出完整的运动数据;
    --这影响了客户端的相机damping计算。因为对于 camera rotation 而言,有一次manualUpdate里是没有旋转的，这会产生一次damping干扰计算.
    --当旋转角速度不稳定时，问题更明显.
    --因此先在这里合并同一个对象的运动结果.
    for i=1, #self.battleUnitMoveDataList do
        local movedata = self.battleUnitMoveDataList[i]
        if movedata.netId == _battleMoveData.netId then
            self.battleUnitMoveDataList[i]=_battleMoveData
            return
        end
    end
    table.insert(self.battleUnitMoveDataList, _battleMoveData)
end

--- 添加改变输出数据
---@public
---@param _battleChangeData table logic_core每帧输出的数据
function ServerOutputDataProcessor:AddBattleUnitChangeData(_battleChangeData)
    table.insert(self.battleUnitChangeDataList, _battleChangeData)
end

--- 添加关键帧输出数据
---@public
---@param _battleKeyData table logic_core每帧输出的数据
function ServerOutputDataProcessor:AddBattleUnitKeyData(_battleKeyData)
    table.insert(self.battleUnitKeyDataList, _battleKeyData)
end

--- 添加战场输出数据
---@public
---@param _battleFieldData table logic_core每帧输出的数据
function ServerOutputDataProcessor:AddBattleFieldData(_battleFieldData)
    table.insert(self.battleFieldDataList, _battleFieldData)
end

--- 广播输出数据
---@public
---@param _dt number
function ServerOutputDataProcessor:BroadCastOutputData(_dt)

    if #self.battleUnitChangeDataList ~= 0 then
        local changeData = {}
        changeData.frameId = self.battleRoom.frameId;
        changeData.info = self.battleUnitChangeDataList
        COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.BATTLE_UNIT_CHANGE_DATA:GetId(), changeData, false);

        -- 清空输出数据
        self.battleUnitChangeDataList = {}
    end

    if #self.battleUnitKeyDataList ~= 0 then
        local keyData = {}
        keyData.frameId = self.battleRoom.frameId;
        keyData.info = self.battleUnitKeyDataList
        COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.BATTLE_UNIT_KEY_DATA:GetId(), keyData, false);

        -- 清空输出数据
        self.battleUnitKeyDataList = {}
    end

    if #self.battleFieldDataList ~= 0 then
        local fieldData = {}
        fieldData.frameId = self.battleRoom.frameId;
        fieldData.info = self.battleFieldDataList
        COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.BATTLE_FIELD_DATA:GetId(), fieldData, false);

        -- 清空输出数据
        self.battleFieldDataList = {}
    end
end

function ServerOutputDataProcessor:BroadCastMoveOutputData(_frameId, _dt)

    if #self.battleUnitMoveDataList ~= 0 then
        local moveData = {}
        moveData.frameId = _frameId;
        moveData.info = self.battleUnitMoveDataList
        moveData.timeStamp = TimeUtils.battleNow(self.battleId);
        COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.BATTLE_UNIT_MOVE_DATA:GetId(), moveData, false);

        -- 清空输出数据
        self.battleUnitMoveDataList = {}

        -- TODO 暂时没有回溯逻辑，压测先注掉，需要再打开重新压
        --if _frameId >= 0 then
        --    for i, v in pairs(moveData.info) do
        --        if self.traceBackList[v.netId] == nil then
        --            self.traceBackList[v.netId] = {};
        --        end
        --        self.traceBackList[v.netId][_frameId] = v;
        --        if self.traceBackList[v.netId][_frameId - 10] then
        --            self.traceBackList[v.netId][_frameId - 10] = nil;
        --        end
        --    end
        --end
    end
end

--- 切换关卡阶段
---@public
---@param _toStage number 切换的阶段(到哪个结算)
---@param _fromStage number 切换的阶段(从哪个阶段)
function ServerOutputDataProcessor:BattleLevelGoToStage(_toStage, _fromStage)
    if not _fromStage then
        _fromStage = self.battleRoom.battleLevelManager:GetCurLevelStageEnum()
    end
    self.battleRoom.battleLevelManager.serverChangingStage = true
    local _serverTime = TimeUtils.battleNow(self.battleId)
    -- 服务器先切阶段
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "ServerOutputDataProcessor", "BattleLevelGoToStage", "stage", _fromStage, "enter", _toStage)
    end
    if not self.battleRoom:OnNotifyChangeBattleLevelStage(_fromStage, _toStage, _serverTime) then
        -- 切失败就return了
        return
    end
    ---@type table
    local protoData = {
        fromStage = _fromStage,
        toStage = _toStage,
        serverTime = _serverTime
    }
    -- 客户端收到消息切阶段
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.NOTIFY_CHANGE_BATTLE_LEVEL_STAGE:GetId(), protoData, false);
end

function ServerOutputDataProcessor:NotifyBattleOverResult(_result)
    ---@type table
    local protoData = {
        result = _result
    };
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.NOTIFY_BATTLE_OVER_RESULT_PUSH:GetId(), protoData, true);
end

--- 玩家切换英雄输入
---@public
---@param _battleOutputData table PlayerChangeLeader_S2C
function ServerOutputDataProcessor:PlayerChangeLeaderS2C(_battleOutputData)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.PLAYER_CHANGE_LEADER_S2C:GetId(),_battleOutputData, true);
end

--- 单位受伤广播
---@public
---@param _battleOutputData table UnitHurt_S2C
function ServerOutputDataProcessor:UnitHurtS2C(_battleOutputData)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_HURT_BROAD_CAST:GetId(),_battleOutputData, false);
end

-- 服务器向前端发起寻路请求
---@public
---@param _PathFindRequest table PathFindRequest
function ServerOutputDataProcessor:SendPathFindRequest_S2C(_PathFindRequest)
    --LogTools.LogByLevel(LogLevel.log, "ServerOutputDataProcessor", "SendPathFindRequest_S2C", "_PathFindRequest", dumpTableEx(_PathFindRequest))
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_PATH_FIND_REQUEST_S2C:GetId(),_PathFindRequest, false)
end

-- 服务器向前端取消寻路请求
---@public
---@param _PathFindRequestCancel table PathFindRequestCancel
function ServerOutputDataProcessor:CancelPathFindRequest_S2C(_PathFindRequestCancel)
    --LogTools.LogByLevel(LogLevel.log, "ServerOutputDataProcessor", "CancelPathFindRequest_S2C", "_PathFindRequest", dumpTableEx(_PathFindRequestCancel))
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_PATH_FIND_CANCEL_S2C:GetId(),_PathFindRequestCancel, false)
end

--- 服务器同步路点到前端逻辑核
---@public
---@param _battleOutputData table MonsterSyncPathPointList_S2C
function ServerOutputDataProcessor:SyncPathPointListS2C(_battleOutputData)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.MONSTER_SYNC_PATH_POINT_LIST_S2C:GetId(),_battleOutputData, false);
end

--- 创建发射器
---@public
---@param _battleOutputData table CreateEmitter_L2S
function ServerOutputDataProcessor:CreateEmitterL2S(_battleOutputData)
end

--- 销毁发射器广播
---@public
---@param _battleOutputData table DestroyEmitter_L2S
function ServerOutputDataProcessor:DestroyEmitterL2S(_battleOutputData)
end

--- 停止发射器广播
---@public
---@param _battleOutputData table StopEmitter_L2S
function ServerOutputDataProcessor:StopEmitterL2S(_battleOutputData)
end

-- 更新关卡阶段
---@public
---@param _curStageEnum number 当前阶段
function ServerOutputDataProcessor:UpdateBattleLevelStage(_curStageEnum)
    if SERVER_LIB then
        -- 更新服务器副本中关卡阶段
        SERVER_LIB.battle:updateBattleLevelStage(self.battleId, _curStageEnum)
    end
end

-- 设置战斗结果
---@public
---@param _playerId number 玩家id
---@param _battleResult number 战斗结果
---@param _overCondition number 战斗结束条件
function ServerOutputDataProcessor:UpdateBattleResult(_playerId, _battleResult, _overCondition)
    if SERVER_LIB then
        -- 通知Java副本战斗结果
        SERVER_LIB.battle:invokeBattleResult(self.battleId, _playerId, _battleResult, _overCondition)
    end
end

--- 战斗结束
---@public
---@param overResult BattleResult 战斗结果
---@param overCondition number 战斗结束条件
function ServerOutputDataProcessor:BattleOver(overResult, overCondition)
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "ServerOutputDataProcessor", "BattleOver", "overResult", overResult:GetId(), "overCondition", overCondition)
    end

    local battleRoom = GetBattleRoom(self.battleId)
    if battleRoom:IsBattleOver() then
        if CheckLogLevel(LogLevel.logWarr) then
            LogTools.LogByLevel(LogLevel.logWarr, "ServerOutputDataProcessor", "BattleOver", "overResult", overResult:GetId(), "overCondition", overCondition)
        end
        return
    end
    -- 设置本逻辑核的结果
    battleRoom.battleLevelManager:SetBattleOver(overResult, overCondition)
    -- 触发战斗结束事件
    battleRoom.battleLogicEventService:OnTriggerBattleOverEvent(overResult:GetId())
end

-- 触发新手引导(SL -> CL)
---@public
function ServerOutputDataProcessor:TrigBattleGuideS2C(_battleOutputData)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.TRIG_BATTLE_GUIDE_S2C:GetId(),_battleOutputData, true);
end

-- 关卡触发新手引导UI操作(SL -> CL)
---@public
function ServerOutputDataProcessor:LevelTrigGuideUIOperateS2C(_battleOutputData)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.LEVEL_TRIG_UI_OPERATE_S2C:GetId(),_battleOutputData, true);
end

-- 关卡触发一般UI操作(SL -> CL)
---@public
function ServerOutputDataProcessor:LevelTrigNormalUIOperateS2C(_battleOutputData)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.LEVEL_TRIG_NORMAL_UI_OPERATE_S2C:GetId(),_battleOutputData, true);
end

-- 关卡触发玩家控制器操作(SL -> CL)
---@public
function ServerOutputDataProcessor:LevelTrigControllerOperateS2C(_battleOutputData)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.LEVEL_TRIG_CONTROLLER_OPERATE_S2C:GetId(),_battleOutputData, true);
end

--- 单位修改分块状态
---@public
---@param _UnitChangeBlockState_S2C table msg.UnitChangeBlockState_S2C
function ServerOutputDataProcessor:UnitChangeBlockStateS2C(_UnitChangeBlockState_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_CHANGE_BLOCK_STATE:GetId(),_UnitChangeBlockState_S2C,true)
    --LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Collector", "UnitChangeBlockStateS2C end", "_UnitChangeBlockState_S2C", dumpTableEx(_UnitChangeBlockState_S2C))
end

--- 单位交互结果
---@public
---@param _BattleUnitHandleResult_S2C table msg.BattleUnitHandleResult_S2C
function ServerOutputDataProcessor:BattleUnitHandleResultS2C(_BattleUnitHandleResult_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.UNIT_HANDLE_RESULT_S2C:GetId(),_BattleUnitHandleResult_S2C,true)
    --LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Collector", "BattleUnitHandleResultS2C end", "_BattleUnitHandleResult_S2C", dumpTableEx(_BattleUnitHandleResult_S2C))
end

--- 改变Tag值
---@public
---@param _ChangeTag_S2C table msg.ChangeTag_S2C
function ServerOutputDataProcessor:ChangeTagS2C(_ChangeTag_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.CHANGE_TAG_S2C:GetId(), _ChangeTag_S2C, false)
end

-- 同步关卡暂停时间
---@public
function ServerOutputDataProcessor:SyncLevelPauseTime_S2C(_syncLevelPauseTime_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.SYNC_LEVEL_PAUSE_TIME_S2C:GetId(), _syncLevelPauseTime_S2C, false)
end

-- 获取主线三星
---@public
function ServerOutputDataProcessor:GetLevelThreeStarList_S2C(_getLevelThreeStarList)
    -- FIXME 现在除了主线，任何关卡都可能有三星了，要不要考虑消息改个名
    COMMAND.BroadcastCommandToClientTable(self.battleRoom.battleId, PROTO_CODE_ENUM.GET_MAIN_LEVEL_STAR_LIST_S2C:GetId(), _getLevelThreeStarList, false)
end

-- 获取主线三星
---@public
function ServerOutputDataProcessor:GetLevelThreeStarListToClient(_playerId, _getLevelThreeStarList)
    -- FIXME 现在除了主线，任何关卡都可能有三星了，要不要考虑消息改个名
    COMMAND.SendCommandThroughServerToClient(_playerId, PROTO_CODE_ENUM.GET_MAIN_LEVEL_STAR_LIST_S2C:GetId(), _getLevelThreeStarList)
end

-- 播放表演
---@public
function ServerOutputDataProcessor:BattlePlayAct_S2C(_battlePlayAct_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.BATTLE_PLAY_ACT_S2C:GetId(), _battlePlayAct_S2C, false)
end

-- 播放ui
---@public
function ServerOutputDataProcessor:BattlePlayUI_S2C(_battlePlayUI_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.BATTLE_PLAY_UI_S2C:GetId(), _battlePlayUI_S2C, false)
end

-- 播放剧情
---@public
function ServerOutputDataProcessor:BattlePlayPlot_S2C(_battlePlayPlot_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.BATTLE_PLAY_PLOT_S2C:GetId(), _battlePlayPlot_S2C, false)
end

-- 结束播放剧情
---@public
function ServerOutputDataProcessor:BattlePlayPlotEnd_S2C(_battlePlayPlotEnd_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.SERVER_BATTLE_PLAY_PLOT_END_S2C:GetId(), _battlePlayPlotEnd_S2C, false)
end

-- 结束播放表演
---@public
function ServerOutputDataProcessor:BattlePlayActEnd_S2C(_battlePlayActEnd_S2C)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.SERVER_BATTLE_PLAY_ACT_END_S2C:GetId(), _battlePlayActEnd_S2C, false)
end

-- 玩家重连
function ServerOutputDataProcessor:SendPlayerReconnectInfo(_playerId, _playerReconnectBattleRoomInfo_S2C)
    COMMAND.SendCommandThroughServerToClient(_playerId, PROTO_CODE_ENUM.PlayerReconnectBattleRoomInfo_S2C:GetId(), _playerReconnectBattleRoomInfo_S2C)
    --COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.PlayerReconnectBattleRoomInfo_S2C:GetId(), _playerReconnectBattleRoomInfo_S2C, false)
end

-- 通武器进入过载
---@public
function ServerOutputDataProcessor:WeaponEnterOverLoad_S2C(msg)
    COMMAND.BroadcastCommandToClientTable(self.battleRoom:GetBattleId(), PROTO_CODE_ENUM.WEAPON_ENTER_OVER_LOAD_S2C:GetId(), msg, true)
end

--- 退出过载状态
---@public
function ServerOutputDataProcessor:WeaponExitOverLoad_S2C(msg)
    COMMAND.BroadcastCommandToClientTable(self.battleRoom:GetBattleId(), PROTO_CODE_ENUM.WEAPON_EXIT_OVER_LOAD_S2C:GetId(), msg, true)
end

-- 进入能量恢复状态
---@public
function ServerOutputDataProcessor:WeaponEnterRecoverEnergyState_S2C(msg)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.WEAPON_ENTER_RECOVER_ENERGY_STATE_S2C:GetId(), msg, false)
end

-- 退出能量恢复状态
---@public
function ServerOutputDataProcessor:WeaponExitRecoverEnergyState_S2C(msg)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.WEAPON_EXIT_RECOVER_ENERGY_STATE_S2C:GetId(), msg, false)
end

--- 换弹开始
---@public
function ServerOutputDataProcessor:ReloadBulletStart_S2C(msg)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.RELOAD_BULLET_START_S2C:GetId(), msg, false)
end

--- 换弹结束
---@public
function ServerOutputDataProcessor:ReloadBulletEnd_S2C(msg)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.RELOAD_BULLET_END_S2C:GetId(), msg, false)
end

--- 关卡时间变更
---@public
function ServerOutputDataProcessor:LevelChangeTimeLimit_S2C(msg)
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.LEVEL_CHANGE_TIME_LIMIT_S2C:GetId(), msg, false)
end

--- 行为树状态
---@public
function ServerOutputDataProcessor:PushBehavInfo_S2C(msg) 
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.PUSH_BEHAV_INFO_S2C:GetId(), msg, false)
end

--- 弱点击破
---@public
function ServerOutputDataProcessor:WeaknessBroken_S2C(msg) 
    COMMAND.BroadcastCommandToClientTable(self.battleId, PROTO_CODE_ENUM.WEAKNESS_BROKEN_S2C:GetId(), msg, false)
end

return ServerOutputDataProcessor;
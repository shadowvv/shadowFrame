---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/01/13 11:13
--- Describe: 关卡逻辑管理
---

require "Battle/Logic/Room/BattleLevel/BattleLevel_Define"
require "Battle/Logic/Room/BattleLevel/BattleLevelConfigManager"
require "Battle/Logic/Room/BattleLevel/BattleLevelStageManager"
require "Battle/Logic/Room/BattleLevel/LevelCondition/Manager/OverConditionManager_Pve"
require "Battle/Logic/Room/BattleLevel/LevelCondition/Manager/LevelConditionManager"
require "Battle/Logic/Room/BattleLevel/LevelCondition/LevelConditionTypeEnum"
require "Battle/Logic/Room/BattleLevel/LevelTarget/LevelTargetManager"
require "Battle/Logic/Room/BattleLevel/LevelTarget/LevelTargetTypeEnum"
require "Battle/Logic/Room/BattleLevel/LevelTarget/LevelTargetType"
require "Battle/Logic/Room/BattleLevel/LevelUnit/LevelUnitManager"

---@class BattleLevelManager : table
---@field battleLevelStageManager BattleLevelStageManager
---@field overConditionManager OverConditionManager
BattleLevelManager = class(nil, "BattleLevelManager")
function BattleLevelManager:ctor(_battleId)
    ---@type number
    self.battleId = _battleId
    self.battleRoom = GetBattleRoom(self.battleId)
    ---@type number 最后一只击杀怪物netId
    self.lastKillMonsterNetId = 0
end

function BattleLevelManager:Init(_battleEnterInfo)
    self.__running = false
    ---@type boolean 服务端切换阶段(服务端发起切换到收到切换消息之间的状态)
    self.serverChangingStage = false
    ---@type BattleResult 战斗结束结果
    self.overResult = BattleResultEnum.NO_RESULT
    ---@type number 战斗结束条件
    self.overCondition = 0

    ---@type number 关卡开始时间
    self.levelStartTime = 0
    ---@type boolean 战斗是否停止
    self.runBattleStop = false

    ---关卡计时是否被暂停
    ---@private
    self.levelTimePaused = false
    ---关卡一般逻辑是否被暂停（不包含关卡行为树）
    ---@private
    self.__levelNormalLogicPaused = false

    -- 关卡配置管理
    ---@type BattleLevelConfigManager
    self.levelConfigManager = BattleLevelConfigManager.New(self.battleId)
    self.levelConfigManager:Init(_battleEnterInfo)

    ---@type LevelUnitManager
    self.levelUnitManager = LevelUnitManager.New(self.battleId)
    self.levelUnitManager:Init(self.levelConfigManager)

    ---@type BattleLevelStageManager
    self.battleLevelStageManager = BattleLevelStageManager.New(self.battleId)
    self.battleLevelStageManager:Init(self)

    ---@type LevelTargetManager
    self.levelTargetManager = LevelTargetManager.New(self.battleId)
    self.levelTargetManager:Init()

    ---@type LevelConditionManager
    self.levelConditionManager = LevelConditionManager.New(self.battleId)
    self.levelConditionManager:Init()

    ---@type OverConditionManager
    self.overConditionManager = OverConditionManager_Pve.New(self.battleId)
    self.overConditionManager:Init(self.levelConditionManager)


end

-- 开始
---@public
function BattleLevelManager:Start()
    self.__running = true
    self.levelStartTime = TimeUtils.battleNow(self.battleId)

    ---@type BattleTypeOperBase
    local _battleTypeOper = GetBattleRoom(self.battleId).battleType:GetOper()
    self.levelConditionManager:Start(_battleTypeOper)

    -- loading为初始状态
    self:GoToStage(BattleLevel_Define_StageEnum.Loading, true)
end

-- 战斗是否停止运行(RunBattle阶段停止运行)
---@public
function BattleLevelManager:CheckBattleRunStop()
    if self.runBattleStop ~= nil then
        return self.runBattleStop
    end
    return false
end

---@public
---@param _deltaTime number
---@param _frameId number
function BattleLevelManager:OnUpdate(_deltaTime, _frameId)
    if not self.__running then
        return
    end

    if self.battleLevelStageManager then
        self.battleLevelStageManager:OnUpdate(_deltaTime, _frameId)
    end
    if self.levelConditionManager then
        self.levelConditionManager:OnUpdate(_deltaTime, _frameId)
    end
    if self.overConditionManager then
        self.overConditionManager:OnUpdate(_deltaTime, _frameId)
    end
    if self.levelTargetManager then
        self.levelTargetManager:OnUpdate(_deltaTime, _frameId)
    end
    if self.levelUnitManager then
        self.levelUnitManager:OnUpdate(_deltaTime, _frameId)
    end
end

-- 获取当前关卡阶段
---@public
function BattleLevelManager:GetCurLevelStageEnum()
    return self.battleLevelStageManager.curStageEnum
end

-- 检查当前关卡是否位于某个阶段
---@public
---@param _levelStageEnum number
function BattleLevelManager:CheckCurLevelStageEnum(_levelStageEnum)
    return self.battleLevelStageManager.curStageEnum == _levelStageEnum
end

-- 进入指定阶段
---@public
---@param _levelStageEnum number
---@param _forceEnter boolean
---@return boolean 是否成功进入
function BattleLevelManager:GoToStage(_levelStageEnum, _forceEnter)
    return self.battleLevelStageManager:GoToStage(_levelStageEnum, _forceEnter)
end

-- 进入下个阶段
---@public
function BattleLevelManager:GoNextStage()
    self.battleLevelStageManager:GoNextStage()
end

-- 获取战斗阶段
---@public
---@param _stageEnum number
---@return BattleLevelStageBase
function BattleLevelManager:GetStage(_stageEnum)
    return self.battleLevelStageManager:GetStage(_stageEnum)
end

-- 玩家掉线
---@public
---@param _playerId number 玩家Id
function BattleLevelManager:OnPlayerDisconnect(_playerId)
    self.battleLevelStageManager.curStage:OnPlayerDisconnect(_playerId)
end

-- 玩家重连
---@public
---@param _playerId number 玩家Id
function BattleLevelManager:OnPlayerReconnect(_playerId)
    self.battleLevelStageManager.curStage:OnPlayerReconnect(_playerId);
end

-- 玩家离开房间
---@public
---@param _playerId number 玩家Id
function BattleLevelManager:OnPlayerLeave(_playerId)
    self.battleLevelStageManager.curStage:OnPlayerLeave(_playerId);
end

-- 玩家进入战斗房间
---@public
---@param _playerId number 玩家Id
function BattleLevelManager:OnPlayerEnter(_playerId)
    self.battleLevelStageManager.curStage:OnPlayerEnter(_playerId);
end

-- 战斗暂停
---@public
function BattleLevelManager:OnBattlePause()
    if self.battleLevelStageManager.curStage then
        self.battleLevelStageManager.curStage:OnPause()
    end
    self.__running = false
end

-- 战斗恢复
---@public
function BattleLevelManager:OnBattleResume()
    if self.battleLevelStageManager.curStage then
        self.battleLevelStageManager.curStage:OnResume()
    end
    self.__running = true
end

-- 退出清理
---@public
function BattleLevelManager:Clear()
    self.__running = nil

    self.overResult = nil
    self.overCondition = nil

    self.serverChangingStage = nil
    self.levelStartTime = nil
    ---@type BattleTypeOperBase
    local _battleTypeOper = self.battleRoom.battleLevelManager.levelConfigManager:GetBattleType():GetOper()
    -- 初始关卡自定义数据
    _battleTypeOper:Clear()

    self.battleLevelStageManager:Clear(self)
    self.levelConditionManager:Clear(_battleTypeOper)
    self.overConditionManager:Clear()
    self.levelTargetManager:Clear()
    self.levelUnitManager:Clear()

    self.battleLevelStageManager = nil
    self.levelConditionManager = nil
    self.overConditionManager = nil
    self.levelTargetManager = nil
    self.levelUnitManager = nil
end

-- 战斗关闭
---@public
function BattleLevelManager:OnBattleClose()
    -- 退出最后一个阶段后停止运行
    if self.battleLevelStageManager then
        self.battleLevelStageManager:__LeftStage()
    end
    self.__running = false
    if CheckLogLevel(LogLevel.log) then
        LogTools.Info("BattleLevelManager", "OnBattleClose", "levelStartTime", self.levelStartTime)
    end
end

-- 玩家确认进入下一阶段
---@public
---@param uid number
function BattleLevelManager:ConfirmGoToNextStage(uid)
    if not self.confirmPlayers then
        ---@type table
        self.confirmPlayers = {}
    end
    self.confirmPlayers[uid] = true
end

-- 玩家是否确认进入下阶段
function BattleLevelManager:IsPlayerConfirmGoToNextStage(uid)
    if not self.confirmPlayers then
        return false;
    end
    return self.confirmPlayers[uid]
end

-- 清空确认队列
---@public
function BattleLevelManager:ClearConfirmPlayers()
    self.confirmPlayers = {}
end

-- 获取运行时间（仅运行帧计时）
---@public
---@return number 运行时间
function BattleLevelManager:GetRunTimeSecond()
    return self.battleLevelStageManager.curStage:GetRunTimeSecond()
end

-- 获取胜败逻辑战斗结果
---@public
---@return BattleResult 战斗结果
function BattleLevelManager:GetConditionBattleOverResult()
    return self.overConditionManager.battleResult
end

-- 获取胜败逻辑结束条件
---@public
---@return number 战斗结束条件
function BattleLevelManager:GetConditionBattleOverCondition()
    return self.overConditionManager.overCondition
end

---@public
---@param _result BattleResult
---@param _condition number
function BattleLevelManager:SetBattleOver(_result, _condition)
    self.overResult = _result
    self.overCondition = _condition
end

---@public
---@param _result BattleResult
---@param _condition number
function BattleLevelManager:OnBattleOver(_result, _condition)
    self:SetBattleOver(_result, _condition)

    if IsClient() then
        -- 通知显示战斗UI
        local overData = {}
        overData.result = _result
        overData.condition = _condition
        overData.starArray = self.battleRoom:GetData(GetDataEnum.GET_LEVEL_THREE_STAR_LIST:GetId(), { CLIENT_PLAYER_ID })
        overData.fightPar = self.battleRoom:GetData(GetDataEnum.GET_FIGHT_PAR_DATA:GetId(), { CLIENT_PLAYER_ID })

        ---@type LevelCondition
        local _levelCondition = self.battleRoom.inputDataSource:GetDict("LevelCondition", _condition)
        if _levelCondition then
            local _levelConditionType = GetLevelConditionTypeById(_levelCondition.type)
            if _levelConditionType and _levelConditionType:IsKillMonster() then
                overData.lastKillMonsterId = self.battleRoom.battleLevelManager.lastKillMonsterNetId
            end
        end

        self.battleRoom.outputDataSource:BattleOver_L2V(overData)
        -- 通知战斗关闭
        self.battleRoom.outputDataSource:BattleLogicClose_L2S()
    end
end

---修改战斗运行阶段限制时间
---@public
---@param _changeTimeSec number 修改时间
---@return number 限制时间
function BattleLevelManager:ChangeRunBattleLimitTime(_changeTimeSec)
    if self:GetCurLevelStageEnum() ~= BattleLevel_Define_StageEnum.RunBattle then
        -- 非运行阶段不能修改
        return 0
    end
    local runBattleStage = self:GetStage(BattleLevel_Define_StageEnum.RunBattle)
    return runBattleStage:ChangeTimeLimit(_changeTimeSec)
end

return BattleLevelManager

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2021/12/16 11:05
--- 客户端logic_core输出数据处理器

require "Lib/class"
require "Battle/Logic/Room/Component/OutputDataProcessor"

---@class ClientOutputDataProcessor : OutputDataProcessor 客户端logic_core输出数据处理器
ClientOutputDataProcessor = class(OutputDataProcessor, 'ClientOutputDataProcessor');

function ClientOutputDataProcessor:ctor(_battleId)
    self.battleId = _battleId
    self.battleRoom = GetBattleRoom(_battleId)
    self.currentFrameId = 0;
    self.traceBackList = {};
    self.playerCurrentFrameId = {};
    ---@type table[] 玩家移动输出列表
    self.battleUnitMoveDataList = {};
    ---@type table[] 玩家改变输出列表
    self.battleUnitChangeDataList = {};
    ---@type table[] 玩家关键帧输出列表
    self.battleUnitKeyDataList = {};
    ---@type table[] 战场输出列表
    self.battleFieldDataList = {};
end

--- 创建玩家unit
---@public
---@param _createPlayerUnitL2S table 创建玩家unit协议
function ClientOutputDataProcessor:CreatePlayerUnit(_createPlayerUnitL2S)
    --LogTools.LogByLevel(LogLevel.log, "CheckCreateUnit", "ClientOutputDataProcessor:CreatePlayerUnit", "_createPlayerUnitL2S", dumpTableEx(_createPlayerUnitL2S))
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.CREATE_PLAYER_UNIT_L2S:GetId(), PROTO_CODE_ENUM.CREATE_PLAYER_UNIT_L2S:GetName(), _createPlayerUnitL2S);
end

--- 创建怪物unit
---@public
---@param _createMonsterUnitL2S table 创建怪物unit协议
function ClientOutputDataProcessor:CreateMonsterUnit(_createMonsterUnitL2S)
    --LogTools.LogByLevel(LogLevel.log, "CheckCreateUnit", "ClientOutputDataProcessor:CreateMonsterUnit", "_createMonsterUnitL2S", dumpTableEx(_createMonsterUnitL2S))
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.CREATE_MONSTER_UNIT_L2S:GetId(), PROTO_CODE_ENUM.CREATE_MONSTER_UNIT_L2S:GetName(), _createMonsterUnitL2S);
end

--- 创建区域unit
---@public
---@param _createAreaTriggerUnit2View table 创建区域协议
function ClientOutputDataProcessor:CreateAreaTriggerUnit(_createAreaTriggerUnit2View)
	--LogTools.LogByLevel(LogLevel.log, "CHeckArea", "ClientOutputDataProcessor:CreateAreaTriggerUnit start", dumpTableEx(_createAreaTriggerUnit2View))
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.CREATE_AREA_TRIGGER_UNIT_L2V:GetId(), PROTO_CODE_ENUM.CREATE_AREA_TRIGGER_UNIT_L2V:GetName(), _createAreaTriggerUnit2View);
	--LogTools.LogByLevel(LogLevel.log, "CHeckArea", "ClientOutputDataProcessor:CreateAreaTriggerUnit end")
end

--- 创建召唤物unit
---@public
---@param _createSummonedMonsUnit2View table 创建召唤物协议
function ClientOutputDataProcessor:CreateSummonedMonsUnit(_createSummonedMonsUnit2View)
    --LogTools.LogByLevel(LogLevel.log, "CheckSummonedMons", "ClientOutputDataProcessor:CreateSummonedMonsUnit start", dumpTableEx(_createSummonedMonsUnit2View))
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.CREATE_SUMMONED_MONS_UNIT_L2V:GetId(), PROTO_CODE_ENUM.CREATE_SUMMONED_MONS_UNIT_L2V:GetName(), _createSummonedMonsUnit2View);
    --LogTools.LogByLevel(LogLevel.log, "CheckSummonedMons", "ClientOutputDataProcessor:CreateSummonedMonsUnit end")
end

--- 创建目标点unit
---@public
---@param _createTargetPointUnit2View table 创建目标点协议
function ClientOutputDataProcessor:CreateTargetPointUnit(_createTargetPointUnit2View)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.CREATE_TARGET_POINT_L2V:GetId(), PROTO_CODE_ENUM.CREATE_TARGET_POINT_L2V:GetName(), _createTargetPointUnit2View);
end

--- 创建护罩unit
---@public
---@param _createShieldUnit2View table 创建护罩协议
function ClientOutputDataProcessor:CreateShieldUnit(_createShieldUnit2View)
    --LogTools.LogByLevel(LogLevel.log, "ClientOutputDataProcessor", "CreateShieldUnit _createShieldUnit2View", dumpTableEx(_createShieldUnit2View))
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.CREATE_SHIELD_L2V:GetId(), PROTO_CODE_ENUM.CREATE_SHIELD_L2V:GetName(), _createShieldUnit2View);
end

-- 创建场景物件(CL -> CV)
---@public
function ClientOutputDataProcessor:CreateSceneObjL2V(_battleOutputData)
    --LogTools.LogByLevel(LogLevel.log, "ClientOutputDataProcessor:CreateSceneObjL2V", "_battleOutputData", dumpTableEx(_battleOutputData))
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.GENERATE_SCENE_OBJ_L2V:GetId(), PROTO_CODE_ENUM.GENERATE_SCENE_OBJ_L2V:GetName(), _battleOutputData)
end

--- 添加移动输出数据
---@public
---@param _battleMoveData table logic_core每帧输出的数据
function ClientOutputDataProcessor:AddBattleUnitMoveData(_battleMoveData)
    --if _battleMoveData.netId == 2 then
    --    LogTools.LogByLevel(LogLevel.log, "ClientOutputDataProcessor AddBattleUnitMoveData", "frame", LOOPER.GetFrameId(), "_battleMoveData", dumpTableEx(_battleMoveData))
    --end
    --note by kun 2022.05.31
    --目前MoveActionState和TurnActionState都会产出完整的运动数据;
    --这影响了客户端的相机damping计算。因为对于 camera rotation 而言,有一次manualUpdate里是没有旋转的，这会产生一次damping干扰计算.
    --当旋转角速度不稳定时，问题更明显.
    --因此先在这里合并同一个对象的运动结果.
    for i=1, #self.battleUnitMoveDataList do
        local movedata = self.battleUnitMoveDataList[i]
        if movedata.netId == _battleMoveData.netId then
            if _battleMoveData.moveInfo.type ~= 1 then
                --目前type1的移动消息为结束移动的重置消息，当前如果有其他移动行为，丢掉这条消息
                self.battleUnitMoveDataList[i]=_battleMoveData
            end
            return
        end
    end
    ---[[debug_jitter]]print("[debug_jitter]ClientOutputDataProcessor.BroadCastOutputData", table.dump(_battleMoveData))

    table.insert(self.battleUnitMoveDataList, _battleMoveData)
end

function ClientOutputDataProcessor:BroadCastMoveOutputData(_frameId, _dt)
    if #self.battleUnitMoveDataList ~= 0 then
        local moveData = {}
        moveData.frameId = _frameId;
        moveData.info = self.battleUnitMoveDataList
        moveData.timeStamp = TimeUtils.battleNow(self.battleId);
        ---[[debug_jitter]]print("[debug_jitter]ClientOutputDataProcessor.BroadCastOutputData", table.dump(moveData))
        --COMMAND.BroadcastCommandToClientTable(CLIENT_FIGHT_CORE.battleRoom.battleId, PROTO_CODE_ENUM.BATTLE_UNIT_MOVE_DATA:GetId(), moveData, false);
        if CLIENT_FIGHT_CORE.battleRoom.indieGame then
            --if moveData.netId == 2 then
            --    LogTools.LogByLevel(LogLevel.log, "ClientOutputDataProcessor BroadCastMoveOutputData", "moveData", dumpTableEx(moveData))
            --end
            COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.BATTLE_UNIT_MOVE_DATA:GetId(), PROTO_CODE_ENUM.BATTLE_UNIT_MOVE_DATA:GetName(), moveData)
        end
        -- 清空输出数据
        self.battleUnitMoveDataList = {}

        if _frameId >= 0 then
            for i, v in pairs(moveData.info) do
                if self.traceBackList[v.netId] == nil then
                    self.traceBackList[v.netId] = {};
                end
                self.traceBackList[v.netId][_frameId] = v;
                if self.traceBackList[v.netId][_frameId - 10] then
                    self.traceBackList[v.netId][_frameId - 10] = nil;
                end
            end
        end
    end
end

--- 添加改变输出数据
---@public
---@param _battleChangeData table logic_core每帧输出的数据
function ClientOutputDataProcessor:AddBattleUnitChangeData(_battleChangeData)
    table.insert(self.battleUnitChangeDataList, _battleChangeData)
end

--- 添加关键帧输出数据
---@public
---@param _battleKeyData table logic_core每帧输出的数据
function ClientOutputDataProcessor:AddBattleUnitKeyData(_battleKeyData)
    table.insert(self.battleUnitKeyDataList, _battleKeyData)
end

--- 添加战场输出数据
---@public
---@param _battleFieldData table logic_core每帧输出的数据
function ClientOutputDataProcessor:AddBattleFieldData(_battleFieldData)
    table.insert(self.battleFieldDataList, _battleFieldData)
end

--
---deprecated
function ClientOutputDataProcessor:BroadCastOutputData(_dt)

    if #self.battleUnitChangeDataList ~= 0 then
        if CLIENT_FIGHT_CORE.battleRoom.indieGame then
            local changeData = {}
            changeData.frameId = self.battleRoom.frameId;
            changeData.info = self.battleUnitChangeDataList

            local battleRoomMessage = BattleRoomMessage.New();
            battleRoomMessage:Init(CLIENT_PLAYER_ID, PROTO_CODE_ENUM.BATTLE_UNIT_CHANGE_DATA:GetId(), CLIENT_FIGHT_CORE.battleRoom.battleId, changeData, TimeUtils.battleNow(CLIENT_FIGHT_CORE.battleRoom.battleId));
            ProtoCallBack_ClientReceiveChangeData(battleRoomMessage);
        end

        -- 清空输出数据
        self.battleUnitChangeDataList = {}
    end

    if #self.battleUnitKeyDataList ~= 0 then
        if CLIENT_FIGHT_CORE.battleRoom.indieGame then
            local keyData = {}
            keyData.frameId = self.battleRoom.frameId;
            keyData.info = self.battleUnitKeyDataList
            local battleRoomMessage = BattleRoomMessage.New();
            battleRoomMessage:Init(CLIENT_PLAYER_ID, PROTO_CODE_ENUM.BATTLE_UNIT_KEY_DATA:GetId(), CLIENT_FIGHT_CORE.battleRoom.battleId, keyData, TimeUtils.battleNow(CLIENT_FIGHT_CORE.battleRoom.battleId));
            ProtoCallBack_ClientReceiveKeyData(battleRoomMessage);
        end
        -- 清空输出数据
        self.battleUnitKeyDataList = {}
    end

    if #self.battleFieldDataList ~= 0 then
        if CLIENT_FIGHT_CORE.battleRoom.indieGame then
            local fieldData = {}
            fieldData.frameId = self.battleRoom.frameId;
            fieldData.info = self.battleFieldDataList;
            local battleRoomMessage = BattleRoomMessage.New();
            battleRoomMessage:Init(CLIENT_PLAYER_ID, PROTO_CODE_ENUM.BATTLE_FIELD_DATA:GetId(), CLIENT_FIGHT_CORE.battleRoom.battleId, fieldData, TimeUtils.battleNow(CLIENT_FIGHT_CORE.battleRoom.battleId));
            ProtoCallBack_ClientReceiveFieldData(battleRoomMessage);
        end
        -- 清空输出数据
        self.battleFieldDataList = {}
    end
end

--- 切换关卡阶段
---@public
---@param _toStage number 切换的阶段(到哪个结算)
---@param _fromStage number 切换的阶段(从哪个阶段)
function ClientOutputDataProcessor:BattleLevelGoToStage(_toStage, _fromStage)
    if CLIENT_FIGHT_CORE.battleRoom.indieGame then
        if not _fromStage then
            _fromStage = self.battleRoom.battleLevelManager:GetCurLevelStageEnum()
        end
        CLIENT_FIGHT_CORE.battleRoom.battleLevelManager.serverChangingStage = true
        local _serverTime = TimeUtils.battleNow(self.battleId)
        if CheckLogLevel(LogLevel.log) then
            LogTools.LogByLevel(LogLevel.log, "ClientOutputDataProcessor", "BattleLevelGoToStage", "stage", _fromStage, "enter", _toStage)
        end
        self.battleRoom:OnNotifyChangeBattleLevelStage(_fromStage, _toStage, _serverTime)
    end
end

--- 切换关卡阶段(Client BattleLogic -> Client)
---@public
---@param _fromStage number 切换的阶段
---@param _toStage number 切换的阶段
function ClientOutputDataProcessor:BattleLevelGoToStage_L2V(_fromStage, _toStage)
    ---@type table
    local protoData = {
        fromStage = _fromStage,
        toStage = _toStage,
    }
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.NOTIFY_CHANGE_BATTLE_LEVEL_STAGE_L2V:GetId(), PROTO_CODE_ENUM.NOTIFY_CHANGE_BATTLE_LEVEL_STAGE_L2V:GetName(), protoData);
end

--- 玩家切换英雄输入
---@public
---@param _battleOutputData table PlayerChangeLeader_S2C
function ClientOutputDataProcessor:PlayerChangeLeaderS2C(_battleOutputData)
    local _playerChangeLeaderL2S = {}
    local _info = {}
    _playerChangeLeaderL2S.info = _info
    _info.playerId = _battleOutputData.info.playerId
    _info.objectId = _battleOutputData.info.objectId
    self:PlayerChangeLeaderL2S(_playerChangeLeaderL2S)
end

--- 玩家切换英雄
---@public
---@param _battleOutputData table PlayerChangeLeaderL2S
function ClientOutputDataProcessor:PlayerChangeLeaderL2S(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.PLAYER_CHANGE_LEADER_L2S:GetId(), PROTO_CODE_ENUM.PLAYER_CHANGE_LEADER_L2S:GetName(), _battleOutputData);
end

--- 单位受伤L2S
---@public
---@param _battleOutputData table UnitHurtL2S
function ClientOutputDataProcessor:UnitHurtL2S(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_HURT_L2S:GetId(), PROTO_CODE_ENUM.UNIT_HURT_L2S:GetName(), _battleOutputData);
end

--- 创建发射器
---@public
---@param _battleOutputData table CreateEmitter_L2S
function ClientOutputDataProcessor:CreateEmitterL2S(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.CREATE_EMITTER_L2S:GetId(), PROTO_CODE_ENUM.CREATE_EMITTER_L2S:GetName(), _battleOutputData);
end

--- 销毁发射器
---@public
---@param _battleOutputData table DestroyEmitter_L2S
function ClientOutputDataProcessor:DestroyEmitterL2S(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.DESTROY_EMITTER_L2S:GetId(), PROTO_CODE_ENUM.DESTROY_EMITTER_L2S:GetName(), _battleOutputData);
end

--- 停止发射器
---@public
---@param _battleOutputData table StopEmitter_L2S
function ClientOutputDataProcessor:StopEmitterL2S(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.STOP_EMITTER_L2S:GetId(), PROTO_CODE_ENUM.STOP_EMITTER_L2S:GetName(), _battleOutputData);
end

--- 通知前端创建关卡触发器
---@public
---@param _generateLevelTrigger table 创建关卡触发器协议
function ClientOutputDataProcessor:CreateLevelTriggerS2C(_generateLevelTrigger)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.GENERATE_LEVEL_TRIGGER_S2C:GetId(), _generateLevelTrigger)
end

--- 暂停怪物AI
---@public
---@param _MonsPauseAi_S2C table msg.MonsPauseAi_S2C
function ClientOutputDataProcessor:PauseMonsAiS2C(_MonsPauseAi_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.MONS_PAUSE_AI:GetId(), _MonsPauseAi_S2C)
end

--- 恢复怪物AI
---@public
---@param _MonsResumeAi_S2C table msg.MonsResumeAi_S2C
function ClientOutputDataProcessor:ResumeMonsAiS2C(_MonsResumeAi_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.MONS_RESUME_AI:GetId(), _MonsResumeAi_S2C)
end

--- 怪物开启巡逻
---@public
---@param _UnitPatrol_S2C table msg.UnitPatrol_S2C
function ClientOutputDataProcessor:StartMonsPatrolS2C(_UnitPatrol_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.UNIT_PATROL_S2C:GetId(), _UnitPatrol_S2C)
end

--- 怪物停止巡逻
---@public
---@param _UnitPatrolCancel_S2C table msg.UnitPatrolCancel_S2C
function ClientOutputDataProcessor:StopMonsPatrolS2C(_UnitPatrolCancel_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.UNIT_PATROL_CANCEL_S2C:GetId(), _UnitPatrolCancel_S2C)
end

--- 开始追逐目标
---@public
---@param _UnitChaseTarget_S2C table msg.UnitChaseTarget_S2C
function ClientOutputDataProcessor:StartChaseTargetS2C(_UnitChaseTarget_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.UNIT_CHASE_TARGET_S2C:GetId(), _UnitChaseTarget_S2C)
end

--- 停止追逐目标
---@public
---@param _UnitStopChaseTarget_S2C table msg.UnitStopChaseTarget_S2C
function ClientOutputDataProcessor:StopChaseTargetS2C(_UnitStopChaseTarget_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.UNIT_STOP_CHASE_TARGET_S2C:GetId(), _UnitStopChaseTarget_S2C)
end

--- 开始远离目标
---@public
---@param _UnitEscapeTarget_S2C table msg.UnitEscapeTarget_S2C
function ClientOutputDataProcessor:StartEscapeTargetS2C(_UnitEscapeTarget_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.UNIT_ESCAPE_TARGET_S2C:GetId(), _UnitEscapeTarget_S2C)
end

--- 停止远离目标
---@public
---@param _UnitStopEscapeTarget_S2C table msg.UnitStopEscapeTarget_S2C
function ClientOutputDataProcessor:StopEscapeTargetS2C(_UnitStopEscapeTarget_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.UNIT_STOP_ESCAPE_TARGET_S2C:GetId(), _UnitStopEscapeTarget_S2C)
end

--- 开始指定移动
---@public
---@param _UnitMoveTowards_S2C table msg.UnitMoveTowards_S2C
function ClientOutputDataProcessor:StartMoveTowardsS2C(_UnitMoveTowards_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.UNIT_MOVE_TOWARDS_TARGET_S2C:GetId(), _UnitMoveTowards_S2C)
end

--- 停止指定移动
---@public
---@param _UnitStopMoveTowards_S2C table msg.UnitStopMoveTowards_S2C
function ClientOutputDataProcessor:StopMoveTowardsS2C(_UnitStopMoveTowards_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.UNIT_STOP_MOVE_TOWARDS_TARGET_S2C:GetId(), _UnitStopMoveTowards_S2C)
end

--- 开始平移
---@public
---@param _UnitMoveTowards_2_S2C table msg.UnitMoveTowards_2_S2C
function ClientOutputDataProcessor:StartMoveTowards_2_S2C(_UnitMoveTowards_2_S2C)

end

--- 停止平移
---@public
---@param _UnitStopMoveTowards_2_S2C table msg.UnitStopMoveTowards_S2C
function ClientOutputDataProcessor:StopMoveTowards_2_S2C(_UnitStopMoveTowards_2_S2C)

end

--- 开始转向目标
---@public
---@param _UnitFaceTarget_S2C table msg.UnitFaceTarget_S2C
function ClientOutputDataProcessor:StartFaceTargetS2C(_UnitFaceTarget_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.UNIT_FACE_TARGET_S2C:GetId(), _UnitFaceTarget_S2C)
end

--- 停止转向目标
---@public
---@param _UnitStopFaceTarget_S2C table msg.UnitStopFaceTarget_S2C
function ClientOutputDataProcessor:StopFaceTargetS2C(_UnitStopFaceTarget_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.UNIT_STOP_FACE_TARGET_S2C:GetId(), _UnitStopFaceTarget_S2C)
end

--- 开始跟随召唤者
---@public
---@param _UnitChaseSubordinate_S2C table msg.UnitChaseSubordinate_S2C
function ClientOutputDataProcessor:StartChaseSubordinateS2C(_UnitChaseSubordinate_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.UNIT_CHASE_SUBORDINATE:GetId(), _UnitChaseSubordinate_S2C)
end

--- 停止跟随召唤者
---@public
---@param _UnitStopChaseSubordinate_S2C table msg.UnitStopChaseSubordinate_S2C
function ClientOutputDataProcessor:StopChaseSubordinateS2C(_UnitStopChaseSubordinate_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.UNIT_STOP_CHASE_SUBORDINATE:GetId(), _UnitStopChaseSubordinate_S2C)
end

--- 开始导航点移动
---@public
---@param _UnitMoveNavPoints_S2C table msg.UnitMoveNavPoints_S2C
function ClientOutputDataProcessor:StartMoveNavPointsS2C(_UnitMoveNavPoints_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.UNIT_MOVE_NAV_POINTS_S2C:GetId(), _UnitMoveNavPoints_S2C)
end

--- 停止导航点移动
---@public
---@param _UnitStopMoveNavPoints_S2C table msg.UnitStopMoveNavPoints_S2C
function ClientOutputDataProcessor:StopMoveNavPointsS2C(_UnitStopMoveNavPoints_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.UNIT_STOP_MOVE_NAV_POINTS_S2C:GetId(), _UnitStopMoveNavPoints_S2C)
end

--- 怪物施放技能
---@public
---@param _MonsCastSkill_S2C table msg.MonsCastSkill_S2C
function ClientOutputDataProcessor:MonsCastSkillS2C(_MonsCastSkill_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.MONS_CAST_SKILL_S2C:GetId(), _MonsCastSkill_S2C)
end

--- 通知显示层开始切换血量阶段
---@public
function ClientOutputDataProcessor:UnitStartChangeStage_L2V(msg)
    --LogTools.LogByLevel(LogLevel.logErr, "ClientOutputDataProcessor:UnitStartChangeStage_L2V", "msg", dumpTableEx(msg))
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_START_CHANGE_STAGE_L2V:GetId(), PROTO_CODE_ENUM.UNIT_START_CHANGE_STAGE_L2V:GetName(), msg)
end

--- 战斗单位死亡
---@public
---@param _UnitDead_l2v table msg.UnitDead_l2v
function ClientOutputDataProcessor:UnitDeadL2V(_UnitDead_l2v)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_DEAD_L2V:GetId(), PROTO_CODE_ENUM.UNIT_DEAD_L2V:GetName(),_UnitDead_l2v)
end

--- 战斗单位切换血量阶段
---@public
---@param _UnitChangeStage_l2v table msg.UnitChangeStage_l2v
function ClientOutputDataProcessor:UnitChangeStageL2V(_UnitChangeStage_l2v)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_CHANGE_STAGE_L2V:GetId(), PROTO_CODE_ENUM.UNIT_CHANGE_STAGE_L2V:GetName(), _UnitChangeStage_l2v)
end

--- 战斗单位切换状态
---@public
---@param _BattleUnitStateChange_L2S table msg.UnitChangeStage_l2v
function ClientOutputDataProcessor:BattleUnitStateChangeL2V(_BattleUnitStateChange_L2S)
    --LogTools.LogByLevel(LogLevel.log, "CheckDead", "ClientOutputDataProcessor:BattleUnitStateChangeL2V", "_BattleUnitStateChange_L2S", dumpTableEx(_BattleUnitStateChange_L2S))
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.BATTLE_UNIT_STATE_CHANGE_L2S:GetId(), PROTO_CODE_ENUM.BATTLE_UNIT_STATE_CHANGE_L2S:GetName(),_BattleUnitStateChange_L2S)
end

-- 前端向表现层发起寻路请求
---@public
---@param _PathFindRequest table PathFindRequest
function ClientOutputDataProcessor:SendPathFindRequest_L2V(_PathFindRequest)
    --LogTools.LogByLevel(LogLevel.log, "ClientOutputDataProcessor", "SendPathFindRequest_L2V", "_PathFindRequest", dumpTableEx(_PathFindRequest))
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_PATH_FIND_REQUEST:GetId(), PROTO_CODE_ENUM.UNIT_PATH_FIND_REQUEST:GetName(), _PathFindRequest);
end

-- 前端向表现层取消寻路请求
---@public
---@param _PathFindRequestCancel table PathFindRequestCancel
function ClientOutputDataProcessor:CancelPathFindRequest_L2V(_PathFindRequestCancel)
    --LogTools.LogByLevel(LogLevel.log, "ClientOutputDataProcessor", "CancelPathFindRequest_L2V", "_PathFindRequest", dumpTableEx(_PathFindRequestCancel))
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_PATH_FIND_CANCEL:GetId(), PROTO_CODE_ENUM.UNIT_PATH_FIND_CANCEL:GetName(), _PathFindRequestCancel);
end

--- 前端发送寻路结果给服务器
---@public
---@param _UnitDead_S2C table msg.MonsterMoveInput
function ClientOutputDataProcessor:SendPathFindResult(_MonsterMoveInput)
    --COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.MONSTER_MOVE_INPUT:GetId(), _MonsterMoveInput)
end

--- 同步路点广播
---@public
---@param _battleOutputData table MonsterSyncPathPointList_S2C
function ClientOutputDataProcessor:SyncPathPointListS2C(_battleOutputData)
    --COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.MONSTER_SYNC_PATH_POINT_LIST_S2C:GetId(), _battleOutputData)
end

-- 更新关卡阶段
---@public
---@param _curStageEnum number 当前阶段
function ClientOutputDataProcessor:UpdateBattleLevelStage(_curStageEnum)
end

-- 设置战斗结果
---@public
---@param _playerId number 玩家idw
---@param _battleResult number 战斗结果
---@param _overCondition number 战斗结束条件
function ClientOutputDataProcessor:UpdateBattleResult(_playerId, _battleResult, _overCondition)
end

--- 战斗结束
---@public
---@param overResult BattleResult 战斗结果
---@param overCondition number 战斗结束条件
function ClientOutputDataProcessor:BattleOver(overResult, overCondition)
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "ClientOutputDataProcessor", "BattleOver", "overResult", overResult:GetId(), "overCondition", overCondition)
    end

    if CLIENT_FIGHT_CORE.battleRoom:IsBattleOver() then
        if CheckLogLevel(LogLevel.logErr) then
            LogTools.LogByLevel(LogLevel.logErr, "ClientOutputDataProcessor", "BattleOver", "overResult", overResult, "overCondition", overCondition)
        end
        return
    end
    -- 设置本逻辑核的结果
    CLIENT_FIGHT_CORE.battleRoom.battleLevelManager:SetBattleOver(overResult, overCondition)
    -- 触发战斗结束事件
    CLIENT_FIGHT_CORE.battleRoom.battleLogicEventService:OnTriggerBattleOverEvent(overResult:GetId())
end

-- 弹幕触发事件
---@public
function ClientOutputDataProcessor:BarrageTrigEvent_L2V(_barrageTrigEvent_L2V)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.BARRAGE_TRIG_EVENT_L2V:GetId(), PROTO_CODE_ENUM.BARRAGE_TRIG_EVENT_L2V:GetName(), _barrageTrigEvent_L2V)
end

--- 创建区域
---@public
---@param _CreateAreaTrig_L2V table msg.CreateAreaTrig_L2V
function ClientOutputDataProcessor:CreateAreaTrigL2V(_CreateAreaTrig_L2V)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.CREATE_AREA_TRIG_L2V:GetId(), PROTO_CODE_ENUM.CREATE_AREA_TRIG_L2V:GetName(), _CreateAreaTrig_L2V)
end

--- 开启区域
---@public
---@param _OpenAreaTrig_L2V table msg.OpenAreaTrig_L2V
function ClientOutputDataProcessor:OpenAreaTrigL2V(_OpenAreaTrig_L2V)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.OPEN_AREA_TRIG_L2V:GetId(), PROTO_CODE_ENUM.OPEN_AREA_TRIG_L2V:GetName(), _OpenAreaTrig_L2V)
end

-- 玩家重连发给显示层
function ClientOutputDataProcessor:SendPlayerReconnectInfoL2V(_playerReconnectBattleRoomInfo_L2V)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.PLAYER_RECONNECT_BATTLE_ROOM_INFO_L2V:GetId(), PROTO_CODE_ENUM.PLAYER_RECONNECT_BATTLE_ROOM_INFO_L2V:GetName(), _playerReconnectBattleRoomInfo_L2V)
end


--- 关闭区域
---@public
---@param _CloseAreaTrig_L2V table msg.CloseAreaTrig_L2V
function ClientOutputDataProcessor:CloseAreaTrigL2V(_CloseAreaTrig_L2V)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.CLOSE_AREA_TRIG_L2V:GetId(), PROTO_CODE_ENUM.CLOSE_AREA_TRIG_L2V:GetName(), _CloseAreaTrig_L2V)
end

--- 销毁区域
---@public
---@param _DestroyAreaTrig_L2V table msg.DestroyAreaTrig_L2V
function ClientOutputDataProcessor:DestroyAreaTrigL2V(_DestroyAreaTrig_L2V)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.DESTROY_AREA_TRIG_L2V:GetId(), PROTO_CODE_ENUM.DESTROY_AREA_TRIG_L2V:GetName(), _DestroyAreaTrig_L2V)
end

-- 触发新手引导(SL -> CL)
---@public
function ClientOutputDataProcessor:TrigBattleGuideS2C(_battleOutputData)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.TRIG_BATTLE_GUIDE_S2C:GetId(), _battleOutputData)
end

-- 关卡触发新手引导UI操作(SL -> CL)
---@public
function ClientOutputDataProcessor:LevelTrigGuideUIOperateS2C(_battleOutputData)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.LEVEL_TRIG_UI_OPERATE_S2C:GetId(), _battleOutputData)
end

-- 关卡触发一般UI操作(SL -> CL)
---@public
function ClientOutputDataProcessor:LevelTrigNormalUIOperateS2C(_battleOutputData)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.LEVEL_TRIG_NORMAL_UI_OPERATE_S2C:GetId(), _battleOutputData)
end

-- 关卡触发玩家控制器操作(SL -> CL)
---@public
function ClientOutputDataProcessor:LevelTrigControllerOperateS2C(_battleOutputData)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.LEVEL_TRIG_CONTROLLER_OPERATE_S2C:GetId(), _battleOutputData)
end

-- 触发新手引导(CL -> CV)
---@public
function ClientOutputDataProcessor:TrigBattleGuideL2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.TRIG_BATTLE_GUIDE_L2V:GetId(), PROTO_CODE_ENUM.TRIG_BATTLE_GUIDE_L2V:GetName(), _battleOutputData)
end

-- 关卡触发新手引导UI操作(CL -> CV)
---@public
function ClientOutputDataProcessor:LevelTrigGuideUIOperateL2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.LEVEL_TRIG_UI_OPERATE_L2V:GetId(), PROTO_CODE_ENUM.LEVEL_TRIG_UI_OPERATE_L2V:GetName(), _battleOutputData)
end

-- 关卡触发一般UI操作(CL -> CV)
---@public
function ClientOutputDataProcessor:LevelTrigNormalUIOperateL2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.LEVEL_TRIG_NORMAL_UI_OPERATE_L2V:GetId(), PROTO_CODE_ENUM.LEVEL_TRIG_NORMAL_UI_OPERATE_L2V:GetName(), _battleOutputData)
end

-- 关卡触发玩家控制器操作(CL -> CV)
---@public
function ClientOutputDataProcessor:LevelTrigControllerOperateL2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.LEVEL_TRIG_CONTROLLER_OPERATE_L2V:GetId(), PROTO_CODE_ENUM.LEVEL_TRIG_CONTROLLER_OPERATE_L2V:GetName(), _battleOutputData)
end

-- 移除场景物件(CL -> CV)
---@public
function ClientOutputDataProcessor:RemoveSceneObjL2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.REMOVE_SCENE_OBJ_L2V:GetId(), PROTO_CODE_ENUM.REMOVE_SCENE_OBJ_L2V:GetName(), _battleOutputData)
end

-- 切换场景物件状态(CL -> CV)
---@public
function ClientOutputDataProcessor:ChangeSceneObjStateL2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.CHANGE_SCENE_OBJ_STATE_L2V:GetId(), PROTO_CODE_ENUM.CHANGE_SCENE_OBJ_STATE_L2V:GetName(), _battleOutputData)
end

-- 切换战斗BGM
---@public
function ClientOutputDataProcessor:ChangeBattleBGML2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.CHANGE_BATTLE_BGM_L2V:GetId(), PROTO_CODE_ENUM.CHANGE_BATTLE_BGM_L2V:GetName(), _battleOutputData)
end

-- 打开高能预警
---@public
function ClientOutputDataProcessor:OpenWarningUIL2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.OPEN_WARNING_UI_L2S:GetId(), PROTO_CODE_ENUM.OPEN_WARNING_UI_L2S:GetName(), {})
end

-- 打开战斗内通讯
---@public
function ClientOutputDataProcessor:OpenBattleCommunicationL2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.OPEN_BATTLE_COMMUNICATION_L2V:GetId(), PROTO_CODE_ENUM.OPEN_BATTLE_COMMUNICATION_L2V:GetName(), _battleOutputData)
end

-- 单位目标改变
---@public
function ClientOutputDataProcessor:UnitTargetChangeL2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_TARGET_CHANGE_L2V:GetId(), PROTO_CODE_ENUM.UNIT_TARGET_CHANGE_L2V:GetName(), _battleOutputData)
end

-- 生命周期重置
---@public
function ClientOutputDataProcessor:ObjectLifeResetL2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.BATTLE_OBJECT_LIFE_RESET_L2V:GetId(), PROTO_CODE_ENUM.BATTLE_OBJECT_LIFE_RESET_L2V:GetName(), _battleOutputData)
end

-- 开启分块
---@public
function ClientOutputDataProcessor:BattleUnitOpenBlockL2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_OPEN_BLOCK_L2V:GetId(), PROTO_CODE_ENUM.UNIT_OPEN_BLOCK_L2V:GetName(), _battleOutputData)
end
-- 关闭分块
---@public
function ClientOutputDataProcessor:BattleUnitCloseBlockL2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_CLOSE_BLOCK_L2V:GetId(), PROTO_CODE_ENUM.UNIT_CLOSE_BLOCK_L2V:GetName(), _battleOutputData)
end
-- 开启弱点
---@public
function ClientOutputDataProcessor:BattleUnitOpenWeaknessL2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_OPEN_WEAKNESS_L2V:GetId(), PROTO_CODE_ENUM.UNIT_OPEN_WEAKNESS_L2V:GetName(), _battleOutputData)
end
-- 关闭弱点
---@public
function ClientOutputDataProcessor:BattleUnitCloseWeaknessL2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_CLOSE_WEAKNESS_L2V:GetId(), PROTO_CODE_ENUM.UNIT_CLOSE_WEAKNESS_L2V:GetName(), _battleOutputData)
end
-- 隐藏分块
---@public
function ClientOutputDataProcessor:BattleUnitHideBlockL2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_HIDE_BLOCK_V2L:GetId(), PROTO_CODE_ENUM.UNIT_HIDE_BLOCK_V2L:GetName(), _battleOutputData)
end
-- 隐藏分块结束
---@public
function ClientOutputDataProcessor:BattleUnitHideBlockEndL2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_HIDE_BLOCK_END_V2L:GetId(), PROTO_CODE_ENUM.UNIT_HIDE_BLOCK_END_V2L:GetName(), _battleOutputData)
end
-- 隐藏分块网格
---@public
function ClientOutputDataProcessor:BattleUnitHideBlockMeshL2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_HIDE_BLOCK_MESH_V2L:GetId(), PROTO_CODE_ENUM.UNIT_HIDE_BLOCK_MESH_V2L:GetName(), _battleOutputData)
end
-- 隐藏分块网格结束
---@public
function ClientOutputDataProcessor:BattleUnitHideBlockMeshEndL2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_HIDE_BLOCK_MESH_END_V2L:GetId(), PROTO_CODE_ENUM.UNIT_HIDE_BLOCK_MESH_END_V2L:GetName(), _battleOutputData)
end

-- 弱点血量变化
---@public
function ClientOutputDataProcessor:BattleUnitWeaknessHPChangeL2V(_battleOutputData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_WEAKNESS_HP_CHANGE_L2V:GetId(), PROTO_CODE_ENUM.UNIT_WEAKNESS_HP_CHANGE_L2V:GetName(), _battleOutputData)
end

--- 单位交互结果
---@public
function ClientOutputDataProcessor:BattleUnitHandleResultL2V(_BattleUnitHandleResult_L2V) 
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_HANDLE_RESULT_L2V:GetId(), PROTO_CODE_ENUM.UNIT_HANDLE_RESULT_L2V:GetName(), _BattleUnitHandleResult_L2V)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Collector", "ClientOutputDataProcessor", "BattleUnitHandleResultL2V", "_BattleUnitHandleResult_L2V", dumpTableEx(_BattleUnitHandleResult_L2V))
end

-- 单位交互状态变化
---@public
function ClientOutputDataProcessor:BattleUnitHandleStateChangeL2V(_battleOutputData) 
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_HANDLE_STATE_CHANGE_L2V:GetId(), PROTO_CODE_ENUM.UNIT_HANDLE_STATE_CHANGE_L2V:GetName(), _battleOutputData)
	--LogTools.LogByLevel(LogLevel.log, "BattleUnitCom_Collector", "ClientOutputDataProcessor", "BattleUnitHandleStateChangeL2V", "_battleOutputData", dumpTableEx(_battleOutputData))
end

-- 采集玩法玩家金币积分变化
---@public
function ClientOutputDataProcessor:CollectorCoinPointsChangeL2V(_battleOutputData) 
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.COLLECTOR_COIN_POINTS_CHANGE_L2V:GetId(), PROTO_CODE_ENUM.COLLECTOR_COIN_POINTS_CHANGE_L2V:GetName(), _battleOutputData)
end

-- 采集金币次数改变
---@public
function ClientOutputDataProcessor:CollectorCoinNumChangeL2V(_battleOutputData) 
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.COLLECTOR_COIN_NUM_CHANGE_L2V:GetId(), PROTO_CODE_ENUM.COLLECTOR_COIN_NUM_CHANGE_L2V:GetName(), _battleOutputData)
end

-- 玩家离开
---@public
function ClientOutputDataProcessor:PlayerLeaveL2V(_playerLeave_L2V)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.PLAYER_LEAVE_L2V:GetId(), PROTO_CODE_ENUM.PLAYER_LEAVE_L2V:GetName(), _playerLeave_L2V)
end

-- 玩家进入
---@public
function ClientOutputDataProcessor:PlayerEnterL2V(_playerEnter_L2V)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.PLAYER_ENTER_L2V:GetId(), PROTO_CODE_ENUM.PLAYER_ENTER_L2V:GetName(), _playerEnter_L2V)
end

--- 改变Tag值
---@public
---@param _changeTag_S2C table msg.ChangeTag_S2C
function ClientOutputDataProcessor:ChangeTagS2C(_changeTag_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.CHANGE_TAG_S2C:GetId(), _changeTag_S2C)
end

--- 改变Tag值
---@public
function ClientOutputDataProcessor:ChangeTag_L2V(_changeTag_L2V)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.CHANGE_TAG_L2V:GetId(), PROTO_CODE_ENUM.CHANGE_TAG_L2V:GetName(), _changeTag_L2V)
end

-- 同步关卡暂停时间
---@public
function ClientOutputDataProcessor:SyncLevelPauseTime_S2C(_syncLevelPauseTime_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.SYNC_LEVEL_PAUSE_TIME_S2C:GetId(), _syncLevelPauseTime_S2C)
end

-- 获取主线三星
---@public
function ClientOutputDataProcessor:GetLevelThreeStarList_S2C(_getMainLevelStarList_S2C)
    -- FIXME 现在除了主线，任何关卡都可能有三星了，要不要考虑消息改个名
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.GET_MAIN_LEVEL_STAR_LIST_S2C:GetId(), _getMainLevelStarList_S2C)
end

-- 获取主线三星
---@public
function ClientOutputDataProcessor:GetLevelThreeStarListToClient(_playerId, _getLevelThreeStarList)
    -- FIXME 现在除了主线，任何关卡都可能有三星了，要不要考虑消息改个名
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.GET_MAIN_LEVEL_STAR_LIST_S2C:GetId(), _getLevelThreeStarList)
end

-- 播放表演
---@public
function ClientOutputDataProcessor:BattlePlayAct_S2C(_battlePlayAct_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.BATTLE_PLAY_ACT_S2C:GetId(), _battlePlayAct_S2C)
end

-- 播放ui
---@public
function ClientOutputDataProcessor:BattlePlayUI_S2C(_battlePlayUI_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.BATTLE_PLAY_UI_S2C:GetId(), _battlePlayUI_S2C)
end

-- 播放剧情
---@public
function ClientOutputDataProcessor:BattlePlayPlot_S2C(_battlePlayPlot_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.BATTLE_PLAY_PLOT_S2C:GetId(), _battlePlayPlot_S2C)
end

-- 结束播放剧情
---@public
function ClientOutputDataProcessor:BattlePlayPlotEnd_S2C(_battlePlayPlotEnd_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.SERVER_BATTLE_PLAY_PLOT_END_S2C:GetId(), _battlePlayPlotEnd_S2C)
end

-- 结束播放表演
---@public
function ClientOutputDataProcessor:BattlePlayActEnd_S2C(_battlePlayActEnd_S2C)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.SERVER_BATTLE_PLAY_ACT_END_S2C:GetId(), _battlePlayActEnd_S2C)
end

-- 销弹
---@public
function ClientOutputDataProcessor:DestroyBullet(_destroyBullet)
    COMMAND.SendCommandToServerLogic(PROTO_CODE_ENUM.DESTROY_BULLET:GetId(), PROTO_CODE_ENUM.DESTROY_BULLET:GetName(), _destroyBullet)
end

-- 拾取掉落物
---@public
function ClientOutputDataProcessor:PickUpDropFallObject(_pickUpDropFallObjects)
    COMMAND.SendCommandToServerLogic(PROTO_CODE_ENUM.PICK_UP_DROP_FALL_OBJECT:GetId(), PROTO_CODE_ENUM.PICK_UP_DROP_FALL_OBJECT:GetName(), _pickUpDropFallObjects)
end

-- 表演结束
---@public
function ClientOutputDataProcessor:BattlePlayActEnd(_battlePlayActEnd)
    COMMAND.SendCommandToServerLogic(PROTO_CODE_ENUM.BATTLE_PLAY_ACT_END:GetId(), PROTO_CODE_ENUM.BATTLE_PLAY_ACT_END:GetName(), _battlePlayActEnd)
end

-- 剧情结束
---@public
function ClientOutputDataProcessor:BattlePlotPlotEnd(_battlePlayPlotEnd)
    COMMAND.SendCommandToServerLogic(PROTO_CODE_ENUM.BATTLE_PLAY_PLOT_END:GetId(), PROTO_CODE_ENUM.BATTLE_PLAY_PLOT_END:GetName(), _battlePlayPlotEnd)
end

-- 单位属性变化L2V
---@public
function ClientOutputDataProcessor:BattleUnitPropChangeL2V(_battleUnitPropChange_L2V) 
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.BATTLE_UNIT_PROP_CHANGE_L2V:GetId(), PROTO_CODE_ENUM.BATTLE_UNIT_PROP_CHANGE_L2V:GetName(), _battleUnitPropChange_L2V)
end

-- 战斗结束
---@public
function ClientOutputDataProcessor:BattleOver_L2V(overData)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.BATTLE_OVER_L2V:GetId(), PROTO_CODE_ENUM.BATTLE_OVER_L2V:GetName(), overData)
end

-- 逻辑核关闭
---@public
function ClientOutputDataProcessor:BattleLogicClose_L2S()
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.BATTLE_LOGIC_CLOSE_L2S:GetId(), PROTO_CODE_ENUM.BATTLE_LOGIC_CLOSE_L2S:GetName(), {})
end

-- 进入消息
---@public
function ClientOutputDataProcessor:LocalScenePreEnter()
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.LOCAL_SCENE_PRE_ENTER:GetId(), PROTO_CODE_ENUM.LOCAL_SCENE_PRE_ENTER:GetName(), {})
end

-- 本地的登录消息
---@public
function ClientOutputDataProcessor:BattleLogin_L2V(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.BATTLE_LOGIN_L2V:GetId(), PROTO_CODE_ENUM.BATTLE_LOGIN_L2V:GetName(), msg)
end

-- 展示ui
---@public
function ClientOutputDataProcessor:BattleShowRunUi_L2S()
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.BATTLE_SHOW_RUN_UI_L2S:GetId(), PROTO_CODE_ENUM.BATTLE_SHOW_RUN_UI_L2S:GetName(), {})
end

-- 掉落
---@public
function ClientOutputDataProcessor:DropFallObject_L2S(msg)
    --LogTools.LogByLevel(LogLevel.log, "BattleObjCom_Drop", "DropFallObject_L2S", dumpTableEx(msg))
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.DROP_FALL_OBJECT_L2S:GetId(), PROTO_CODE_ENUM.DROP_FALL_OBJECT_L2S:GetName(), msg)
end

-- 掉落
---@public
function ClientOutputDataProcessor:PickUpFallObject_L2S(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.PICK_UP_FALL_OBJECT_L2S:GetId(), PROTO_CODE_ENUM.PICK_UP_FALL_OBJECT_L2S:GetName(), msg)
end

-- 元素
---@public
function ClientOutputDataProcessor:ElementReact_L2S(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.ELEMENT_REACT_L2S:GetId(), PROTO_CODE_ENUM.ELEMENT_REACT_L2S:GetName(), msg)
end

-- 元素
---@public
function ClientOutputDataProcessor:ElementAttach_L2S(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.ELEMENT_ATTACH_L2S:GetId(), PROTO_CODE_ENUM.ELEMENT_ATTACH_L2S:GetName(), msg)
end

-- 元素
---@public
function ClientOutputDataProcessor:ElementValueChange_L2V(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.ELEMENT_VALUE_CHANGE_L2V:GetId(), PROTO_CODE_ENUM.ELEMENT_VALUE_CHANGE_L2V:GetName(), msg)
end

-- 元素
---@public
function ClientOutputDataProcessor:ElementRemove_L2S(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.ELEMENT_REMOVE_L2S:GetId(), PROTO_CODE_ENUM.ELEMENT_REMOVE_L2S:GetName(), msg)
end

-- 元素
---@public
function ClientOutputDataProcessor:ElementReduceWarning_L2S(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.ELEMENT_REDUCE_WARNING_L2S:GetId(), PROTO_CODE_ENUM.ELEMENT_REDUCE_WARNING_L2S:GetName(), msg)
end

-- 元素
---@public
function ClientOutputDataProcessor:ElementCancelReduceWarning_L2V(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.ELEMENT_CANCEL_REDUCE_WARNING_L2V:GetId(), PROTO_CODE_ENUM.ELEMENT_CANCEL_REDUCE_WARNING_L2V:GetName(), msg)
end

-- 元素
---@public
function ClientOutputDataProcessor:CreateElementLightningBall_L2S(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.CREATE_ELEMENT_LIGHTNING_BALL_L2S:GetId(), PROTO_CODE_ENUM.CREATE_ELEMENT_LIGHTNING_BALL_L2S:GetName(), msg)
end

-- 元素
---@public
function ClientOutputDataProcessor:CreateElementIceWindBall_L2V(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.CREATE_ELEMENT_ICE_WIND_BALL_L2V:GetId(), PROTO_CODE_ENUM.CREATE_ELEMENT_ICE_WIND_BALL_L2V:GetName(), msg)
end

-- 显示层开始播放UI
---@public
function ClientOutputDataProcessor:ClientStartPlayUi(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.BATTLE_PLAY_UI_L2S:GetId(), PROTO_CODE_ENUM.BATTLE_PLAY_UI_L2S:GetName(), msg)
end

-- 显示层开始玩家剧情
---@public
function ClientOutputDataProcessor:ClientStartPlayPlot(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.BATTLE_PLAY_PLOT_L2S:GetId(), PROTO_CODE_ENUM.BATTLE_PLAY_PLOT_L2S:GetName(), msg)
end

-- 显示层开始玩家表演
---@public
function ClientOutputDataProcessor:ClientStartPlayAct(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.BATTLE_PLAY_ACT_L2S:GetId(), PROTO_CODE_ENUM.BATTLE_PLAY_ACT_L2S:GetName(), msg)
end

-- 通知显示层停止玩家剧情
---@public
function ClientOutputDataProcessor:ServerEndPlayPlot(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.SERVER_BATTLE_PLAY_PLOT_END_L2V:GetId(), PROTO_CODE_ENUM.SERVER_BATTLE_PLAY_PLOT_END_L2V:GetName(), msg)
end

-- 通知显示层停止玩家表演
---@public
function ClientOutputDataProcessor:ServerEndPlayAct(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.SERVER_BATTLE_PLAY_ACT_END_L2V:GetId(), PROTO_CODE_ENUM.SERVER_BATTLE_PLAY_ACT_END_L2V:GetName(), msg)
end

-- 通武器进入过载
---@public
function ClientOutputDataProcessor:WeaponEnterOverLoad_S2C(msg)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.WEAPON_ENTER_OVER_LOAD_S2C:GetId(), msg)
end

-- 通武器进入过载
---@public
function ClientOutputDataProcessor:WeaponEnterOverLoad_L2V(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.WEAPON_ENTER_OVER_LOAD_L2V:GetId(), PROTO_CODE_ENUM.WEAPON_ENTER_OVER_LOAD_L2V:GetName(), msg)
end

--- 退出过载状态
---@public
function ClientOutputDataProcessor:WeaponExitOverLoad_L2V(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.WEAPON_EXIT_OVER_LOAD_L2V:GetId(), PROTO_CODE_ENUM.WEAPON_EXIT_OVER_LOAD_L2V:GetName(), msg)
end

--- 退出过载状态
---@public
function ClientOutputDataProcessor:WeaponExitOverLoad_S2C(msg)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.WEAPON_EXIT_OVER_LOAD_S2C:GetId(), msg)
end

--- 换弹开始
---@public
function ClientOutputDataProcessor:ReloadBulletStart_L2V(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.RELOAD_BULLET_START_L2V:GetId(), PROTO_CODE_ENUM.RELOAD_BULLET_START_L2V:GetName(), msg)
end

--- 换弹结束
---@public
function ClientOutputDataProcessor:ReloadBulletEnd_L2V(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.RELOAD_BULLET_END_L2V:GetId(), PROTO_CODE_ENUM.RELOAD_BULLET_END_L2V:GetName(), msg)
end

--- 换弹开始
---@public
function ClientOutputDataProcessor:ReloadBulletStart_S2C(msg)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.RELOAD_BULLET_START_S2C:GetId(), msg)
end

--- 换弹结束
---@public
function ClientOutputDataProcessor:ReloadBulletEnd_S2C(msg)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.RELOAD_BULLET_END_S2C:GetId(), msg)
end

--- 战斗单位obj死亡
---@public
---@param _outPut table
function ClientOutputDataProcessor:ObjectDeadL2V(_outPut) 
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_OBJECT_DEAD_L2V:GetId(), PROTO_CODE_ENUM.UNIT_OBJECT_DEAD_L2V:GetName(), _outPut)
end
    
--- 关卡时间变更
---@public
function ClientOutputDataProcessor:LevelChangeTimeLimit_S2C(msg)
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.LEVEL_CHANGE_TIME_LIMIT_S2C:GetId(), msg)
end

--- 关卡时间变更
---@public
function ClientOutputDataProcessor:LevelChangeTimeLimit_L2V(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.LEVEL_CHANGE_TIME_LIMIT_L2V:GetId(), PROTO_CODE_ENUM.LEVEL_CHANGE_TIME_LIMIT_L2V:GetName(), msg)
end

--- 本地模式回复进场景
---@public
function ClientOutputDataProcessor:LocalSceneEnter_S2C()
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.LOCAL_SCENE_ENTER_S2C:GetId(), PROTO_CODE_ENUM.LOCAL_SCENE_ENTER_S2C:GetName(), {})
end

--- 怪物勇士状态改变
---@public
function ClientOutputDataProcessor:UnitChangeWarriorState_L2V(msg)
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_CHANGE_WARRIOR_STATE_L2V:GetId(), PROTO_CODE_ENUM.UNIT_CHANGE_WARRIOR_STATE_L2V:GetName(), msg)
end

--- 行为树状态
---@public
function ClientOutputDataProcessor:PushBehavInfo_L2V(msg)
    --LogTools.LogByLevel(LogLevel.log, "ClientOutputDataProcessor:PushBehavInfo_L2V", dumpTableEx(msg))
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.PUSH_BEHAV_INFO_L2V:GetId(), PROTO_CODE_ENUM.PUSH_BEHAV_INFO_L2V:GetName(), msg)
end

--- 行为树状态
---@public
function ClientOutputDataProcessor:PushBehavInfo_S2C(msg)
    self:PushBehavInfo_L2V(msg)
end

--- 开始朝向目标L2V
---@public
function ClientOutputDataProcessor:StartFaceTarget_L2V(msg) 
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_START_FACE_TARGET_L2V:GetId(), PROTO_CODE_ENUM.UNIT_START_FACE_TARGET_L2V:GetName(), msg)
end

--- 结束朝向目标L2V
---@public
function ClientOutputDataProcessor:StopFaceTarget_L2V(msg) 
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_STOP_FACE_TARGET_L2V:GetId(), PROTO_CODE_ENUM.UNIT_STOP_FACE_TARGET_L2V:GetName(), msg)
end

--- 弱点击破
---@public
function ClientOutputDataProcessor:WeaknessBroken_S2C(msg) 
    COMMAND.SendCommandToSelf(PROTO_CODE_ENUM.WEAKNESS_BROKEN_S2C:GetId(), msg)
end

--- 弱点击破
---@public
function ClientOutputDataProcessor:WeaknessBroken_L2V(msg) 
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.WEAKNESS_BROKEN_V2L:GetId(), PROTO_CODE_ENUM.WEAKNESS_BROKEN_V2L:GetName(), msg)
end

--- 肉鸽主公技开启状态变化
---@public
function ClientOutputDataProcessor:RogueUnitSkillOpenedChange_L2V(msg)
    --LogTools.LogByLevel(LogLevel.logErr, "ClientOutputDataProcessor:RogueUnitSkillOpenedChange_L2V", "msg", dumpTableEx(msg))
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.ROGUE_UNIT_SKILL_OPENED_CHANGE_L2V:GetId(), PROTO_CODE_ENUM.ROGUE_UNIT_SKILL_OPENED_CHANGE_L2V:GetName(), msg)
end

--- unit覆盖护罩变化
---@public
function ClientOutputDataProcessor:UnitCoverShieldChange_L2V(msg)
    --LogTools.LogByLevel(LogLevel.logErr, "ClientOutputDataProcessor:UnitCoverShieldChange_L2V", "msg", dumpTableEx(msg))
    COMMAND.SendCommandToClientView(PROTO_CODE_ENUM.UNIT_COVER_SHIELD_CHANGE_L2V:GetId(), PROTO_CODE_ENUM.UNIT_COVER_SHIELD_CHANGE_L2V:GetName(), msg)
end

return ClientOutputDataProcessor
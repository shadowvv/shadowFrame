---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hejincheng.
--- DateTime: 2022/3/15 18:44

require "Lib/class"
require "Battle/Logic/Room/BattleLevel/LevelUnit/Unit/LevelUnitBase"
require "Battle/Logic/Room/BattleLevel/LevelUnit/SeasonReplaceTypeEnum"

---@class LevelUnitManager : table
LevelUnitManager = class(nil, 'LevelUnitManager');

function LevelUnitManager:ctor(_battleId)
    ---@type number
    self.battleId = _battleId
    ---@type BattleRoom
    self.battleRoom = GetBattleRoom(self.battleId)
end

---@param _levelConfigManager BattleLevelConfigManager
function LevelUnitManager:__Init(_levelConfigManager)
    ---@type table<number,LevelUnitBase> 所有单位<单位id,单位>
    self.allUnitDic = {}
    ---@type table<number,LevelUnitBase> 所有导航点<单位id,单位>
    self.allNavUnitDic = {}

    ---@type table<number,LevelUnitBase[]> 按组分类单位<组id,table array<单位>>
    self.unitsByGroupDic = {}
    ---@type table<number,LevelUnitBase[]> 按类别分类单位<类别,table array<单位>>
    self.unitsByTypeDic = {}

    ---@type table<number,LevelUnitBase> 活跃的关卡单位<单位id,单位>
    self.activeUnitDic = {}
    ---@type table<number,LevelUnitBase> 死亡的关卡单位<单位id,单位>
    self.deadUnitDic = {}

    ---@type LevelUnitBase[] 关键单位
    self.keyUnits = {}
    ---@type LevelUnitBase[] 守护单位
    self.protectUnits = {}
    ---@type LevelUnitBase[] 守护单位id dic
    self.protectIdUnitDic = {}
    ---@type LevelUnitBase[] BOSS单位
    self.bossUnits = {}
    ---@type LevelUnitBase[] 初始刷新单位
    self.initUnits = {}

    self:__InitUnitSeasonData(_levelConfigManager)
    self:__InitUnitEditorData()
end

-- 初始赛季单位数据
---@protected
---@param _levelConfigManager BattleLevelConfigManager
function LevelUnitManager:__InitUnitSeasonData(_levelConfigManager)
    ---@type number 赛季
    self.season = self.battleRoom.season
    ---@type boolean 勇士怪替换开关
    self.replaceWarrior = self.season and self.season > 0

    ---@type number 勇士怪计数
    self.warriorCounter = 0
    ---@type number 勇士怪替换下标
    self.warriorReplaceIndex = 1

    ---@type number
    local _levelInstanceId = _levelConfigManager:GetLevelInstanceId()
    if _levelInstanceId then
        ---@type SeasonReplaceLevel 赛季替换规则
        self.seasonReplaceLevel = self.battleRoom.inputDataSource:GetSeasonReplaceLevelByLevelIdAndSeason(_levelInstanceId, self.season)
    end
end

-- 初始编辑器数据
---@protected
function LevelUnitManager:__InitUnitEditorData()
    if not self.battleRoom.battleLevelManager.levelConfigManager:GetLevelEditorConfig() then
        if CheckLogLevel(LogLevel.logErr) then
            LogTools.LogByLevel(LogLevel.logErr, "LevelUnitManager", "__InitUnitEditorData", "LevelConfig", "nil")
        end
        return
    end
    if not self.battleRoom.battleLevelManager.levelConfigManager:GetLevelEditorConfig().unitData then
        if CheckLogLevel(LogLevel.logErr) then
            LogTools.LogByLevel(LogLevel.logErr, "LevelUnitManager", "__InitUnitEditorData", "LevelConfig", "unitData", "nil")
        end
        return
    end
    
    for _, _levelUnitData in pairs(self.battleRoom.battleLevelManager.levelConfigManager:GetLevelEditorConfig().unitData) do
        local levelUnitType = GetLevelUnitTypeById(_levelUnitData.type)
        if levelUnitType then
            ---@type LevelUnitBase
            local _levelUnit = levelUnitType:CreateLevelUnit()
            _levelUnit:Init(self.battleId, _levelUnitData)

            self:__CheckReplaceWarriorLevelUnit(_levelUnit)
            self:__AddLevelUnit(_levelUnit)
        end
    end
    
     for _, _levelUnitData in pairs(self.battleRoom.battleLevelManager.levelConfigManager:GetLevelEditorConfig().navPoint) do
        local levelUnitType = GetLevelUnitTypeById(_levelUnitData.type)
        if levelUnitType then
            ---@type LevelUnitBase
            local _levelUnit = levelUnitType:CreateLevelUnit()
            _levelUnit:Init(self.battleId, _levelUnitData)

            self:__AddNavLevelUnit(_levelUnit)
        end
    end
end

-- 添加导航点
---@param _navLevelUnit LevelUnitBase 单位
function LevelUnitManager:__AddNavLevelUnit(_navLevelUnit)
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "LevelUnitManager", "__AddNavLevelUnit", "_levelUnit.id", _navLevelUnit.id, "_levelUnit.type", _navLevelUnit.type:GetId())
    end

    -- id映射
    self.allNavUnitDic[tostring(_navLevelUnit.id)] = _navLevelUnit

    -- 分组
    ---@type table
    local groupUnits = self.unitsByGroupDic[tostring(_navLevelUnit.groupId)]
    if groupUnits == nil then
        groupUnits = {}
    end
    table.insert(groupUnits, _navLevelUnit)
    self.unitsByGroupDic[tostring(_navLevelUnit.groupId)] = groupUnits

    -- 分类别
    ---@type table
    local typeUnits = self.unitsByTypeDic[tostring(_navLevelUnit.type:GetId())]
    if typeUnits == nil then
        typeUnits = {}
    end
    table.insert(typeUnits, _navLevelUnit)
    self.unitsByTypeDic[tostring(_navLevelUnit.type:GetId())] = typeUnits
end

-- 添加关卡单位
---@protected
---@param _levelUnit LevelUnitBase
function LevelUnitManager:__AddLevelUnit(_levelUnit)
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "LevelUnitManager", "__AddLevelUnit", "_levelUnit.id", _levelUnit.id, "_levelUnit.type", _levelUnit.type:GetId())
    end

    if self.allUnitDic[tostring(_levelUnit.id)] ~= nil then
        if CheckLogLevel(LogLevel.logErr) then
            LogTools.LogByLevel(LogLevel.logErr, "LevelUnitManager", "__AddLevelUnit", "levelUnit.already.exists", "_levelUnit.id", _levelUnit.id, "_levelUnit.type", _levelUnit.type:GetId())
        end
        return
    end

    -- id映射
    self.allUnitDic[tostring(_levelUnit.id)] = _levelUnit

    -- 分组
    ---@type table
    local groupUnits = self.unitsByGroupDic[tostring(_levelUnit.groupId)]
    if groupUnits == nil then
        groupUnits = {}
    end
    table.insert(groupUnits, _levelUnit)
    self.unitsByGroupDic[tostring(_levelUnit.groupId)] = groupUnits

    -- 分类别
    ---@type table
    local typeUnits = self.unitsByTypeDic[tostring(_levelUnit.type:GetId())]
    if typeUnits == nil then
        typeUnits = {}
    end
    table.insert(typeUnits, _levelUnit)
    self.unitsByTypeDic[tostring(_levelUnit.type:GetId())] = typeUnits

    -- 关键单位
    if _levelUnit.keyUnit then
        table.insert(self.keyUnits, _levelUnit)
    end

    -- 守护单位
    if _levelUnit.target then
        table.insert(self.protectUnits, _levelUnit)
        self.protectIdUnitDic[tostring(_levelUnit.targetId)] = _levelUnit
    end

    -- BOSS单位
    if _levelUnit.bossShow then
        table.insert(self.bossUnits, _levelUnit)
    end

    -- 初始单位
    if _levelUnit.initRefresh then
        table.insert(self.initUnits, _levelUnit)
    end
end

-- 勇士关卡单位替换
---@protected
---@param _levelUnit LevelUnitBase 关卡单位
function LevelUnitManager:__CheckReplaceWarriorLevelUnit(_levelUnit)
    if not self.replaceWarrior or not _levelUnit.warriorStatus or not self.seasonReplaceLevel then
        return
    end
    local _monsterIds = self.seasonReplaceLevel.monsterId
    if not _monsterIds or #_monsterIds == 0 then
        return
    end
    -- 赛季勇士怪替换
    if self.warriorCounter >= self.seasonReplaceLevel.monsterNum then
        -- 勇士怪数量够了
        return
    end

    local _oldInstanceId = _levelUnit.instanceId
    -- 勇士怪数量不足进行替换
    local _replaceMonsterId = _monsterIds[self.warriorReplaceIndex]
    _levelUnit.instanceId = _replaceMonsterId

    -- 勇士怪计数
    self.warriorCounter = self.warriorCounter + 1
    -- 默认交替循环替换
    self.warriorReplaceIndex = self.warriorReplaceIndex + 1
    if self.warriorReplaceIndex > #_monsterIds then
        self.warriorReplaceIndex = 1
    end
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "LevelUnitManager", "levelUnitId", _levelUnit.id, "oldInstanceId", _oldInstanceId, "newInstanceId", _levelUnit.instanceId)
    end
end

-- 关卡单位激活
---@protected
---@param _levelUnit LevelUnitBase 关卡单位
---@param _unit BattleUnitBase 单位
function LevelUnitManager:__SetLevelUnitActive(_levelUnit, _unit)
    if not _levelUnit then
        return
    end
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "LevelUnitManager", "__SetLevelUnitActive", "_levelUnitId", _levelUnit.id, "netId", _unit:GetNetId())
    end
    _levelUnit:SetState(LevelUnitStateEnum.ACTIVE)
    _levelUnit:SetNetId(_unit)
    _levelUnit:SetFirstCamp(_unit)

    local id = tostring(_levelUnit.id)
    self.deadUnitDic[id] = nil
    self.activeUnitDic[id] = _levelUnit
end

-- 关卡单位死亡
---@protected
---@param _levelUnit LevelUnitBase 关卡单位
function LevelUnitManager:__SetLevelUnitDead(_levelUnit)
    if not _levelUnit then
        return
    end
    if CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "LevelUnitManager", "__SetLevelUnitDead", "_levelUnitId", _levelUnit.id)
    end
    _levelUnit:SetState(LevelUnitStateEnum.DEAD)

    local id = tostring(_levelUnit.id)
    self.activeUnitDic[id] = nil
    self.deadUnitDic[id] = _levelUnit
end

---@protected
function LevelUnitManager:__OnUpdate(_deltaTime, _frameId)
end

------------------------------------------------------------------------------------------------------------------------

-- 凭空创建关卡单位(不依赖关卡配置)
---@public
---@param _instanceId number 实例id
---@param _levelUnitType LevelUnitType 单位类型
---@return LevelUnitBase
function LevelUnitManager:CreateLevelUnitByInstanceId(_instanceId, _levelUnitType)
    local _levelUnit = _levelUnitType:CreateLevelUnit()
    -- 创建关卡单位id
    local _id = self.battleRoom.idCreator:GetAndIncreaseCustomLevelUnitId()
    _levelUnit:InitByInstanceId(_id, self.battleId, _instanceId, _levelUnitType)
    self:__AddLevelUnit(_levelUnit)
    return _levelUnit
end

-- 关卡单位创建事件
---@public
---@param _unit BattleUnitBase 创建关卡单位
function LevelUnitManager:OnLevelUnitCreate(_unit)
    local _levelUnit = self.allUnitDic[tostring(_unit:GetLevelUnitId())]
    if not _levelUnit then
        return
    end
    self:__SetLevelUnitActive(_levelUnit, _unit)
end

-- 关卡单位死亡事件
---@public
---@param _unit BattleUnitBase 创建关卡单位
function LevelUnitManager:OnLevelUnitDead(_unit)
    local _levelUnitId = _unit:GetLevelUnitId()
    local _levelUnit = self.allUnitDic[tostring(_levelUnitId)]
    if not _levelUnit then
        return
    end
    self:__SetLevelUnitDead(_levelUnit)

    if _levelUnit.keyUnit then
        -- 关键目标死亡事件
        self.battleRoom.battleLogicEventService:OnTriggerKeyUnitDeadEvent(_levelUnit.id);

        local allKeyUnitDead = true
        for _, _keyUnit in pairs(self.keyUnits) do
            if _keyUnit.state ~= LevelUnitStateEnum.DEAD then
                -- 没刷出来，没死，都不算
                allKeyUnitDead = false
                break
            end
        end
        if allKeyUnitDead then
            -- 所有关键单位死亡事件
            self.battleRoom.battleLogicEventService:OnTriggerAllKeyUnitDeadEvent();
        end
    end

    if _levelUnit.target then
        -- 守护目标死亡事件
        self.battleRoom.battleLogicEventService:OnTriggerProtectUnitDeadEvent(_levelUnit.id)

        local allProtectUnitDead = true
        for _, _protectUnit in pairs(self.protectUnits) do
            if _protectUnit.state ~= LevelUnitStateEnum.DEAD then
                -- 没刷出来，没死，都不算
                allProtectUnitDead = false
                break
            end
        end
        if allProtectUnitDead then
            -- 所有守护目标单位死亡事件
            self.battleRoom.battleLogicEventService:OnTriggerAllProtectUnitDeadEvent()
        end
    end

    if _levelUnit.bossShow then
        -- 守护目标死亡事件
        self.battleRoom.battleLogicEventService:OnTriggerBossUnitDeadEvent(_levelUnit.id)

        local allBossUnitDead = true
        for _, _bossUnit in pairs(self.bossUnits) do
            if _bossUnit.state ~= LevelUnitStateEnum.DEAD then
                -- 没刷出来，没死，都不算
                allBossUnitDead = false
                break
            end
        end
        if allBossUnitDead then
            -- 所有BOSS单位死亡事件
            self.battleRoom.battleLogicEventService:OnTriggerAllBossUnitDeadEvent()
        end
    end

    local _typeUnits = self:GetLevelUnitByType(_levelUnit.type:GetId())
    local _allTypeUnitDead = true
    if _typeUnits then
        for _, _typeUnit in pairs(_typeUnits) do
            if _typeUnit.state ~= LevelUnitStateEnum.DEAD then
                -- 没刷出来，没死，都不算
                _allTypeUnitDead = false
                break
            end
        end
    end
    if _allTypeUnitDead then
        -- 所有此类别单位死亡事件
        self.battleRoom.battleLogicEventService:OnTriggerAllTypeUnitDeadEvent(_levelUnit.type:GetId());
    end
end

---@protected
---@param _levelUnit LevelUnitBase 关卡单位
---@param _checkUnitTypeList table 检测类别
function LevelUnitManager:__CheckUnitTypeList(_levelUnit, _checkUnitTypeList)
    -- 检测类别
    for _, _type in pairs(_checkUnitTypeList) do
        if _levelUnit.type:GetId() == _type then
            return true
        end
    end
    return false
end

------------------------------------------------------------------------------------------------------------------------

---@public
---@param _levelConfigManager BattleLevelConfigManager
function LevelUnitManager:Init(_levelConfigManager)
    self:__Init(_levelConfigManager)
end

---@public
function LevelUnitManager:OnUpdate(_deltaTime, _frameId)
    return self:__OnUpdate(_deltaTime, _frameId)
end

-- 按类别获取关卡单位
---@public
---@param _unitType number 关卡单位类别
---@return LevelUnitBase[]
function LevelUnitManager:GetLevelUnitByType(_unitType)
    return self.unitsByTypeDic[tostring(_unitType)] or {}
end

-- 按组获取关卡单位
---@public
---@param _unitGroupId number 关卡单位组
---@return LevelUnitBase[]
function LevelUnitManager:GetLevelUnitByGroup(_unitGroupId)
    return self.unitsByGroupDic[tostring(_unitGroupId)] or {}
end

-- 按id获取关卡单位
---@public
---@param _levelUnitId number 获取关卡单位
---@return LevelUnitBase
function LevelUnitManager:GetLevelUnit(_levelUnitId)
    return self.allUnitDic[tostring(_levelUnitId)]
end

-- 按id获取关卡导航单位
---@public
---@param _navLevelUnitId number 获取关卡导航单位
---@return LevelUnitBase
function LevelUnitManager:GetNavLevelUnit(_navLevelUnitId)
    return self.allNavUnitDic[tostring(_navLevelUnitId)]
end

-- 获取关键单位
---@public
---@return LevelUnitBase[]
function LevelUnitManager:GetKeyLevelUnit()
    return self.keyUnits
end

-- 获取守护单位
---@public
---@return LevelUnitBase[]
function LevelUnitManager:GetProtectTargetLevelUnit()
    return self.protectUnits
end

-- 用targetId获取守护单位
---@public
---@return LevelUnitBase
function LevelUnitManager:GetProtectTargetLevelUnitByTargetId(_targetId)
    return self.protectIdUnitDic[tostring(_targetId)]
end

-- 获取BOSS单位
---@public
---@return LevelUnitBase[]
function LevelUnitManager:GetBossLevelUnit()
    return self.bossUnits
end

-- 获取初始单位
---@public
---@return LevelUnitBase[]
function LevelUnitManager:GetInitLevelUnit()
    return self.initUnits
end

-- 检测单位状态
---@public
---@param _levelUnitId number 单位id
---@param _levelUnitStateEnum LevelUnitStateEnum 状态枚举
---@return boolean
function LevelUnitManager:CheckLevelUnitState(_levelUnitId, _levelUnitStateEnum, _checkUnitTypeList)
    local _levelUnit = self:GetLevelUnit(_levelUnitId)
    if not _levelUnit then
        return false
    end
    local _result = _levelUnit.state == _levelUnitStateEnum
    if not _result then
        return false
    end
    if _checkUnitTypeList then
        return self:__CheckUnitTypeList(_levelUnit, _checkUnitTypeList)
    end
    return true
end

-- 检测单位状态
---@public
---@param _unitGroupId number 单位组id
---@param _levelUnitStateEnum LevelUnitStateEnum 状态枚举
---@return boolean
function LevelUnitManager:CheckLevelUnitStateByGroup(_unitGroupId, _levelUnitStateEnum, _checkUnitTypeList)
    local _levelUnits = self:GetLevelUnitByGroup(_unitGroupId)
    if not _levelUnits then
        return false
    end
    for _, _levelUnit in pairs(_levelUnits) do
        if _checkUnitTypeList == nil or self:__CheckUnitTypeList(_levelUnit, _checkUnitTypeList) then
            if _levelUnit.state ~= _levelUnitStateEnum then
                return false
            end
        end
    end
    return true
end

-- 检测怪物状态
---@public
---@param _levelUnitStateEnum LevelUnitStateEnum 状态枚举
---@return boolean
function LevelUnitManager:CheckAllMonsterState(_levelUnitStateEnum)
    return self:CheckLevelUnitStateByType(LevelUnitTypeEnum.MONSTER, _levelUnitStateEnum)
end

-- 检测单位状态
---@public
---@param _unitType number 类型
---@param _levelUnitStateEnum LevelUnitStateEnum 状态枚举
---@return boolean
function LevelUnitManager:CheckLevelUnitStateByType(_unitType, _levelUnitStateEnum)
    local _levelUnits = self:GetLevelUnitByType(_unitType)
    if not _levelUnits then
        return false
    end
    for _, _levelUnit in pairs(_levelUnits) do
        if _levelUnit.state ~= _levelUnitStateEnum then
            return false
        end
    end
    return true
end

-- 清空
---@public
function LevelUnitManager:Clear()
end

return LevelUnitManager;
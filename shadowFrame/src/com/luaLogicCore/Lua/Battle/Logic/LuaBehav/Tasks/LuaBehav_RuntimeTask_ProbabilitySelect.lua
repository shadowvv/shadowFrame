---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/09/20 16:19
--- Describe: 概率选择节点
---

---@class LuaBehav_RuntimeTask_ProbabilitySelect : LuaBehav_RuntimeTask
LuaBehav_RuntimeTask_ProbabilitySelect = class(LuaBehav_RuntimeTask, "LuaBehav_RuntimeTask_ProbabilitySelect")
function LuaBehav_RuntimeTask_ProbabilitySelect:IsInterruptTask()
	return true
end

---@public
function LuaBehav_RuntimeTask_ProbabilitySelect:OnStart()
	self:__OnStart()
	
	self.__useTotalWeight = self.configTask.totalWeight
	if not self.__skipDic then
		self.__skipDic = {}
	else
		for _cnt, _ in pairs(self.__skipDic) do
			self.__skipDic[_cnt] = false
		end
	end
end

---@private
function LuaBehav_RuntimeTask_ProbabilitySelect:__OnChildStart()
	self:__resetTmpList()
	self:__RecountWeight()
	self:__RandChild()
end

---@public
function LuaBehav_RuntimeTask_ProbabilitySelect:OnChildExit(_cnt, _state)
	self:__OnChildExit(_cnt, _state)
	self:__SetSkip(_cnt, true)
end

---@private
function LuaBehav_RuntimeTask_ProbabilitySelect:__SetSkip(_cnt, _bool)
	if self.__skipDic[_cnt] == _bool then return end
	
	self.__skipDic[_cnt] = _bool
	if _bool then
		self.__useTotalWeight = self.__useTotalWeight - self.configTask.weightArr[_cnt]
		for _cntInWeight, _cntInParent in pairs(self.__weightPointerList) do
			if _cntInParent == _cnt then
				table.remove(self.__weightList, _cntInWeight)
				table.remove(self.__weightPointerList, _cntInWeight)
				break
			end
		end
	else
		self.__useTotalWeight = self.__useTotalWeight + self.configTask.weightArr[_cnt]
		self:__resetTmpList()
		self:__RecountWeight()
	end
end

-- 
function LuaBehav_RuntimeTask_ProbabilitySelect:SetHideState(_cnt, _bool)
	self:__SetHideState(_cnt, _bool)
	self:__SetSkip(_cnt, _bool)
end

-- 
function LuaBehav_RuntimeTask_ProbabilitySelect:__resetTmpList()
	if not self.__weightList then
		self.__weightList = {}
		self.__weightPointerList = {}
		return
	end
	
	for _cnt, _ in pairs(self.__weightList) do
		self.__weightList[_cnt] = nil
	end
	for _cnt, _ in pairs(self.__weightPointerList) do
		self.__weightPointerList[_cnt] = nil
	end
end

---@private
function LuaBehav_RuntimeTask_ProbabilitySelect:__RecountWeight()
	local _sum = 0
	for i = 1, #self.configTask.weightArr do
		if not self.__skipDic[i] then
			_sum = _sum + self.configTask.weightArr[i]
			--LogTools.LogByLevel(LogLevel.logErr, "i", i, "_sum", _sum)
			table.insert(self.__weightList, _sum)
			table.insert(self.__weightPointerList, i)
		end
	end
end

---@private
function LuaBehav_RuntimeTask_ProbabilitySelect:__RandChild()
	self.curExcuteChildCnt = #self.childIndexList + 1
	--LogTools.LogByLevel(LogLevel.log, "LuaBehav_RuntimeTask_ProbabilitySelect", "self.__useTotalWeight", self.__useTotalWeight)
	local _randomRet = self.battleRoom.randomUtil:RandomInt(1, self.__useTotalWeight)
	for i = #self.__weightList, 1, -1 do
		if _randomRet <= self.__weightList[i] then
			self.curExcuteChildCnt = self.__weightPointerList[i]
		else
			break
		end
	end
	
	--LogTools.LogByLevel(LogLevel.logErr, "_randomRet", _randomRet, "self.curExcuteChildCnt", self.curExcuteChildCnt)
end


function LuaBehav_RuntimeTask_ProbabilitySelect:CheckCanExecute()
	local _stateList = self.childStateList
	----LogTools.LogByLevel(LogLevel.log, "LuaBehav_RuntimeTask_ProbabilitySelect", "CheckCanExecute", "self.curExcuteChildCnt", self.curExcuteChildCnt, "#_stateList", #_stateList)
	
	if 0 == self.__useTotalWeight then return false end
	
	--if 0 == #self.__weightList then return false end
	
	local _checkState_1 = LuaBehav_Define_TaskState.Abort
	local _checkState_2 = LuaBehav_Define_TaskState.Success
	local _checkState_3 = LuaBehav_Define_TaskState.Running
	local _hideList = self.childHideList
	for i = 1, #_stateList do
		if not _hideList[i] then
			local _childState = _stateList[i]
			if _checkState_1 == _childState or _checkState_2 == _childState or _checkState_3 == _childState then
				return false
			end
		end
	end
	
	return true
end

---@public
function LuaBehav_RuntimeTask_ProbabilitySelect:GetDirectState(_preState)
	if self.curExcuteChildCnt == #self.configTask.weightArr then
		return LuaBehav_Define_TaskState.Failure
	end
	return nil
end

function LuaBehav_RuntimeTask_ProbabilitySelect:ReCountTaskState(_taskState)
	local _state = LuaBehav_Define_TaskState.Failure
	local _stateList = self.childStateList
	local _hideList = self.childHideList
	for i = 1, #_stateList do
		if not _hideList[i] then
			local _childState = _stateList[i]
			--if self.index == 23 then
			--	LogTools.LogByLevel(LogLevel.log, "LuaBehav_RuntimeBehavTree", "LuaBehav_RuntimeTask_ProbabilitySelect", "ReCountTaskState", "i", i, "state", LuaBehav_DebugTool.GetTaskStateDesc(_childState))
			--end
			if LuaBehav_Define_TaskState.Abort == _childState then
				_state = LuaBehav_Define_TaskState.Abort
				break
			end

			if LuaBehav_Define_TaskState.Running == _childState then
				_state = LuaBehav_Define_TaskState.Running
				break
			end

			if LuaBehav_Define_TaskState.Success == _childState then
				_state = LuaBehav_Define_TaskState.Success
				break
			end
		end
		
	end
	--if self.index == 23 then
	--	LogTools.LogByLevel(LogLevel.log, "LuaBehav_RuntimeBehavTree", "LuaBehav_RuntimeTask_ProbabilitySelect", "ReCountTaskState end", "final state", LogTools.GetEnumTableDesc(LuaBehav_Define_TaskState, _state))
	--end
	self:__SetTaskState(_state)
	return _state
end
return LuaBehav_RuntimeTask_ProbabilitySelect
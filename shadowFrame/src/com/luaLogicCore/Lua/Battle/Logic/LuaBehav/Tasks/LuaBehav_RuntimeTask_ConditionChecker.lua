---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/03/11 15:25
--- Describe: 检查节点（比较）
---

---@class LuaBehav_RuntimeTask_ConditionChecker : LuaBehav_RuntimeTask
LuaBehav_RuntimeTask_ConditionChecker = class(LuaBehav_RuntimeTask, "LuaBehav_RuntimeTask_ConditionChecker")

---@public
function LuaBehav_RuntimeTask_ConditionChecker:IsConditionalTask()
	return true
end

---@private
function LuaBehav_RuntimeTask_ConditionChecker:__GetCheckFunc()
	local _checkType = self.configTask.conditionType
	--LogTools.LogByLevel(LogLevel.logErr, "_checkType", LogTools.GetEnumTableDesc(LuaBehav_Define_ConditionCheckerType, _checkType), _checkType)
	if _checkType == LuaBehav_Define_ConditionCheckerType.MonsHasTarget then
		return LuaBehav_RuntimeTask_ConditionChecker.OnCaseMonsHasTarget
	elseif _checkType == LuaBehav_Define_ConditionCheckerType.MonsInBand then
		return LuaBehav_RuntimeTask_ConditionChecker.OnCaseMonsInBand
	elseif _checkType == LuaBehav_Define_ConditionCheckerType.MonsInCastingSkill then
		return LuaBehav_RuntimeTask_ConditionChecker.OnCaseMonsInCastingSkill
	elseif _checkType == LuaBehav_Define_ConditionCheckerType.CurTargetInAtkAngle then
		return LuaBehav_RuntimeTask_ConditionChecker.OnCaseCurTargetInAtkAngle
	elseif _checkType == LuaBehav_Define_ConditionCheckerType.CurTargetInAlertDis then
		return LuaBehav_RuntimeTask_ConditionChecker.OnCaseCurTargetInAlertDis
	elseif _checkType == LuaBehav_Define_ConditionCheckerType.CurTargetInAtkDis then
		return LuaBehav_RuntimeTask_ConditionChecker.OnCaseCurTargetInAtkDis
	elseif _checkType == LuaBehav_Define_ConditionCheckerType.CurTargetInEscapeDis then
		return LuaBehav_RuntimeTask_ConditionChecker.OnCaseCurTargetInEscapeDis
	elseif _checkType == LuaBehav_Define_ConditionCheckerType.CurTargetInSpecificState then
		return LuaBehav_RuntimeTask_ConditionChecker.OnCaseCurTargetInSpecificState
	elseif _checkType == LuaBehav_Define_ConditionCheckerType.SkillInCd then
		return LuaBehav_RuntimeTask_ConditionChecker.OnCaseSkillInCD
	elseif _checkType == LuaBehav_Define_ConditionCheckerType.UnitCurStageHpEnd then
		return LuaBehav_RuntimeTask_ConditionChecker.OnCaseUnitCurStageHpEnd
	elseif _checkType == LuaBehav_Define_ConditionCheckerType.UnitCurStageNum then
		return LuaBehav_RuntimeTask_ConditionChecker.OnCaseUnitCurStageNum
	elseif _checkType == LuaBehav_Define_ConditionCheckerType.CurTargetIsSpecificUnitType then
		return LuaBehav_RuntimeTask_ConditionChecker.OnCaseCurTargetIsSpecificUnitType
	elseif _checkType == LuaBehav_Define_ConditionCheckerType.WeaknessBroken then
		return LuaBehav_RuntimeTask_ConditionChecker.OnCaseWeaknessBroken
	elseif _checkType == LuaBehav_Define_ConditionCheckerType.WeaknessTimeOut then
		return LuaBehav_RuntimeTask_ConditionChecker.OnCaseWeaknessTimeout
	elseif _checkType == LuaBehav_Define_ConditionCheckerType.MonsWarriorState then
		return LuaBehav_RuntimeTask_ConditionChecker.OnCaseMonsWarriorState
	elseif _checkType == LuaBehav_Define_ConditionCheckerType.TargetInDotDir then
		return LuaBehav_RuntimeTask_ConditionChecker.OnCaseTargetInDotDir
	end
end

---@public
function LuaBehav_RuntimeTask_ConditionChecker:OnUpdate()
	local _retState = LuaBehav_Define_TaskState.Failure
	
	local _checkFunc = self.__checkFunc
	if not _checkFunc then
		_checkFunc = self:__GetCheckFunc()
		self.__checkFunc = _checkFunc
	end
	if not _checkFunc then
		self:__SetTaskState(_retState)
		--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "LuaBehav_RuntimeTask_ConditionChecker", "test monster behavTree OnUpdate", "self.__callRet", self.__callRet, "self.configTask.compareType", self.configTask.compareType, "_retState", LogTools.GetEnumTableDesc(LuaBehav_Define_TaskState, _retState))
		return _retState
	end

	_checkFunc(self)
	if self.__callRet == self.configTask.compareType then
		_retState = LuaBehav_Define_TaskState.Success
	end
	
	self:__SetTaskState(_retState)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "LuaBehav_RuntimeTask_ConditionChecker", "test monster behavTree OnUpdate", "self.__callRet", self.__callRet, "self.configTask.compareType", self.configTask.compareType, "_retState", LogTools.GetEnumTableDesc(LuaBehav_Define_TaskState, _retState))
	return _retState
end

-- 怪物是否有目标
function LuaBehav_RuntimeTask_ConditionChecker:OnCaseMonsHasTarget()
	self.__callRet = BEHAVIOR_CHECK.CheckMonsHasTarget(self.battleId, self.netId)
	----LogTools.LogByLevel(LogLevel.log, "LuaBehav_RuntimeTask_ConditionChecker", "test monster behavTree OnCaseMonsHasTarget", "self.__callRet", self.__callRet)
end

-- 怪物是否在限制中
function LuaBehav_RuntimeTask_ConditionChecker:OnCaseMonsInBand()
	self.__callRet = BEHAVIOR_CHECK.CheckMonsInBand(self.battleId, self.netId)
end

-- 怪物是否在施放技能中
function LuaBehav_RuntimeTask_ConditionChecker:OnCaseMonsInCastingSkill()
	self.__callRet = BEHAVIOR_CHECK.CheckMonsInCastingSkill(self.battleId ,self.netId)
	----LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "LuaBehav_RuntimeTask_ConditionChecker", "test monster behavTree OnCaseMonsInCastingSkill", "self.__callRet", self.__callRet, "self.configTask.compareType", self.configTask.compareType, "self.__callRet == self.configTask.compareType", self.__callRet == self.configTask.compareType)
end

-- 当前目标是否在攻击角度内
function LuaBehav_RuntimeTask_ConditionChecker:OnCaseCurTargetInAtkAngle()
	local _actionManager = self.__actionManager
	if not _actionManager then
		local _unit = self.battleRoom.battleUnitManager:GetUnit(self.netId)
		if _unit then
			_actionManager = _unit:GetActionManager()
			---@private
			---@type ActionStateManage
			self.__actionManager = _actionManager
			---@private
			---@type LuaBehav_Define_CheckAxisType
			self.__axisType = self.configTask.axisType or LuaBehav_Define_CheckAxisType.HorizontalAndVertical
		end
	end
	if not _actionManager then return nil end
	if self.__callRet and _actionManager:CheckHasForceAcc() then
		return
	end
	
	self.__callRet = BEHAVIOR_CHECK.CheckCurTargetInAtkAngle(self.battleId, self.netId, self.__axisType)
	--LogTools.LogByLevel(LogLevel.log, "CheckLuaBehav", "LuaBehav_RuntimeTask_ConditionChecker", "test monster behavTree OnCaseCurTargetInAtkAngle", "self.__callRet", self.__callRet, "self.netId", self.netId)
end

-- 当前目标是否在警戒距离内
function LuaBehav_RuntimeTask_ConditionChecker:OnCaseCurTargetInAlertDis()
	local _actionManager = self.__actionManager
	local _ratio = self.__ratio
	if not _actionManager then
		local _unit = self.battleRoom.battleUnitManager:GetUnit(self.netId)
		if _unit then
			_actionManager = _unit:GetActionManager()
			---@type ActionStateManage
			self.__actionManager = _actionManager
			_ratio = self.configTask.paramValue or 1
			if _ratio <= 0 then _ratio = 1 end
			self.__ratio = _ratio
		end
	end
	if not _actionManager or not _ratio then return end
	if self.__callRet and _actionManager:CheckHasForceAcc() then
		return
	end
	
	self.__callRet = BEHAVIOR_CHECK.CheckCurTargetInAlertDis(self.battleId, self.netId, _ratio)
	----LogTools.LogByLevel(LogLevel.log, "LuaBehav_RuntimeTask_ConditionChecker", "test monster behavTree OnCaseCurTargetInAlertDis", "self.__callRet", self.__callRet)
end

-- 当前目标是否在攻击距离内
function LuaBehav_RuntimeTask_ConditionChecker:OnCaseCurTargetInAtkDis()
	local _actionManager = self.__actionManager
	local _ratio = self.__ratio
	if not _actionManager then
		local _unit = self.battleRoom.battleUnitManager:GetUnit(self.netId)
		if _unit then
			_actionManager = _unit:GetActionManager()
			---@type ActionStateManage
			self.__actionManager = _actionManager
			_ratio = self.configTask.paramValue or 1
			if _ratio <= 0 then _ratio = 1 end
			self.__ratio = _ratio
		end
	end
	if not _actionManager or not _ratio then return end
	if self.__callRet and _actionManager:CheckHasForceAcc() then
		return
	end
	
	self.__callRet = BEHAVIOR_CHECK.CheckCurTargetInAtkDis(self.battleId, self.netId, _ratio)
end

-- 当前目标是否在逃离距离内
function LuaBehav_RuntimeTask_ConditionChecker:OnCaseCurTargetInEscapeDis()
	local _actionManager = self.__actionManager
	local _ratio = self.__ratio
	if not _actionManager then
		local _unit = self.battleRoom.battleUnitManager:GetUnit(self.netId)
		if _unit then
			_actionManager = _unit:GetActionManager()
			---@type ActionStateManage
			self.__actionManager = _actionManager
			_ratio = self.configTask.paramValue or 1
			if _ratio <= 0 then _ratio = 1 end
			self.__ratio = _ratio
		end
	end
	if not _actionManager or not _ratio then return end
	if self.__callRet and _actionManager:CheckHasForceAcc() then
		return
	end
	
	self.__callRet = BEHAVIOR_CHECK.CheckCurTargetInEscapeDis(self.battleId, self.netId, _ratio)
end

-- 当前目标是否处于指定状态下
function LuaBehav_RuntimeTask_ConditionChecker:OnCaseCurTargetInSpecificState()
	self.__callRet = BEHAVIOR_CHECK.CheckCurTargetInSpecificState(self.battleId, self.netId, self.configTask.paramValue)
end

-- 当前目标是否是指定UnitType类型
function LuaBehav_RuntimeTask_ConditionChecker:OnCaseCurTargetIsSpecificUnitType()
	self.__callRet = BEHAVIOR_CHECK.CheckCurTargetIsSpecificUnitType(self.battleId, self.netId, self.configTask.paramValue)
end

-- 技能是否在CD中
function LuaBehav_RuntimeTask_ConditionChecker:OnCaseSkillInCD()
	if not self.__checkSkillId then
		self.__checkSkillId = self:__GetCheckSkillId()
	end
	self.__callRet = BEHAVIOR_CHECK.CheckSkillInCD(self.battleId, self.netId, self.__checkSkillId)
	--LogTools.LogByLevel(LogLevel.logErr, "CheckLuaBehav", "LuaBehav_RuntimeTask_ConditionChecker", "OnCaseSkillInCD", "self.__checkSkillId", self.__checkSkillId, "self.netId", self.netId, "self.__callRet", self.__callRet)
end
---@private
function LuaBehav_RuntimeTask_ConditionChecker:__GetCheckSkillId()
	if self.configTask.idDescType == LuaBehav_Define_SkillIdDescType.SpecificId then
		return self.configTask.paramValue
	else
		local _unit = self.battleRoom.battleUnitManager:GetUnit(self.netId)
		---@type MonsterInstance
		local _instance =_unit:GetDataInstanceXls()
		--LogTools.LogByLevel(LogLevel.logErr, "LuaBehav_RuntimeTask_ConditionChecker", "__GetCheckSkillId", "self.configTask.paramValue", self.configTask.paramValue, "_instance.skills", dumpTableEx(_instance.skills))
		return _instance.skills[self.configTask.paramValue]
	end
end

-- 当前阶段血量为0
function LuaBehav_RuntimeTask_ConditionChecker:OnCaseUnitCurStageHpEnd()
	self.__callRet = BEHAVIOR_CHECK.CheckUnitCurStageHpEnd(self.battleId, self.netId)
end

-- 当前处于指定血量阶段
function LuaBehav_RuntimeTask_ConditionChecker:OnCaseUnitCurStageNum()
	self.__callRet = BEHAVIOR_CHECK.CheckUnitCurStageNum(self.battleId, self.netId, self.configTask.paramValue)
end

-- 检查弱点被击破
function LuaBehav_RuntimeTask_ConditionChecker:OnCaseWeaknessBroken()
	self.__callRet = BEHAVIOR_CHECK.CheckWeaknessBroken(self.battleId, self.netId, self.configTask.paramValue)
end

-- 检查弱点到时
function LuaBehav_RuntimeTask_ConditionChecker:OnCaseWeaknessTimeout()
	self.__callRet = BEHAVIOR_CHECK.CheckWeaknessTimeout(self.battleId, self.netId, self.configTask.paramValue)
end

-- 检查怪物当前勇士状态
function LuaBehav_RuntimeTask_ConditionChecker:OnCaseMonsWarriorState()
	self.__callRet = BEHAVIOR_CHECK.CheckMonsWarriorState(self.battleId, self.netId, self.configTask.paramValue)
end

-- 检查目标在指定圆锥方位角内
function LuaBehav_RuntimeTask_ConditionChecker:OnCaseTargetInDotDir()
	self.__callRet = BEHAVIOR_CHECK.CheckTargetInDotDir(self.battleId, self.netId, self.configTask.paramValue)
end
return LuaBehav_RuntimeTask_ConditionChecker
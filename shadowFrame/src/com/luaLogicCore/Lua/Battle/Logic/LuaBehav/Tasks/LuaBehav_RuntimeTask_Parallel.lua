---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2021/12/29 10:11
--- Describe: 并行节点
---

---@class LuaBehav_RuntimeTask_Parallel : LuaBehav_RuntimeTask
LuaBehav_RuntimeTask_Parallel = class(LuaBehav_RuntimeTask, "LuaBehav_RuntimeTask_Parallel")

function LuaBehav_RuntimeTask_Parallel:CheckCanParallel()
	return true
end

---@public
function LuaBehav_RuntimeTask_Parallel:OnStart()
	self:__OnStart()
	if not self.__skipDic then
		self.__skipDic = {}  --skip和基类的hide不同，skip只是不执行，但是仍然会在计算父节点状态时被考虑在内
	else
		for _cnt, _ in pairs(self.__skipDic) do
			self.__skipDic[_cnt] = false
		end
	end
end

---@private
function LuaBehav_RuntimeTask_Parallel:__OnChildStart()
	self.curExcuteChildCnt = self:__FindNeedExcuteChild(self.curExcuteChildCnt)
end

---@private
function LuaBehav_RuntimeTask_Parallel:__FindNeedExcuteChild(_curCnt)
	_curCnt = _curCnt + 1
	if self.childHideList[_curCnt] then return self:__FindNeedExcuteChild(_curCnt) end
	if _curCnt > #self.childStateList then return _curCnt end
	--if self.__skipDic[_curCnt] then return self:__FindNeedExcuteChild(_curCnt) end
	if not self.behavTree.__framePopStackBottomDic[self.childIndexList[_curCnt]] then
		self.childStateList[_curCnt] = LuaBehav_Define_TaskState.Running
	end
	return _curCnt
end

---@public
function LuaBehav_RuntimeTask_Parallel:SetChildSkip(_cnt)
	self.__skipDic[_cnt] = true
end

-- 这里running的优先级高于failure
function LuaBehav_RuntimeTask_Parallel:ReCountTaskState(_taskState)
	--LogTools.LogByLevel(LogLevel.log, "LuaBehav_RuntimeTask_Parallel", "ReCountTaskState", "self.configTask.checkMode", self.configTask.checkMode, LogTools.GetEnumTableDesc(LuaBehav_Define_ParallelCheckMode, self.configTask.checkMode))
	local _state = LuaBehav_Define_TaskState.Success
	if not self.configTask.checkMode or self.configTask.checkMode == LuaBehav_Define_ParallelCheckMode.NoFailure then
		_state = self:__CheckNoFailure()
	elseif self.configTask.checkMode == LuaBehav_Define_ParallelCheckMode.SuccessFirst then
		_state = self:__CheckSuccessFirst()
	elseif self.configTask.checkMode == LuaBehav_Define_ParallelCheckMode.FailureFirst then
		_state = self:__CheckFailureFirst()
	else
		_state = self:__CheckNoFailure()
	end
	----LogTools.LogByLevel(LogLevel.log, "LuaBehav_RuntimeTask_Parallel", "ReCountTaskState", "final state", LuaBehav_DebugTool.GetTaskStateDesc(_state))
	self:__SetTaskState(_state)
	return _state
end

---无失败模式
---任意running返回running
---否则返回成功
---老的模式
---@private
function LuaBehav_RuntimeTask_Parallel:__CheckNoFailure()
	local _stateList = self.childStateList
	local _hideList = self.childHideList
	for i = 1, #_stateList do
		if not _hideList[i] then
			local _childState = _stateList[i]
			----LogTools.LogByLevel(LogLevel.log, "LuaBehav_RuntimeTask_Parallel", "ReCountTaskState", "i", i, "state", LuaBehav_DebugTool.GetTaskStateDesc(_childState))
			if LuaBehav_Define_TaskState.Running == _childState then
				return LuaBehav_Define_TaskState.Running
			end
		end
	end
	return LuaBehav_Define_TaskState.Success
end

---任意成功返回成功
---其次任意running返回running
---否则返回失败
---@private
function LuaBehav_RuntimeTask_Parallel:__CheckSuccessFirst()
	local _stateList = self.childStateList
	local _hideList = self.childHideList
	local _getRunning = false
	for i = 1, #_stateList do
		if not _hideList[i] then
			local _childState = _stateList[i]
			--if self.index == 6 then
			--	LogTools.LogByLevel(LogLevel.log, "checktime", "LuaBehav_RuntimeTask_Parallel", "ReCountTaskState", "i", i, "state", LogTools.GetEnumTableDesc(LuaBehav_Define_TaskState, _childState), "index", self.index)
			--end
			if LuaBehav_Define_TaskState.Success == _childState then
				return LuaBehav_Define_TaskState.Success
			elseif LuaBehav_Define_TaskState.Running == _childState then
				_getRunning = true
			end
		end
	end
	if _getRunning then return LuaBehav_Define_TaskState.Running end
	return LuaBehav_Define_TaskState.Failure
end

---任意失败返回失败
---其次任意running返回running
---否则返回成功
---@private
function LuaBehav_RuntimeTask_Parallel:__CheckFailureFirst()
	local _stateList = self.childStateList
	local _hideList = self.childHideList
	local _getRunning = false
	for i = 1, #_stateList do
		if not _hideList[i] then
			local _childState = _stateList[i]
			----LogTools.LogByLevel(LogLevel.log, "LuaBehav_RuntimeTask_Parallel", "ReCountTaskState", "i", i, "state", LuaBehav_DebugTool.GetTaskStateDesc(_childState))
			if LuaBehav_Define_TaskState.Failure == _childState then
				return LuaBehav_Define_TaskState.Failure
			elseif LuaBehav_Define_TaskState.ForcePop == _childState then
				return LuaBehav_Define_TaskState.Failure
			elseif LuaBehav_Define_TaskState.Running == _childState then
				_getRunning = true
			end
		end
	end
	if _getRunning then return LuaBehav_Define_TaskState.Running end
	return LuaBehav_Define_TaskState.Success
end

return LuaBehav_RuntimeTask_Parallel
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2022/03/11 15:32
--- Describe: 通用比较节点
---

---@class LuaBehav_RuntimeTask_ConditionComparer : LuaBehav_RuntimeTask
LuaBehav_RuntimeTask_ConditionComparer = class(LuaBehav_RuntimeTask, "LuaBehav_RuntimeTask_ConditionComparer")

---@public
function LuaBehav_RuntimeTask_ConditionComparer:IsConditionalTask()
	return true
end

---@public
function LuaBehav_RuntimeTask_ConditionComparer:OnUpdate()
	local _retState = LuaBehav_Define_TaskState.Failure

	local _compareFunc = self.__compareFunc
	if not _compareFunc then
		_compareFunc = self:__GetCompareFunc()
		self.__compareFunc = _compareFunc
	end
	if not _compareFunc then
		self:__SetTaskState(_retState)
		return _retState
	end
	
	if not _compareFunc(self) then
		self:__SetTaskState(_retState)
		return _retState
	end

	if not self.__callRet or not self.__compareValue then
		self:__SetTaskState(_retState)
		return _retState
	end
	
	local _compareType = self.configTask.compareType
	if _compareType == LuaBehav_Define_CompareType.Equal then
		if self.__callRet == self.__compareValue then
			_retState = LuaBehav_Define_TaskState.Success
		end
	elseif _compareType == LuaBehav_Define_CompareType.UnEqual then
		if self.__callRet ~= self.__compareValue then
			_retState = LuaBehav_Define_TaskState.Success
		end
	elseif _compareType == LuaBehav_Define_CompareType.Larger then
		if self.__callRet == true or self.__callRet == false or self.__compareValue == true or self.__compareValue == false then
			self:__SetTaskState(_retState)
			return _retState
		end
		if self.__callRet > self.__compareValue then
			_retState = LuaBehav_Define_TaskState.Success
		end
	elseif _compareType == LuaBehav_Define_CompareType.Smaller then
		if self.__callRet == true or self.__callRet == false or self.__compareValue == true or self.__compareValue == false then
			self:__SetTaskState(_retState)
			return _retState
		end
		if self.__callRet < self.__compareValue then
			_retState = LuaBehav_Define_TaskState.Success
		end
	elseif _compareType == LuaBehav_Define_CompareType.LargerEqual then
		if self.__callRet == true or self.__callRet == false or self.__compareValue == true or self.__compareValue == false then
			self:__SetTaskState(_retState)
			return _retState
		end
		if self.__callRet >= self.__compareValue then
			_retState = LuaBehav_Define_TaskState.Success
		end
	elseif _compareType == LuaBehav_Define_CompareType.SmallerEqual then
		if self.__callRet == true or self.__callRet == false or self.__compareValue == true or self.__compareValue == false then
			self:__SetTaskState(_retState)
			return _retState
		end
		if self.__callRet <= self.__compareValue then
			_retState = LuaBehav_Define_TaskState.Success
		end
	end
	
	self:__SetTaskState(_retState)
	return _retState
end

---@private
function LuaBehav_RuntimeTask_ConditionComparer:__GetCompareFunc()
	local _conditionType = self.configTask.conditionType
	if _conditionType == LuaBehav_Define_ConditionCompareType.LevelCurStage then
		return LuaBehav_RuntimeTask_ConditionComparer.__OnLevelCurStage
	elseif _conditionType == LuaBehav_Define_ConditionCompareType.DisFromSubordinate then
		return LuaBehav_RuntimeTask_ConditionComparer.__OnDisFromSubordinate
	elseif _conditionType == LuaBehav_Define_ConditionCompareType.SummondNum then
		return LuaBehav_RuntimeTask_ConditionComparer.__OnCheckSummondNum
	elseif _conditionType == LuaBehav_Define_ConditionCompareType.AlivePlayerNum then
		return LuaBehav_RuntimeTask_ConditionComparer.__OnCheckAlivePlayerNum
	elseif _conditionType == LuaBehav_Define_ConditionCompareType.DisFromTarget then
		return LuaBehav_RuntimeTask_ConditionComparer.__OnDisFromTarget
	elseif _conditionType == LuaBehav_Define_ConditionCompareType.AngleVInTarget then
		return LuaBehav_RuntimeTask_ConditionComparer.__OnAngleVInTarget
	end
end
------------------------------------------------------------------------------------------------------------------------
---检查当前关卡阶段
---@private
function LuaBehav_RuntimeTask_ConditionComparer:__OnLevelCurStage()
	self.__compareValue = self.configTask.compareValue
	self.__callRet = BEHAVIOR_CHECK.GetCurLevelStage(self.battleId)
	return true
end

---检查与召唤者之间的距离
---@private
function LuaBehav_RuntimeTask_ConditionComparer:__OnDisFromSubordinate()
	local _unit = self.battleRoom.battleUnitManager:GetUnit(self.netId)
	if not _unit then return false end
	---@type BattleUnitCom_Subordination
	local _subordinationCom = _unit:GetComponent(BattleUnitComponentType.Subordination)
	if not _subordinationCom then return false end
	local _subordinatedUnit = _subordinationCom:GetSubordinatedUnit()
	if not _subordinatedUnit then return end

	self.__compareValue = self.configTask.compareValue * self.configTask.compareValue
	self.__callRet = Vector3.SqrMagnitude(_subordinatedUnit:GetActionManager():GetPosition() - _unit:GetActionManager():GetPosition())
	return true
end

---检查自身存活的召唤物数量
---@private
function LuaBehav_RuntimeTask_ConditionComparer:__OnCheckSummondNum()
	local _unit = self.battleRoom.battleUnitManager:GetUnit(self.netId)
	if not _unit then return false end
	---@type BattleUnitCom_Subordination
	local _subordinationCom = _unit:GetComponent(BattleUnitComponentType.Subordination)
	if not _subordinationCom then return false end

	self.__compareValue = self.configTask.compareValue
	self.__callRet = _subordinationCom:GetManagedTypeObjNum()
	return true
end

---检查当前存活的玩家数量
---@private
function LuaBehav_RuntimeTask_ConditionComparer:__OnCheckAlivePlayerNum()
	local _unitList = self.battleRoom.battleUnitManager:GetUnitListByUnitType(BattleUnitType.Player)
	if not _unitList then return false end

	self.__compareValue = self.configTask.compareValue
	self.__callRet = #_unitList
	return true
end

---检查与当前目标之间的距离
---@private
function LuaBehav_RuntimeTask_ConditionComparer:__OnDisFromTarget()
	
	local _unit = self.__unit
	local _behavCom = self.__behavCom
	local _actionManager = self.__actionManager
	if not _actionManager then
		_unit = self.battleRoom.battleUnitManager:GetUnit(self.netId)
		if not _unit then return false end
		_actionManager = _unit:GetActionManager()
		_behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
		
		---@type ActionStateManage
		self.__actionManager = _actionManager
		---@type BattleUnitBase
		self.__unit = _unit
		---@type BattleUnitCom_Behav
		self.__behavCom = _behavCom
		---@type number
		self.__compareValue = self.configTask.compareValue * self.configTask.compareValue
	end
	if not _actionManager then return false end
	if self.__callRet and _actionManager:CheckHasForceAcc() then
		return true
	end

	local _targetNetId = _behavCom:GetTarget()
	if not _targetNetId then return false end
	
	--self.__compareValue = self.configTask.compareValue * self.configTask.compareValue
	self.__callRet = _unit:GetBattleRoom().transUtil:GetDisBetweenUnits(self.netId, _targetNetId, BattleUnitDisRecordType.LogicDis)
	return true
end

---检查在目标一定纵向角度内
---@private
function LuaBehav_RuntimeTask_ConditionComparer:__OnAngleVInTarget()
	
	local _unit = self.__unit
	local _behavCom = self.__behavCom
	local _actionManager = self.__actionManager
	if not _actionManager then
		_unit = self.battleRoom.battleUnitManager:GetUnit(self.netId)
		if not _unit then return false end
		_actionManager = _unit:GetActionManager()
		_behavCom = _unit:GetComponent(BattleUnitComponentType.Behav)
		
		---@type ActionStateManage
		self.__actionManager = _actionManager
		---@type BattleUnitBase
		self.__unit = _unit
		---@type BattleUnitCom_Behav
		self.__behavCom = _behavCom
		---@type number
		self.__compareValue = self.configTask.compareValue
	end
	if not _actionManager then return false end
	if self.__callRet and _actionManager:CheckHasForceAcc() then
		return true
	end
	
	local _targetNetId = _behavCom:GetTarget()
	if not _targetNetId then return false end
	
	--self.__compareValue = self.configTask.compareValue
	local _angles = _unit:GetBattleRoom().transUtil:GetAngleBetweenUnits(_targetNetId, self.netId, true)
	if not _angles then
		self.__callRet = nil
		return false
	end
	self.__callRet = _angles[2]
	return true
end

return LuaBehav_RuntimeTask_ConditionComparer
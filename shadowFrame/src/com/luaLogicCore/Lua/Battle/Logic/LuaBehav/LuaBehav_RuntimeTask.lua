---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2021/12/21 14:31
--- Describe: 行为树任务基类
--- 生命周期：
---    行为树第一次被激活时调用OnAwake，整个生命周期只调用一次
---    进入到该节点行为时执行OnStart，每次新进入都会执行
---    行为树被暂停时，会执行当前running节点的OnPause
---    行为树从暂停恢复时，会执行当前running节点的OnResume
---    行为树打断当前节点的running状态时，会执行被打断节点的OnAbort
---    节点状态变为Success，行为树从当前节点正常退出时，会执行当前节点的OnExit，此时不会执行OnAbort


---@class LuaBehav_RuntimeTask : table
---@field configTask LuaBehav_ConfigTask
 LuaBehav_RuntimeTask = class(nil, "LuaBehav_RuntimeTask")
function LuaBehav_RuntimeTask:ctor(_data) end

------------------------------------------------------------------------------------------------------------------------
---@param _runtimeBehavTree LuaBehav_RuntimeBehavTree
---@param _configTask LuaBehav_ConfigTask
function LuaBehav_RuntimeTask:__Init(_runtimeBehavTree, _taskIndex, _parentTaskIndex, _configTask, _cntInParent)
	self.behavTree = _runtimeBehavTree
	self.netId = _runtimeBehavTree.netId
	self.index = _taskIndex
	self.parentTaskIndex = _parentTaskIndex
	_runtimeBehavTree.parentIndexDic[_taskIndex] = _parentTaskIndex
	self.configTask = _configTask
	self.type = _configTask.nodeType
	self.cntInParent = _cntInParent

	self.__callRet = true
	self.__isParentTask = nil
	self.__interruptTag = _configTask.interruptTag --是否设置了打断
	self.childIndexList = {}
	self.childStateList = {}
	self.curExcuteChildCnt = 0
	--LuaBehav_DebugTool.PrintLog("_runtimeBehavTree",_runtimeBehavTree,"_taskIndex",_taskIndex,"_parentTaskIndex",_parentTaskIndex,"nodeType",self.type)
end

-- 
function LuaBehav_RuntimeTask:__OnAwake()
	self:__SetTaskState(LuaBehav_Define_TaskState.Inactive)
end

function LuaBehav_RuntimeTask:__OnStart()
	self:__SetTaskState(LuaBehav_Define_TaskState.Running)
end

function LuaBehav_RuntimeTask:__OnPause()
	
end

function LuaBehav_RuntimeTask:__OnResume()
	
end

function LuaBehav_RuntimeTask:__OnAbort()
	
end

function LuaBehav_RuntimeTask:__OnExit()
	local _defaultState = LuaBehav_Define_TaskState.Inactive
	self:__ResetAllChildState(_defaultState)
	self:__ResetCurExecuteCnt()
	self:__SetTaskState(_defaultState)
end

function LuaBehav_RuntimeTask:__OnChildStart()
	local _curCnt = self.curExcuteChildCnt + 1
	self.curExcuteChildCnt = _curCnt
	local _stateList = self.childStateList
	if _curCnt > #_stateList then return end
	_stateList[_curCnt] = LuaBehav_Define_TaskState.Running
end

function LuaBehav_RuntimeTask:__OnChildExecuted(_cnt, _taskState)
	local _stateList = self.childStateList
	if _cnt > #_stateList then return end
	_stateList[_cnt] = _taskState
end

function LuaBehav_RuntimeTask:__OnChildExit(_cnt, _taskState)
	local _stateList = self.childStateList
	if _cnt > #_stateList then return end
	_stateList[_cnt] = _taskState
end

function LuaBehav_RuntimeTask:__GetCurExcuteChildIndex()
	return self.childIndexList[self.curExcuteChildCnt]
end

function LuaBehav_RuntimeTask:__ResetAllChildState(_taskState)
	local _stateList = self.childStateList
	for i = 1, #_stateList do
		_stateList[i] = _taskState
	end
end

function LuaBehav_RuntimeTask:__ResetCurExecuteCnt()
	self.curExcuteChildCnt = 0	
end

function LuaBehav_RuntimeTask:__CheckCanParallel()
	return false
end

function LuaBehav_RuntimeTask:__IsInterruptTask()
	return false
end

function LuaBehav_RuntimeTask:__CheckInterruptTag()
	return self.__interruptTag
end

function LuaBehav_RuntimeTask:__SetTaskState(_taskState)
	self.__taskState = _taskState
end

function LuaBehav_RuntimeTask:__GetTaskState()
	return self.__taskState
end

function LuaBehav_RuntimeTask:__ReCountTaskState(_taskState)
	self:__SetTaskState(_taskState)
	return _taskState 
end

-- 检查状态
function LuaBehav_RuntimeTask:__CheckTaskState(_taskState)
	return self.__taskState == _taskState
end

function LuaBehav_RuntimeTask:__CheckCanExecute()
	return self.__taskState ~= LuaBehav_Define_TaskState.Abort	
end

-- 检查是否为父任务
function LuaBehav_RuntimeTask:__IsParentTask()
	local _ret = self.__isParentTask
	if nil == _ret then
		_ret = (#self.childIndexList > 0)
		self.__isParentTask = _ret
	end
	return _ret
end

-- 是否为条件类任务
function LuaBehav_RuntimeTask:__IsConditionalTask()
	return false
end

function LuaBehav_RuntimeTask:__OnUpdate(_deltaTime)
	local _state = LuaBehav_Define_TaskState.Success
	if not self.__callRet then
		_state = LuaBehav_Define_TaskState.Failure
	end
	self:__SetTaskState(_state)
	return _state
end

function LuaBehav_RuntimeTask:__Clear()
	self.behavTree = nil
	self.index = nil
	self.parentTaskIndex = nil
	self.configTask = nil
	self.type = nil
	self.cntInParent = nil
	self.__callRet = nil
	self.__isParentTask = nil
	self.__interruptTag = nil
	self.__taskState = nil
	self.childIndexList = nil
	self.childStateList = nil
	self.curExcuteChildCnt = nil
end

------------------------------------------------------------------------------------------------------------------------
---@param _runtimeBehavTree LuaBehav_RuntimeBehavTree
---@param _configTask LuaBehav_ConfigTask
function LuaBehav_RuntimeTask:Init(_runtimeBehavTree, _taskIndex, _parentTaskIndex, _configTask, _cntInParent)
	self:__Init(_runtimeBehavTree, _taskIndex, _parentTaskIndex, _configTask, _cntInParent)
	
end

-- 行为树第一次被激活时调用
function LuaBehav_RuntimeTask:OnAwake()
	self:__OnAwake()
end

-- 进入节点时调用
function LuaBehav_RuntimeTask:OnStart()
	self:__OnStart()
end

-- 节点暂停时调用
function LuaBehav_RuntimeTask:OnPause()
	self:__OnPause()
end

-- 节点从暂停恢复时调用
function LuaBehav_RuntimeTask:OnResume()
	self:__OnResume()
end

-- 节点被打断时调用
function LuaBehav_RuntimeTask:OnAbort()
	self:__OnAbort()
end

-- 退出节点时调用
function LuaBehav_RuntimeTask:OnExit()
	self:__OnExit()
end

-- 子节点开始时调用
function LuaBehav_RuntimeTask:OnChildStart()
	self:__OnChildStart()
end

-- 子节点运行时调用
function LuaBehav_RuntimeTask:OnChildExecuted(_cnt, _taskState)
	self:__OnChildExecuted(_cnt, _taskState)
end

-- 子节点退出时调用
function LuaBehav_RuntimeTask:OnChildExit(_cnt, _taskState)
	self:__OnChildExit(_cnt, _taskState)
end

-- 获取当前正在进行的子任务的index
function LuaBehav_RuntimeTask:GetCurExcuteChildIndex()
	return self:__GetCurExcuteChildIndex()
end

-- 节点的tick
function LuaBehav_RuntimeTask:OnUpdate(_deltaTime)
	return self:__OnUpdate(_deltaTime)
end

-- 获取当前状态
function LuaBehav_RuntimeTask:GetTaskState()
	return self:__GetTaskState()
end

-- 重新评估任务的执行状态
-- 部分父任务的状态最终由子任务的状态决定
-- 这里由不同类型的父任务继承后各自根据实际的逻辑自己实现
function LuaBehav_RuntimeTask:ReCountTaskState(_taskState)
	return self:__ReCountTaskState(_taskState)
end

-- 设置当前状态
function LuaBehav_RuntimeTask:SetTaskState(_taskState)
	self:__SetTaskState(_taskState)
end

-- 检查状态
function LuaBehav_RuntimeTask:CheckTaskState(_taskState)
	return self:__CheckTaskState(_taskState)
end

-- 重置所有子任务状态
function LuaBehav_RuntimeTask:ResetAllChildState(_taskState)
	self:__ResetAllChildState(_taskState)
end

-- 重置当前子任务执行进度
function LuaBehav_RuntimeTask:ResetCurExecuteCnt()
	self:__ResetCurExecuteCnt()
end

-- 检查是否为父任务
function LuaBehav_RuntimeTask:IsParentTask()
	return self:__IsParentTask()
end

-- 是否为条件类任务
function LuaBehav_RuntimeTask:IsConditionalTask()
	return self:__IsConditionalTask()
end

-- 是否为打断类任务
function LuaBehav_RuntimeTask:IsInterruptTask()
	return self:__IsInterruptTask()
end

-- 是否设置了打断
function LuaBehav_RuntimeTask:CheckInterruptTag()
	return self:__CheckInterruptTag()
end

-- 检查是否可以并行
function LuaBehav_RuntimeTask:CheckCanParallel()
	return self:__CheckCanParallel()
end

-- 检查当前是否满足继续运行的条件
function LuaBehav_RuntimeTask:CheckCanExecute()
	return self:__CheckCanExecute()
end

-- 清理
function LuaBehav_RuntimeTask:Clear()
	self:__Clear()
end

return LuaBehav_RuntimeTask
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2021/12/21 11:52
--- Describe: lua行为树运行时管理
---

require "Battle/Logic/LuaBehav/LuaBehav_ConfigDataDefine"
require "Battle/Logic/LuaBehav/LuaBehav_DebugTool"

require "Battle/Logic/LuaBehav/LuaBehav_ConfigDataRequirer"
require "Battle/Logic/LuaBehav/LuaBehav_Define"
require "Battle/Logic/LuaBehav/LuaBehav_RuntimeTask"
require "Battle/Logic/LuaBehav/LuaBehav_RuntimeBehavTree"
require "Battle/Logic/LuaBehav/LuaBehav_Loader"
require "Battle/Logic/LuaBehav/LuaBehav_Interfaces"

------------------------------------------------------------------------------------------------------------------------
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_Root"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_PrintLog"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_Wait"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_SetVariable"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_CheckVariable"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_RandomInt"
------------------------------------------------------------------------------------------------------------------------
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_Sequence"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_Parallel"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_Select"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_Condition"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_Repeat"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_Event"
------------------------------------------------------------------------------------------------------------------------
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelDropMons"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelTimerOperation"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelDropPlayerHero"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelDropPerformanceHero"

------------------------------------------------------------------------------------------------------------------------
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsBorn"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsDeath"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsPatrol"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsSelectTarget"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsChaseCurTarget"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsEscapeCurTarget"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsFaceCurTarget"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsAddBuff"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsMoveTowards"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsRotateTowards"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsDisCondition"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsPropCondition"


---@class LuaBehav_RuntimeManager : table
LuaBehav_RuntimeManager = class(nil, "LuaBehav_RuntimeManager")
function LuaBehav_RuntimeManager:ctor(_data) end

-- 初始化，必须调用
function LuaBehav_RuntimeManager:Init(_isDebug)
	LuaBehav_DebugTool.Init(_isDebug or false)
	
	self.__indexCnt = 0
	---@type LuaBehav_RuntimeBehavTree[]
	self.allBehavTreeDic = {}
	---@type LuaBehav_RuntimeBehavTree[]
	self.aliveTreeList = {}
	---@type LuaBehav_RuntimeBehavTree[]
	self.aliveTreeDic = {}
	---@type LuaBehav_RuntimeBehavTree[]
	self.pausedTreeDic = {}
	
	self.eventDic = {}
	
	---@type LuaBehav_Loader
	self.loader = LuaBehav_Loader.New()
	self.loader:Init(self)
	
end

-- 添加行为树
-- 这个考虑将来可以进行预加载，只加载行为树数据，但是暂时不激活
---@param _configData table 编辑器导出的行为树配置
---@param _netId number 对于关卡，当前可以不传(也可以传关卡id，现在还没用到)，对于怪物（或其他战斗单位），传服务器生成的唯一netId
function LuaBehav_RuntimeManager:AddBehavTree(_configData, _netId)
	local _index = self.__indexCnt
	_index = _index + 1
	
	local _behavTree = self.loader:Load(_configData, _index, _netId)
	if not _behavTree then return -1 end
	
	self.__indexCnt = _index
	self.allBehavTreeDic[_index] = _behavTree
	self.pausedTreeDic[_index] = _behavTree
	return _index
end

-- 激活行为树
-- 怪物真正投放出来或者关卡真正运行起来之后激活对应的行为树
function LuaBehav_RuntimeManager:AwakeBehavTree(_index)
	local _behavTree = self.allBehavTreeDic[_index]
	if not _behavTree then return end
	
	_behavTree:OnAwake()
	self.pausedTreeDic[_index] = nil
	self.aliveTreeDic[_index] = _behavTree
	table.insert(self.aliveTreeList, _behavTree)
end

-- 暂停行为树
function LuaBehav_RuntimeManager:PauseBehavTree(_index)
	local _aliveDic = self.aliveTreeDic
	if not _aliveDic[_index] then return end
	_aliveDic[_index] = nil
	
	local _pausedDic = self.pausedTreeDic
	local _aliveList = self.aliveTreeList
	local _max = #_aliveList
	for i = 1, _max do
		local _behavTree = _aliveList[i]
		if _behavTree:CheckIndex(_index) then
			_behavTree:OnPause()
			table.remove(_aliveList, i)
			_pausedDic[_index] = _behavTree
			break
		end
	end
end

-- 恢复行为树
function LuaBehav_RuntimeManager:ResumeBehavTree(_index)
	local _pausedDic = self.pausedTreeDic
	local _behavTree = _pausedDic[_index]
	if not _behavTree then return end

	_behavTree:OnResume()
	_pausedDic[_index] = nil
	self.aliveTreeDic[_index] = _behavTree
	table.insert(self.aliveTreeList, _behavTree)
end

-- 暂停所有行为树
function LuaBehav_RuntimeManager:PauseAll()
	local _pausedDic = self.pausedTreeDic
	for _index, _behavTree in pairs(self.aliveTreeDic) do
		if _index and _behavTree then
			_behavTree:OnPause()
			_pausedDic[_index] = _behavTree
		end
	end
	self.aliveTreeDic = {}
	self.aliveTreeList = {}
end

-- 恢复所有行为树
function LuaBehav_RuntimeManager:ResumeAll()
	local _aliveDic = self.aliveTreeDic
	local _aliveList = self.aliveTreeList
	for _index, _behavTree in pairs(self.pausedTreeDic) do
		if _index and _behavTree then
			_behavTree:OnResume()
			_aliveDic[_index] = _behavTree
			table.insert(_aliveList, _behavTree)
		end
	end
	self.pausedTreeDic = {}
end

-- 逻辑tick
function LuaBehav_RuntimeManager:OnUpdate(_deltaTime)
	local _aliveList = self.aliveTreeList
	local _max = #_aliveList
	LuaBehav_DebugTool.PrintRuntime("------------->> LuaBehav_RuntimeManager","OnUpdate","now alive tree count: ",_max)
	for i = 1, _max do
		_aliveList[i]:OnUpdate(_deltaTime)
	end
end

---@param _eventType LuaBehav_Define_EventTaskType
---@param _eventTask LuaBehav_RuntimeTask_Event
function LuaBehav_RuntimeManager:AddEventDic(_eventType, _eventTask)
	if not _eventType then return end
	if not _eventTask then return end
	local _tab = self.eventDic[_eventType]
	if not _tab then
		_tab = {}
		self.eventDic[_eventType] = _tab
	end
	_tab[_eventTask.index] = _eventTask
end

---@param _eventType LuaBehav_Define_EventTaskType
---@param _eventTask LuaBehav_RuntimeTask_Event 
function LuaBehav_RuntimeManager:RemoveEventDic(_eventType, _eventTask)
	if not _eventType then return end
	if not _eventTask then return end
	local _tab = self.eventDic[_eventType]
	if not _tab then return end
	_tab[_eventTask.index] = nil
end

---@param _eventType LuaBehav_Define_EventTaskType
---@param _paramTab table
function LuaBehav_RuntimeManager:OnBehavEvent(_eventType, _paramTab)
	local _tab = self.eventDic[_eventType]
	if not _tab then return end
	
	for _,_eventTask in pairs(_tab) do
		if _eventTask then
			_eventTask:OnEvent(_paramTab)
		end
	end
end

-- 清理，必须调用
function LuaBehav_RuntimeManager:OnDestroy()
	for _,_runtimeBehavTree in pairs(self.allBehavTreeDic) do
		_runtimeBehavTree:OnDestroy()
	end
	self.aliveTreeList = {}
	self.aliveTreeDic = {}
	self.pausedTreeDic = {}
	self.allBehavTreeDic = {}
	self.eventDic = {}
end

return LuaBehav_RuntimeManager
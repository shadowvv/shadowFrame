---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangxuechen
--- DateTime: 2021/12/21 11:52
--- Describe: lua行为树运行时管理
---

require "Battle/Logic/LuaBehav/LuaBehav_ConfigDataDefine"
require "Battle/Logic/LuaBehav/LuaBehav_ConfigDataRequirer"
require "Battle/Logic/LuaBehav/LuaBehav_Define"
require "Battle/Logic/LuaBehav/LuaBehav_RuntimeVariableBase"
require "Battle/Logic/LuaBehav/LuaBehav_RuntimeTask"
require "Battle/Logic/LuaBehav/LuaBehav_RuntimeBehavTree"
require "Battle/Logic/LuaBehav/LuaBehav_Loader"
require "Battle/OutInterface/BehaviorAction"
require "Battle/OutInterface/BehaviorCheck"

------------------------------------------------------------------------------------------------------------------------
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_Root"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_PrintLog"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_Wait"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_SetVariable"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_CheckVariable"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_RandomInt"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_StopTree"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_IntVariableCalc"
------------------------------------------------------------------------------------------------------------------------
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_Sequence"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_Parallel"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_Select"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_ProbabilitySelect"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_ConditionComparer"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_ConditionChecker"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_Repeat"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_Event"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_ConditionGroup"
------------------------------------------------------------------------------------------------------------------------
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelDropMons"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelTimerOperation"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelDropPlayerHero"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelDropPerformanceHero"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelDropUnit"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelForceEnd"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelPlayPlot"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelSetUnitProp"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelOperateAi"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelKillUnit"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelCheckUnitDead"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelOpenWarningUi"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelTriggerChecker"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelRemoveTrigger"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelOpenBattleCommunication"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelCheckUnitState"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelCheckUnitProp"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelTrigGuideUIOperate"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelTrigControllerOperate"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelTrigUnitBuff"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelCheckPlayerController"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelCheckPlayerSkillState"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelCheckPlotState"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelChangeSceneObjState"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelRemoveSceneObj"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelChangeBGM"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelCheckEleReact"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelCheckEleAttach"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelCheckGuide"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelRemoveTargetPoint"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelSetWaveValue"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelKillUnitInTrigger"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelCheckSingleUnitDead"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelCheckSceneObjState"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelTrigNormalUIOperate"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelTagOperate"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelChangeTimeCount"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelCheckMonsBuff"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelBreakMonsSkill"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_LevelCheckEleBreak"
------------------------------------------------------------------------------------------------------------------------
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsDeath"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsPatrol"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsSelectTarget"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsChaseCurTarget"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsEscapeCurTarget"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsFaceCurTarget"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsAddBuff"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsMoveTowards"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsRotateTowards"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsPropCondition"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsCastSkill"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsSetProperty"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsChangeStage"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsChangeStateParamId"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_ChaseSubordinate"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_SceneObjChangeSelfState"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_BoundaryListenerChecker"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsMoveTowards_2"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsRotateAxisLock"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_UnitCheckBuff"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsMoveNavPoints"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_UnitChangeBlockState"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_SceneObjCheckSelfState"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_SceneObjChangeCoinPoints"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_UnitAddBuffInBoundary"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsBreakSkill"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_SceneObjCheckHit"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsClearLastHurtFromTag"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsChangeWarriorState"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsGetDisFromTarget"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_UnitCallFallindDown"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_UnitCheckShield"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_UnitCloseShield"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_MonsFixHeight"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_UnitCheckSummoned"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_UnitCallSummoned"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_UnitStartChangeStage"
------------------------------------------------------------------------------------------------------------------------
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_BattleGuideTrigger"
------------------------------------------------------------------------------------------------------------------------
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_Inverter"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_Filter"
require "Battle/Logic/LuaBehav/Tasks/LuaBehav_RuntimeTask_TimeOut"

---@class LuaBehav_RuntimeManager : table
LuaBehav_RuntimeManager = class(nil, "LuaBehav_RuntimeManager")

-- 初始化，必须调用
---@public
function LuaBehav_RuntimeManager:Init(_isDebug, _battleId)
	self.battleId = _battleId
	---行为树唯一ID计数
	---@private
	---@type number
	self.__indexCnt = 0
	---关卡行为树轮询指针
	---@private
	---@type number
	self.__levelPointer = 1
	---一般单位行为树轮询指针
	---@private
	---@type number
	self.__tickPointer = 1
	---召唤物的轮询指针
	---@private
	---@type number
	self.__summondPointer = 1
	---所有行为树字典
	---@private
	---@type LuaBehav_RuntimeBehavTree[]
	self.__allBehavTreeDic = {}
	---当前存活的关卡行为树（列表形式）
	---@private
	---@type LuaBehav_RuntimeBehavTree[]
	self.__levelTreeList = {}
	---当前存活的其他单位行为树（列表形式）
	---@private
	---@type LuaBehav_RuntimeBehavTree[]
	self.__aliveTreeList = {}
	---当前存活的召唤物行为树（列表形式）
	---@private
	---@type LuaBehav_RuntimeBehavTree[]
	self.__summondTreeList = {}
	---当前存活的行为树（字典形式）
	---@private
	---@type LuaBehav_RuntimeBehavTree[]
	self.__aliveTreeDic = {}
	---当前暂停的行为树字典
	---@private
	---@type LuaBehav_RuntimeBehavTree[]
	self.__pausedTreeDic = {}
	---当前已死亡但尚未删除的行为树ID记录
	---@private
	---@type number[]
	self.__deadTreeDic = {}
	
	---配置加载器
	---@private
	---@type LuaBehav_Loader
	self.__loader = LuaBehav_Loader.New(self.battleId)
	self.__loader:Init(self)
	---行为树任务节点监听外部消息
	---@private
	self.__treeListenerDic = {}

	---事件节点监听
	---@private
	self.eventDic = {}
	
	
	---关卡行为树计时
	---@private
	self.__levelTimeCnt = 0
	---单位行为树计时
	---@private
	self.__unitTimeCnt = 0
	---关卡行为树是否正常运行
	---@private
	self.__levelBehavRun = true
	---单位行为树是否正常运行
	---@private
	self.__unitBehavRun = true

	---行为树可视化当前监听的树
	---@private
	---@type LuaBehav_RuntimeBehavTree
	self.__debugTree = nil
end

------------------------------------------------------------------------------------------------------------------------
---先这样，回头有时间再改成走OnPause 和 OnResume
---@public
function LuaBehav_RuntimeManager:PauseLevelBehav()
	self.__levelBehavRun = false
	--self:PauseAll(LuaBehav_Define_TreeBelongType.Unit)
end

---@public
function LuaBehav_RuntimeManager:PauseUnitBehav()
	self.__unitBehavRun = false
	--self:PauseAll(LuaBehav_Define_TreeBelongType.Level)
end

---@public
function LuaBehav_RuntimeManager:ResumeLevelBehav()
	self.__levelBehavRun = true
	--self:ResumeAll(LuaBehav_Define_TreeBelongType.Unit)
end

---@public
function LuaBehav_RuntimeManager:ResumeUnitBehav()
	self.__unitBehavRun = true
	--self:ResumeAll(LuaBehav_Define_TreeBelongType.Level)
end

------------------------------------------------------------------------------------------------------------------------
---@public
function LuaBehav_RuntimeManager:PostTaskListenEvent(_treeIndex, _listenId, _param)
	--LogTools.LogByLevel(LogLevel.logErr, "LuaBehav_RuntimeManager:PostTaskListenEvent", "_treeIndex", _treeIndex, "_listenId", _listenId, "_param", dumpTableEx(_param))
	local _behavTree = self.__allBehavTreeDic[_treeIndex]
	if not _behavTree then return end
	_behavTree:PostTaskListenEvent(_listenId, _param)
end

-- 清空
function LuaBehav_RuntimeManager:__Clear()
	-- TODO
end

---添加行为树
---这个考虑将来可以进行预加载，只加载行为树数据，但是暂时不激活
---@public
---@param _configData table 编辑器导出的行为树配置
---@param _belongType LuaBehav_Define_TreeBelongType
---@param _netId number 对于关卡，当前可以不传(也可以传关卡id，现在还没用到)，对于怪物（或其他战斗单位），传服务器生成的唯一netId
function LuaBehav_RuntimeManager:AddBehavTree(_treeName, _configData, _belongType, _netId)
	local _index = self.__indexCnt + 1
	if _index > 99999 then _index = 1 end --万一将来有无限挑战之类的关卡呢

	local _behavTree = self.__loader:Load(_treeName, _configData, _index, _belongType, _netId)
	if not _behavTree then return -1 end

	self.__indexCnt = _index
	self.__allBehavTreeDic[_index] = _behavTree
	self.__pausedTreeDic[_index] = _behavTree
	return _index
end

---激活行为树
---怪物真正投放出来或者关卡真正运行起来之后激活对应的行为树
---@public
function LuaBehav_RuntimeManager:AwakeBehavTree(_index, _unitType)
	local _behavTree = self.__allBehavTreeDic[_index]
	if not _behavTree then return end
	if _behavTree.belongType == LuaBehav_Define_TreeBelongType.Level and not _behavTree.battleRoom.behaviorProcessor:CheckLevelAIHost() then return end
	if _behavTree.belongType ~= LuaBehav_Define_TreeBelongType.Level and not _behavTree.battleRoom.behaviorProcessor:CheckMonsAIHost() then return end
	
	_behavTree:OnAwake()
	self.__pausedTreeDic[_index] = nil
	self.__aliveTreeDic[_index] = _behavTree
	if _behavTree.belongType == LuaBehav_Define_TreeBelongType.Level then
		table.insert(self.__levelTreeList, _behavTree)
	elseif _unitType == BattleUnitType.SummonedMons then
		table.insert(self.__summondTreeList, _behavTree)
	else
		table.insert(self.__aliveTreeList, _behavTree)
	end
end

---暂停行为树
---@public
function LuaBehav_RuntimeManager:PauseBehavTree(_index)
	local _aliveDic = self.__aliveTreeDic
	if not _aliveDic[_index] then return end
	_aliveDic[_index] = nil
	
	local _aliveList = self.__levelTreeList
	local _max = #_aliveList
	for i = 1, _max do
		local _behavTree = _aliveList[i]
		if _behavTree:CheckIndex(_index) then
			_behavTree:OnPause()
			table.remove(_aliveList, i)
			self.__pausedTreeDic[_index] = _behavTree
			return
		end
	end
	
	_aliveList = self.__aliveTreeList
	local _max = #_aliveList
	for i = 1, _max do
		local _behavTree = _aliveList[i]
		if _behavTree:CheckIndex(_index) then
			_behavTree:OnPause()
			table.remove(_aliveList, i)
			self.__pausedTreeDic[_index] = _behavTree
			return
		end
	end

	_aliveList = self.__summondTreeList
	_max = #_aliveList
	for i = 1, _max do
		local _behavTree = _aliveList[i]
		if _behavTree:CheckIndex(_index) then
			_behavTree:OnPause()
			table.remove(_aliveList, i)
			self.__pausedTreeDic[_index] = _behavTree
			return
		end
	end
end

---恢复行为树
---@public
function LuaBehav_RuntimeManager:ResumeBehavTree(_index)
	local _pausedDic = self.__pausedTreeDic
	local _behavTree = _pausedDic[_index]
	if not _behavTree then return end
	local battleRoom = GetBattleRoom(self.battleId)

	if _behavTree.belongType == LuaBehav_Define_TreeBelongType.Level then
		_behavTree:OnResume()
		_pausedDic[_index] = nil
		self.__aliveTreeDic[_index] = _behavTree
		table.insert(self.__levelTreeList, _behavTree)
	else
		local _unit = battleRoom.battleUnitManager:GetUnit(_behavTree.netId)
		if not _unit then return end
	
		_behavTree:OnResume()
		_pausedDic[_index] = nil
		self.__aliveTreeDic[_index] = _behavTree
		if _unit:CheckUnitType(BattleUnitType.SummonedMons) then
			table.insert(self.__summondTreeList, _behavTree)
		else
			table.insert(self.__aliveTreeList, _behavTree)
		end
	end
end

---暂停所有行为树
---@public
---@param _skipBelongType LuaBehav_Define_TreeBelongType 忽略的行为树类型
function LuaBehav_RuntimeManager:PauseAll(_skipBelongType)
	local _pausedDic = self.__pausedTreeDic
	--for _index, _behavTree in pairs(self.__aliveTreeDic) do
	--	if _index and _behavTree then
	--		_behavTree:OnPause()
	--		_pausedDic[_index] = _behavTree
	--	end
	--end

	for i = #self.__aliveTreeList, 1, -1 do
		local _behavTree = self.__aliveTreeList[i]
		if _behavTree.belongType ~= _skipBelongType then
			_behavTree:OnPause()
			_pausedDic[_index] = _behavTree
			table.remove(self.__aliveTreeList, i)
			self.__aliveTreeDic[_behavTree:GetIndex()] = nil
		end
	end
	for i = #self.__summondTreeList, 1, -1 do
		local _behavTree = self.__summondTreeList[i]
		if _behavTree.belongType ~= _skipBelongType then
			_behavTree:OnPause()
			_pausedDic[_index] = _behavTree
			table.remove(self.__summondTreeList, i)
			self.__aliveTreeDic[_behavTree:GetIndex()] = nil
		end
	end
	for i = #self.__levelTreeList, 1, -1 do
		local _behavTree = self.__levelTreeList[i]
		if _behavTree.belongType ~= _skipBelongType then
			_behavTree:OnPause()
			_pausedDic[_index] = _behavTree
			table.remove(self.__levelTreeList, i)
			self.__aliveTreeDic[_behavTree:GetIndex()] = nil
		end
	end
	--self.__aliveTreeDic = {}
	--self.__aliveTreeList = {}
	--self.__summondTreeList = {}
end

---恢复所有行为树
---@public
---@param _skipBelongType LuaBehav_Define_TreeBelongType 忽略的行为树类型
function LuaBehav_RuntimeManager:ResumeAll(_skipBelongType)
	local _aliveDic = self.__aliveTreeDic
	local _aliveList = self.__aliveTreeList
	local _summondList = self.__summondTreeList
	local _levelList = self.__levelTreeList
	local battleRoom = GetBattleRoom(self.battleId)
	local _unitManager = battleRoom.battleUnitManager
	---@type BattleUnitBase
	local _unit
	for _index, _behavTree in pairs(self.__pausedTreeDic) do
		if _index and _behavTree then
			if _behavTree.belongType ~= _skipBelongType then
				if _behavTree.belongType == LuaBehav_Define_TreeBelongType.Level then
					_behavTree:OnResume()
					_aliveDic[_index] = _behavTree
					table.insert(_levelList, _behavTree)
					self.__pausedTreeDic[_index] = nil
				else
					_unit = _unitManager:GetUnit(_behavTree.netId)
					if _unit then
						_behavTree:OnResume()
						_aliveDic[_index] = _behavTree
						if _unit:CheckUnitType(BattleUnitType.SummonedMons) then
							table.insert(_summondList, _behavTree)
						else
							table.insert(_aliveList, _behavTree)
						end
						self.__pausedTreeDic[_index] = nil
					end
				end
			end
		end
	end
	--self.__pausedTreeDic = {}
end

---行为树死亡
---这里只进行标记，在下一帧集中清理所有死亡的行为树
---@public
function LuaBehav_RuntimeManager:RemoveBehavTree(_index)
	--LogTools.LogByLevel(LogLevel.logErr, "CheckLuaBehav", "LuaBehav_RuntimeManager", "RemoveBehavTree", "_index", _index)
	self.__deadTreeDic[_index] = 1
	if self.__debugTree and self.__debugTree:CheckIndex(_index) then
		self.__debugTree = nil
	end
end

---逻辑tick
---@public
function LuaBehav_RuntimeManager:OnUpdate(_deltaTime, _frameId)
	--LogTools.LogByLevel(LogLevel.log, "checktime", "LuaBehav_RuntimeManager", "OnUpdate start _frameId", _frameId)
	
	if self.__levelBehavRun then
		self.__levelTimeCnt = self.__levelTimeCnt + _deltaTime
		self.__levelPointer = self:__TickTreeList(_deltaTime, self.__levelTreeList, self.__levelPointer, #self.__levelTreeList)	
	end

	if self.__unitBehavRun then
		self.__unitTimeCnt = self.__unitTimeCnt + _deltaTime
		self.__tickPointer = self:__TickTreeList(_deltaTime, self.__aliveTreeList, self.__tickPointer, 1)
		self.__summondPointer = self:__TickTreeList(_deltaTime, self.__summondTreeList, self.__summondPointer, 1)
	end

	--if not self.__debugTree then
	--	self:SetDebugTreeByIndex(1)
	--end

	if self.__debugTree then
		self:__SyncTreeStateInfo(2)
	end
end

---@private
---@param _aliveList LuaBehav_RuntimeBehavTree[] 本次要进行tick的行为树列表
---@param _pointer number 行为树tick指针
---@param _tickMax number 本次最多tick的数量
function LuaBehav_RuntimeManager:__TickTreeList(_deltaTime, _aliveList, _pointer, _tickMax)
	local _max = #_aliveList
	---@type LuaBehav_RuntimeBehavTree
	local _behavTree
	local _treeIndex
	while _max > 0 do
		_behavTree = _aliveList[_pointer]
		if not _behavTree then
			_pointer = 1
			break
		end

		_treeIndex = _behavTree:GetIndex()
		if self.__deadTreeDic[_treeIndex] then
			if self:__RemoveDeadTree(_aliveList, _treeIndex) then
				_max = _max - 1
				if _pointer > _max then
					_pointer = 1
					break
				end
			end
		else
			_behavTree:OnUpdate(_deltaTime)
			_pointer = _pointer + 1
			if _pointer > _max then
				_pointer = 1
			end
			if _tickMax then
				_tickMax = _tickMax - 1
				if _tickMax == 0 then
					break
				end
			end
		end
	end
	return _pointer
end

---实际清理死亡的行为树
---@private
---@param _aliveList LuaBehav_RuntimeBehavTree[]
function LuaBehav_RuntimeManager:__RemoveDeadTree(_aliveList, _treeIndex)
	self.__deadTreeDic[_treeIndex] = nil
	self.__allBehavTreeDic[_treeIndex] = nil
	local _behavTree = self.__aliveTreeDic[_treeIndex]
	----LogTools.LogByLevel(LogLevel.log, "LuaBehav_RuntimeManager", "__DealWaitRemove", "_behavTree in __aliveTreeDic", _behavTree)
	local _find = false
	if _behavTree then
		self.__aliveTreeDic[_treeIndex] = nil

		local _max = #_aliveList
		for i = _max, 1, -1 do
			if _aliveList[i]:CheckIndex(_treeIndex) then
				_find = true
				table.remove(_aliveList, i)
				break
			end
		end
		_behavTree:OnDestroy()
	else
		_behavTree = self.__pausedTreeDic[_treeIndex]
		if _behavTree then
			self.__pausedTreeDic[_treeIndex] = nil
			_behavTree:OnDestroy()
		end
	end
	return _find
end

---@public
function LuaBehav_RuntimeManager:GetLevelTimeCnt()
	return self.__levelTimeCnt
end

---@public
function LuaBehav_RuntimeManager:GetUnitTimeCnt()
	return self.__unitTimeCnt
end

---@param _eventType LuaBehav_Define_EventTaskType
---@param _eventTask LuaBehav_RuntimeTask_Event
function LuaBehav_RuntimeManager:AddEventDic(_eventType, _eventTask)
	if not _eventType then return end
	if not _eventTask then return end
	local _tab = self.eventDic[_eventType]
	if not _tab then
		_tab = {}
		self.eventDic[_eventType] = _tab
	end
	_tab[_eventTask.index] = _eventTask
end

---@param _eventType LuaBehav_Define_EventTaskType
---@param _eventTask LuaBehav_RuntimeTask_Event 
function LuaBehav_RuntimeManager:RemoveEventDic(_eventType, _eventTask)
	if not _eventType then return end
	if not _eventTask then return end
	local _tab = self.eventDic[_eventType]
	if not _tab then return end
	_tab[_eventTask.index] = nil
end

---@param _eventType LuaBehav_Define_EventTaskType
---@param _paramTab table
function LuaBehav_RuntimeManager:OnBehavEvent(_eventType, _paramTab)
	local _tab = self.eventDic[_eventType]
	if not _tab then return end
	
	for _,_eventTask in pairs(_tab) do
		if _eventTask then
			_eventTask:OnEvent(_paramTab)
		end
	end
end

-- 清理，必须调用
function LuaBehav_RuntimeManager:OnDestroy()
	for _,_runtimeBehavTree in pairs(self.__allBehavTreeDic) do
		_runtimeBehavTree:OnDestroy()
	end
	self.__aliveTreeList = {}
	self.__summondTreeList = {}
	self.__levelTreeList = {}
	self.__aliveTreeDic = {}
	self.__pausedTreeDic = {}
	self.__allBehavTreeDic = {}
	self.eventDic = {}
end

-- 重置
function LuaBehav_RuntimeManager:Clear()
	self:__Clear()
end

------------------------------------------------------------------------------------------------------------------------

---@public
function LuaBehav_RuntimeManager:SetDebugTreeByIndex(_index)

	local _tree = self.__allBehavTreeDic[_index]
	if not _tree then return end
	self.__debugTree = _tree
	self:__SyncTreeStateInfo(1)
	
end

---@public
function LuaBehav_RuntimeManager:SetDebugTreeByName(_name)
	for _, _tree in pairs(self.__allBehavTreeDic) do
		if _tree:CheckTreeName(_name) then
			self.__debugTree = _tree
			self:__SyncTreeStateInfo(1)
			break
		end
	end
end

---@private
function LuaBehav_RuntimeManager:__SyncTreeStateInfo(_result)
	if not self.__debugTree then return end
	if not self.__debugTree.taskList then return end
	
	local _states = {}
	for i = 1, #self.__debugTree.taskList do
		local _ProtoHashInt2Int = self.__debugTree.taskList[i]:GetDebugTaskShowInfo(_result)
		if _ProtoHashInt2Int then
			table.insert(_states, _ProtoHashInt2Int)
		end
	end
	
	local _variables = self.__debugTree:GetDebugVariableShowInfo(_result)
	
	if not _variables and 0 == #_states then return end

	local _PushBehaviorInfo = {}
	_PushBehaviorInfo.result = _result
	_PushBehaviorInfo.graphName = self.__debugTree:GetTreeName()
	_PushBehaviorInfo.states = _states
	_PushBehaviorInfo.variables = _variables
	GetBattleRoom(self.battleId).outputDataSource:PushBehavInfo_S2C(_PushBehaviorInfo)
	--LogTools.LogByLevel(LogLevel.logErr, "_variables", dumpTableEx(_variables))
end

return LuaBehav_RuntimeManager
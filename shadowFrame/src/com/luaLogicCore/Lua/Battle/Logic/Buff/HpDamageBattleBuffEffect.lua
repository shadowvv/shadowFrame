---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/12/21 15:25

require "Lib/class"
require "Battle/Logic/Buff/BattleBuffEffect"

---@class HpDamageBattleBuffEffect : BattleBuffEffect
---@field buffInstanceId number 配置Id
---@field castParam table 施法者参数
---@field customParam table 自定义参数
---@field nextTriggerTime number 下次触发时间
---@field triggerCount number 触发次数
---@field castObjId number 施法者objId
---@field castUnitId number 施法者unitId
HpDamageBattleBuffEffect = class(BattleBuffEffect, 'HpDamageBattleBuffEffect');

function HpDamageBattleBuffEffect:ctor(_buffInstanceId)

    self.buffInstanceId = _buffInstanceId;
    self.castParam = nil;
    self.customParam = nil;
    self.nextTriggerTime = 0;
    self.triggerCount = 0;

end

---触发buff
---@public
---@param _battleObject BattleObjectBase 战斗物体
---@param _battleBuff BattleBuff buff实体
---@param _stackNum number 堆叠数量
---@param _isUnitChangeLeader boolean 是否为玩家buff换人操作
function HpDamageBattleBuffEffect:Trigger(_battleObject, _battleBuff, _stackNum,_isUnitChangeLeader)
    if not _isUnitChangeLeader then
        self.triggerCount = self.triggerCount + 1;
    end

    local inputDataSource = _battleObject:GetBattleRoom().inputDataSource
    ---@type BuffAndActionInstance
    local buffAndActionInstance = inputDataSource:GetDict("BuffAndActionInstance",self.buffInstanceId);
    ---@type BuffAndActionTemplate
    local buffAndActionTemplate = inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);
    local _elementId = buffAndActionTemplate.behindParam[3] or BattleElementTypeEnum.PHYSIC:GetId(); --元素类型
    local _hatredParam = buffAndActionInstance.buffHatredValue --仇恨系数
    local _addElementStrenthId = buffAndActionInstance.elementStrengthId
    local _addElementId = 0
    local _addElementNum = 0
    local _addElementRand = 0
    ---@type ElementStrength
    local _elementStrenth = inputDataSource:GetDict("ElementStrength", _addElementStrenthId)
    if _elementStrenth then
        _addElementId = _elementStrenth.elementId
        _addElementNum = _elementStrenth.addNum
        _addElementRand = _elementStrenth.chance
    end
    
    local _blockId = 0
    if buffAndActionInstance.isWeaknessHurt == 1 then
        _blockId = _battleBuff.bodyPartId
    end

    ---@type SnapShotData
    local _snapShotData = self:GetCustomParam(_battleObject)
    local currentCastParam = self:GetCastParam(_battleObject)*(1+_battleBuff.upPercent[buffAndActionTemplate.metaType]);

    local battleRoom = _battleObject:GetBattleRoom()
    local _propertyCom = _battleObject:GetComponent(BattleObjectComponentType.Property)
    _snapShotData:SetOriginalHeroSkillId(_battleBuff.castSkillId, _battleBuff.generateStackInfo)
    _snapShotData:SetSourceId(_battleBuff.buffGroupId)
    _snapShotData:SetCanTriggerElementReact(buffAndActionInstance.elementtrigger == 1)
    _snapShotData:SetEleSpreadHurtFix(_battleBuff:GetEleBallSpreadHurtFix())
    if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
        local _fromObj = battleRoom.battleObjectManager:GetObject(_snapShotData:GetObjId())
        ---@type BattleObjCom_Property
        local _fromPropCom = _fromObj:GetComponent(BattleObjectComponentType.Property)
        LogTools.LogByLevel(LogLevel.log, "CheckHurt", "触发直接指定伤害buff", "来源NetId", _snapShotData:GetNetId(), "来源ObjId", _snapShotData:GetObjId(), "目标NetId", _battleObject:GetParentUnit():GetNetId(), "目标ObjId", _battleObject:GetObjectId(), "buffGroupId", _battleBuff.buffGroupId, "buffInstanceId", self.buffInstanceId, "buffTemplateId", buffAndActionInstance.templateId, "堆叠层数", _stackNum, "指定的属性ID", buffAndActionTemplate.frontParam[1], "施放者当前属性值", _fromPropCom:GetPropertyById(buffAndActionTemplate.frontParam[1]), "属性读取方式（1数值2百分比）", buffAndActionTemplate.frontParam[2], "属性读取计算参数", buffAndActionInstance.param[1], "_battleBuff.bodyPartId", _battleBuff.bodyPartId, "最终分块ID", _blockId, "self.castParam", math.abs(self.castParam))
    end
    _snapShotData:InitBuffParams(_propertyCom, _elementId, _addElementId, _addElementRand, _addElementNum, currentCastParam, _hatredParam, 1)
   
    local _hurtStackData = battleRoom.hurtManager:PopHurtStackData()
    _hurtStackData.defUnit = _battleObject:GetParentUnit()
	_hurtStackData.defObj = _battleObject
	_hurtStackData.defBlockId = _blockId
	_hurtStackData.reactId = _reactId
	_hurtStackData.checkCamp = false
	_hurtStackData.stackNum = _stackNum
	_hurtStackData.directHurtNum = math.abs(self.castParam) * _stackNum
	--_hurtStackData.disReduceParam = _disReduceParam
	--_hurtStackData.disReduceEnum = _hurtDisReduceEnum
	_hurtStackData.trigEvent = (buffAndActionTemplate.behindParam[5] ~= 1)
	_hurtStackData.isAccumulatedAtk = false
	_hurtStackData.barrageSkillId = nil
	_hurtStackData.hurtCollision = ""
    battleRoom.hurtManager:OnBuffHurt(_snapShotData, _hurtStackData)
    battleRoom.hurtManager:PushStackData(_hurtStackData)
end

---释放buff
---@public
---@param _battleObject BattleObjectBase 战斗物体
---@param _battleBuff BattleBuff buff实体
---@param _stackNum number 堆叠数量
---@param _isTimeOver boolean 是否时间到
function HpDamageBattleBuffEffect:Release(_battleObject, _battleBuff, _stackNum, _isTimeOver)

end

---@public
---@return number buff类型Id
function HpDamageBattleBuffEffect:GetId()
    return 21;
end

---静态方法,生成施法者自定义参数
---@public
---@param _battleObjectBase BattleObjectBase 释放buff的单位
---@param _buffInstanceId number BuffAndActionInstance表id
---@param _param table 自定义参数
---@return table 施法者参数
function HpDamageBattleBuffEffect:GenerateCostCustomParam(_battleObjectBase, _buffInstanceId, _param)
    local _unit = _battleObjectBase:GetParentUnit()
    if _unit then
        local battleRoom = _unit:GetBattleRoom()
        return battleRoom.hurtManager:CreateSnapShot(_battleObjectBase:GetObjectId(), 2)
    end
    return nil;
end

return HpDamageBattleBuffEffect;
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/3/28 22:43

require "Lib/class"
require "Battle/Logic/Buff/BattleBuffEffect"

---@class ThunderstormBattleBuffEffect : BattleBuffEffect
---@field buffInstanceId number 配置Id
---@field castParam table 最终目标参数
---@field customParam table 自定义参数
---@field nextTriggerTime number 下次触发时间
---@field triggerCount number 触发次数
ThunderstormBattleBuffEffect = class(BattleBuffEffect, 'ThunderstormBattleBuffEffect');
---@type boolean 伤害类buff
ThunderstormBattleBuffEffect.hurtBuff = true

function ThunderstormBattleBuffEffect:ctor(_buffInstanceId)

    self.buffInstanceId = _buffInstanceId;
    self.castParam = nil;
    self.customParam = nil;
    self.nextTriggerTime = 0;
    self.triggerCount = 0;
    ---@type number 技能系数
    self.skillRatio = 1;

end

---触发buff
---@public
---@param _battleObject BattleObjectBase 战斗物体
---@param _battleBuff BattleBuff buff实体
---@param _stackNum number 堆叠数量
---@param _isUnitChangeLeader boolean 是否为玩家buff换人操作
function ThunderstormBattleBuffEffect:Trigger(_battleObject, _battleBuff, _stackNum,_isUnitChangeLeader)
    if not _isUnitChangeLeader then
        self.triggerCount = self.triggerCount + 1;
    end

    local inputDataSource = _battleObject:GetBattleRoom().inputDataSource
    ---@type BuffAndActionInstance
    local buffAndActionInstance = inputDataSource:GetDict("BuffAndActionInstance",self.buffInstanceId);
    ---@type BuffAndActionTemplate
    local buffAndActionTemplate = inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);
    local _elementId = buffAndActionTemplate.behindParam[3]; --元素类型
    local _hatredParam = buffAndActionInstance.buffHatredValue --仇恨系数
    local _addElementStrenthId = buffAndActionInstance.elementStrengthId
    local _addElementId = 0
    local _addElementNum = 0
    local _addElementRand = 0
    ---@type ElementStrength
    local _elementStrenth = inputDataSource:GetDict("ElementStrength", _addElementStrenthId)
    if _elementStrenth then
        _addElementId = _elementStrenth.elementId
        _addElementNum = _elementStrenth.addNum
        _addElementRand = _elementStrenth.chance
    end
    
    local _blockId = 0
    if buffAndActionInstance.isWeaknessHurt == 1 then
        _blockId = _battleBuff.bodyPartId
    end

    local _reactId = _battleBuff.generateStackInfo and _battleBuff.generateStackInfo.specifiedReacId or 0
    --if 0 == _reactId then
    --    _reactId = math.floor(buffAndActionTemplate.behindParam[4] or 0)
    --end
    ---@type ElementalReaction
    local _reactXLs = inputDataSource:GetDict("ElementalReaction", _reactId)
    local _reactEnFix = 1
    if _reactXLs then _reactEnFix = _reactXLs.suitabilityValue end
    
    ---@type SnapShotData
    local _snapShotData = self.customParam
    local _propertyCom = _battleObject:GetComponent(BattleObjectComponentType.Property)
    _snapShotData:SetOriginalHeroSkillId(_battleBuff.castSkillId, _battleBuff.generateStackInfo)
    _snapShotData:SetSourceId(_battleBuff.buffGroupId)
    _snapShotData:SetCanTriggerElementReact(buffAndActionInstance.elementtrigger == 1)
    _snapShotData:SetEleSpreadHurtFix(_battleBuff:GetEleBallSpreadHurtFix())
    if LogTools.HurtLog and CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log, "CheckHurt", "触发雷暴反应伤害buff", "来源NetId", _snapShotData:GetNetId(), "来源ObjId", _snapShotData:GetObjId(), "目标NetId", _battleObject:GetParentUnit():GetNetId(), "目标ObjId", _battleObject:GetObjectId(), "buffGroupId", _battleBuff.buffGroupId, "buffInstanceId", self.buffInstanceId, "buffTemplateId", buffAndActionInstance.templateId, "原始伤害系数", self.castParam, "堆叠层数", _stackNum, "buffAndActionInstance.isWeaknessHurt", buffAndActionInstance.isWeaknessHurt, "_battleBuff.bodyPartId", _battleBuff.bodyPartId, "最终分块ID", _blockId, "_reactId", _reactId, "元素反应能量参数修正", _reactEnFix)
    end
    local _hurtParamFix = _battleBuff.generateStackInfo and _battleBuff.generateStackInfo.hurtParamFix or 1
    _snapShotData:InitBuffParams(_propertyCom, _elementId, _addElementId, _addElementRand, _addElementNum, self.castParam * _hurtParamFix, _hatredParam, _reactEnFix)
    
    local battleRoom = _battleObject:GetBattleRoom()
    local _hurtStackData = battleRoom.hurtManager:PopHurtStackData()
    _hurtStackData.defUnit = _battleObject:GetParentUnit()
	_hurtStackData.defObj = _battleObject
	_hurtStackData.defBlockId = _blockId
	_hurtStackData.reactId = _reactId
	_hurtStackData.checkCamp = false
	_hurtStackData.stackNum = _stackNum
	_hurtStackData.directHurtNum = nil
	--_hurtStackData.disReduceParam = _disReduceParam
	--_hurtStackData.disReduceEnum = _hurtDisReduceEnum
	_hurtStackData.trigEvent = (buffAndActionTemplate.behindParam[5] ~= 1)
	_hurtStackData.isAccumulatedAtk = false
	_hurtStackData.barrageSkillId = nil
	_hurtStackData.hurtCollision = ""
    battleRoom.hurtManager:OnBuffHurt(_snapShotData, _hurtStackData)
    battleRoom.hurtManager:PushStackData(_hurtStackData)
end

---释放buff
---@public
---@param _battleObject BattleObjectBase 战斗物体
---@param _battleBuff BattleBuff buff实体
---@param _stackNum number 堆叠数量
function ThunderstormBattleBuffEffect:Release(_battleObject, _battleBuff, _stackNum)

end

---@public
---@return number buff类型Id
function ThunderstormBattleBuffEffect:GetId()
    return 31;
end

---生成施法者自定义参数
---@public
---@param _battleObjectBase BattleObjectBase 释放buff的单位
---@param _buffInstanceId number BuffAndActionInstance表id
---@param _param table 自定义参数
---@return table 施法者参数
function ThunderstormBattleBuffEffect:GenerateCostCustomParam(_battleObjectBase,_buffInstanceId,_param)
    local _unit = _battleObjectBase:GetParentUnit()
    if _unit then
        local battleRoom = _battleObjectBase:GetBattleRoom()
        return battleRoom.hurtManager:CreateSnapShot(_battleObjectBase:GetObjectId(), 2)
    end
    return nil;
end

return ThunderstormBattleBuffEffect;
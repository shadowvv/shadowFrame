---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/3/22 10:03

require "Lib/class"
require "Battle/Logic/Buff/BattleBuffEffect"
require "Battle/Logic/Buff/InvincibleBattleBuffEffect"
require "Battle/Logic/Buff/BarrageBattleBuffEffect"
require "Battle/Logic/Buff/SkillBattleBuffEffect"
require "Battle/Logic/Buff/EndureBattleBuffEffect"
require "Battle/Logic/Buff/HealBattleBuffEffect"
require "Battle/Logic/Buff/PropBattleBuffEffect"
require "Battle/Logic/Buff/BasicBattleBuffEffect"
require "Battle/Logic/Buff/DamageBattleBuffEffect"
require "Battle/Logic/Buff/HpDamageBattleBuffEffect"
require "Battle/Logic/Buff/ElementDamageBattleBuffEffect"
require "Battle/Logic/Buff/ThunderstormBattleBuffEffect"
require "Battle/Logic/Buff/ElectromagneticBattleBuffEffect"
require "Battle/Logic/Buff/FlashBattleBuffEffect"
require "Battle/Logic/Buff/AreaBattleBuffEffect"
require "Battle/Logic/Buff/SkillCoolDownBattleBuffEffect"
require "Battle/Logic/Buff/TrappedBattleBuffEffect"
require "Battle/Logic/Buff/AddNextBuffBattleBuffEffect"
require "Battle/Logic/Buff/TalentSkillBattleBuffEffect"
require "Battle/Logic/Buff/IceWindBattleBuffEffect"
require "Battle/Logic/Buff/AddBarrageBuffBattleBuffEffect"
require "Battle/Logic/Buff/SummonBattleBuffEffect"
require "Battle/Logic/Buff/FallObjectBattleBuffEffect"
require "Battle/Logic/Buff/BreakAddNextBuffBattleBuffEffect"
require "Battle/Logic/Buff/AddSkillCastTimeBattleBuffEffect"
require "Battle/Logic/Buff/ChangeSkillDamageBattleBuffEffect"
require "Battle/Logic/Buff/ChangeSkillBeDamageBattleBuffEffect"
require "Battle/Logic/Buff/ShieldBattleBuffEffect"
require "Battle/Logic/Buff/ChangeElementDamageBattleBuffEffect"
require "Battle/Logic/Buff/ChangeElementBeDamageBattleBuffEffect"
require "Battle/Logic/Buff/CoverShieldBattleBuffEffect"
require "Battle/Logic/Buff/ChangePlayModeBattleBuffEffect"
require "Battle/Logic/Buff/ExtraDamageBattleBuffEffect"
require "Battle/Logic/Buff/ChangeSkillHurtParamBattleBuffEffect"
require "Battle/Logic/Buff/ElementInvincibleBattleBuffEffect"
require "Battle/Logic/Buff/SilenceBattleBuffEffect"
require "Battle/Logic/Buff/AddBarrageShootCountBattleBuffEffect"
require "Battle/Logic/Buff/ChangeTypePlayModeIdBattleBuffEffect"
require "Battle/Logic/Buff/AllWeakBattleBuffEffect"
require "Battle/Logic/Buff/AllAttackHitWeakBattleBuffEffect"
require "Battle/Logic/Buff/ChangeWarriorStatusBattleBuffEffect"
require "Battle/Logic/Buff/ChangeTalentSkillBattleBuffEffect"
require "Battle/Logic/Buff/SpecialBuffDoDamageBattleBuffEffect"
require "Battle/Logic/Buff/ChangeBarrageSpeedBattleBuffEffect"
require "Battle/Logic/Buff/ElementExplodeBattleBuffEffect"
require "Battle/Logic/Buff/FireElementBattleBuffEffect"
require "Battle/Logic/Buff/WindElementBattleBuffEffect"
require "Battle/Logic/Buff/ThunderElementBattleBuffEffect"
require "Battle/Logic/Buff/ChangeElementTimeBattleBuffEffect"
require "Battle/Logic/Buff/InvincibleTriggerEventBuffEffect"
require "Battle/Logic/Buff/CollinderBattleBuffEffect"
require "Battle/Logic/Buff/ChangeSkillElementBattleBuffEffect"
require "Battle/Logic/Buff/AssignPropBattleBuffEffect"
require "Battle/Logic/Buff/ChangeSkillHealBattleBuffEffect"
require "Battle/Logic/Buff/InvisibleBattleBuffEffect"
require "Battle/Logic/Buff/ElementHeroDirectUseAtkBuffEffect"

---@class BattleBuffService : table
BattleBuffService = class(nil, 'BattleBuffService');

---@type BattleBuffEffect[]
BATTLE_BUFF_EFFECT = {}
--1、无敌buff
BATTLE_BUFF_EFFECT[1] = InvincibleBattleBuffEffect;
--2、buff调用弹幕技能
BATTLE_BUFF_EFFECT[2] = BarrageBattleBuffEffect;
--3、调用技能buff
BATTLE_BUFF_EFFECT[3] = SkillBattleBuffEffect;
--4、霸体buff（不进入被击、眩晕等控制状态）
BATTLE_BUFF_EFFECT[4] = EndureBattleBuffEffect;
--5、治疗buff
BATTLE_BUFF_EFFECT[5] = HealBattleBuffEffect;
--10、前置参数—后置参数，数值buff
BATTLE_BUFF_EFFECT[10] = PropBattleBuffEffect;
--11、数值buff 修改基值
BATTLE_BUFF_EFFECT[11] = BasicBattleBuffEffect;
--11、数值buff 直接赋值
BATTLE_BUFF_EFFECT[12] = AssignPropBattleBuffEffect;
--20、伤害类buff（无前置）
BATTLE_BUFF_EFFECT[20] = DamageBattleBuffEffect;
--21、固定伤害类型buff
BATTLE_BUFF_EFFECT[21] = HpDamageBattleBuffEffect;
--30、元素反应伤害类buff（无前置）
BATTLE_BUFF_EFFECT[30] = ElementDamageBattleBuffEffect;
--31、雷暴反应伤害类buff（特化）
BATTLE_BUFF_EFFECT[31] = ThunderstormBattleBuffEffect;
--32、电磁反应触发（特化）
BATTLE_BUFF_EFFECT[32] = ElectromagneticBattleBuffEffect;
--33、闪烁（特化，技能用）
BATTLE_BUFF_EFFECT[33] = FlashBattleBuffEffect;
--34、调用区域
BATTLE_BUFF_EFFECT[34] = AreaBattleBuffEffect;
--35、减少技能CD
BATTLE_BUFF_EFFECT[35] = SkillCoolDownBattleBuffEffect;
--36、被困
BATTLE_BUFF_EFFECT[36] = TrappedBattleBuffEffect;
--37、当前buff结束增加下一个buff
BATTLE_BUFF_EFFECT[37] = AddNextBuffBattleBuffEffect;
--38、添加被动技能
BATTLE_BUFF_EFFECT[38] = TalentSkillBattleBuffEffect;
--39、冰风反应传导buff
BATTLE_BUFF_EFFECT[39] = IceWindBattleBuffEffect;
--40、添加弹幕buff
BATTLE_BUFF_EFFECT[40] = AddBarrageBuffBattleBuffEffect;
--41、召唤物buff
BATTLE_BUFF_EFFECT[41] = SummonBattleBuffEffect;
--42、掉落物
BATTLE_BUFF_EFFECT[42] = FallObjectBattleBuffEffect;
--43、当前buff被打断增加下一个buff
BATTLE_BUFF_EFFECT[43] = BreakAddNextBuffBattleBuffEffect;
--44、增加技能使用次数（不能突破最大值,不清cd）
BATTLE_BUFF_EFFECT[44] = AddSkillCastTimeBattleBuffEffect;
--45、改变技能造成伤害
BATTLE_BUFF_EFFECT[45] = ChangeSkillDamageBattleBuffEffect;
--46、改变技能受到伤害
BATTLE_BUFF_EFFECT[46] = ChangeSkillBeDamageBattleBuffEffect;
--47、护罩
BATTLE_BUFF_EFFECT[47] = ShieldBattleBuffEffect;
--48、改变自身造成的元素反应伤害
BATTLE_BUFF_EFFECT[48] = ChangeElementDamageBattleBuffEffect;
--49、改变自身受到的元素反应伤害
BATTLE_BUFF_EFFECT[49] = ChangeElementBeDamageBattleBuffEffect;
--50、覆盖护盾
BATTLE_BUFF_EFFECT[50] = CoverShieldBattleBuffEffect;
--51、切换游戏状态模式
BATTLE_BUFF_EFFECT[51] = ChangePlayModeBattleBuffEffect;
--52、附加伤害
BATTLE_BUFF_EFFECT[52] = ExtraDamageBattleBuffEffect;
--53、修改技能伤害参数
BATTLE_BUFF_EFFECT[53] = ChangeSkillHurtParamBattleBuffEffect;
--54、元素无敌
BATTLE_BUFF_EFFECT[54] = ElementInvincibleBattleBuffEffect;
--55、链接特效表现逻辑 暂时没有实现
BATTLE_BUFF_EFFECT[55] = ElementInvincibleBattleBuffEffect;
--56、沉默
BATTLE_BUFF_EFFECT[56] = SilenceBattleBuffEffect;
--57、下x次攻击附带效果
BATTLE_BUFF_EFFECT[57] = AddBarrageShootCountBattleBuffEffect;
--58、改变目标类型模式Id
BATTLE_BUFF_EFFECT[58] = ChangeTypePlayModeIdBattleBuffEffect;
--59、改变本身为全弱点
BATTLE_BUFF_EFFECT[59] = AllWeakBattleBuffEffect;
--60、改变本身攻击为全弱点
BATTLE_BUFF_EFFECT[60] = AllAttackHitWeakBattleBuffEffect;
--61、修改勇士id
BATTLE_BUFF_EFFECT[61] = ChangeWarriorStatusBattleBuffEffect;
--62、修改被动效果
BATTLE_BUFF_EFFECT[62] = ChangeTalentSkillBattleBuffEffect;
--63、特定buff造成伤害
BATTLE_BUFF_EFFECT[63] = SpecialBuffDoDamageBattleBuffEffect;
--64、特定buff造成伤害
BATTLE_BUFF_EFFECT[64] = ChangeBarrageSpeedBattleBuffEffect;
--65、不受伤害但触发碰撞时间
BATTLE_BUFF_EFFECT[65] = InvincibleTriggerEventBuffEffect;
--66、碰撞盒buff
BATTLE_BUFF_EFFECT[66] = CollinderBattleBuffEffect;
--67、改变元素伤害
BATTLE_BUFF_EFFECT[67] = ChangeSkillElementBattleBuffEffect;
--67、元素积累爆炸伤害
BATTLE_BUFF_EFFECT[68] = ElementExplodeBattleBuffEffect;
--67、火元素特效
BATTLE_BUFF_EFFECT[69] = FireElementBattleBuffEffect;
--67、风元素特效
BATTLE_BUFF_EFFECT[70] = WindElementBattleBuffEffect;
--67、雷元素特效
BATTLE_BUFF_EFFECT[71] = ThunderElementBattleBuffEffect;
--67、改变元素积累时间
BATTLE_BUFF_EFFECT[72] = ChangeElementTimeBattleBuffEffect;
--73、改变元素积累时间
BATTLE_BUFF_EFFECT[73] = ChangeSkillHealBattleBuffEffect;
--76、隐身
BATTLE_BUFF_EFFECT[76] = InvisibleBattleBuffEffect;
--77、元素类型英雄指定伤害
BATTLE_BUFF_EFFECT[77] = ElementHeroDirectUseAtkBuffEffect;

function BattleBuffService:ctor()
    
end

---BattleBuffService现在没有new的过程，是被当成了一个全局表在用
---这里先用battleId分别记录吧
BattleBuffService.StackNumLimitFixDic = {}
BattleBuffService.BuffInstanceParamFixDic = {}
BattleBuffService.BuffTemplateParamFixDic = {}

---修改全局buff叠层上限
---@public
---@param _battleId number
---@param _buffGroupId number
---@param _num number
function BattleBuffService.ChangeBuffStackNumLimit(_battleId, _buffGroupId, _num)
    local _tab = BattleBuffService.StackNumLimitFixDic[_battleId]
    if not _tab then
        _tab = {}
        BattleBuffService.StackNumLimitFixDic[_battleId] = _tab
    end
    
    _tab[_buffGroupId] = _num
end

---获取全局Buff叠层上限
---@param _battleId number
---@param _buffGroupId number
---@param _num number
---@return number
function BattleBuffService.GetBuffStackNumLimit(_battleId, _buffGroupId, _num)

    local _tab = BattleBuffService.StackNumLimitFixDic[_battleId]
    if not _tab then return _num end
    
    local _numLimit = _tab[_buffGroupId]
    return _numLimit and _numLimit or _num
end

---修改全局buff instance参数
---@public
---@param _battleId number
---@param _buffInstanceId number
---@param _index number
---@param _num number
function BattleBuffService.ChangeBuffInstanceParam(_battleId, _buffInstanceId, _index,_num)
    local _tab = BattleBuffService.BuffInstanceParamFixDic[_battleId]
    if not _tab then
        _tab = {}
        BattleBuffService.BuffInstanceParamFixDic[_battleId] = _tab
    end
    local _nextTab= _tab[_buffInstanceId]
    if not _nextTab then
        _nextTab = {}
        _tab[_buffInstanceId] = _nextTab
    end

    _nextTab[_index] = _num
end

---获取全局buff instance参数
---@public
---@param _battleId number
---@param _buffInstanceId number
---@param _index number
---@param _num number
function BattleBuffService.GetBuffInstanceParam(_battleId, _buffInstanceId, _index,_num)
    local _tab = BattleBuffService.BuffInstanceParamFixDic[_battleId]
    if not _tab then return _num end

    local _nextTab = _tab[_buffInstanceId]
    if not _nextTab then return _num end

    local _numLimit = _nextTab[_index]
    return _numLimit and _numLimit or _num
end

---修改全局buff Template参数
---@public
---@param _battleId number
---@param _buffTemplateId number
---@param _index number
---@param _num number
function BattleBuffService.ChangeBuffTemplateParam(_battleId, _buffTemplateId, _index,_num)
    local _tab = BattleBuffService.BuffTemplateParamFixDic[_battleId]
    if not _tab then
        _tab = {}
        BattleBuffService.BuffTemplateParamFixDic[_battleId] = _tab
    end
    local _nextTab= _tab[_buffTemplateId]
    if not _nextTab then
        _nextTab = {}
        _tab[_buffTemplateId] = _nextTab
    end

    _nextTab[_index] = _num
end

---获取全局buff Template参数
---@public
---@param _battleId number
---@param _buffTemplateId number
---@param _index number
---@param _num number
function BattleBuffService.GetBuffTemplateParam(_battleId, _buffTemplateId, _index,_num)
    local _tab = BattleBuffService.BuffTemplateParamFixDic[_battleId]
    if not _tab then return _num end

    local _nextTab = _tab[_buffTemplateId]
    if not _nextTab then return _num end

    local _numLimit = _nextTab[_index]
    return _numLimit and _numLimit or _num
end

---生成施法者buff模板
---@public
---@param _buffId number buffId
---@param _battleObjectBase BattleObjectBase 释放buff的单位
---@param _castSkillId number 生成buff技能id
---@param _customParam table[] 自定义参数
---@param _upPercent table[] 效果提升
---@param _stackNum number 堆叠数量
---@return BattleBuffCastTemplate 战斗buff施法者模板
function BattleBuffService:GenerateCastBuffTemplate(_buffId, _battleObjectBase,_castSkillId,_customParam,_upPercent,_stackNum)
    ---@type BattleBuffCastTemplate
    local battleBuffCastTemplate = BattleBuffCastTemplate.New()
    battleBuffCastTemplate.buffGroupId = _buffId;

    local inputDataSource = _battleObjectBase:GetBattleRoom().inputDataSource

    local castParam = {};
    local customParam = {};
    local upPercent = {};
    ---@type BuffGroup
    local addBuffGroup = inputDataSource:GetDict("BuffGroup",_buffId)
    if addBuffGroup == nil then
        return battleBuffCastTemplate;
    end
    ---@type BattleObjCom_Buff
    local buffComp = _battleObjectBase:GetComponent(BattleObjectComponentType.Buff)

    for i, v in pairs(addBuffGroup.buffInstanceId) do
        ---@type BuffAndActionInstance
        local buffAndActionInstance = inputDataSource:GetDict("BuffAndActionInstance",v);
        ---@type BuffAndActionTemplate
        local buffAndActionTemplate = inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);
        local finalInstanceParam = buffComp:GetBuffInstanceParam(v,1,buffAndActionInstance.param[1]);
        if buffAndActionInstance.skillPara and #buffAndActionInstance.skillPara > 1 then
            ---@type BattleObjCom_Skill
            local skillComp = _battleObjectBase:GetComponent(BattleObjectComponentType.Skill);
            if skillComp then
                local level = skillComp:GetSkillLevel(buffAndActionInstance.skillPara[1]);
                ---@type SkillValue
                local skillValue = inputDataSource:GetSkillValue(buffAndActionInstance.skillPara[1],level);
                if skillValue then
                    finalInstanceParam = skillValue.value[buffAndActionInstance.skillPara[2]];
                end
            end
        end
        if buffAndActionInstance.talentSkillParam and #buffAndActionInstance.talentSkillParam  > 1 then
            ---@type BattleObjCom_Skill
            local skillComp = _battleObjectBase:GetComponent(BattleObjectComponentType.Skill);
            if skillComp then
                local level = skillComp:GetSkillLevel(buffAndActionInstance.talentSkillParam[1]);
                ---@type TalentSkill
                local talentSkillConfig = inputDataSource:GetTalentSkill(buffAndActionInstance.talentSkillParam[1],level);
                if talentSkillConfig then
                    finalInstanceParam = talentSkillConfig.talentSkillValue[buffAndActionInstance.talentSkillParam[2]];
                end
            end
        end
        ---@type BattleObjCom_Property
        local propCom = _battleObjectBase:GetComponent(BattleObjectComponentType.Property);
        ---@type BattleUnitCom_Camp
        local _campCom = _battleObjectBase:GetParentUnit():GetComponent(BattleUnitComponentType.Camp)
        if propCom and _campCom then
            finalInstanceParam = self:GetParamConfig(_battleObjectBase:GetBattleRoom(), _campCom:GetFirstCamp(), propCom:GetLevel(), v, finalInstanceParam);
        end

        if #buffAndActionTemplate.frontParam > 1 then
            local prop;
            ---@type BattleObjCom_Property
            local propComp = _battleObjectBase:GetComponent(BattleObjectComponentType.Property);
            if buffAndActionTemplate.metaType == PropBattleBuffEffect:GetId() or buffAndActionTemplate.metaType == BasicBattleBuffEffect:GetId() then
                prop = propComp:GetPropertyBasicById(buffAndActionTemplate.frontParam[1]);
            else
                prop = propComp:GetPropertyById(buffAndActionTemplate.frontParam[1]);
            end

            ---@type BattleUnitCom_UnitProp
            local _unitProp = _battleObjectBase:GetParentUnit():GetComponent(BattleUnitComponentType.UnitProp);
            if _unitProp and _unitProp:CheckUnitProp(ProtoEnumTool.GetPropertyKey(buffAndActionTemplate.frontParam[1])) then
                prop = _unitProp:GetPropByName(ProtoEnumTool.GetPropertyKey(buffAndActionTemplate.frontParam[1]));
            end
            
            if buffAndActionTemplate.frontParam[2] == 1 then
                castParam[v] = finalInstanceParam;
            else
                castParam[v] = prop*finalInstanceParam;
            end
        else
            castParam[v] = finalInstanceParam;
        end

        local tempCustomParam = _customParam;
        if type(_customParam) == "table" and _customParam[v] then
            tempCustomParam = _customParam[v];
        end
        customParam[v] = BATTLE_BUFF_EFFECT[buffAndActionTemplate.metaType]:GenerateCostCustomParam(_battleObjectBase,v,tempCustomParam);

        upPercent[buffAndActionTemplate.metaType] = self:GetUpPercent(addBuffGroup.id,addBuffGroup.buffType,buffAndActionTemplate.metaType,_battleObjectBase:GetComponent(BattleObjectComponentType.Buff),_upPercent);
    end
    battleBuffCastTemplate.castParam = castParam;
    battleBuffCastTemplate.customParam = customParam;
    battleBuffCastTemplate.castObjId = _battleObjectBase:GetObjectId();
    battleBuffCastTemplate.castUnitId = _battleObjectBase:GetParentUnit():GetNetId();
    battleBuffCastTemplate.castSkillId = _castSkillId;
    battleBuffCastTemplate.upPercent = upPercent;
    if _stackNum then
        battleBuffCastTemplate.stackNum = _stackNum;
    end

    ---@type BattleUnitCom_Camp
    local _campCom = _battleObjectBase:GetParentUnit():GetComponent(BattleUnitComponentType.Camp)
    battleBuffCastTemplate.castCamp = _campCom:GetFirstCamp();

    return battleBuffCastTemplate;
end

---@private
---@param _buffGroupId number buff
---@param _buffType number buff类型
---@param _metaType number buff效果
---@param _buffCom BattleObjCom_Buff buff模块
---@param _upPercent[] number 提升
function BattleBuffService:GetUpPercent(_buffGroupId,_buffType,_metaType,_buffCom,_upPercent)
    local upPercent = 0;
    if _upPercent then
        if _upPercent[0] then
            upPercent = upPercent + _upPercent[0];
        end
        if _upPercent[_metaType] then
            upPercent = upPercent + _upPercent[_metaType];
        end
    end
    if _buffCom then
        upPercent = upPercent + _buffCom:GetBattleUpPercent(_buffGroupId,_buffType,_metaType);
    end
    return upPercent;
end

---生成施法者buff模板
---@public
---@param _buffId number buffId
---@param _battleUnitBase BattleUnitBase 释放buff的单位
---@param _castObjectId number 释放buff objectId
---@param _castSkillId number 生成buff技能id
---@param _customParam table[] 自定义参数
---@param _upPercent table[] 效果提升
---@param _stackNum number 堆叠数量
---@return BattleBuffCastTemplate 战斗buff施法者模板
function BattleBuffService:GenerateUnitCastBuffTemplate(_buffId, _battleUnitBase,_castObjectId,_castSkillId,_customParam,_upPercent,_stackNum)
    ---@type BattleBuffCastTemplate
    local battleBuffCastTemplate = BattleBuffCastTemplate.New()
    battleBuffCastTemplate.buffGroupId = _buffId;

    local inputDataSource = _battleUnitBase:GetBattleRoom().inputDataSource

    local castParam = {};
    local customParam = {};
    local upPercent = {};
    ---@type BuffGroup
    local addBuffGroup = inputDataSource:GetDict("BuffGroup",_buffId)
    if addBuffGroup == nil then
        return battleBuffCastTemplate;
    end

    ---@type BattleUnitCom_Buff
    local buffCom = _battleUnitBase:GetComponent(BattleUnitComponentType.Buff);
    for i, v in pairs(addBuffGroup.buffInstanceId) do
        ---@type BuffAndActionInstance
        local buffAndActionInstance = inputDataSource:GetDict("BuffAndActionInstance",v);
        ---@type BuffAndActionTemplate
        local buffAndActionTemplate = inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);
        castParam[v] = {};
        customParam[v] = {};

        local battleObjectBase = _battleUnitBase:GetHeroObject(_castObjectId);
        local finalInstanceParam = buffCom:GetBuffInstanceParam(v,1,buffAndActionInstance.param[1]);
        if buffAndActionInstance.skillPara and #buffAndActionInstance.skillPara > 1 then
            ---@type BattleObjCom_Skill
            local skillComp = battleObjectBase:GetComponent(BattleObjectComponentType.Skill);
            if skillComp then
                local level = skillComp:GetSkillLevel(buffAndActionInstance.skillPara[1]);
                ---@type SkillValue
                local skillValue = inputDataSource:GetSkillValue(buffAndActionInstance.skillPara[1],level);
                if skillValue then
                    finalInstanceParam = skillValue.value[buffAndActionInstance.skillPara[2]];
                end
            end
        end
        if buffAndActionInstance.talentSkillParam and #buffAndActionInstance.talentSkillParam  > 1 then
            ---@type BattleObjCom_Skill
            local skillComp = battleObjectBase:GetComponent(BattleObjectComponentType.Skill);
            if skillComp then
                local level = skillComp:GetSkillLevel(buffAndActionInstance.talentSkillParam[1]);
                ---@type TalentSkill
                local talentSkillConfig = inputDataSource:GetTalentSkill(buffAndActionInstance.talentSkillParam[1],level);
                if talentSkillConfig then
                    finalInstanceParam = talentSkillConfig.talentSkillValue[buffAndActionInstance.talentSkillParam[2]];
                end
            end
        end
        ---@type BattleObjCom_Property
        local propCom = battleObjectBase:GetComponent(BattleObjectComponentType.Property);
        ---@type BattleUnitCom_Camp
        local _campCom = battleObjectBase:GetParentUnit():GetComponent(BattleUnitComponentType.Camp)
        if propCom and _campCom then
            finalInstanceParam = self:GetParamConfig(battleObjectBase:GetBattleRoom(), _campCom:GetFirstCamp(), propCom:GetLevel(), v, finalInstanceParam);
        end

        if #buffAndActionTemplate.frontParam > 1 then
            ---@type BattleObjCom_Property
            local propComp = battleObjectBase:GetComponent(BattleObjectComponentType.Property);
            local prop
            if buffAndActionTemplate.metaType == PropBattleBuffEffect:GetId() or buffAndActionTemplate.metaType == BasicBattleBuffEffect:GetId() then
                prop = propComp:GetPropertyBasicById(buffAndActionTemplate.frontParam[1]);
            else
                prop = propComp:GetPropertyById(buffAndActionTemplate.frontParam[1]);
            end

            ---@type BattleUnitCom_UnitProp
            local _unitProp = _battleUnitBase:GetComponent(BattleUnitComponentType.UnitProp);
            if _unitProp and _unitProp:CheckUnitProp(ProtoEnumTool.GetPropertyKey(buffAndActionTemplate.frontParam[1])) then
                prop = _unitProp:GetPropByName(ProtoEnumTool.GetPropertyKey(buffAndActionTemplate.frontParam[1]));
            end
            
            if buffAndActionTemplate.frontParam[2] == 1 then
                castParam[v] = finalInstanceParam;
            else
                castParam[v] = prop*finalInstanceParam;
            end
        else
            castParam[v] = finalInstanceParam;
        end

        local tempCustomParam = _customParam;
        if type(_customParam) == "table" and _customParam[v] then
            tempCustomParam = _customParam[v];
        end
        customParam[v] = BATTLE_BUFF_EFFECT[buffAndActionTemplate.metaType]:GenerateCostCustomParam(battleObjectBase,v,tempCustomParam);
        upPercent[buffAndActionTemplate.metaType] = self:GetUpPercent(addBuffGroup.id,addBuffGroup.buffType,buffAndActionTemplate.metaType,battleObjectBase:GetComponent(BattleObjectComponentType.Buff),_upPercent);
    end

    battleBuffCastTemplate.unitCastParam = castParam;
    battleBuffCastTemplate.unitCustomParam = customParam;
    if _castObjectId then
        battleBuffCastTemplate.castObjId = _castObjectId;
    else
        battleBuffCastTemplate.castObjId = _battleUnitBase:GetCurrentHeroObjectId();
    end
    battleBuffCastTemplate.castUnitId = _battleUnitBase:GetNetId();
    battleBuffCastTemplate.castSkillId = _castSkillId;
    battleBuffCastTemplate.upPercent = upPercent;
    if _stackNum then
        battleBuffCastTemplate.stackNum = _stackNum;
    end

    ---@type BattleUnitCom_Camp
    local _campCom = _battleUnitBase:GetComponent(BattleUnitComponentType.Camp)
    battleBuffCastTemplate.castCamp = _campCom:GetFirstCamp();

    return battleBuffCastTemplate;
end

---@private
---@param _battleRoom BattleRoom 战斗房间
---@param _battleUnitCampType number 单位类型
---@param _level number 等级
---@param _buffInstanceId number 配置id
---@param _default number 默认值
function BattleBuffService:GetParamConfig(_battleRoom, _battleUnitCampType,_level, _buffInstanceId, _default)
    ---@type ElementValue
    local _eleMentValueXls = _battleRoom.inputDataSource:GetElementValueComplexData(_buffInstanceId, _level)
    if not _eleMentValueXls then return _default end
    if _battleUnitCampType == BattleUnitCampType.Player then
        return _eleMentValueXls.value
    else
        return _eleMentValueXls.monsterValue
    end
end

---生成战斗buff
---@public
---@param _battleBuffCastTemplate BattleBuffCastTemplate 战斗buff
---@param _battleObjectBase BattleObjectBase 战斗物体
---@return BattleBuff 战斗buff
function BattleBuffService:GenerateBattleBuff(_battleBuffCastTemplate,_battleObjectBase)
    local battleRoom = _battleObjectBase:GetBattleRoom()

    ---@type BattleBuff
    local battleBuff = BattleBuff.New();
    battleBuff.instId = battleRoom.idCreator:GetAndIncreaseBuffInstId();
    battleBuff.buffGroupId = _battleBuffCastTemplate.buffGroupId;
    battleBuff.castObjId = _battleBuffCastTemplate.castObjId;
    battleBuff.castUnitId = _battleBuffCastTemplate.castUnitId;
    battleBuff.castSkillId = _battleBuffCastTemplate.castSkillId;
    battleBuff.customParam = _battleBuffCastTemplate.customParam;
    battleBuff.generateStackInfo = _battleBuffCastTemplate.generateStackInfo
    battleBuff.bodyPartId = _battleBuffCastTemplate.bodyPartId or 0;
    battleBuff.stackNum = _battleBuffCastTemplate.stackNum;
    battleBuff.upPercent = _battleBuffCastTemplate.upPercent;
    ---@type BuffGroup
    local addBuffGroup = battleRoom.inputDataSource:GetDict("BuffGroup",_battleBuffCastTemplate.buffGroupId);
    for i, v in pairs(addBuffGroup.buffInstanceId) do
        ---@type BuffAndActionInstance
        local buffAndActionInstance = battleRoom.inputDataSource:GetDict("BuffAndActionInstance",v);
        ---@type BuffAndActionTemplate
        local buffAndActionTemplate = battleRoom.inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);
        battleBuff.buffEffects[v] = BATTLE_BUFF_EFFECT[buffAndActionTemplate.metaType].New(v);

        local effectCastParam = nil;
        if _battleBuffCastTemplate.castParam then
            effectCastParam = _battleBuffCastTemplate.castParam;
            if _battleBuffCastTemplate.castParam[v] then
                effectCastParam = _battleBuffCastTemplate.castParam[v];
            end
        end
        local customCastParam = nil;
        if _battleBuffCastTemplate.customParam and _battleBuffCastTemplate.customParam[v] then
            customCastParam = _battleBuffCastTemplate.customParam[v];
        end

        battleBuff.buffEffects[v].castParam = effectCastParam;
        battleBuff.buffEffects[v].customParam = customCastParam;
    end
    return battleBuff;
end

---生成战斗buff
---@public
---@param _battleBuffCastTemplate BattleBuffCastTemplate 战斗buff
---@param _battleUnitBase BattleUnitBase 战斗物体
---@return BattleBuff 战斗buff
function BattleBuffService:GenerateUnitBattleBuff(_battleBuffCastTemplate,_battleUnitBase)
    local battleRoom = _battleUnitBase:GetBattleRoom();

    ---@type BattleBuff
    local battleBuff = BattleBuff.New();
    battleBuff.instId = battleRoom.idCreator:GetAndIncreaseBuffInstId();
    battleBuff.buffGroupId = _battleBuffCastTemplate.buffGroupId;
    battleBuff.castObjId = _battleBuffCastTemplate.castObjId;
    battleBuff.castUnitId = _battleBuffCastTemplate.castUnitId;
    battleBuff.castSkillId = _battleBuffCastTemplate.castSkillId;
    battleBuff.generateStackInfo = _battleBuffCastTemplate.generateStackInfo
    battleBuff.bodyPartId = _battleBuffCastTemplate.bodyPartId;
    battleBuff.stackNum = _battleBuffCastTemplate.stackNum;
    battleBuff.upPercent = _battleBuffCastTemplate.upPercent;
    ---@type BuffGroup
    local addBuffGroup = battleRoom.inputDataSource:GetDict("BuffGroup",_battleBuffCastTemplate.buffGroupId);
    for i, v in pairs(addBuffGroup.buffInstanceId) do
        ---@type BuffAndActionInstance
        local buffAndActionInstance = battleRoom.inputDataSource:GetDict("BuffAndActionInstance",v);
        ---@type BuffAndActionTemplate
        local buffAndActionTemplate = battleRoom.inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);
        battleBuff.buffEffects[v] = BATTLE_BUFF_EFFECT[buffAndActionTemplate.metaType].New(v);

        local effectCastParam = nil;
        if _battleBuffCastTemplate.unitCastParam then
            effectCastParam = _battleBuffCastTemplate.unitCastParam;
            if _battleBuffCastTemplate.unitCastParam[v] then
                effectCastParam = _battleBuffCastTemplate.unitCastParam[v];
            end
        end
        local customCastParam = nil;
        if _battleBuffCastTemplate.unitCustomParam then
            customCastParam = _battleBuffCastTemplate.unitCustomParam;
            if _battleBuffCastTemplate.unitCustomParam[v] then
                customCastParam = _battleBuffCastTemplate.unitCustomParam[v];
            end
        end
        battleBuff.buffEffects[v].castParam = effectCastParam;
        battleBuff.buffEffects[v].customParam = customCastParam;
    end
    return battleBuff;
end

---@public
---检测是否可添加buff
---@param _battleBuffCastTemplate BattleBuffCastTemplate
---@param _battleObjectBase BattleObjectBase 要添加buff的目标OBJ
---@return boolean 是否可添加buff
function BattleBuffService:CheckAttachBuff(_battleBuffCastTemplate,_battleObjectBase)
    ---@type BattleUnitCom_Camp
    local _campCom = _battleObjectBase:GetParentUnit():GetComponent(BattleUnitComponentType.Camp)

    local inputDataSource = _battleObjectBase:GetBattleRoom().inputDataSource
    ---@type BuffGroup
    local addBuffGroup = inputDataSource:GetDict("BuffGroup", _battleBuffCastTemplate.buffGroupId)

    local check = false;
    for _, v in pairs(addBuffGroup.control) do
        
        if LogTools.BuffLog and CheckLogLevel(LogLevel.log) then
            LogTools.LogByLevel(LogLevel.log, "BattleBuffService", "CheckAttachBuff", "buffGroupId", _battleBuffCastTemplate.buffGroupId, "buffCroupControl", LogTools.GetEnumTableDesc(BATTLE_BUFF_TARGET, v))    
        end
        
		if v == BATTLE_BUFF_TARGET.TARGET_HIT then
			check = true;
		elseif v == BATTLE_BUFF_TARGET.TARGET_SELF then --我方场上
            if _battleObjectBase:GetParentUnit():GetNetId() == _battleBuffCastTemplate.castUnitId and 
               _battleObjectBase:GetParentUnit():GetCurrentHeroObjectId() == _battleObjectBase:GetObjectId() then
                check = true;
            end
        elseif v == BATTLE_BUFF_TARGET.TARGET_SELF_TEAM then --我方场下
            if _battleObjectBase:GetParentUnit():GetNetId() == _battleBuffCastTemplate.castUnitId and
               _battleObjectBase:GetParentUnit():GetCurrentHeroObjectId() ~= _battleObjectBase:GetObjectId() then
                check = true;
            end
        elseif v == BATTLE_BUFF_TARGET.TARGET_SELF_SUMMON then --我方召唤物
            if _battleObjectBase:CheckObjectType(BattleObjectType.SummonedMons) and
               _battleObjectBase:GetParentUnit():GetNetId() == _battleBuffCastTemplate.castUnitId then
                check = true;
            end
        elseif v == BATTLE_BUFF_TARGET.TARGET_OPPONENT_SUMMON then --敌方召唤物
            if _battleObjectBase:CheckObjectType(BattleObjectType.SummonedMons) and
               _campCom.CheckCampHurtable(_campCom:GetFirstCamp(),_battleBuffCastTemplate.castCamp) then
                check = true;
            end
        elseif v == BATTLE_BUFF_TARGET.TARGET_OPPONENT then --敌方场上
            if _campCom.CheckCampHurtable(_campCom:GetFirstCamp(),_battleBuffCastTemplate.castCamp) and
               _battleObjectBase:GetParentUnit():GetCurrentHeroObjectId() == _battleObjectBase:GetObjectId() then
                check = true;
            end
        elseif v == BATTLE_BUFF_TARGET.TARGET_OPPONENT_TEAM then --敌方场下
            if _campCom.CheckCampHurtable(_campCom:GetFirstCamp(),_battleBuffCastTemplate.castCamp) and
               _battleObjectBase:GetParentUnit():GetCurrentHeroObjectId() ~= _battleObjectBase:GetObjectId() then
                check = true;
            end
        elseif v == BATTLE_BUFF_TARGET.TARGET_MATE then --友方场上
            if _campCom:GetFirstCamp() == _battleBuffCastTemplate.castCamp and
               _battleObjectBase:GetParentUnit():GetNetId() ~= _battleBuffCastTemplate.castUnitId and
               _battleObjectBase:GetParentUnit():GetCurrentHeroObjectId() == _battleObjectBase:GetObjectId() then
                check = true;
            end
        elseif v == BATTLE_BUFF_TARGET.TARGET_MATE_TEAM then --友方场下
            if _campCom:GetFirstCamp() == _battleBuffCastTemplate.castCamp and
               _battleObjectBase:GetParentUnit():GetNetId() ~= _battleBuffCastTemplate.castUnitId and
               _battleObjectBase:GetParentUnit():GetCurrentHeroObjectId() ~= _battleObjectBase:GetObjectId() then
                check = true;
            end
        elseif v == BATTLE_BUFF_TARGET.TARGET_UNIT then --战斗unit
            if _campCom:GetFirstCamp() == _battleBuffCastTemplate.castCamp and
                    _battleObjectBase:GetParentUnit():GetNetId() == _battleBuffCastTemplate.castUnitId then
                check = true;
            end
        end
    end
    if check then
        return self:CheckAttachBuffClassifyControl(addBuffGroup.classifyControl,_battleObjectBase);
    end
    return false;
end

---@private
---检测是否可添加buff
---@param _classifyControl number[]
---@param _battleObjectBase BattleObjectBase
---@return boolean 是否可添加buff
function BattleBuffService:CheckAttachBuffClassifyControl(_classifyControl,_battleObjectBase)
    if _battleObjectBase:GetParentUnit():GetUnitType() == BattleUnitType.Monster then
        if _classifyControl == nil then
            return true
        end
        ---@type MonsterInstance
        local monsterInstance = _battleObjectBase:GetInstanceXls();
        for _, v in pairs(_classifyControl) do
            if v == monsterInstance.classify then
                return true;
            end
        end
        return false;
    else
        return true;
    end
    return false;
end

---伤害类BUFF和区域BUFF需要外部传入伤害系数
---封个同一接口，免得到处写
---@public
---@param _battleRoom BattleRoom
---@param _buffGroupId number
---@return table
function BattleBuffService.CheckHurtParamFixCustomParam(_battleRoom, _buffGroupId)
    --LogTools.LogByLevel(LogLevel.log, "BattleBuffService.GetHurtParamFixCustomParam", "_battleRoom", _battleRoom, "_buffGroupId", _buffGroupId, "_fixHurtParam", _fixHurtParam)
    --local _ret = false
    --local _param = {}
    local _buffGroup = _battleRoom.inputDataSource:GetDict("BuffGroup", _buffGroupId)
    for _, _buffInsId in pairs(_buffGroup.buffInstanceId) do
        ---@type BuffAndActionInstance
        local _buffAndActionInstance = _battleRoom.inputDataSource:GetDict("BuffAndActionInstance", _buffInsId)
        if _buffAndActionInstance then
            ---@type BuffAndActionTemplate
            local _buffAndActionTemplate = _battleRoom.inputDataSource:GetDict("BuffAndActionTemplate", _buffAndActionInstance.templateId)
            if _buffAndActionTemplate then
                local _buffEffect = BATTLE_BUFF_EFFECT[_buffAndActionTemplate.metaType]
                --LogTools.LogByLevel(LogLevel.log, "BattleBuffService.GetHurtParamFixCustomParam", " _buffAndActionTemplate", _buffAndActionTemplate.id, "_buffAndActionTemplate.metaType", _buffAndActionTemplate.metaType, "_buffEffect.hurtBuff", _buffEffect.hurtBuff)
                if _buffEffect and (_buffEffect.hurtBuff or _buffEffect:GetId() == 34) then
                    -- 伤害类buff传递伤害参数(创建区域的BUFF也传递)
                    --_param[_buffInsId] = {_fixHurtParam, _originalHurt}
                    --_ret = true

                    return true
                end
            end
        end
    end

    return false

    --LogTools.LogByLevel(LogLevel.log, "BattleBuffService.GetHurtParamFixCustomParam", "_ret", _ret)
    --if _ret then
    --    --LogTools.LogByLevel(LogLevel.log, "BattleBuffService.GetHurtParamFixCustomParam", "_param", dumpTableEx(_param))
    --    return _param
    --end
    ----LogTools.LogByLevel(LogLevel.log, "BattleBuffService.GetHurtParamFixCustomParam", " return nil")
    --return nil
end

return BattleBuffService;
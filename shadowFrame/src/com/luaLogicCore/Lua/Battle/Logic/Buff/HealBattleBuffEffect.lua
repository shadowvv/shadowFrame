---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/3/28 23:36

require "Lib/class"
require "Battle/Logic/Buff/BattleBuffEffect"

---@class HealBattleBuffEffect : BattleBuffEffect
---@field buffInstanceId number 配置Id
---@field castParam table 最终目标参数
---@field customParam table 自定义参数
---@field nextTriggerTime number 下次触发时间
---@field triggerCount number 触发次数
HealBattleBuffEffect = class(BattleBuffEffect, 'HealBattleBuffEffect');

function HealBattleBuffEffect:ctor(_buffInstanceId)

    self.buffInstanceId = _buffInstanceId;
    self.castParam = nil;
    self.customParam = nil;
    self.nextTriggerTime = 0;
    self.triggerCount = 0;

end

---触发buff
---@public
---@param _battleObject BattleObjectBase 战斗物体
---@param _battleBuff BattleBuff buff实体
---@param _stackNum number 堆叠数量
---@param _isUnitChangeLeader boolean 是否为玩家buff换人操作
function HealBattleBuffEffect:Trigger(_battleObject, _battleBuff, _stackNum,_isUnitChangeLeader)
    if not _isUnitChangeLeader then
        self.triggerCount = self.triggerCount + 1;
    end
    local battleRoom = _battleObject:GetBattleRoom()
    ---@type BuffAndActionInstance
    local buffAndActionInstance = battleRoom.inputDataSource:GetDict("BuffAndActionInstance", self.buffInstanceId);
    ---@type BuffAndActionTemplate
    local buffAndActionTemplate  = battleRoom.inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);
    local currentCastParam = self:GetCastParam(_battleObject);
    ---@type SnapShotData
    local _snapShotData = self:GetCustomParam(_battleObject);
    _snapShotData:SetSourceId(_battleBuff.buffGroupId)
    _snapShotData:SetOriginalHeroSkillId(_battleBuff.castSkillId, _battleBuff.generateStackInfo)
    _snapShotData:SetCureValue(currentCastParam*(1+_battleBuff.upPercent[buffAndActionTemplate.metaType]))
    _snapShotData:SetEleSpreadHurtFix(_battleBuff:GetEleBallSpreadHurtFix())
    if buffAndActionInstance then
        _snapShotData:SetCanTriggerElementReact(buffAndActionInstance.elementtrigger == 1)
    end
    battleRoom.hurtManager:OnBuffCure(_snapShotData, _battleObject, _stackNum)
    battleRoom.battleLogicEventService:OnTriggerHealEvent(_battleObject:GetParentUnit():GetNetId(),_battleObject:GetObjectId(),_battleBuff.castUnitId,_battleBuff.castObjId,_battleBuff.castSkillId);
end

---释放buff
---@public
---@param _battleObject BattleObjectBase 战斗物体
---@param _battleBuff BattleBuff buff实体
---@param _stackNum number 堆叠数量
function HealBattleBuffEffect:Release(_battleObject, _battleBuff, _stackNum)

end

---@public
---@return number buff类型Id
function HealBattleBuffEffect:GetId()
    return 5;
end

---生成施法者自定义参数
---@public
---@param _battleObjectBase BattleObjectBase 释放buff的单位
---@param _buffInstanceId number BuffAndActionInstance表id
---@param _param table 自定义参数
---@return table
function HealBattleBuffEffect:GenerateCostCustomParam(_battleObjectBase,_buffInstanceId,_param)
    local _unit = _battleObjectBase:GetParentUnit()
    if _unit then
        local battleRoom = _unit:GetBattleRoom()
        return battleRoom.hurtManager:CreateSnapShot(_battleObjectBase:GetObjectId(), 2)
    end
    return nil;
end

return HealBattleBuffEffect;
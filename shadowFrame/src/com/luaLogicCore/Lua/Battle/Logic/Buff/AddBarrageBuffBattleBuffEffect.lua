---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/7/15 18:20

require "Lib/class"
require "Battle/Logic/Buff/BattleBuffEffect"

---@class AddBarrageBuffBattleBuffEffect : BattleBuffEffect
---@field buffInstanceId number 配置Id
---@field castParam table 施法者参数
---@field customParam table 自定义参数
---@field nextTriggerTime number 下次触发时间
---@field triggerCount number 触发次数
---@field castObjId number 施法者objId
---@field castUnitId number 施法者unitId
AddBarrageBuffBattleBuffEffect = class(BattleBuffEffect, 'AddBarrageBuffBattleBuffEffect');

function AddBarrageBuffBattleBuffEffect:ctor(_buffInstanceId)

    self.buffInstanceId = _buffInstanceId;
    self.castParam = nil;
    self.customParam = nil;
    self.nextTriggerTime = 0;
    self.triggerCount = 0;

end

---触发buff
---@public
---@param _battleObject BattleObjectBase 战斗物体
---@param _battleBuff BattleBuff buff实体
---@param _stackNum number 堆叠数量
---@param _isUnitChangeLeader boolean 是否为玩家buff换人操作
function AddBarrageBuffBattleBuffEffect:Trigger(_battleObject, _battleBuff, _stackNum,_isUnitChangeLeader)

    if not _isUnitChangeLeader then
        self.triggerCount = self.triggerCount + 1;
    end

    ---@type BuffAndActionInstance
    local buffAndActionInstance = _battleObject:GetBattleRoom().inputDataSource:GetDict("BuffAndActionInstance",self.buffInstanceId);
    ---@type BuffAndActionTemplate
    local buffAndActionTemplate = _battleObject:GetBattleRoom().inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);
    local buffId = math.modf(buffAndActionTemplate.behindParam[4]);
    local skillId = 0;
    if buffAndActionTemplate.behindParam[5] then
        skillId = math.modf(buffAndActionTemplate.behindParam[5]);
    end
    local skillType = 0;
    if buffAndActionTemplate.behindParam[6] then
        skillType = math.modf(buffAndActionTemplate.behindParam[6]);
    end
    local barrageType = 0;
    if buffAndActionTemplate.behindParam[7] then
        barrageType = math.modf(buffAndActionTemplate.behindParam[7]);
    end
    ---@type BattleObjCom_Buff
    local buffComp = _battleObject:GetComponent(BattleObjectComponentType.Buff);
    if buffComp then
        buffComp:AddBarrageBattleBuff(skillId,skillType,barrageType,buffId);
    end
end

---释放buff
---@public
---@param _battleObject BattleObjectBase 战斗物体
---@param _battleBuff BattleBuff buff实体
---@param _stackNum number 堆叠数量
function AddBarrageBuffBattleBuffEffect:Release(_battleObject, _battleBuff, _stackNum)

end

---@public
---@return number buff类型Id
function AddBarrageBuffBattleBuffEffect:GetId()
    return 40;
end

---生成施法者自定义参数
---@public
---@param _battleObjectBase BattleObjectBase 释放buff的单位
---@param _buffInstanceId number BuffAndActionInstance表id
---@param _param table 自定义参数
---@return table 施法者参数
function AddBarrageBuffBattleBuffEffect:GenerateCostCustomParam(_battleObjectBase,_buffInstanceId,_param)
    return _param;
end

return AddBarrageBuffBattleBuffEffect;
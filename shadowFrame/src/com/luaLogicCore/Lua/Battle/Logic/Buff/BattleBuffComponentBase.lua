---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2023/5/25 16:08

require "Lib/class"
require "Battle/Logic/Buff/BattleBuff"
require "Battle/Logic/Buff/BattleBuffService"
require "Battle/Logic/Buff/BattleBuffCastTemplate"
require "Battle/Logic/Buff/BattleBuffBasicTemplate"

---@class BattleBuffComponentBase : table
---@field buffList BattleBuff[]
BattleBuffComponentBase = class(nil, 'BattleBuffComponentBase');

function BattleBuffComponentBase:ctor()
    self.buffList = {};
    self.barrageBuffList = {};
    self.areaBuffList = {};
    self.buffTimeList = {};
    self.buffTimeTypeList = {};
    self.barrageShootCountBuff = {};
    self.buffUpTalentSkillPercent ={};
    self.buffTypeUpPercentByTalentSkill = {};
    self.buffIdUpPercentByTalentSkill = {};
    self.buffChangeLeaderByTalentSkill = {};
    self.buffTempParam = {};
    self.buffInstanceParam = {};
    self.buffStackNum = {};
end

---@public
---@param _battleRoom BattleRoom
function BattleBuffComponentBase:Init(_battleRoom)
    self.battleRoom = _battleRoom;
end

---@public
---@param _talentSourceType number 被动来源
---@param _upPercent number 提升
function BattleBuffComponentBase:SetTalentSkillUpPercent(_talentSourceType,_upPercent)
    if not self.buffUpTalentSkillPercent[_talentSourceType] then
        self.buffUpTalentSkillPercent[_talentSourceType] = 0;
    end
    self.buffUpTalentSkillPercent[_talentSourceType] = self.buffUpTalentSkillPercent[_talentSourceType] + _upPercent;
end

---@public
---@param _talentSourceType number 被动来源
---@return number 提升
function BattleBuffComponentBase:GetTalentSkillUpPercent(_talentSourceType)
    local upPercent = 0;
    if self.buffUpTalentSkillPercent[_talentSourceType] then
        upPercent = self.buffUpTalentSkillPercent[_talentSourceType];
    end
    return upPercent;
end

---@public
---@param _skillId number 技能Id
---@param _skillType number 技能类型
---@param _barrageType number 弹幕类型
---@param _buffGroupId number 增加的buff
function BattleBuffComponentBase:AddBarrageBattleBuff(_skillId,_skillType,_barrageType,_buffGroupId)
    if not self.barrageBuffList[_skillId] then
        self.barrageBuffList[_skillId] = {};
    end
    if not self.barrageBuffList[_skillId][_skillType] then
        self.barrageBuffList[_skillId][_skillType] = {};
    end
    if not self.barrageBuffList[_skillId][_skillType][_barrageType] then
        self.barrageBuffList[_skillId][_skillType][_barrageType] = {};
    end
    table.insert(self.barrageBuffList[_skillId][_skillType][_barrageType],_buffGroupId);
end

---@public
---@param _skillId number 技能Id
---@param _skillType number 技能类型
---@param _barrageType number 弹幕类型
function BattleBuffComponentBase:GetBarrageBattleBuff(_skillId,_skillType,_barrageType)
    local buffIds = {};
    local skillIds = {0};
    if _skillId ~= 0 then
        table.insert(skillIds,_skillId);
    end
    for i, skillId in pairs(skillIds) do
        if self.barrageBuffList[skillId] then
            local skillTypes = {0};
            if _skillType ~= 0 then
                table.insert(skillTypes,_skillType);
            end
            for i, type in pairs(skillTypes) do
                if self.barrageBuffList[skillId][type] then
                    local barrageType = {0};
                    if _barrageType ~= 0 then
                        table.insert(barrageType,_barrageType);
                    end
                    for i, barrage in pairs(barrageType) do
                        if self.barrageBuffList[skillId][type][barrage] then
                            for i, buffId in pairs(self.barrageBuffList[skillId][type][barrage]) do
                                table.insert(buffIds,buffId);
                            end
                        end
                    end
                end
            end
        end
    end
    return buffIds;
end

---@public
---@param _skillId number 技能Id
---@param _buffGroupId number 移除的buffId
function BattleBuffComponentBase:RemoveBarrageBattleBuff(_skillId,_buffGroupId)
    if not self.barrageBuffList[_skillId] then
        return;
    end
    for i, v in pairs(self.barrageBuffList[_skillId]) do
        if v == _buffGroupId then
            self.barrageBuffList[_skillId][i] = nil;
            return;
        end
    end
end

---@public
---@param _buffInstId number buff实例id
---@param _buffGroupId number 增加的buff
---@param _count number 次数
function BattleBuffComponentBase:AddBarrageShootCountBattleBuff(_buffInstId,_buffGroupId,_count)
    if not self.barrageShootCountBuff[_buffGroupId] then
        self.barrageShootCountBuff[_buffGroupId] = {};
    end
    if not self.barrageShootCountBuff[_buffGroupId][_buffInstId] then
        self.barrageShootCountBuff[_buffGroupId][_buffInstId] = 0;
    end
    self.barrageShootCountBuff[_buffGroupId][_buffInstId] = self.barrageShootCountBuff[_buffGroupId][_buffInstId] + _count;
end

---@public
---@param _buffInstId number buff实例id
---@param _buffGroupId number 移除的buffId
---@param _count number 次数
function BattleBuffComponentBase:RemoveBarrageShootCountBattleBuff(_buffInstId,_buffGroupId,_count)
    if not self.barrageShootCountBuff[_buffGroupId] then
        return;
    end
    if not _buffInstId then
        for i, v in pairs(self.barrageShootCountBuff[_buffGroupId]) do
            self:RemoveBarrageShootCountBattleBuff(i,_buffGroupId,_count);
        end
        return;
    end
    if not self.barrageShootCountBuff[_buffGroupId][_buffInstId] then
        return;
    end
    if not _count then
        self.barrageShootCountBuff[_buffGroupId][_buffInstId] = nil;
        local num = 0;
        for i, v in pairs(self.barrageShootCountBuff[_buffGroupId]) do
            num = num + 1;
        end
        if num == 0 then
            self.barrageShootCountBuff[_buffGroupId] = nil;
        end
        local buff = self.buffList[_buffInstId];
        if buff then
            buff.endTime = TimeUtils.battleNow(self.battleRoom:GetBattleId());
        end
        return;
    end
    local temp = self.barrageShootCountBuff[_buffGroupId][_buffInstId] - _count;
    if temp <= 0 then
        self.barrageShootCountBuff[_buffGroupId][_buffInstId] = nil;
        local num = 0;
        for i, v in pairs(self.barrageShootCountBuff[_buffGroupId]) do
            num = num + 1;
        end
        if num == 0 then
            self.barrageShootCountBuff[_buffGroupId] = nil;
        end
        local buff = self.buffList[_buffInstId];
        if buff then
            buff.endTime = TimeUtils.battleNow(self.battleRoom:GetBattleId());
        end
    else
        self.barrageShootCountBuff[_buffGroupId][_buffInstId] = temp;
    end
end

---@public
---@param _areaId number 区域Id
---@param _buffGroupId number 增加的buff
function BattleBuffComponentBase:AddAreaBattleBuff(_areaId,_buffGroupId,_upPercent)
    if not self.areaBuffList[_areaId] then
        self.areaBuffList[_areaId] = {};
    end
    ---@type BattleBuffBasicTemplate
    local basicInfo = BattleBuffBasicTemplate:New();
    basicInfo.buffGroupId = _buffGroupId;
    basicInfo.upPercent = _upPercent;
    table.insert(self.areaBuffList[_areaId],basicInfo);
end

---@public
---@param _areaId number 区域Id
---@param _buffGroupId number 移除的buffId
function BattleBuffComponentBase:RemoveAreaBattleBuff(_areaId,_buffGroupId)
    if not self.areaBuffList[_areaId] then
        return;
    end
    for i, v in pairs(self.areaBuffList[_areaId]) do
        if v.buffGroupId == _buffGroupId then
            self.areaBuffList[_areaId][i] = nil;
            return;
        end
    end
end

---@public
---@param _buffGroupId number 更改buff持续时间buffId
function BattleBuffComponentBase:AddBattleBuffExtraTime(_buffGroupId,_buffType,_deltaTime)
    if _buffType and _buffType ~= 0 then
        if not self.buffTimeTypeList[_buffType] then
            self.buffTimeTypeList[_buffType] = 0;
        end
        self.buffTimeTypeList[_buffType] = self.buffTimeTypeList[_buffType] + _deltaTime;
        return;
    end
    if _buffGroupId and _buffGroupId ~= 0 then
        if not self.buffTimeList[_buffGroupId] then
            self.buffTimeList[_buffGroupId] = 0;
        end
        self.buffTimeList[_buffGroupId] = self.buffTimeList[_buffGroupId] + _deltaTime;
    end
end

---@public
---@param _buffGroupId number 更改buff持续时间buffId
function BattleBuffComponentBase:GetBattleBuffExtraTime(_buffGroupId,_buffType)
    local time = 0;
    if _buffType and self.buffTimeTypeList[_buffType] then
        time = time + self.buffTimeTypeList[_buffType];
    end
    if _buffGroupId and self.buffTimeList[_buffGroupId] then
        time = time + self.buffTimeList[_buffGroupId];
    end
    return time;
end

---@public
---@param _buffGroupId number 更改buff持续时间buffId
function BattleBuffComponentBase:AddBattleUpPercent(_battleObject,_buffGroupId,_buffType,_buffTemplateId,_upPercent)
    if not _buffTemplateId then
        _buffTemplateId = 0;
    end
    if _buffType and _buffType ~= 0 then
        if not self.buffTypeUpPercentByTalentSkill[_buffType] then
            self.buffTypeUpPercentByTalentSkill[_buffType] = {};
            self.buffTypeUpPercentByTalentSkill[_buffType][_buffTemplateId] = 0;
        end
        self.buffTypeUpPercentByTalentSkill[_buffType][_buffTemplateId] = self.buffTypeUpPercentByTalentSkill[_buffType][_buffTemplateId] + _upPercent;
        self:ReTriggerBuff(_battleObject,nil,_buffType,_buffTemplateId);
        return;
    end
    if _buffGroupId and _buffGroupId ~= 0 then
        if not self.buffIdUpPercentByTalentSkill[_buffGroupId] then
            self.buffIdUpPercentByTalentSkill[_buffGroupId] = {};
            self.buffIdUpPercentByTalentSkill[_buffGroupId][_buffTemplateId] = 0;
        end
        self.buffIdUpPercentByTalentSkill[_buffGroupId][_buffTemplateId] = self.buffIdUpPercentByTalentSkill[_buffGroupId][_buffTemplateId] + _upPercent;
        self:ReTriggerBuff(_battleObject,_buffGroupId,nil,_buffTemplateId);
        return;
    end
end

---@public
---@param _buffTemplateId number
---@param _index number
---@param _param number
function BattleBuffComponentBase:ChangeBuffTempParam(_buffTemplateId,_index,_param)
    if not self.battleRoom then return end
    BattleBuffService.ChangeBuffTemplateParam(self.battleRoom.battleId, _buffTemplateId,_index,_param)
end

---@public
---@param _buffTemplateId number
---@param _index number
---@param _param number
function BattleBuffComponentBase:GetBuffTempParam(_buffTemplateId,_index,_param)
    if not self.battleRoom then return _param end
    return BattleBuffService.GetBuffTemplateParam(self.battleRoom.battleId, _buffTemplateId,_index,_param)
end

---@public
---@param _buffInstanceId number
---@param _index number
---@param _param number
function BattleBuffComponentBase:ChangeBuffInstanceParam(_buffInstanceId,_index,_param)
    if not self.battleRoom then return end
    BattleBuffService.ChangeBuffInstanceParam(self.battleRoom.battleId, _buffInstanceId,_index,_param)
end

---@public
---@param _buffInstanceId number
---@param _index number
---@param _param number
function BattleBuffComponentBase:GetBuffInstanceParam(_buffInstanceId,_index,_param)
    if not self.battleRoom then return _param end
    return BattleBuffService.GetBuffInstanceParam(self.battleRoom.battleId, _buffInstanceId,_index,_param)
end

---@public
---@param _buffGroupId number
---@param _param number
function BattleBuffComponentBase:ChangeBuffStackNum(_buffGroupId,_param)
    if not self.battleRoom then return end
    BattleBuffService.ChangeBuffStackNumLimit(self.battleRoom.battleId, _buffGroupId,_param)
end

---@public
---@param _buffGroupId number
---@param _param number
function BattleBuffComponentBase:GetBuffStackNum(_buffGroupId,_param)
    if not self.battleRoom then return _param end
    return BattleBuffService.GetBuffStackNumLimit(self.battleRoom.battleId, _buffGroupId,_param)
end

---@public
---@param _buffGroupId number buffId
---@param _buffType number buff类型
function BattleBuffComponentBase:ReTriggerBuff(_battleObject,_buffGroupId,_buffType)
    local triggerList = {};
    for i, v in pairs(self.buffList) do
        ---@type BuffGroup
        local buffGroup = self.battleRoom.inputDataSource:GetDict("BuffGroup",v.buffGroupId);
        if buffGroup ~= nil then
            if buffGroup.buffType == _buffType or v.buffGroupId == _buffGroupId then
                for i, effect in pairs(v.buffEffects) do
                    v.upPercent[effect:GetId()] = self:GetBattleUpPercent(_buffGroupId,_buffType,effect:GetId());
                    if effect.triggerCount > 0 then
                        v.isReset = false;
                        effect:Release(_battleObject,v,v.stackNum,false);
                        effect:Trigger(_battleObject,v,v.stackNum);
                        if LogTools.BuffLog and CheckLogLevel(LogLevel.log) then
                            LogTools.LogByLevel(LogLevel.log,"触发buff",v.buffGroupId);
                        end
                        table.insert(triggerList,effect.buffInstanceId);
                    end
                end
            end
        end
    end

    if #triggerList >= 1 then
        self:PushTriggerMessage(_battleObject:GetParentUnit():GetNetId(),_battleObject:GetObjectId(),triggerList);
    end
end

---@public
---@param _buffGroupId number 更改buff持续时间buffId
function BattleBuffComponentBase:GetBattleUpPercent(_buffGroupId,_buffType,_buffTemplateId)
    local upPercent = 0;
    if _buffType then
        if self.buffTypeUpPercentByTalentSkill[_buffType] then
            if self.buffTypeUpPercentByTalentSkill[_buffType][0] then
                upPercent = upPercent + self.buffTypeUpPercentByTalentSkill[_buffType][0];
            end
            if self.buffTypeUpPercentByTalentSkill[_buffType][_buffTemplateId] then
                upPercent = upPercent + self.buffTypeUpPercentByTalentSkill[_buffType][_buffTemplateId];
            end
        end
    end
    if _buffGroupId then
        if self.buffIdUpPercentByTalentSkill[_buffGroupId] then
            if self.buffIdUpPercentByTalentSkill[_buffGroupId][0] then
                upPercent = upPercent + self.buffIdUpPercentByTalentSkill[_buffGroupId][0];
            end
            if self.buffIdUpPercentByTalentSkill[_buffGroupId][_buffTemplateId] then
                upPercent = upPercent + self.buffIdUpPercentByTalentSkill[_buffGroupId][_buffTemplateId];
            end
        end
    end
    return upPercent;
end


function BattleBuffComponentBase:TestBuff(_battleObject,_buffId)
    if not self:CheckBuffExist(_buffId) then
        self:AddBattleBuffById(_battleObject,_buffId, nil, nil,nil);
    end
end

---@public
---buff存在
---@param _buffId number buffId
---@param _stackNum number buff层数
---@param _buffType number buff类型
function BattleBuffComponentBase:CheckBuffExist(_buffId,_stackNum,_buffType)
    for i, v in pairs(self.buffList) do
        ---@type BuffGroup
        local buffGroup = self.battleRoom.inputDataSource:GetDict("BuffGroup",v.buffGroupId);
        if _buffType and _buffType ~= 0 and buffGroup.buffType == _buffType then
            return true;
        end
        if v.buffGroupId == _buffId then
            if _stackNum and v.stackNum < _stackNum then
                return false;
            end
            return true;
        end
    end
    return false;
end

---@public 获得buff
---@param _buffId number buffId
---@return BattleBuff
function BattleBuffComponentBase:GetBattleBuff(_buffId)
    for i, v in pairs(self.buffList) do
        if v.buffGroupId == _buffId then
            return v;
        end
    end
    return nil;
end

---@public
function BattleBuffComponentBase:__OnUpdate(_battleObject,_deltaTime,_buffGroupIdId,_isUnit)

    local now = TimeUtils.battleNow(self.battleRoom:GetBattleId());
    local removeList = {};
    local triggerList = {};
    for i, v in pairs(self.buffList) do
        ---@type BuffGroup
        local buffGroup = self.battleRoom.inputDataSource:GetDict("BuffGroup",v.buffGroupId);
        if buffGroup ~= nil then
            if not _buffGroupIdId or v.buffGroupId == _buffGroupIdId then
                if buffGroup.typeClean and buffGroup.typeClean[1] == BATTLE_BUFF_CLEAN_TYPE.CLEAN_TYPE_RELOAD and BattleLogicEventServiceV2:CheckChangeStateEvent(ReloadActionState:GetId(),false,_battleObject:GetParentUnit():GetNetId())  then
                    table.insert(removeList, v.instId);
                else
                    local triggerListTemp = self:__TriggerBuff(_battleObject,v, now)
                    for i, effectId in pairs(triggerListTemp) do
                        table.insert(triggerList, effectId);
                    end
                    if now >= v.endTime then
                        table.insert(removeList, v.instId);
                    end
                end
            end
        end
    end

    if #triggerList >= 1 then
        self:PushTriggerMessage(_battleObject:GetParentUnit():GetNetId(),_battleObject:GetObjectId(),triggerList);
    end

    if #removeList <= 0 then
        return;
    end

    if _isUnit then
        self:RemoveBuffByInstIdUnit(_battleObject,true,removeList);
    else
        self:RemoveBuffByInstId(_battleObject,true,removeList);
    end
end

function BattleBuffComponentBase:PushTriggerMessage(_netId,_objectId,_triggerList)
    local battleUnitChangeData = {};
    battleUnitChangeData.netId = _netId;
    battleUnitChangeData.objId = _objectId;
    battleUnitChangeData.buffTriggerInfo = _triggerList;

    self.battleRoom.outputDataSource:AddBattleUnitChangeData(battleUnitChangeData);
end

---@public
---改变当前buff持续时间
---@param _buffGroupId number buffId
---@param _buffType number buff类型
---@param _changeTime number 改变的时间
---@param _triggerInstIds number[]
function BattleBuffComponentBase:ChangeBuffCurrentTime(_battleObject,_buffGroupId,_buffType,_changeTime,_triggerInstIds)
    local triggerInstIds = {};
    local addBuffList= {};
    local removeList = {};
    for i, v in pairs(self.buffList) do
        if not _triggerInstIds[v.instId] then
            ---@type BuffGroup
            local buffGroup = self.battleRoom.inputDataSource:GetDict("BuffGroup",v.buffGroupId);
            if buffGroup then
                if v.buffGroupId == _buffGroupId or buffGroup.buffType == _buffType then
                    v.endTime = v.endTime + _changeTime*1000;
                    if TimeUtils.battleNow(self.battleRoom:GetBattleId()) <  v.endTime then
                        table.insert(addBuffList,v);
                        table.insert(triggerInstIds,v.instId);
                    else
                        table.insert(removeList,v.instId);
                    end
                end
            end
        end
    end

    for i, v in pairs(addBuffList) do
        self:PushBuffUpdate(_battleObject,v);
    end

    if #removeList > 0 then
        self:RemoveBuffByInstId(true,removeList);
    end

    return triggerInstIds;
end

---@public
---获得上阵添加buff列表
function BattleBuffComponentBase:GetBuffChangeLeader()
    return self.buffChangeLeaderByTalentSkill
end

---@public
---清空上阵添加buff列表
function BattleBuffComponentBase:ClearBuffChangeLeader()
    table.clear(self.buffChangeLeaderByTalentSkill)
end

---@public
---是否能进入上阵添加buff列表
---@param _buffId number buffId
function BattleBuffComponentBase:HasBuffChangeLeader(_buffId)
    for i,v in pairs(self.buffChangeLeaderByTalentSkill) do
        if v.buffGroupId == _buffId then
            return true
        end
    end
    return false
end

---@public
---进入上阵添加buff列表
---@param _buffId number buffId
function BattleBuffComponentBase:AddBuffChangeLeader(_battleBuffCastTemplate)
    table.insert(self.buffChangeLeaderByTalentSkill, _battleBuffCastTemplate)
end

---@public
---移除上阵添加buff列表
---@param _buffId number buffId
function BattleBuffComponentBase:RemoveBuffChangeLeader(_buffId)
    local pos = -1
    for i,v in pairs(self.buffChangeLeaderByTalentSkill) do
        if v.buffGroupId == _buffId then
            pos = i
        end
    end
    if pos > 0 then
        table.remove(self.buffChangeLeaderByTalentSkill, pos)
    end
end

---@param _battleBuff BattleBuff
---@param _now number
function BattleBuffComponentBase:__TriggerBuff(_battleObject,_battleBuff, _now)
    local canTrigger = false;
    ---@type BuffGroup
    local buffGroup = self.battleRoom.inputDataSource:GetDict("BuffGroup", _battleBuff.buffGroupId);
    if buffGroup and buffGroup.odds and buffGroup.odds ~= 0 then
        local rand = self.battleRoom.randomUtil:RandomInt(1,10000);
        if rand <= buffGroup.odds then
            canTrigger = true;
        end
    else
        canTrigger = true;
    end
    local triggerList = {};
    for i, effect in pairs(_battleBuff.buffEffects) do
        if effect.nextTriggerTime and _now >= effect.nextTriggerTime then
            ---@type BuffAndActionInstance
            local buffAndActionInstance = self.battleRoom.inputDataSource:GetDict("BuffAndActionInstance", effect.buffInstanceId);
            if self:GetBuffInstanceParam(effect.buffInstanceId,3,buffAndActionInstance.param[3]) == 0 then
                effect.nextTriggerTime = nil;
            else
                --print("BattleBuffComponentBase buff",buffAndActionInstance.param[5],self:GetBuffInstanceParam(effect.buffInstanceId,5,buffAndActionInstance.param[5]) * 1000);
                if effect.triggerCount >= self:GetBuffInstanceParam(effect.buffInstanceId,4,buffAndActionInstance.param[4]) - 1 then
                    effect.nextTriggerTime = nil;
                else
                    effect.nextTriggerTime = _now + self:GetBuffInstanceParam(effect.buffInstanceId,5,buffAndActionInstance.param[5]) * 1000;
                end
            end

            if canTrigger then
                _battleBuff.isReset = false;
                effect.triggerObjectId = _battleObject:GetObjectId();
                effect:Trigger(_battleObject, _battleBuff, _battleBuff.stackNum);
                effect.triggerObjectId = _battleObject:GetObjectId();

                ---@type BattleObjCom_Element_V2
                local elementComp = _battleObject:GetComponent(BattleObjectComponentType.Element);
                if elementComp and buffAndActionInstance.elementStrengthId > 0 then
                    ---@type boolean
                    local canTriggerReact = buffAndActionInstance.elementtrigger == 1
                    elementComp:AddElementStrength(buffAndActionInstance.elementStrengthId, _battleBuff.castUnitId, _battleBuff.castObjId, nil, canTriggerReact, _battleBuff.castSkillId, ElementSourceType.Buff, _battleBuff.buffGroupId);
                end

                if LogTools.BuffLog and CheckLogLevel(LogLevel.log) then
                    LogTools.LogByLevel(LogLevel.log,"触发buff",_battleBuff.buffGroupId);
                end
                table.insert(triggerList,effect.buffInstanceId);
            end
        end
    end
    return triggerList;
end

---战斗单位死亡
function BattleBuffComponentBase:OnObjectDead(_battleObject)
    for i, v in pairs(self.buffList) do
        ---@type BuffGroup
        local buffGroup = self.battleRoom.inputDataSource:GetDict("BuffGroup", v.buffGroupId);
        if buffGroup then
            local cantrigger = true;
            if buffGroup.odds and buffGroup.odds ~= 0 then
                local rand = self.battleRoom.randomUtil:RandomInt(1,10000);
                if rand > buffGroup.odds then
                    cantrigger = false;
                end
            end
            if cantrigger then
                for i, effect in pairs(v.buffEffects) do
                    ---@type BuffAndActionInstance
                    local buffAndActionInstance = self.battleRoom.inputDataSource:GetDict("BuffAndActionInstance", effect.buffInstanceId);

                    if effect.triggerCount < self:GetBuffInstanceParam(effect.buffInstanceId,4,buffAndActionInstance.param[4]) + 1 and buffAndActionInstance.triggerOnDestroy == 1 then
                        effect:Trigger(_battleObject, v, v.stackNum);
                        effect.triggerObjectId = _battleObject:GetObjectId();

                        ---@type BattleObjCom_Element_V2
                        local elementComp = _battleObject:GetComponent(BattleObjectComponentType.Element);
                        if elementComp and buffAndActionInstance.elementStrengthId > 0 then
                            ---@type boolean
                            local canTriggerReact = buffAndActionInstance.elementtrigger == 1
                            elementComp:AddElementStrength(buffAndActionInstance.elementStrengthId, v.castUnitId, v.castObjId, nil, canTriggerReact, v.castSkillId, ElementSourceType.Buff, v.buffGroupId);
                        end

                        if LogTools.BuffLog and CheckLogLevel(LogLevel.log) then
                            LogTools.LogByLevel(LogLevel.log,"触发buff",v.buffGroupId);
                        end
                    end
                end
            end
        end
    end
end

---战斗单位下阵
function BattleBuffComponentBase:OnObjectStandBy(_battleObject,_oldObjectId,_newObjectId)
    local removeList = {};
    ---@type BattleObjectBase
    local oldObject = _battleObject:GetParentUnit():GetHeroObject(_oldObjectId);
    if oldObject then
        for i, v in pairs(self.buffList) do
            ---@type BuffGroup
            local buffGroup = self.battleRoom.inputDataSource:GetDict("BuffGroup", v.buffGroupId);
            if buffGroup then
                if buffGroup.arrayClean == 1 then
                    table.insert(removeList,v.instId);
                end
            end
        end
    end
    if #removeList > 0 then
        self:RemoveBuffByInstId(_battleObject,false,removeList);
    end
end

---战斗单位消耗武器能量
---@param _objectId number 战斗物体Id
---@param _cost number 消耗
function BattleBuffComponentBase:OnUnitWeaponEnergyCost(_battleObject,_cost)
    local removeList = {};
    for i, v in pairs(self.buffList) do
        ---@type BuffGroup
        local buffGroup = self.battleRoom.inputDataSource:GetDict("BuffGroup",v.buffGroupId);
        if buffGroup.typeClean then
            if buffGroup.typeClean[1] == BATTLE_BUFF_CLEAN_TYPE.CLEAN_TYPE_ALL_WEAPON_COST then
                if not v.weaponCost then
                    v.weaponCost = 0;
                end
                v.weaponCost = v.weaponCost + _cost;
                if v.weaponCost >= buffGroup.typeClean[2] then
                    table.insert(removeList,v.buffGroupId);
                end
            end
        end
    end
    for i, v in pairs(removeList) do
        self:RemoveBuffByGroupId(_battleObject,v);
    end
end

---添加buff
---@public
---@param _buffId number 战斗buffId
---@param _castSkillId number 添加buff技能Id
---@param _customParam table 自定义参数
---@param _upPercent table 提高
function BattleBuffComponentBase:AddBattleBuffById(_battleObject,_buffId,_castSkillId,_customParam,_upPercent)
    self:AddBattleBuff(_battleObject,BattleBuffService:GenerateCastBuffTemplate(_buffId,_battleObject,_castSkillId,_customParam,_upPercent,1));
end

---@param _battleObject BattleObjectBase
---@param _battleBuff BattleBuff
---@param _changeStackNum number
function BattleBuffComponentBase:UpdateBattleBuffStack(_battleObject, _battleBuff, _changeStackNum)
    _battleBuff.stackNum = _battleBuff.stackNum + _changeStackNum;
    if _battleBuff.stackNum > _battleBuff.lastMaxStackNum then
        local _startStack = _battleBuff.lastMaxStackNum
        local _endStack = _battleBuff.stackNum
        _battleBuff.lastMaxStackNum = _battleBuff.stackNum
        self:__TriggerUpdateBattleBuffStackEvent(_battleObject, _battleBuff, _startStack, _endStack)
    end
end

---@param _battleObject BattleObjectBase
---@param _battleBuff BattleBuff
---@param _startStack number 改变前层数
---@param _endStack number 改变后层数
function BattleBuffComponentBase:__TriggerUpdateBattleBuffStackEvent(_battleObject, _battleBuff, _startStack, _endStack)
    if not _endStack then
        _endStack = _startStack
    end
    ---@type number
    local _netId = _battleObject:GetParentUnit():GetNetId()
    ---@type number
    local _objId = _battleObject:GetObjectId()
    self.battleRoom.battleLogicEventService:OnTriggerBuffStackChangeEvent(_netId, _objId, _battleBuff.buffGroupId, _battleBuff.castUnitId, _battleBuff.castObjId, _startStack, _endStack)
end

---添加buff
---@public
---@param _battleObject BattleObjectBase
---@param _battleBuffCastTemplate BattleBuffCastTemplate 战斗buff
function BattleBuffComponentBase:AddBattleBuff(_battleObject,_battleBuffCastTemplate)

    if _battleObject:CheckDead() then
        return;
    end

    -----@type BuffGroup
    local buffGroup = self.battleRoom.inputDataSource:GetDict("BuffGroup",_battleBuffCastTemplate.buffGroupId);
    if not buffGroup then
        return;
    end

    if not BattleBuffService:CheckAttachBuff(_battleBuffCastTemplate, _battleObject) then
        return;
    end

    local stackNum = 0;
    for i, v in pairs(self.buffList) do
        if v.buffGroupId == _battleBuffCastTemplate.buffGroupId then
            local stackableNum = self:GetBuffStackNum(v.buffGroupId,buffGroup.stackableNum);
            if stackableNum == 0 then
                return;
            else
                if stackableNum == 1 then
                    v:ResetTime(_battleObject,TimeUtils.battleNow(self.battleRoom:GetBattleId()),_battleBuffCastTemplate,self:GetBattleBuffExtraTime(v.buffGroupId,buffGroup.buffType));
                    self:PushBuffUpdate(_battleObject,v);
                else
                    if v.stackNum < stackableNum then
                        v:ResetTime(_battleObject,TimeUtils.battleNow(self.battleRoom:GetBattleId()),_battleBuffCastTemplate,self:GetBattleBuffExtraTime(v.buffGroupId,buffGroup.buffType));
                        local _newStackNum = v.stackNum + _battleBuffCastTemplate.stackNum;
                        if _newStackNum > stackableNum then
                            _newStackNum = stackableNum;
                        end
                        local _changeStackNum = _newStackNum - v.stackNum
                        self:UpdateBattleBuffStack(_battleObject, v, _changeStackNum)
                    else
                        v:ResetTime(_battleObject,TimeUtils.battleNow(self.battleRoom:GetBattleId()),_battleBuffCastTemplate,self:GetBattleBuffExtraTime(v.buffGroupId,buffGroup.buffType));
                    end
                    if buffGroup.typeClean and buffGroup.typeClean[1] == BATTLE_BUFF_CLEAN_TYPE.CLEAN_TYPE_STACK_NUM and v.stackNum >= buffGroup.typeClean[2] then
                        self:RemoveBuffByGroupId(_battleObject,_battleBuffCastTemplate.buffGroupId);
                    else
                        self:PushBuffUpdate(_battleObject,v);
                    end
                end
                if LogTools.BuffLog and CheckLogLevel(LogLevel.log) then
                    LogTools.LogByLevel(LogLevel.log,"添加buff",_battleBuffCastTemplate.buffGroupId, "objId", _battleObject:GetObjectId());
                end
                self:__OnUpdate(_battleObject,0,v.buffGroupId);
                if buffGroup.offsettingBuff then
                    for i, v in pairs(buffGroup.offsettingBuff) do
                        self:RemoveBuffByGroupId(_battleObject,v);
                    end
                end
                self.battleRoom.battleLogicEventService:OnTriggerAddBuffEvent(_battleObject:GetParentUnit():GetNetId(), _battleObject:GetObjectId(), _battleBuffCastTemplate.buffGroupId, v.stackNum, v.castUnitId, v.castObjId);
                return;
            end
        end
    end

    if LogTools.BuffLog and CheckLogLevel(LogLevel.log) then
        LogTools.LogByLevel(LogLevel.log,"添加buff",_battleBuffCastTemplate.buffGroupId, "objId", _battleObject:GetObjectId());
    end

    ---@type BattleBuff
    local battleBuff = BattleBuffService:GenerateBattleBuff(_battleBuffCastTemplate,_battleObject);
    self:__TriggerUpdateBattleBuffStackEvent(_battleObject, battleBuff, 0, battleBuff.stackNum)

    battleBuff:AttachBuff(_battleObject,TimeUtils.battleNow(self.battleRoom:GetBattleId()),self:GetBattleBuffExtraTime(_battleBuffCastTemplate.buffGroupId,buffGroup.buffType));
    self.buffList[battleBuff.instId] = battleBuff;
    self.battleRoom.battleLogicEventService:OnTriggerAddBuffEvent(_battleObject:GetParentUnit():GetNetId(), _battleObject:GetObjectId(), _battleBuffCastTemplate.buffGroupId, battleBuff.stackNum, battleBuff.castUnitId, battleBuff.castObjId);

    local battleBuffModel = {};
    battleBuffModel.instId = battleBuff.instId;
    battleBuffModel.dictId = battleBuff.buffGroupId;
    battleBuffModel.startTime = battleBuff.startTime;
    battleBuffModel.stackNum = battleBuff.stackNum;
    battleBuffModel.durationTime = battleBuff.endTime - TimeUtils.battleNow(self.battleRoom:GetBattleId());
    battleBuffModel.castNetId = battleBuff.castUnitId;
    battleBuffModel.objectId = battleBuff.castObjId;

    local addBuffList= {}
    table.insert(addBuffList,battleBuffModel);

    local battleUnitBuffInfo = {};
    battleUnitBuffInfo.addBuffList = addBuffList;

    local battleUnitKeyData = {};
    battleUnitKeyData.netId = _battleObject:GetParentUnit():GetNetId();
    battleUnitKeyData.objId = _battleObject:GetObjectId();
    battleUnitKeyData.buffInfo = battleUnitBuffInfo;

    self.battleRoom.outputDataSource:AddBattleUnitKeyData(battleUnitKeyData);

    self:__OnUpdate(0,battleBuff.buffGroupId,_battleObject);
    if buffGroup.offsettingBuff then
        for i, v in pairs(buffGroup.offsettingBuff) do
            self:RemoveBuffByGroupId(_battleObject,v);
        end
    end
end

---@type function 移除buff 层数
---@param _battleObject BattleObjectBase
---@param _buffId number buffId
---@param _stackNum number buff实例id
function BattleBuffComponentBase:RemoveBuffStackNum(_battleObject,_buffId,_stackNum)

    if not _stackNum then
        self:RemoveBuffByGroupId(_buffId,_battleObject);
        return;
    end

    local removeList = {};
    for i, v in pairs(self.buffList) do
        if v.buffGroupId == _buffId then
            if v.stackNum <= _stackNum then
                table.insert(removeList,v.instId);
            else
                self:UpdateBattleBuffStack(_battleObject, v, -_stackNum)
                self:PushBuffUpdate(_battleObject, v);
            end
        end
    end
    if #removeList > 0 then
        self:RemoveBuffByInstId(_battleObject,false,removeList);
    end
end

---@type function 移除buff 层数
---@param _battleBuff BattleBuff buff
function BattleBuffComponentBase:PushBuffUpdate(_battleObject,_battleBuff)
    local battleBuffModel = {};
    battleBuffModel.instId = _battleBuff.instId;
    battleBuffModel.dictId = _battleBuff.buffGroupId;
    battleBuffModel.startTime = _battleBuff.startTime;
    battleBuffModel.stackNum = _battleBuff.stackNum;
    battleBuffModel.durationTime = _battleBuff.endTime - TimeUtils.battleNow(self.battleRoom:GetBattleId());
    battleBuffModel.castNetId = _battleBuff.castUnitId;
    battleBuffModel.objectId = _battleBuff.castObjId;

    local addBuffList= {}
    table.insert(addBuffList,battleBuffModel);

    local battleUnitBuffInfo = {};
    battleUnitBuffInfo.addBuffList = addBuffList;

    local battleUnitKeyData = {};
    battleUnitKeyData.netId = _battleObject:GetParentUnit():GetNetId();
    battleUnitKeyData.objId = _battleObject:GetObjectId();
    battleUnitKeyData.buffInfo = battleUnitBuffInfo;

    self.battleRoom.outputDataSource:AddBattleUnitKeyData(battleUnitKeyData);
end

---@type function 通过实例id移除buff
---@param _isTimeOver boolean 是否时间到移除
---@param ... number buff实例id
function BattleBuffComponentBase:RemoveBuffByInstId(_battleObject,_isTimeOver,...)
    local removeList = ...;
    if #removeList <= 0 then
        return;
    end
    for i, v in pairs(removeList) do
        local battleBuff = self.buffList[v];
        if battleBuff then
            battleBuff:ReleaseBuff(_battleObject,_isTimeOver);
            self.buffList[v] = nil;

            self.battleRoom.battleLogicEventService:OnTriggerBuffOverEvent(_battleObject:GetParentUnit():GetNetId(),_battleObject:GetObjectId(),battleBuff.buffGroupId,battleBuff.stackNum,_isTimeOver);
            if LogTools.BuffLog and CheckLogLevel(LogLevel.log) then
                LogTools.LogByLevel(LogLevel.log,"移除buff",battleBuff.buffGroupId, "objId", _battleObject:GetObjectId());
            end
        end
    end

    self:PushRemoveMessage(_battleObject:GetParentUnit():GetNetId(),_battleObject:GetObjectId(),removeList);
end
---@type function 通过实例id移除buff
---@param _isTimeOver boolean 是否时间到移除
---@param ... number buff实例id
function BattleBuffComponentBase:RemoveBuffByInstIdUnit(_battleObject,_isTimeOver,...)
    local removeList = ...;
    if #removeList <= 0 then
        return;
    end
    for i, v in pairs(removeList) do
        local battleBuff = self.buffList[v];
        if battleBuff then
            battleBuff:ReleaseBuff(_battleObject,_isTimeOver);
            self.buffList[v] = nil;

            self.battleRoom.battleLogicEventService:OnTriggerBuffOverEvent(_battleObject:GetParentUnit():GetNetId(),_battleObject:GetObjectId(),battleBuff.buffGroupId,battleBuff.stackNum,_isTimeOver);
            if LogTools.BuffLog and CheckLogLevel(LogLevel.log) then
                LogTools.LogByLevel(LogLevel.log,"移除buff",battleBuff.buffGroupId, "objId", _battleObject:GetObjectId());
            end
        end
    end

    self:PushRemoveMessage(_battleObject:GetParentUnit():GetNetId(),0,removeList);
end


---@type function 通过buffGroup id移除buff
---@param _buffGroupId number buffGroupId
function BattleBuffComponentBase:RemoveBuffByGroupId(_battleObject,_buffGroupId)
    local removeList = {};
    for i, v in pairs(self.buffList) do
        if v.buffGroupId == _buffGroupId then
            v:ReleaseBuff(_battleObject,false);
            table.insert(removeList,v.instId);
            self.battleRoom.battleLogicEventService:OnTriggerBuffOverEvent(_battleObject:GetParentUnit():GetNetId(),_battleObject:GetObjectId(),v.buffGroupId,v.stackNum,false);

            if LogTools.BuffLog and CheckLogLevel(LogLevel.log) then
                LogTools.LogByLevel(LogLevel.log,"移除buff",v.buffGroupId, "objId", _battleObject:GetObjectId());
            end
        end
    end
    for i, v in pairs(removeList) do
        self.buffList[v] = nil;
    end
    if #removeList <= 0 then
        return;
    end

    self:PushRemoveMessage(_battleObject:GetParentUnit():GetNetId(),_battleObject:GetObjectId(),removeList);
end

---@type function 通过buffGroup id移除buff
---@param _buffGroupId number buffGroupId
function BattleBuffComponentBase:RemoveBuffByGroupIdUnit(_battleObject,_buffGroupId)
    local removeList = {};
    for i, v in pairs(self.buffList) do
        if v.buffGroupId == _buffGroupId then
            v:ReleaseBuff(_battleObject,false);
            table.insert(removeList,v.instId);
            self.battleRoom.battleLogicEventService:OnTriggerBuffOverEvent(_battleObject:GetParentUnit():GetNetId(),_battleObject:GetObjectId(),v.buffGroupId,v.stackNum,false);

            if LogTools.BuffLog and CheckLogLevel(LogLevel.log) then
                LogTools.LogByLevel(LogLevel.log,"移除buff",v.buffGroupId, "objId", _battleObject:GetObjectId());
            end
        end
    end
    for i, v in pairs(removeList) do
        self.buffList[v] = nil;
    end
    if #removeList <= 0 then
        return;
    end

    self:PushRemoveMessage(_battleObject:GetParentUnit():GetNetId(),0,removeList);
end


function BattleBuffComponentBase:PushRemoveMessage(_netId,_objectId,_removeList)
    local battleUnitBuffInfo = {};
    battleUnitBuffInfo.removeBuffList = _removeList;

    local battleUnitKeyData = {};
    battleUnitKeyData.netId = _netId;
    battleUnitKeyData.objId = _objectId;
    battleUnitKeyData.buffInfo = battleUnitBuffInfo;

    self.battleRoom.outputDataSource:AddBattleUnitKeyData(battleUnitKeyData);
end

---是否无敌
---@public
---@return boolean 是否无敌
function BattleBuffComponentBase:IsInvincible()
    for i, v in pairs(self.buffList) do
        for i, effect in pairs(v.buffEffects) do
            if effect:GetId() == InvincibleBattleBuffEffect:GetId() and effect.triggerCount > 0 then
                return true;
            end
        end
    end
    return false;
end

---是否无敌
---@public
---@return boolean 是否无敌
function BattleBuffComponentBase:IsInvincibleTriggerEvent()
    for i, v in pairs(self.buffList) do
        for i, effect in pairs(v.buffEffects) do
            if effect:GetId() == InvincibleTriggerEventBuffEffect:GetId() and effect.triggerCount > 0 then
                return true;
            end
        end
    end
    return false;
end

---是否元素无敌
---@public
---@return boolean 是否无敌
---@return number[] 免疫伤害类型 （0是全部免疫）
function BattleBuffComponentBase:IsElementInvincible()
    local list = {};
    for i, v in pairs(self.buffList) do
        for i, effect in pairs(v.buffEffects) do
            if effect:GetId() == ElementInvincibleBattleBuffEffect:GetId() and effect.triggerCount > 0 then
                ---@type BuffAndActionInstance
                local buffAndActionInstance = self.battleRoom.inputDataSource:GetDict("BuffAndActionInstance",effect.buffInstanceId);
                ---@type BuffAndActionTemplate
                local buffAndActionTemplate = self.battleRoom.inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);

                table.insert(list,buffAndActionTemplate.behindParam[4]);
            end
        end
    end
    return list;
end

---是否霸体
---@public
---@return boolean 是否霸体
function BattleBuffComponentBase:IsEndure()
    for i, v in pairs(self.buffList) do
        for i, effect in pairs(v.buffEffects) do
            if effect:GetId() == EndureBattleBuffEffect:GetId() and effect.triggerCount > 0 then
                return true;
            end
        end
    end
    return false;
end

---是否全是弱点
---@public
---@return number 弱点id
function BattleBuffComponentBase:IsAllWeak()
    for i, v in pairs(self.buffList) do
        for i, effect in pairs(v.buffEffects) do
            if effect:GetId() == AllWeakBattleBuffEffect:GetId() and effect.triggerCount > 0 then
                ---@type BuffAndActionInstance
                local buffAndActionInstance = self.battleRoom.inputDataSource:GetDict("BuffAndActionInstance",effect.buffInstanceId);
                ---@type BuffAndActionTemplate
                local buffAndActionTemplate = self.battleRoom.inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);

                return math.floor(buffAndActionTemplate.behindParam[4]);
            end
        end
    end
    return nil;
end

---是否所有攻击全为弱点
---@public
---@return number 弱点id
function BattleBuffComponentBase:IsAllAttackHitWeak()
    for i, v in pairs(self.buffList) do
        for i, effect in pairs(v.buffEffects) do
            if effect:GetId() == AllAttackHitWeakBattleBuffEffect:GetId() and effect.triggerCount > 0 then
                ---@type BuffAndActionInstance
                local buffAndActionInstance = self.battleRoom.inputDataSource:GetDict("BuffAndActionInstance",effect.buffInstanceId);
                ---@type BuffAndActionTemplate
                local buffAndActionTemplate = self.battleRoom.inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);

                return buffAndActionTemplate.behindParam[4];
            end
        end
    end
    return nil;
end

---改变技能额外伤害
---@public
---@param _skillId number 技能Id
---@param _targetObject BattleObjectBase 目标
---@return number 伤害
function BattleBuffComponentBase:CorrectExtraDamage(_battleObject,_skillId,_targetObject)
    local extraDamage = 0;
    local attackValue= _battleObject:GetComponent(BattleObjectComponentType.Property):GetPropertyByName(BattlePropertyEnum.Atk);
    ---@type Skill
    local skillConfig = self.battleRoom.inputDataSource:GetDict("Skill",_skillId);
    for i, v in pairs(self.buffList) do
        for i, effect in pairs(v.buffEffects) do
            if effect:GetId() == ExtraDamageBattleBuffEffect:GetId() and effect.triggerCount > 0 then

                ---@type BuffAndActionInstance
                local buffAndActionInstance = self.battleRoom.inputDataSource:GetDict("BuffAndActionInstance",effect.buffInstanceId);
                ---@type BuffAndActionTemplate
                local buffAndActionTemplate = self.battleRoom.inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);

                local skillId = buffAndActionTemplate.behindParam[5];
                if skillId == 0 or skillId == _skillId then
                    local currentDamage = 0;
                    ---@type BattleObjCom_Property
                    local propComp = _targetObject:GetComponent(BattleObjectComponentType.Property);
                    local prop = propComp:GetPropertyById(buffAndActionTemplate.frontParam[1]);
                    if buffAndActionTemplate.frontParam[2] == 1 then
                        currentDamage = self:GetBuffInstanceParam(effect.buffInstanceId,1,buffAndActionInstance.param[1])*(1+v.upPercent[buffAndActionTemplate.metaType]);
                    else
                        currentDamage = prop*self:GetBuffInstanceParam(effect.buffInstanceId,1,buffAndActionInstance.param[1])*(1+v.upPercent[buffAndActionTemplate.metaType]);
                    end
                    if buffAndActionTemplate.behindParam[4] then
                        local maxDamage = attackValue/100*buffAndActionTemplate.behindParam[4];
                        if currentDamage > maxDamage then
                            currentDamage = maxDamage;
                        end
                    end
                    extraDamage = extraDamage + currentDamage;
                end
            end
        end
    end
    return extraDamage;
end

---改变受到技能伤害
---@public
---@param _skillId number 技能Id
---@return number 改变百分比
function BattleBuffComponentBase:CorrectBeDamage(_skillId)
    local percent = 0;
    ---@type Skill
    local skillConfig = self.battleRoom.inputDataSource:GetDict("Skill",_skillId);
    for i, v in pairs(self.buffList) do
        for i, effect in pairs(v.buffEffects) do
            if effect:GetId() == ChangeSkillBeDamageBattleBuffEffect:GetId() and effect.triggerCount > 0 then

                ---@type BuffAndActionInstance
                local buffAndActionInstance = self.battleRoom.inputDataSource:GetDict("BuffAndActionInstance",effect.buffInstanceId);
                ---@type BuffAndActionTemplate
                local buffAndActionTemplate = self.battleRoom.inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);
                local damageIncrease = buffAndActionTemplate.behindParam[4]*(1+v.upPercent[buffAndActionTemplate.metaType]);
                local skillId = buffAndActionTemplate.behindParam[5];
                local skillType = buffAndActionTemplate.behindParam[6];

                local enter = false;
                if skillType and skillType ~= 0 then
                    if skillType == skillConfig.skillType then
                        enter = true;
                    end
                elseif skillId == 0 or skillId == _skillId then
                    enter = true;
                end
                if enter then
                    percent = percent + damageIncrease * v.stackNum;
                end
            end
        end
    end
    return percent;
end

---改变对目标技能伤害
---@public
---@param _targetBattleObject BattleObjectBase 目标
---@param _skillId number 技能Id
---@return number 改变百分比
function BattleBuffComponentBase:CorrectTargetDamage(_targetBattleObject,_skillId)
    local percent = 0;
    ---@type Skill
    local skillConfig = self.battleRoom.inputDataSource:GetDict("Skill",_skillId);
    for i, v in pairs(self.buffList) do
        for i, effect in pairs(v.buffEffects) do
            if effect:GetId() == ChangeSkillDamageBattleBuffEffect:GetId() and effect.triggerCount > 0 then

                ---@type BuffAndActionInstance
                local buffAndActionInstance = self.battleRoom.inputDataSource:GetDict("BuffAndActionInstance",effect.buffInstanceId);
                ---@type BuffAndActionTemplate
                local buffAndActionTemplate = self.battleRoom.inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);
                local damageIncrease = buffAndActionTemplate.behindParam[4]*(1+v.upPercent[buffAndActionTemplate.metaType]);
                local skillId = buffAndActionTemplate.behindParam[5];
                local hpPercent = buffAndActionTemplate.behindParam[6];
                local buffId = buffAndActionTemplate.behindParam[7];
                local skillType = buffAndActionTemplate.behindParam[8];
                local selfHpPercent = buffAndActionTemplate.behindParam[9];
                local targetType = buffAndActionTemplate.behindParam[10];
                local useBuffIdStackNum = buffAndActionTemplate.behindParam[11];
                local elementBreak = buffAndActionTemplate.behindParam[12] == 1;

                local enter = false;
                if skillType and skillType ~= 0 then
                    if skillConfig and skillType == skillConfig.skillType then
                        enter = true;
                    end
                elseif skillId == 0 or skillId == _skillId then
                    enter = true;
                end

                if targetType and targetType ~= 0 then
                    ---@type MonsterInstance
                    local instance = _targetBattleObject:GetDataInstanceXls();
                    if instance.classify ~= targetType then
                        enter = false;
                    end
                end

                if selfHpPercent and selfHpPercent > 0 then
                    ---@type BattleObjCom_Property
                    local propCom = _targetBattleObject:GetComponent(BattleObjectComponentType.Property);
                    local currentPercent = propCom:GetPropertyPercentByName(BattlePropertyEnum.Hp_Cur);
                    if currentPercent > selfHpPercent then
                        enter = false;
                    end
                end

                if elementBreak then
                    ---@type BattleObjCom_Element_V2
                    local elementComp = _targetBattleObject:GetComponent(BattleObjectComponentType.Element);
                    if elementComp.effectingElementId <= 0 then
                        enter = false;
                    end
                end

                if enter then
                    ---@type BattleObjCom_Property
                    local propCom = _targetBattleObject:GetComponent(BattleObjectComponentType.Property);
                    local currentPercent = propCom:GetPropertyPercentByName(BattlePropertyEnum.Hp_Cur);
                    if hpPercent == 0 or currentPercent < hpPercent then
                        ---@type BattleObjCom_Buff
                        local buffCom = _targetBattleObject:GetComponent(BattleObjectComponentType.Buff);
                        if buffId == 0 or buffCom:CheckBuffExist(buffId) then
                            if LogTools.BuffLog and CheckLogLevel(LogLevel.log) then
                                LogTools.LogByLevel(LogLevel.log,"触发buff",v.buffGroupId);
                            end
                            if useBuffIdStackNum == 1 then
                                damageIncrease = damageIncrease * buffCom:GetBattleBuff(buffId).stackNum;
                            end
                            percent = percent + damageIncrease * v.stackNum;
                        end
                    end
                end
            end
        end
    end
    return percent;
end

---改变受到元素伤害
---@public
---@param _elementId number 元素反应Id
---@return number 改变百分比
function BattleBuffComponentBase:CorrectElementBeDamage(_elementId)
    local percent = 0;
    for i, v in pairs(self.buffList) do
        for i, effect in pairs(v.buffEffects) do
            if effect:GetId() == ChangeElementBeDamageBattleBuffEffect:GetId() and effect.triggerCount > 0 then

                ---@type BuffAndActionInstance
                local buffAndActionInstance = self.battleRoom.inputDataSource:GetDict("BuffAndActionInstance",effect.buffInstanceId);
                ---@type BuffAndActionTemplate
                local buffAndActionTemplate = self.battleRoom.inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);
                local damageIncrease = buffAndActionTemplate.behindParam[4]*(1+v.upPercent[buffAndActionTemplate.metaType]);
                local elementId = buffAndActionTemplate.behindParam[5];

                if elementId == 0 or elementId == _elementId then
                    percent = percent + damageIncrease * v.stackNum;
                end
            end
        end
    end
    return percent;
end

---改变对目标元素伤害
---@public
---@param _targetBattleObject BattleObjectBase 目标
---@param _elementId number 元素反应Id
---@return number 改变百分比
function BattleBuffComponentBase:CorrectTargetElementDamage(_targetBattleObject,_elementId)
    local percent = 0;
    for i, v in pairs(self.buffList) do
        for i, effect in pairs(v.buffEffects) do
            if effect:GetId() == ChangeElementDamageBattleBuffEffect:GetId() and effect.triggerCount > 0 then

                ---@type BuffAndActionInstance
                local buffAndActionInstance = self.battleRoom.inputDataSource:GetDict("BuffAndActionInstance",effect.buffInstanceId);
                ---@type BuffAndActionTemplate
                local buffAndActionTemplate = self.battleRoom.inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);
                local damageIncrease = buffAndActionTemplate.behindParam[4]*(1+v.upPercent[buffAndActionTemplate.metaType]);
                local elementId = buffAndActionTemplate.behindParam[5];

                if elementId == 0 or elementId == _elementId then
                    percent = percent + damageIncrease * v.stackNum;
                end
            end
        end
    end
    return percent;
end

---改变受到元素伤害
---@public
---@param _elementId number 元素反应Id
---@return number 改变百分比
function BattleBuffComponentBase:CorrectElementBeDamage(_elementId)
    local percent = 0;
    for i, v in pairs(self.buffList) do
        for i, effect in pairs(v.buffEffects) do
            if effect:GetId() == ChangeElementBeDamageBattleBuffEffect:GetId() and effect.triggerCount > 0 then

                ---@type BuffAndActionInstance
                local buffAndActionInstance = self.battleRoom.inputDataSource:GetDict("BuffAndActionInstance",effect.buffInstanceId);
                ---@type BuffAndActionTemplate
                local buffAndActionTemplate = self.battleRoom.inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);
                local damageIncrease = buffAndActionTemplate.behindParam[4]*(1+v.upPercent[buffAndActionTemplate.metaType]);
                local elementId = buffAndActionTemplate.behindParam[5];

                if elementId == 0 or elementId == _elementId then
                    percent = percent + damageIncrease * v.stackNum;
                end
            end
        end
    end
    return percent;
end

---改变对目标元素伤害
---@public
---@param _targetBattleObject BattleObjectBase 目标
---@param _elementId number 元素反应Id
---@return number 改变百分比
function BattleBuffComponentBase:CorrectTargetElementDamage(_targetBattleObject,_elementId)
    local percent = 0;
    for i, v in pairs(self.buffList) do
        for i, effect in pairs(v.buffEffects) do
            if effect:GetId() == ChangeElementDamageBattleBuffEffect:GetId() and effect.triggerCount > 0 then

                ---@type BuffAndActionInstance
                local buffAndActionInstance = self.battleRoom.inputDataSource:GetDict("BuffAndActionInstance",effect.buffInstanceId);
                ---@type BuffAndActionTemplate
                local buffAndActionTemplate = self.battleRoom.inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);
                local damageIncrease = buffAndActionTemplate.behindParam[4]*(1+v.upPercent[buffAndActionTemplate.metaType]);
                local elementId = buffAndActionTemplate.behindParam[5];

                if elementId == 0 or elementId == _elementId then
                    percent = percent + damageIncrease * v.stackNum;
                end
            end
        end
    end
    return percent;
end

---改变对目标技能伤害
---@public
---@param _targetBattleObject BattleObjectBase 目标
---@param _skillId number 技能Id
---@return number 改变百分比
function BattleBuffComponentBase:CorrectTargetHeal(_targetBattleObject,_skillId)
    local percent = 0;
    ---@type Skill
    local skillConfig = self.battleRoom.inputDataSource:GetDict("Skill",_skillId);
    for i, v in pairs(self.buffList) do
        for i, effect in pairs(v.buffEffects) do
            if effect:GetId() == ChangeSkillHealBattleBuffEffect:GetId() and effect.triggerCount > 0 then

                ---@type BuffAndActionInstance
                local buffAndActionInstance = self.battleRoom.inputDataSource:GetDict("BuffAndActionInstance",effect.buffInstanceId);
                ---@type BuffAndActionTemplate
                local buffAndActionTemplate = self.battleRoom.inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);
                local healIncrease = buffAndActionTemplate.behindParam[4]*(1+v.upPercent[buffAndActionTemplate.metaType]);
                local skillId = buffAndActionTemplate.behindParam[5];
                local hpPercent = buffAndActionTemplate.behindParam[6];
                local buffId = buffAndActionTemplate.behindParam[7];
                local skillType = buffAndActionTemplate.behindParam[8];
                local selfHpPercent = buffAndActionTemplate.behindParam[9];

                local enter = false;
                if skillType and skillType ~= 0 then
                    if skillConfig and skillType == skillConfig.skillType then
                        enter = true;
                    end
                elseif skillId == 0 or skillId == _skillId then
                    enter = true;
                end

                if selfHpPercent > 0 then
                    ---@type BattleObjCom_Property
                    local propCom = _targetBattleObject:GetComponent(BattleObjectComponentType.Property);
                    local currentPercent = propCom:GetPropertyPercentByName(BattlePropertyEnum.Hp_Cur);
                    if currentPercent > selfHpPercent then
                        enter = false;
                    end
                end

                if enter then
                    ---@type BattleObjCom_Property
                    local propCom = _targetBattleObject:GetComponent(BattleObjectComponentType.Property);
                    local currentPercent = propCom:GetPropertyPercentByName(BattlePropertyEnum.Hp_Cur);
                    if hpPercent == 0 or currentPercent < hpPercent then
                        ---@type BattleObjCom_Buff
                        local buffCom = _targetBattleObject:GetComponent(BattleObjectComponentType.Buff);
                        if buffId == 0 or buffCom:CheckBuffExist(buffId) then
                            if LogTools.BuffLog and CheckLogLevel(LogLevel.log) then
                                LogTools.LogByLevel(LogLevel.log,"触发buff",v.buffGroupId);
                            end
                            percent = percent + healIncrease * v.stackNum;
                        end
                    end
                end
            end
        end
    end
    return percent;
end

---特殊buff才能造成伤害
---@public
---@return number[] buffId
function BattleBuffComponentBase:SpecialBuffDoDamageIds()
    local buffIds = {};
    local _check = false
    for i, v in pairs(self.buffList) do
        for i, effect in pairs(v.buffEffects) do
            if effect:GetId() == SpecialBuffDoDamageBattleBuffEffect:GetId() and effect.triggerCount > 0 then
                _check = true
                ---@type BuffAndActionInstance
                local buffAndActionInstance = self.battleRoom.inputDataSource:GetDict("BuffAndActionInstance",effect.buffInstanceId);
                ---@type BuffAndActionTemplate
                local buffAndActionTemplate = self.battleRoom.inputDataSource:GetDict("BuffAndActionTemplate",buffAndActionInstance.templateId);
                local buffId = math.floor(buffAndActionTemplate.behindParam[4])
                table.insert(buffIds,buffId);
            end
        end
    end
    return _check, buffIds;
end

---服务器逻辑核生成用于发送给前端逻辑核的全量信息
---@public
function BattleBuffComponentBase:GetCreateSyncMessage_S2C()
    local buffInfos = {};
    for i, v in pairs(self.buffList) do
        local battleBuffModel = {};
        battleBuffModel.instId = v.instId;
        battleBuffModel.dictId = v.buffGroupId;
        battleBuffModel.startTime = v.startTime;
        battleBuffModel.stackNum = v.stackNum;
        battleBuffModel.durationTime = v.endTime - TimeUtils.battleNow(self.battleRoom:GetBattleId());
        battleBuffModel.castNetId = v.castUnitId;
        battleBuffModel.objectId = v.castObjId;

        table.insert(buffInfos,battleBuffModel);
    end
    return buffInfos;
end

---前端逻辑核用服务器发来的全量信息刷新自身数据
---@public
function BattleBuffComponentBase:OnReceiveCreateSyncMessage_S2C(_message)

end

return BattleBuffComponentBase;
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhaopuyang.
--- DateTime: 2022/3/28 22:41

require "Lib/class"
require "Battle/Logic/Buff/BattleBuffEffect"

---@class ElectromagneticBattleBuffEffect : BattleBuffEffect
---@field buffInstanceId number 配置Id
---@field castParam table 最终目标参数
---@field customParam ElementLightningBall 自定义参数
---@field nextTriggerTime number 下次触发时间
---@field triggerCount number 触发次数
ElectromagneticBattleBuffEffect = class(BattleBuffEffect, 'ElectromagneticBattleBuffEffect');

function ElectromagneticBattleBuffEffect:ctor(_buffInstanceId)

    self.buffInstanceId = _buffInstanceId;
    self.castParam = nil;
    self.customParam = nil;
    self.nextTriggerTime = 0;
    self.triggerCount = 0;

end

---附加buff
---@public
---@param _battleObject BattleObjectBase 战斗物体
---@param _battleBuff BattleBuff buff实体
function ElectromagneticBattleBuffEffect:Attach(_battleObject, _battleBuff)
    self.battleBuff = _battleBuff
end

---触发buff
---@public
---@param _battleObject BattleObjectBase 战斗物体
---@param _battleBuff BattleBuff buff实体
---@param _stackNum number 堆叠数量
---@param _isUnitChangeLeader boolean 是否为玩家buff换人操作
function ElectromagneticBattleBuffEffect:Trigger(_battleObject, _battleBuff, _stackNum, _isUnitChangeLeader)
    if not _isUnitChangeLeader then
        self.triggerCount = self.triggerCount + 1;
    end
    if CheckLogLevel(LogLevel.log) and LogTools.ElementBallLog then
        LogTools.LogByLevel(LogLevel.log, "闪电链", "ElectromagneticBattleBuffEffect:Trigger",
                "_battleBuff.generateStackInfo", dumpTableEx(_battleBuff.generateStackInfo))
    end
    if not _battleBuff.generateStackInfo then
        if CheckLogLevel(LogLevel.logErr) then
            LogTools.LogByLevel(LogLevel.logErr, "闪电链BUFF没有找到 generateStackInfo ！！！")
            return
        end
    end
    ---@type BattleRoom
    local _battleRoom = _battleObject:GetBattleRoom()
    ---@type BuffAndActionInstance
    local buffAndActionInstance = _battleRoom.inputDataSource:GetDict("BuffAndActionInstance", self.buffInstanceId);
    ---@type BuffAndActionTemplate
    local buffTemplate = _battleRoom.inputDataSource:GetDict("BuffAndActionTemplate", buffAndActionInstance.templateId)

    local _castObj = _battleRoom.battleObjectManager:GetObject(_battleBuff.castObjId)
    if not _castObj then return end
    
    ---@type BattleObjCom_Buff
    local buffCom = _castObj:GetComponent(BattleObjectComponentType.Buff);
    -- 生产buff的参数
    local _generateBuffParams = {}
    TableUtil.Copy(buffTemplate.behindParam, _generateBuffParams)

    for i, v in pairs(_generateBuffParams) do
        --LogTools.LogByLevel(LogLevel.logErr, "创建闪电链", buffTemplate.id, "ElectromagneticBattleBuffEffect", "i", i, "buffCom:GetBuffTempParam(buffAndActionInstance.templateId,i,v)", buffCom:GetBuffTempParam(buffAndActionInstance.templateId,i,v))
        _generateBuffParams[i] = buffCom:GetBuffTempParam(buffAndActionInstance.templateId,i,v);
    end

    -- 元素球生效的buffGroup
    local _effectBuffIds = buffTemplate.behindParamint
    -- buff附带参数
    local _generateStackInfo = _battleBuff.generateStackInfo

    -- 创建闪电球
    _battleRoom.elementManager:CreateElementBall(ElementBallType.LightningBall, _battleObject:GetParentUnit(),
            _battleBuff.castUnitId, _effectBuffIds, _generateBuffParams, _generateStackInfo)
    -- 触发事件
    _battleRoom.battleLogicEventService:OnTriggerElementLightningBallEvent(_battleBuff.castUnitId, _battleBuff.castObjId);
end

---@public
---@return number buff类型Id
function ElectromagneticBattleBuffEffect:GetId()
    return 32;
end

return ElectromagneticBattleBuffEffect;